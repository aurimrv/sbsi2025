import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

def test_naive_binary_tree_pre_order_traversal():
    # Test case 1 - Pre order traversal on an empty tree should return an empty list
    b_tree = NaiveBinaryTree()
    assert b_tree.pre_order_traversal() == []

    # Test case 2 - Pre order traversal on a tree with single node
    b_tree.head = Node(5)
    assert b_tree.pre_order_traversal() == [5]

    # Test case 3 - Pre order traversal on a complex tree
    b_tree.head = Node(1)
    b_tree.head.left = Node(2)
    b_tree.head.right = Node(3)
    b_tree.head.left.left = Node(4)
    b_tree.head.left.right = Node(5)
    b_tree.head.right.left = Node(6)
    b_tree.head.right.right = Node(7)
    assert b_tree.pre_order_traversal() == [1, 2, 4, 5, 3, 6, 7]


def test_naive_binary_tree_in_order_traversal():
    # Test case 1 - In order traversal on an empty tree should return an empty list
    b_tree = NaiveBinaryTree()
    assert b_tree.in_order_traversal() == []

    # Test case 2 - In order traversal on a tree with single node
    b_tree.head = Node(5)
    assert b_tree.in_order_traversal() == [5]

    # Test case 3 - In order traversal on a complex tree
    b_tree.head = Node(1)
    b_tree.head.left = Node(2)
    b_tree.head.right = Node(3)
    b_tree.head.left.left = Node(4)
    b_tree.head.left.right = Node(5)
    b_tree.head.right.left = Node(6)
    b_tree.head.right.right = Node(7)
    assert b_tree.in_order_traversal() == [4, 2, 5, 1, 6, 3, 7]


def test_naive_binary_tree_post_order_traversal():
    # Test case 1 - Post order traversal on an empty tree should return an empty list
    b_tree = NaiveBinaryTree()
    assert b_tree.post_order_traversal() == []

    # Test case 2 - Post order traversal on a tree with single node
    b_tree.head = Node(5)
    assert b_tree.post_order_traversal() == [5]

    # Test case 3 - Post order traversal on a complex tree
    b_tree.head = Node(1)
    b_tree.head.left = Node(2)
    b_tree.head.right = Node(3)
    b_tree.head.left.left = Node(4)
    b_tree.head.left.right = Node(5)
    b_tree.head.right.left = Node(6)
    b_tree.head.right.right = Node(7)
    assert b_tree.post_order_traversal() == [4, 5, 2, 6, 7, 3, 1]


def test_naive_binary_tree_level_order_traversal():
    # Test case 1 - Level order traversal on an empty tree should return an empty list
    b_tree = NaiveBinaryTree()
    assert b_tree.level_order_traversal() == []

    # Test case 2 - Level order traversal on a tree with single node
    b_tree.head = Node(5)
    assert b_tree.level_order_traversal() == [5]

    # Test case 3 - Level order traversal on a complex tree
    b_tree.head = Node(1)
    b_tree.head.left = Node(2)
    b_tree.head.right = Node(3)
    b_tree.head.left.left = Node(4)
    b_tree.head.left.right = Node(5)
    b_tree.head.right.left = Node(6)
    b_tree.head.right.right = Node(7)
    assert b_tree.level_order_traversal() == [1, 2, 3, 4, 5, 6, 7]