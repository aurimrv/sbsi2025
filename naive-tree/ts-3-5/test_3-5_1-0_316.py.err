import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

def test_naive_binary_tree_pre_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    
    tree.head.left.left = Node(4)
    
    assert tree.pre_order_traversal() == [1, 2, 4, 3]

    tree.head = Node(5)
    
    tree.head.right = Node(6)
    tree.head.right.right = Node(7)
    
    assert tree.pre_order_traversal() == [5, 6, 7]

def test_naive_binary_tree_in_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    
    tree.head.left.left= Node(4)
    
    assert tree.in_order_traversal() == [4, 2, 1, 3]

    tree.head = Node(5)
    
    tree.head.right = Node(6)
    tree.head.right.right = Node(7)
    
    assert tree.in_order_traversal() == [5, 6, 7]

def test_naive_binary_tree_post_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    
    tree.head.left.left = Node(4)
    
    assert tree.post_order_traversal() == [4, 2, 3, 1]

    tree.head = Node(5)
    
    tree.head.right = Node(6)
    tree.head.right.right = Node(7)
    
    assert tree.post_order_traversal() == [7, 6, 5]

def test_naive_binary_tree_level_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)

    tree.head.left = Node(2)
    tree.head.right = Node(3)

    tree.head.left.left = Node(4)
    tree.head.left.right = Node(5)
    
    tree.head.right.left = Node(6)
    
    assert tree.level_order_traversal() == [1, 2, 3, 4, 5, 6]

    tree.head = Node(7)
    
    tree.head.left = Node(8)
    tree.head.right = Node(9)
    
    tree.head.left.left = Node(10)
    
    assert tree.level_order_traversal() == [7, 8, 9, 10]
