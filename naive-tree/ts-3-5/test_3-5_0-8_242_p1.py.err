import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

@pytest.fixture
def binary_tree():
    tree = NaiveBinaryTree()
    return tree

def test_initialization(binary_tree):
    assert binary_tree.head is None

def test_pre_order_traversal(binary_tree):
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node1.left = node2
    node1.right = node3
    binary_tree.head = node1

    assert binary_tree.pre_order_traversal() == [1, 2, 3]

def test_in_order_traversal(binary_tree):
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node1.left = node2
    node1.right = node3
    binary_tree.head = node1

    assert binary_tree.in_order_traversal() == [2, 1, 3]

def test_post_order_traversal(binary_tree):
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node1.left = node2
    node1.right = node3
    binary_tree.head = node1

    assert binary_tree.post_order_traversal() == [2, 3, 1]

def test_level_order_traversal(binary_tree):
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node1.left = node2
    node1.right = node3
    binary_tree.head = node1

    assert binary_tree.level_order_traversal() == [1, 2, 3]