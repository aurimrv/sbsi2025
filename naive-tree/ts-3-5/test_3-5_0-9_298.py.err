import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

@pytest.fixture
def sample_binary_tree():
    """
    Fixture to create a sample binary tree for testing.
    """
    # Create a simple binary tree
    bt = NaiveBinaryTree()
    bt.head = Node(1)
    bt.head.left = Node(2)
    bt.head.right = Node(3)
    bt.head.left.left = Node(4)
    bt.head.left.right = Node(5)
    bt.head.right.left = Node(6)
    bt.head.right.right = Node(7)
    return bt

def test_pre_order_traversal(sample_binary_tree):
    assert sample_binary_tree.pre_order_traversal() == [1, 2, 4, 5, 3, 6, 7]
    # Add more test cases here

def test_in_order_traversal(sample_binary_tree):
    assert sample_binary_tree.in_order_traversal() == [4, 2, 5, 1, 6, 3, 7]
    # Add more test cases here

def test_post_order_traversal(sample_binary_tree):
    assert sample_binary_tree.post_order_traversal() == [4, 5, 2, 6, 7, 3, 1]
    # Add more test cases here

def test_level_order_traversal(sample_binary_tree):
    assert sample_binary_tree.level_order_traversal() == [1, 2, 3, 4, 5, 6, 7]
    # Add more test cases here