import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

def test_pre_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.pre_order_traversal() == [1, 2, 3]
    
    tree.head = Node(10)
    tree.head.left = Node(20)
    tree.head.right = Node(30)
    tree.head.left.left = Node(40)
    tree.head.left.right = Node(50)
    tree.head.right.left = Node(60)
    tree.head.right.right = Node(70)
    assert tree.pre_order_traversal() == [10, 20, 40, 50, 30, 60, 70]

def test_in_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.in_order_traversal() == [2, 1, 3]
    
    tree.head = Node(10)
    tree.head.left = Node(20)
    tree.head.right = Node(30)
    tree.head.left.left = Node(40)
    tree.head.left.right = Node(50)
    tree.head.right.left = Node(60)
    tree.head.right.right = Node(70)
    assert tree.in_order_traversal() == [40, 20, 50, 10, 60, 30, 70]

def test_post_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.post_order_traversal() == [2, 3, 1]
    
    tree.head = Node(10)
    tree.head.left = Node(20)
    tree.head.right = Node(30)
    tree.head.left.left = Node(40)
    tree.head.left.right = Node(50)
    tree.head.right.left = Node(60)
    tree.head.right.right = Node(70)
    assert tree.post_order_traversal() == [40, 50, 20, 60, 70, 30, 10]

def test_level_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.level_order_traversal() == [1, 2, 3]
    
    tree.head = Node(10)
    tree.head.left = Node(20)
    tree.head.right = Node(30)
    tree.head.left.left = Node(40)
    tree.head.left.right = Node(50)
    tree.head.right.left = Node(60)
    tree.head.right.right = Node(70)
    assert tree.level_order_traversal() == [10, 20, 30, 40, 50, 60, 70]