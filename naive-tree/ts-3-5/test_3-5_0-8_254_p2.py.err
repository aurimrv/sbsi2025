import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

def test_naive_binary_tree_initialization():
    tree = NaiveBinaryTree()
    assert tree.head is None

def test_naive_binary_tree_pre_order_traversal():
    tree = NaiveBinaryTree()
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node4 = NaiveBinaryTree.Node(4)
    node5 = NaiveBinaryTree.Node(5)
    node6 = NaiveBinaryTree.Node(6)

    tree.head = node1
    node1.left = node2
    node1.right = node3
    node2.left = node4
    node2.right = node5
    node3.left = node6

    assert tree.pre_order_traversal() == [1, 2, 4, 5, 3, 6]

def test_naive_binary_tree_in_order_traversal():
    tree = NaiveBinaryTree()
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node4 = NaiveBinaryTree.Node(4)
    node5 = NaiveBinaryTree.Node(5)
    node6 = NaiveBinaryTree.Node(6)

    tree.head = node1
    node1.left = node2
    node1.right = node3
    node2.left = node4
    node2.right = node5
    node3.left = node6

    assert tree.in_order_traversal() == [4, 2, 5, 1, 6, 3]

def test_naive_binary_tree_post_order_traversal():
    tree = NaiveBinaryTree()
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node4 = NaiveBinaryTree.Node(4)
    node5 = NaiveBinaryTree.Node(5)
    node6 = NaiveBinaryTree.Node(6)

    tree.head = node1
    node1.left = node2
    node1.right = node3
    node2.left = node4
    node2.right = node5
    node3.left = node6

    assert tree.post_order_traversal() == [4, 5, 2, 6, 3, 1]

def test_naive_binary_tree_level_order_traversal():
    tree = NaiveBinaryTree()
    node1 = NaiveBinaryTree.Node(1)
    node2 = NaiveBinaryTree.Node(2)
    node3 = NaiveBinaryTree.Node(3)
    node4 = NaiveBinaryTree.Node(4)
    node5 = NaiveBinaryTree.Node(5)
    node6 = NaiveBinaryTree.Node(6)

    tree.head = node1
    node1.left = node2
    node1.right = node3
    node2.left = node4
    node2.right = node5
    node3.left = node6

    assert tree.level_order_traversal() == [1, 2, 3, 4, 5, 6]