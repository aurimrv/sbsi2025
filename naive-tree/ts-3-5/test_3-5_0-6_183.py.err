import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

def test_naive_binary_tree():
    # Test case for __init__
    tree = NaiveBinaryTree()
    assert tree.head is None

    # Test case for __str__
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert str(tree) == '[1, 2, 3]'

    # Test case for pre_order_traversal
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.pre_order_traversal() == [1, 2, 3]

    # Test case for in_order_traversal
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.in_order_traversal() == [2, 1, 3]

    # Test case for post_order_traversal
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.post_order_traversal() == [2, 3, 1]

    # Test case for level_order_traversal
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    tree.head.left.left = Node(4)
    tree.head.right.right = Node(5)
    assert tree.level_order_traversal() == [1, 2, 3, 4, 5]