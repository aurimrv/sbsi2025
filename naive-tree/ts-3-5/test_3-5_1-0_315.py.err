import sys
import os
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

class TestNaiveBinaryTree:

    def test_pre_order_traversal_single_node(self):
        tree = NaiveBinaryTree()
        tree.head = Node(5)
        assert tree.pre_order_traversal() == [5]

    def test_pre_order_traversal_multiple_nodes(self):
        tree = NaiveBinaryTree()
        tree.head = Node(1)
        tree.head.left = Node(2)
        tree.head.right = Node(3)
        assert tree.pre_order_traversal() == [1, 2, 3]

    def test_in_order_traversal_single_node(self):
        tree = NaiveBinaryTree()
        tree.head = Node(5)
        assert tree.in_order_traversal() == [5]

    def test_in_order_traversal_multiple_nodes(self):
        tree = NaiveBinaryTree()
        tree.head = Node(1)
        tree.head.left = Node(2)
        tree.head.right = Node(3)
        assert tree.in_order_traversal() == [2, 1, 3]

    def test_post_order_traversal_single_node(self):
        tree = NaiveBinaryTree()
        tree.head = Node(5)
        assert tree.post_order_traversal() == [5]

    def test_post_order_traversal_multiple_nodes(self):
        tree = NaiveBinaryTree()
        tree.head = Node(1)
        tree.head.left = Node(2)
        tree.head.right = Node(3)
        assert tree.post_order_traversal() == [2, 3, 1]

    def test_level_order_traversal_single_node(self):
        tree = NaiveBinaryTree()
        tree.head = Node(5)
        assert tree.level_order_traversal() == [5]

    def test_level_order_traversal_multiple_nodes(self):
        tree = NaiveBinaryTree()
        tree.head = Node(1)
        tree.head.left = Node(2)
        tree.head.right = Node(3)
        assert tree.level_order_traversal() == [1, 2, 3]