import os
import sys
from collections import deque
from naive_tree import NaiveBinaryTree

def test_naive_binary_tree_init():
    tree = NaiveBinaryTree()
    assert tree.head is None

def test_naive_binary_tree_pre_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = NaiveBinaryTree.Node(1)
    tree.head.left = NaiveBinaryTree.Node(2)
    tree.head.right = NaiveBinaryTree.Node(3)
    assert tree.pre_order_traversal() == [1, 2, 3]

def test_naive_binary_tree_in_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = NaiveBinaryTree.Node(1)
    tree.head.left = NaiveBinaryTree.Node(2)
    tree.head.right = NaiveBinaryTree.Node(3)
    assert tree.in_order_traversal() == [2, 1, 3]

def test_naive_binary_tree_post_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = NaiveBinaryTree.Node(1)
    tree.head.left = NaiveBinaryTree.Node(2)
    tree.head.right = NaiveBinaryTree.Node(3)
    assert tree.post_order_traversal() == [2, 3, 1]

def test_naive_binary_tree_level_order_traversal():
    tree = NaiveBinaryTree()
    tree.head = NaiveBinaryTree.Node(1)
    tree.head.left = NaiveBinaryTree.Node(2)
    tree.head.right = NaiveBinaryTree.Node(3)
    tree.head.left.left = NaiveBinaryTree.Node(4)
    tree.head.left.right = NaiveBinaryTree.Node(5)
    tree.head.right.left = NaiveBinaryTree.Node(6)
    tree.head.right.right = NaiveBinaryTree.Node(7)
    assert tree.level_order_traversal() == [1, 2, 3, 4, 5, 6, 7]