import os
import sys
from collections import deque
from naive_tree import NaiveBinaryTree

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

def test_naive_binary_tree():
    # Initialize the binary tree
    binary_tree = NaiveBinaryTree()

    # Test __str__
    binary_tree.head = Node(1)
    binary_tree.head.left = Node(2)
    binary_tree.head.right = Node(3)
    assert str(binary_tree) == '[1, 2, 3]'

    # Test pre_order_traversal
    binary_tree.head = Node(1)
    binary_tree.head.left = Node(2)
    binary_tree.head.right = Node(3)
    assert binary_tree.pre_order_traversal() == [1, 2, 3]

    # Test in_order_traversal
    binary_tree.head = Node(1)
    binary_tree.head.left = Node(2)
    binary_tree.head.right = Node(3)
    assert binary_tree.in_order_traversal() == [2, 1, 3]

    # Test post_order_traversal
    binary_tree.head = Node(1)
    binary_tree.head.left = Node(2)
    binary_tree.head.right = Node(3)
    assert binary_tree.post_order_traversal() == [2, 3, 1]

    # Test level_order_traversal
    binary_tree.head = Node(1)
    binary_tree.head.left = Node(2)
    binary_tree.head.right = Node(3)
    binary_tree.head.left.left = Node(4)
    binary_tree.head.left.right = Node(5)
    binary_tree.head.right.left = Node(6)
    binary_tree.head.right.right = Node(7)
    assert binary_tree.level_order_traversal() == [1, 2, 3, 4, 5, 6, 7]