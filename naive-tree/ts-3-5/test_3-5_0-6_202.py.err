import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from naive_tree import NaiveBinaryTree

def test_naive_binary_tree_initialization():
    tree = NaiveBinaryTree()
    assert tree.head == None

def test_pre_order_traversal_empty_tree():
    tree = NaiveBinaryTree()
    assert tree.pre_order_traversal() == []

def test_pre_order_traversal_single_node():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    assert tree.pre_order_traversal() == [1]

def test_in_order_traversal_empty_tree():
    tree = NaiveBinaryTree()
    assert tree.in_order_traversal() == []

def test_in_order_traversal_single_node():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    assert tree.in_order_traversal() == [1]

def test_post_order_traversal_empty_tree():
    tree = NaiveBinaryTree()
    assert tree.post_order_traversal() == []

def test_post_order_traversal_single_node():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    assert tree.post_order_traversal() == [1]

def test_level_order_traversal_empty_tree():
    tree = NaiveBinaryTree()
    assert tree.level_order_traversal() == []

def test_level_order_traversal_single_node():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    assert tree.level_order_traversal() == [1]

def test_level_order_traversal_multiple_nodes():
    tree = NaiveBinaryTree()
    tree.head = Node(1)
    tree.head.left = Node(2)
    tree.head.right = Node(3)
    assert tree.level_order_traversal() == [1, 2, 3]