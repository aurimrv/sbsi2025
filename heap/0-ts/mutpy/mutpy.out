[34m[*][0m Start mutation process:
[36m   -[0m targets: heap.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 5 tests passed:
[36m   -[0m test_heap [0.16398 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while i / 2 > 0:[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.11112 s] [31msurvived[0m
[36m   -[0m [#   2] AOR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while i * 2 > 0:[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.09174 s] [31msurvived[0m
[36m   -[0m [#   3] AOR heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
[34m- 12:             parent = i // 2[0m
[32m+ 12:             parent = i / 2[0m
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.10286 s] [36mincompetent[0m

TypeError: heap:13: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#   4] AOR heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
[34m- 12:             parent = i // 2[0m
[32m+ 12:             parent = i * 2[0m
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.10159 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bde2380>, i = 2

>   ???
E   IndexError: list index out of range

heap:13: IndexError
[36m   -[0m [#   5] AOR heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
[34m- 15:             i = i // 2[0m
[32m+ 15:             i = i / 2[0m
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.10179 s] [36mincompetent[0m

TypeError: heap:13: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#   6] AOR heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
[34m- 15:             i = i // 2[0m
[32m+ 15:             i = i * 2[0m
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.13673 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bbd9150>, i = 4

>   ???
E   IndexError: list index out of range

heap:13: IndexError
[36m   -[0m [#   7] AOR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i / 2 <= self.size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.13089 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [#   8] AOR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i // 2 <= self.size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.12519 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [#   9] AOR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i ** 2 <= self.size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.13596 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  10] AOR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i / 2 > self.size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.10651 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min_outside_bounds

def test_find_min_outside_bounds():
    
        heap = build_basic_heap()
    
>       assert heap.find_min_child_index(len(heap.heap_list)) == None
E       AssertionError

0-ts/test_heap.py:57: AssertionError
[36m   -[0m [#  11] AOR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i // 2 > self.size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.10496 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min_outside_bounds

def test_find_min_outside_bounds():
    
        heap = build_basic_heap()
    
>       assert heap.find_min_child_index(len(heap.heap_list)) == None
E       AssertionError

0-ts/test_heap.py:57: AssertionError
[36m   -[0m [#  12] AOR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i ** 2 > self.size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.12766 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [#  13] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i / 2) + 1 > self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.14450 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bba3280>, i = 3

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  14] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i // 2) + 1 > self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.10376 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc684f0>, i = 3

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  15] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i ** 2) + 1 > self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.10377 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  16] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i * 2) - 1 > self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.10328 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc8ae30>, i = 3

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  17] AOR heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
[34m- 28:             return i * 2[0m
[32m+ 28:             return i / 2[0m
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.10462 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#  18] AOR heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
[34m- 28:             return i * 2[0m
[32m+ 28:             return i // 2[0m
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[5.00666 s] [33mtimeout[0m
[36m   -[0m [#  19] AOR heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
[34m- 28:             return i * 2[0m
[32m+ 28:             return i ** 2[0m
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.12647 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bdd3700>, i = 3

>   ???
E   IndexError: list index out of range

heap:20: IndexError
[36m   -[0m [#  20] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i / 2] < self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.12175 s] [36mincompetent[0m

TypeError: heap:30: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#  21] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i // 2] < self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.12949 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  22] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i ** 2] < self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10656 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
>       built.build([23,12,7,5,34,88,2])

0-ts/test_heap.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:56: in build
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcee8c0>, i = 3

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  23] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i / 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.12967 s] [36mincompetent[0m

TypeError: heap:30: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#  24] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i // 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10520 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  25] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i ** 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.13707 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
>       built.build([23,12,7,5,34,88,2])

0-ts/test_heap.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:56: in build
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc74e50>, i = 3

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  26] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) - 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.15077 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  27] AOR heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
[34m- 31:             return i * 2[0m
[32m+ 31:             return i / 2[0m
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.12524 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#  28] AOR heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
[34m- 31:             return i * 2[0m
[32m+ 31:             return i // 2[0m
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.13584 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  29] AOR heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
[34m- 31:             return i * 2[0m
[32m+ 31:             return i ** 2[0m
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.11114 s] [31msurvived[0m
[36m   -[0m [#  30] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             return (i / 2) + 1[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.11065 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#  31] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             return (i // 2) + 1[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[5.00680 s] [33mtimeout[0m
[36m   -[0m [#  32] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             return (i ** 2) + 1[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.11186 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  33] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             return (i * 2) - 1[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[5.00664 s] [33mtimeout[0m
[36m   -[0m [#  34] AOR heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
[34m- 53:         i = len(lst) // 2[0m
[32m+ 53:         i = len(lst) / 2[0m
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.13427 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

[36m   -[0m [#  35] AOR heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
[34m- 53:         i = len(lst) // 2[0m
[32m+ 53:         i = len(lst) * 2[0m
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.11231 s] [31msurvived[0m
[36m   -[0m [#  36] AOR heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
[34m- 54:         self.heap_list = [0] + lst[0m
[32m+ 54:         self.heap_list = [0] - lst[0m
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.10479 s] [36mincompetent[0m

TypeError: heap:54: TypeError: unsupported operand type(s) for -: 'list' and 'list'

[36m   -[0m [#  37] AOR heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
[34m- 60:         return len(self.heap_list) - 1[0m
[32m+ 60:         return len(self.heap_list) + 1[0m
--------------------------------------------------------------------------------
[0.13615 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bbf6710>, i = 3

>   ???
E   IndexError: list index out of range

heap:13: IndexError
[36m   -[0m [#  38] ASR heap: 
--------------------------------------------------------------------------------
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
[34m- 57:             i -= 1[0m
[32m+ 57:             i += 1[0m
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[5.00660 s] [33mtimeout[0m
[36m   -[0m [#  39] CDI heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
[34m-  3:     def __init__(self):[0m
[34m-  4:         self.heap_list = [0][0m
[34m-  5:     [0m
[32m+  3:     @classmethod[0m
[32m+  4:     def __init__(self):[0m
[32m+  5:         self.heap_list = [0][0m
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
--------------------------------------------------------------------------------
[0.13935 s] [31msurvived[0m
[36m   -[0m [#  40] CDI heap: 
--------------------------------------------------------------------------------
   2:     
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
[34m-  6:     def insert(self, value: int):[0m
[34m-  7:         self.heap_list.append(value)[0m
[34m-  8:         self.percolate(self.size())[0m
[34m-  9:     [0m
[32m+  6:     @classmethod[0m
[32m+  7:     def insert(self, value: int):[0m
[32m+  8:         self.heap_list.append(value)[0m
[32m+  9:         self.percolate(self.size())[0m
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
--------------------------------------------------------------------------------
[0.13069 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>, value = 23

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:8: AttributeError
[36m   -[0m [#  41] CDI heap: 
--------------------------------------------------------------------------------
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
[34m- 10:     def percolate(self, i):[0m
[34m- 11:         while i // 2 > 0:[0m
[34m- 12:             parent = i // 2[0m
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[34m- 15:             i = i // 2[0m
[34m- 16:     [0m
[32m+ 10:     @classmethod[0m
[32m+ 11:     def percolate(self, i):[0m
[32m+ 12:         while i // 2 > 0:[0m
[32m+ 13:             parent = i // 2[0m
[32m+ 14:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 15:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 16:             i = i // 2[0m
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
--------------------------------------------------------------------------------
[0.11505 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>, i = 2

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:14: AttributeError
[36m   -[0m [#  42] CDI heap: 
--------------------------------------------------------------------------------
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
[34m- 17:     def sift(self, i):[0m
[34m- 18:         while i * 2 <= self.size():[0m
[34m- 19:             mc_i = self.find_min_child_index(i)[0m
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[34m- 22:             i = mc_i[0m
[34m- 23:     [0m
[32m+ 17:     @classmethod[0m
[32m+ 18:     def sift(self, i):[0m
[32m+ 19:         while i * 2 <= self.size():[0m
[32m+ 20:             mc_i = self.find_min_child_index(i)[0m
[32m+ 21:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 22:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 23:             i = mc_i[0m
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
--------------------------------------------------------------------------------
[0.13448 s] [36mincompetent[0m

TypeError: heap:19: TypeError: Heap.size() missing 1 required positional argument: 'self'

[36m   -[0m [#  43] CDI heap: 
--------------------------------------------------------------------------------
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
[34m- 24:     def find_min_child_index(self, i):[0m
[34m- 25:         if i * 2 > self.size():[0m
[34m- 26:             return None[0m
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[34m- 28:             return i * 2[0m
[34m- 29:         [0m
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[34m- 31:             return i * 2[0m
[34m- 32:         else:[0m
[34m- 33:             return (i * 2) + 1[0m
[34m- 34:     [0m
[32m+ 24:     @classmethod[0m
[32m+ 25:     def find_min_child_index(self, i):[0m
[32m+ 26:         if i * 2 > self.size():[0m
[32m+ 27:             return None[0m
[32m+ 28:         if (i * 2) + 1 > self.size():[0m
[32m+ 29:             return i * 2[0m
[32m+ 30:         [0m
[32m+ 31:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 32:             return i * 2[0m
[32m+ 33:         else:[0m
[32m+ 34:             return (i * 2) + 1[0m
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
--------------------------------------------------------------------------------
[0.10506 s] [36mincompetent[0m

TypeError: heap:26: TypeError: Heap.size() missing 1 required positional argument: 'self'

[36m   -[0m [#  44] CDI heap: 
--------------------------------------------------------------------------------
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
[34m- 35:     def min(self):[0m
[34m- 36:         if len(self.heap_list) > 1:[0m
[34m- 37:             return self.heap_list[1][0m
[34m- 38:         else:[0m
[34m- 39:             return None[0m
[34m- 40:     [0m
[32m+ 35:     @classmethod[0m
[32m+ 36:     def min(self):[0m
[32m+ 37:         if len(self.heap_list) > 1:[0m
[32m+ 38:             return self.heap_list[1][0m
[32m+ 39:         else:[0m
[32m+ 40:             return None[0m
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
--------------------------------------------------------------------------------
[0.12795 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2

0-ts/test_heap.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:37: AttributeError
[36m   -[0m [#  45] CDI heap: 
--------------------------------------------------------------------------------
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
[34m- 41:     def delete_min(self):[0m
[34m- 42:         if self.size() == 0:[0m
[34m- 43:             return None[0m
[34m- 44:         if self.size() == 1:[0m
[34m- 45:             return self.heap_list.pop()[0m
[34m- 46:         [0m
[34m- 47:         min_val = self.heap_list[1][0m
[34m- 48:         self.heap_list[1] = self.heap_list.pop()[0m
[34m- 49:         self.sift(1)[0m
[34m- 50:         return min_val[0m
[34m- 51:     [0m
[32m+ 41:     @classmethod[0m
[32m+ 42:     def delete_min(self):[0m
[32m+ 43:         if self.size() == 0:[0m
[32m+ 44:             return None[0m
[32m+ 45:         if self.size() == 1:[0m
[32m+ 46:             return self.heap_list.pop()[0m
[32m+ 47:         [0m
[32m+ 48:         min_val = self.heap_list[1][0m
[32m+ 49:         self.heap_list[1] = self.heap_list.pop()[0m
[32m+ 50:         self.sift(1)[0m
[32m+ 51:         return min_val[0m
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
--------------------------------------------------------------------------------
[0.12327 s] [36mincompetent[0m

TypeError: heap:43: TypeError: Heap.size() missing 1 required positional argument: 'self'

[36m   -[0m [#  46] CDI heap: 
--------------------------------------------------------------------------------
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
[34m- 52:     def build(self, lst: list):[0m
[34m- 53:         i = len(lst) // 2[0m
[34m- 54:         self.heap_list = [0] + lst[0m
[34m- 55:         while i > 0:[0m
[34m- 56:             self.sift(i)[0m
[34m- 57:             i -= 1[0m
[34m- 58:     [0m
[32m+ 52:     @classmethod[0m
[32m+ 53:     def build(self, lst: list):[0m
[32m+ 54:         i = len(lst) // 2[0m
[32m+ 55:         self.heap_list = [0] + lst[0m
[32m+ 56:         while i > 0:[0m
[32m+ 57:             self.sift(i)[0m
[32m+ 58:             i -= 1[0m
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.13279 s] [36mincompetent[0m

TypeError: heap:57: TypeError: Heap.sift() missing 1 required positional argument: 'i'

[36m   -[0m [#  47] CDI heap: 
--------------------------------------------------------------------------------
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
[34m- 59:     def size(self):[0m
[34m- 60:         return len(self.heap_list) - 1[0m
[32m+ 59:     @classmethod[0m
[32m+ 60:     def size(self):[0m
[32m+ 61:         return len(self.heap_list) - 1[0m
--------------------------------------------------------------------------------
[0.13518 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:61: AttributeError
[36m   -[0m [#  48] COI heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while not (i // 2 > 0):[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[5.00664 s] [33mtimeout[0m
[36m   -[0m [#  49] COI heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 13:             if not (self.heap_list[i] < self.heap_list[parent]):[0m
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.10593 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  50] COI heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while not (i * 2 <= self.size()):[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.16383 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  51] COI heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 20:             if not (self.heap_list[i] > self.heap_list[mc_i]):[0m
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.12226 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  52] COI heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if not (i * 2 > self.size()):[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.13352 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [#  53] COI heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if not ((i * 2) + 1 > self.size()):[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.13439 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  54] COI heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif not (self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]):[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10528 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  55] COI heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
[34m- 36:         if len(self.heap_list) > 1:[0m
[32m+ 36:         if not (len(self.heap_list) > 1):[0m
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.13202 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2
E       AssertionError

0-ts/test_heap.py:41: AssertionError
[36m   -[0m [#  56] COI heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
[34m- 42:         if self.size() == 0:[0m
[32m+ 42:         if not (self.size() == 0):[0m
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.10541 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2
E       AssertionError

0-ts/test_heap.py:25: AssertionError
[36m   -[0m [#  57] COI heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
[34m- 44:         if self.size() == 1:[0m
[32m+ 44:         if not (self.size() == 1):[0m
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.10609 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2
E       AssertionError

0-ts/test_heap.py:25: AssertionError
[36m   -[0m [#  58] COI heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
[34m- 55:         while i > 0:[0m
[32m+ 55:         while not (i > 0):[0m
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[0.10711 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  59] CRP heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
   3:     def __init__(self):
[34m-  4:         self.heap_list = [0][0m
[32m+  4:         self.heap_list = [1][0m
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
--------------------------------------------------------------------------------
[0.12397 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  60] CRP heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while i // 3 > 0:[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.13018 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  61] CRP heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while i // 2 > 1:[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.11255 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  62] CRP heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
[34m- 12:             parent = i // 2[0m
[32m+ 12:             parent = i // 3[0m
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.13306 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  63] CRP heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
[34m- 15:             i = i // 2[0m
[32m+ 15:             i = i // 3[0m
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.16459 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  64] CRP heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i * 3 <= self.size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.13186 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  65] CRP heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i * 3 > self.size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.12548 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [#  66] CRP heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i * 3) + 1 > self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.12887 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  67] CRP heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i * 2) + 2 > self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.13173 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  68] CRP heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
[34m- 28:             return i * 2[0m
[32m+ 28:             return i * 3[0m
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.12628 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741b9003d0>, i = 3

>   ???
E   IndexError: list index out of range

heap:20: IndexError
[36m   -[0m [#  69] CRP heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 3] < self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10670 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
>       built.build([23,12,7,5,34,88,2])

0-ts/test_heap.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:56: in build
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd177f0>, i = 3

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  70] CRP heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 3) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10535 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741b902e90>, i = 2

>   ???
E   IndexError: list index out of range

heap:30: IndexError
[36m   -[0m [#  71] CRP heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 2]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10233 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  72] CRP heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
[34m- 31:             return i * 2[0m
[32m+ 31:             return i * 3[0m
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.10588 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  73] CRP heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             return (i * 3) + 1[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.12017 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  74] CRP heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             return (i * 2) + 2[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.13434 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  75] CRP heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
[34m- 36:         if len(self.heap_list) > 1:[0m
[32m+ 36:         if len(self.heap_list) > 2:[0m
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.11123 s] [31msurvived[0m
[36m   -[0m [#  76] CRP heap: 
--------------------------------------------------------------------------------
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
[34m- 37:             return self.heap_list[1][0m
[32m+ 37:             return self.heap_list[2][0m
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
--------------------------------------------------------------------------------
[0.15184 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2
E       AssertionError

0-ts/test_heap.py:41: AssertionError
[36m   -[0m [#  77] CRP heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
[34m- 42:         if self.size() == 0:[0m
[32m+ 42:         if self.size() == 1:[0m
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.10695 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
        assert heap.heap_list == [0,5,7,12,23,34,88]
    
        heap = Heap()
    
>       assert heap.delete_min() == None

0-ts/test_heap.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bdd2f50>

>   ???
E   IndexError: list index out of range

heap:47: IndexError
[36m   -[0m [#  78] CRP heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
[34m- 44:         if self.size() == 1:[0m
[32m+ 44:         if self.size() == 2:[0m
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.10265 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
        assert heap.heap_list == [0,5,7,12,23,34,88]
    
        heap = Heap()
    
        assert heap.delete_min() == None
    
        heap.insert(4)
    
>       assert heap.delete_min() == 4

0-ts/test_heap.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc90160>

>   ???
E   IndexError: list assignment index out of range

heap:48: IndexError
[36m   -[0m [#  79] CRP heap: 
--------------------------------------------------------------------------------
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
[34m- 47:         min_val = self.heap_list[1][0m
[32m+ 47:         min_val = self.heap_list[2][0m
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
--------------------------------------------------------------------------------
[0.11405 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2
E       AssertionError

0-ts/test_heap.py:25: AssertionError
[36m   -[0m [#  80] CRP heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
[34m- 48:         self.heap_list[1] = self.heap_list.pop()[0m
[32m+ 48:         self.heap_list[2] = self.heap_list.pop()[0m
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.12500 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  81] CRP heap: 
--------------------------------------------------------------------------------
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
[34m- 49:         self.sift(1)[0m
[32m+ 49:         self.sift(2)[0m
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
--------------------------------------------------------------------------------
[0.12557 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  82] CRP heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
[34m- 53:         i = len(lst) // 2[0m
[32m+ 53:         i = len(lst) // 3[0m
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.12531 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  83] CRP heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
[34m- 54:         self.heap_list = [0] + lst[0m
[32m+ 54:         self.heap_list = [1] + lst[0m
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.10425 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  84] CRP heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
[34m- 55:         while i > 0:[0m
[32m+ 55:         while i > 1:[0m
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[0.13105 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  85] CRP heap: 
--------------------------------------------------------------------------------
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
[34m- 57:             i -= 1[0m
[32m+ 57:             i -= 2[0m
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.10630 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  86] CRP heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
[34m- 60:         return len(self.heap_list) - 1[0m
[32m+ 60:         return len(self.heap_list) - 2[0m
--------------------------------------------------------------------------------
[0.13065 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  87] OIL heap: 
--------------------------------------------------------------------------------
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
[34m- 16:     [0m
[32m+ 16:             break[0m
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
--------------------------------------------------------------------------------
[0.12278 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  88] OIL heap: 
--------------------------------------------------------------------------------
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
[34m- 23:     [0m
[32m+ 23:             break[0m
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
--------------------------------------------------------------------------------
[0.15947 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  89] OIL heap: 
--------------------------------------------------------------------------------
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
[34m- 58:     [0m
[32m+ 58:             break[0m
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.14870 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [#  90] ROR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while i // 2 < 0:[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.10429 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  91] ROR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
[34m- 11:         while i // 2 > 0:[0m
[32m+ 11:         while i // 2 >= 0:[0m
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[5.00664 s] [33mtimeout[0m
[36m   -[0m [#  92] ROR heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 13:             if self.heap_list[i] > self.heap_list[parent]:[0m
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.13140 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [#  93] ROR heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 13:             if self.heap_list[i] <= self.heap_list[parent]:[0m
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.11172 s] [31msurvived[0m
[36m   -[0m [#  94] ROR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i * 2 >= self.size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.10438 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  95] ROR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i * 2 < self.size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.10608 s] [31msurvived[0m
[36m   -[0m [#  96] ROR heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 20:             if self.heap_list[i] < self.heap_list[mc_i]:[0m
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.12745 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [#  97] ROR heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 20:             if self.heap_list[i] >= self.heap_list[mc_i]:[0m
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.09620 s] [31msurvived[0m
[36m   -[0m [#  98] ROR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i * 2 < self.size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.13491 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [#  99] ROR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i * 2 >= self.size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.10547 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [# 100] ROR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i * 2) + 1 < self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.12403 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [# 101] ROR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i * 2) + 1 >= self.size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.13209 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [# 102] ROR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] > self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.16191 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [# 103] ROR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] <= self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.11106 s] [31msurvived[0m
[36m   -[0m [# 104] ROR heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
[34m- 36:         if len(self.heap_list) > 1:[0m
[32m+ 36:         if len(self.heap_list) < 1:[0m
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.12558 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2
E       AssertionError

0-ts/test_heap.py:41: AssertionError
[36m   -[0m [# 105] ROR heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
[34m- 36:         if len(self.heap_list) > 1:[0m
[32m+ 36:         if len(self.heap_list) >= 1:[0m
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.13427 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
        assert heap.min() == 2
    
>       assert Heap().min() == None

0-ts/test_heap.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bbf6050>

>   ???
E   IndexError: list index out of range

heap:37: IndexError
[36m   -[0m [# 106] ROR heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
[34m- 42:         if self.size() == 0:[0m
[32m+ 42:         if self.size() != 0:[0m
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.13253 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2
E       AssertionError

0-ts/test_heap.py:25: AssertionError
[36m   -[0m [# 107] ROR heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
[34m- 44:         if self.size() == 1:[0m
[32m+ 44:         if self.size() != 1:[0m
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.13316 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2
E       AssertionError

0-ts/test_heap.py:25: AssertionError
[36m   -[0m [# 108] ROR heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
[34m- 55:         while i > 0:[0m
[32m+ 55:         while i < 0:[0m
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[0.13564 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [# 109] ROR heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
[34m- 55:         while i > 0:[0m
[32m+ 55:         while i >= 0:[0m
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[5.00663 s] [33mtimeout[0m
[36m   -[0m [# 110] SDI heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
[34m-  3:     def __init__(self):[0m
[34m-  4:         self.heap_list = [0][0m
[34m-  5:     [0m
[32m+  3:     @staticmethod[0m
[32m+  4:     def __init__(self):[0m
[32m+  5:         self.heap_list = [0][0m
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
--------------------------------------------------------------------------------
[0.13225 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/heap/0-ts/test_heap.py:5: TypeError: Heap.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [# 111] SDI heap: 
--------------------------------------------------------------------------------
   2:     
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
[34m-  6:     def insert(self, value: int):[0m
[34m-  7:         self.heap_list.append(value)[0m
[34m-  8:         self.percolate(self.size())[0m
[34m-  9:     [0m
[32m+  6:     @staticmethod[0m
[32m+  7:     def insert(self, value: int):[0m
[32m+  8:         self.heap_list.append(value)[0m
[32m+  9:         self.percolate(self.size())[0m
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
--------------------------------------------------------------------------------
[0.10523 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/heap/0-ts/test_heap.py:7: TypeError: Heap.insert() missing 1 required positional argument: 'value'

[36m   -[0m [# 112] SDI heap: 
--------------------------------------------------------------------------------
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
[34m- 10:     def percolate(self, i):[0m
[34m- 11:         while i // 2 > 0:[0m
[34m- 12:             parent = i // 2[0m
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[34m- 15:             i = i // 2[0m
[34m- 16:     [0m
[32m+ 10:     @staticmethod[0m
[32m+ 11:     def percolate(self, i):[0m
[32m+ 12:         while i // 2 > 0:[0m
[32m+ 13:             parent = i // 2[0m
[32m+ 14:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 15:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 16:             i = i // 2[0m
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
--------------------------------------------------------------------------------
[0.13455 s] [36mincompetent[0m

TypeError: heap:8: TypeError: Heap.percolate() missing 1 required positional argument: 'i'

[36m   -[0m [# 113] SDI heap: 
--------------------------------------------------------------------------------
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
[34m- 17:     def sift(self, i):[0m
[34m- 18:         while i * 2 <= self.size():[0m
[34m- 19:             mc_i = self.find_min_child_index(i)[0m
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[34m- 22:             i = mc_i[0m
[34m- 23:     [0m
[32m+ 17:     @staticmethod[0m
[32m+ 18:     def sift(self, i):[0m
[32m+ 19:         while i * 2 <= self.size():[0m
[32m+ 20:             mc_i = self.find_min_child_index(i)[0m
[32m+ 21:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 22:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 23:             i = mc_i[0m
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
--------------------------------------------------------------------------------
[0.15545 s] [36mincompetent[0m

TypeError: heap:49: TypeError: Heap.sift() missing 1 required positional argument: 'i'

[36m   -[0m [# 114] SDI heap: 
--------------------------------------------------------------------------------
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
[34m- 24:     def find_min_child_index(self, i):[0m
[34m- 25:         if i * 2 > self.size():[0m
[34m- 26:             return None[0m
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[34m- 28:             return i * 2[0m
[34m- 29:         [0m
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[34m- 31:             return i * 2[0m
[34m- 32:         else:[0m
[34m- 33:             return (i * 2) + 1[0m
[34m- 34:     [0m
[32m+ 24:     @staticmethod[0m
[32m+ 25:     def find_min_child_index(self, i):[0m
[32m+ 26:         if i * 2 > self.size():[0m
[32m+ 27:             return None[0m
[32m+ 28:         if (i * 2) + 1 > self.size():[0m
[32m+ 29:             return i * 2[0m
[32m+ 30:         [0m
[32m+ 31:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 32:             return i * 2[0m
[32m+ 33:         else:[0m
[32m+ 34:             return (i * 2) + 1[0m
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
--------------------------------------------------------------------------------
[0.14718 s] [36mincompetent[0m

TypeError: heap:19: TypeError: Heap.find_min_child_index() missing 1 required positional argument: 'i'

[36m   -[0m [# 115] SDI heap: 
--------------------------------------------------------------------------------
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
[34m- 35:     def min(self):[0m
[34m- 36:         if len(self.heap_list) > 1:[0m
[34m- 37:             return self.heap_list[1][0m
[34m- 38:         else:[0m
[34m- 39:             return None[0m
[34m- 40:     [0m
[32m+ 35:     @staticmethod[0m
[32m+ 36:     def min(self):[0m
[32m+ 37:         if len(self.heap_list) > 1:[0m
[32m+ 38:             return self.heap_list[1][0m
[32m+ 39:         else:[0m
[32m+ 40:             return None[0m
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
--------------------------------------------------------------------------------
[0.10900 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/heap/0-ts/test_heap.py:41: TypeError: Heap.min() missing 1 required positional argument: 'self'

[36m   -[0m [# 116] SDI heap: 
--------------------------------------------------------------------------------
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
[34m- 41:     def delete_min(self):[0m
[34m- 42:         if self.size() == 0:[0m
[34m- 43:             return None[0m
[34m- 44:         if self.size() == 1:[0m
[34m- 45:             return self.heap_list.pop()[0m
[34m- 46:         [0m
[34m- 47:         min_val = self.heap_list[1][0m
[34m- 48:         self.heap_list[1] = self.heap_list.pop()[0m
[34m- 49:         self.sift(1)[0m
[34m- 50:         return min_val[0m
[34m- 51:     [0m
[32m+ 41:     @staticmethod[0m
[32m+ 42:     def delete_min(self):[0m
[32m+ 43:         if self.size() == 0:[0m
[32m+ 44:             return None[0m
[32m+ 45:         if self.size() == 1:[0m
[32m+ 46:             return self.heap_list.pop()[0m
[32m+ 47:         [0m
[32m+ 48:         min_val = self.heap_list[1][0m
[32m+ 49:         self.heap_list[1] = self.heap_list.pop()[0m
[32m+ 50:         self.sift(1)[0m
[32m+ 51:         return min_val[0m
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
--------------------------------------------------------------------------------
[0.14376 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/heap/0-ts/test_heap.py:25: TypeError: Heap.delete_min() missing 1 required positional argument: 'self'

[36m   -[0m [# 117] SDI heap: 
--------------------------------------------------------------------------------
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
[34m- 52:     def build(self, lst: list):[0m
[34m- 53:         i = len(lst) // 2[0m
[34m- 54:         self.heap_list = [0] + lst[0m
[34m- 55:         while i > 0:[0m
[34m- 56:             self.sift(i)[0m
[34m- 57:             i -= 1[0m
[34m- 58:     [0m
[32m+ 52:     @staticmethod[0m
[32m+ 53:     def build(self, lst: list):[0m
[32m+ 54:         i = len(lst) // 2[0m
[32m+ 55:         self.heap_list = [0] + lst[0m
[32m+ 56:         while i > 0:[0m
[32m+ 57:             self.sift(i)[0m
[32m+ 58:             i -= 1[0m
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.13274 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/heap/0-ts/test_heap.py:49: TypeError: Heap.build() missing 1 required positional argument: 'lst'

[36m   -[0m [# 118] SDI heap: 
--------------------------------------------------------------------------------
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
[34m- 59:     def size(self):[0m
[34m- 60:         return len(self.heap_list) - 1[0m
[32m+ 59:     @staticmethod[0m
[32m+ 60:     def size(self):[0m
[32m+ 61:         return len(self.heap_list) - 1[0m
--------------------------------------------------------------------------------
[0.13547 s] [36mincompetent[0m

TypeError: heap:8: TypeError: Heap.size() missing 1 required positional argument: 'self'

[36m   -[0m [# 119] SDL heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
   3:     def __init__(self):
[34m-  4:         self.heap_list = [0][0m
[32m+  4:         pass[0m
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
--------------------------------------------------------------------------------
[0.12974 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bbc3550>, value = 23

>   ???
E   AttributeError: 'Heap' object has no attribute 'heap_list'

heap:7: AttributeError
[36m   -[0m [# 120] SDL heap: 
--------------------------------------------------------------------------------
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
[34m-  7:         self.heap_list.append(value)[0m
[32m+  7:         pass[0m
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
--------------------------------------------------------------------------------
[0.12980 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [# 121] SDL heap: 
--------------------------------------------------------------------------------
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
[34m-  8:         self.percolate(self.size())[0m
[32m+  8:         pass[0m
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
--------------------------------------------------------------------------------
[0.13325 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [# 122] SDL heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
[34m- 12:             parent = i // 2[0m
[32m+ 12:             pass[0m
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.13446 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd7aec0>, i = 2

>   ???
E   NameError: name 'parent' is not defined

heap:13: NameError
[36m   -[0m [# 123] SDL heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 14:                 pass[0m
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.13313 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [# 124] SDL heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
[34m- 15:             i = i // 2[0m
[32m+ 15:             pass[0m
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[5.00665 s] [33mtimeout[0m
[36m   -[0m [# 125] SDL heap: 
--------------------------------------------------------------------------------
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
[34m- 19:             mc_i = self.find_min_child_index(i)[0m
[32m+ 19:             pass[0m
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
--------------------------------------------------------------------------------
[0.10557 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd838e0>, i = 1

>   ???
E   NameError: name 'mc_i' is not defined

heap:20: NameError
[36m   -[0m [# 126] SDL heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 21:                 pass[0m
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.15963 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [# 127] SDL heap: 
--------------------------------------------------------------------------------
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
[34m- 22:             i = mc_i[0m
[32m+ 22:             pass[0m
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
--------------------------------------------------------------------------------
[5.00665 s] [33mtimeout[0m
[36m   -[0m [# 128] SDL heap: 
--------------------------------------------------------------------------------
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
[34m- 26:             return None[0m
[32m+ 26:             pass[0m
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
--------------------------------------------------------------------------------
[0.13662 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min_outside_bounds

def test_find_min_outside_bounds():
    
        heap = build_basic_heap()
    
>       assert heap.find_min_child_index(len(heap.heap_list)) == None
E       AssertionError

0-ts/test_heap.py:57: AssertionError
[36m   -[0m [# 129] SDL heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
[34m- 28:             return i * 2[0m
[32m+ 28:             pass[0m
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.10636 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [# 130] SDL heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
[34m- 31:             return i * 2[0m
[32m+ 31:             pass[0m
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.13765 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [# 131] SDL heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
[34m- 33:             return (i * 2) + 1[0m
[32m+ 33:             pass[0m
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.10520 s] [36mincompetent[0m

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

[36m   -[0m [# 132] SDL heap: 
--------------------------------------------------------------------------------
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
[34m- 37:             return self.heap_list[1][0m
[32m+ 37:             pass[0m
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
--------------------------------------------------------------------------------
[0.13385 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2
E       AssertionError

0-ts/test_heap.py:41: AssertionError
[36m   -[0m [# 133] SDL heap: 
--------------------------------------------------------------------------------
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
[34m- 39:             return None[0m
[32m+ 39:             pass[0m
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
--------------------------------------------------------------------------------
[0.08617 s] [31msurvived[0m
[36m   -[0m [# 134] SDL heap: 
--------------------------------------------------------------------------------
  39:             return None
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
[34m- 43:             return None[0m
[32m+ 43:             pass[0m
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
--------------------------------------------------------------------------------
[0.10640 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
        assert heap.heap_list == [0,5,7,12,23,34,88]
    
        heap = Heap()
    
>       assert heap.delete_min() == None

0-ts/test_heap.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bb530d0>

>   ???
E   IndexError: list index out of range

heap:47: IndexError
[36m   -[0m [# 135] SDL heap: 
--------------------------------------------------------------------------------
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
[34m- 45:             return self.heap_list.pop()[0m
[32m+ 45:             pass[0m
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
--------------------------------------------------------------------------------
[0.13125 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
        assert heap.heap_list == [0,5,7,12,23,34,88]
    
        heap = Heap()
    
        assert heap.delete_min() == None
    
        heap.insert(4)
    
>       assert heap.delete_min() == 4

0-ts/test_heap.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bb50430>

>   ???
E   IndexError: list assignment index out of range

heap:48: IndexError
[36m   -[0m [# 136] SDL heap: 
--------------------------------------------------------------------------------
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
[34m- 47:         min_val = self.heap_list[1][0m
[32m+ 47:         pass[0m
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
--------------------------------------------------------------------------------
[0.13395 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bb9c8b0>

>   ???
E   NameError: name 'min_val' is not defined

heap:50: NameError
[36m   -[0m [# 137] SDL heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
[34m- 48:         self.heap_list[1] = self.heap_list.pop()[0m
[32m+ 48:         pass[0m
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.13451 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [# 138] SDL heap: 
--------------------------------------------------------------------------------
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
[34m- 49:         self.sift(1)[0m
[32m+ 49:         pass[0m
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
--------------------------------------------------------------------------------
[0.13182 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [# 139] SDL heap: 
--------------------------------------------------------------------------------
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
[34m- 50:         return min_val[0m
[32m+ 50:         pass[0m
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
--------------------------------------------------------------------------------
[0.14127 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2
E       AssertionError

0-ts/test_heap.py:25: AssertionError
[36m   -[0m [# 140] SDL heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
[34m- 53:         i = len(lst) // 2[0m
[32m+ 53:         pass[0m
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.15870 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
>       built.build([23,12,7,5,34,88,2])

0-ts/test_heap.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bac51b0>, lst = [23, 12, 7, 5, 34, 88, ...]

>   ???
E   UnboundLocalError: local variable 'i' referenced before assignment

heap:55: UnboundLocalError
[36m   -[0m [# 141] SDL heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
[34m- 54:         self.heap_list = [0] + lst[0m
[32m+ 54:         pass[0m
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.10649 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [# 142] SDL heap: 
--------------------------------------------------------------------------------
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
[34m- 56:             self.sift(i)[0m
[32m+ 56:             pass[0m
  57:             i -= 1
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.13616 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[36m   -[0m [# 143] SDL heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
[34m- 60:         return len(self.heap_list) - 1[0m
[32m+ 60:         pass[0m
--------------------------------------------------------------------------------
[0.13350 s] [36mincompetent[0m

TypeError: heap:11: TypeError: unsupported operand type(s) for //: 'NoneType' and 'int'

[36m   -[0m [# 144] SVD heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
   3:     def __init__(self):
[34m-  4:         self.heap_list = [0][0m
[32m+  4:         heap_list = [0][0m
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 145] SVD heap: 
--------------------------------------------------------------------------------
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
[34m-  7:         self.heap_list.append(value)[0m
[32m+  7:         heap_list.append(value)[0m
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
--------------------------------------------------------------------------------
[0.13350 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bb9fe50>, value = 23

>   ???
E   NameError: name 'heap_list' is not defined

heap:7: NameError
[36m   -[0m [# 146] SVD heap: 
--------------------------------------------------------------------------------
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
[34m-  8:         self.percolate(self.size())[0m
[32m+  8:         percolate(self.size())[0m
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
--------------------------------------------------------------------------------
[0.13259 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd78c10>, value = 23

>   ???
E   NameError: name 'percolate' is not defined

heap:8: NameError
[36m   -[0m [# 147] SVD heap: 
--------------------------------------------------------------------------------
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
[34m-  8:         self.percolate(self.size())[0m
[32m+  8:         self.percolate(size())[0m
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
--------------------------------------------------------------------------------
[0.13170 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd79d20>, value = 23

>   ???
E   NameError: name 'size' is not defined

heap:8: NameError
[36m   -[0m [# 148] SVD heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 13:             if heap_list[i] < self.heap_list[parent]:[0m
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.12563 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bbf6b00>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:13: NameError
[36m   -[0m [# 149] SVD heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[32m+ 13:             if self.heap_list[i] < heap_list[parent]:[0m
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.13001 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bde00a0>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:13: NameError
[36m   -[0m [# 150] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 14:                 (heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.11127 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bb9cc10>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
[36m   -[0m [# 151] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 14:                 (self.heap_list[i], heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.11096 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcaeec0>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
[36m   -[0m [# 152] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 14:                 (self.heap_list[i], self.heap_list[parent]) = (heap_list[parent], self.heap_list[i])[0m
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.15364 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc26da0>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
[36m   -[0m [# 153] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[32m+ 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], heap_list[i])[0m
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.13122 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:8: in build_basic_heap
    heap.insert(12)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcafb50>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
[36m   -[0m [# 154] SVD heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
[34m- 18:         while i * 2 <= self.size():[0m
[32m+ 18:         while i * 2 <= size():[0m
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.13388 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc8b6a0>, i = 1

>   ???
E   NameError: name 'size' is not defined

heap:18: NameError
[36m   -[0m [# 155] SVD heap: 
--------------------------------------------------------------------------------
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
[34m- 19:             mc_i = self.find_min_child_index(i)[0m
[32m+ 19:             mc_i = find_min_child_index(i)[0m
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
--------------------------------------------------------------------------------
[0.10706 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd413c0>, i = 1

>   ???
E   NameError: name 'find_min_child_index' is not defined

heap:19: NameError
[36m   -[0m [# 156] SVD heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 20:             if heap_list[i] > self.heap_list[mc_i]:[0m
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.10417 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bde3040>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:20: NameError
[36m   -[0m [# 157] SVD heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[32m+ 20:             if self.heap_list[i] > heap_list[mc_i]:[0m
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.13231 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcef9d0>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:20: NameError
[36m   -[0m [# 158] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 21:                 (heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.13610 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcefbb0>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
[36m   -[0m [# 159] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 21:                 (self.heap_list[i], heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.13219 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bde2620>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
[36m   -[0m [# 160] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (heap_list[mc_i], self.heap_list[i])[0m
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.13445 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc91810>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
[36m   -[0m [# 161] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[32m+ 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], heap_list[i])[0m
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.10520 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc88700>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
[36m   -[0m [# 162] SVD heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
[34m- 25:         if i * 2 > self.size():[0m
[32m+ 25:         if i * 2 > size():[0m
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.10651 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd82a70>, i = 1

>   ???
E   NameError: name 'size' is not defined

heap:25: NameError
[36m   -[0m [# 163] SVD heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
[34m- 27:         if (i * 2) + 1 > self.size():[0m
[32m+ 27:         if (i * 2) + 1 > size():[0m
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.10477 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcaf2b0>, i = 1

>   ???
E   NameError: name 'size' is not defined

heap:27: NameError
[36m   -[0m [# 164] SVD heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.10481 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcaf9d0>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:30: NameError
[36m   -[0m [# 165] SVD heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
[34m- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:[0m
[32m+ 30:         elif self.heap_list[i * 2] < heap_list[(i * 2) + 1]:[0m
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.13549 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc11b10>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:30: NameError
[36m   -[0m [# 166] SVD heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
[34m- 36:         if len(self.heap_list) > 1:[0m
[32m+ 36:         if len(heap_list) > 1:[0m
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.13448 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2

0-ts/test_heap.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bbf7700>

>   ???
E   NameError: name 'heap_list' is not defined

heap:36: NameError
[36m   -[0m [# 167] SVD heap: 
--------------------------------------------------------------------------------
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
[34m- 37:             return self.heap_list[1][0m
[32m+ 37:             return heap_list[1][0m
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
--------------------------------------------------------------------------------
[0.13180 s] [32mkilled[0m by 0-ts/test_heap.py::test_find_min

def test_find_min():
    
        heap = build_basic_heap()
    
>       assert heap.min() == 2

0-ts/test_heap.py:41: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc92380>

>   ???
E   NameError: name 'heap_list' is not defined

heap:37: NameError
[36m   -[0m [# 168] SVD heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
[34m- 42:         if self.size() == 0:[0m
[32m+ 42:         if size() == 0:[0m
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.10599 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd151e0>

>   ???
E   NameError: name 'size' is not defined

heap:42: NameError
[36m   -[0m [# 169] SVD heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
[34m- 44:         if self.size() == 1:[0m
[32m+ 44:         if size() == 1:[0m
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.13516 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bcace20>

>   ???
E   NameError: name 'size' is not defined

heap:44: NameError
[36m   -[0m [# 170] SVD heap: 
--------------------------------------------------------------------------------
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
[34m- 45:             return self.heap_list.pop()[0m
[32m+ 45:             return heap_list.pop()[0m
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
--------------------------------------------------------------------------------
[0.12759 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
        assert heap.heap_list == [0,5,7,12,23,34,88]
    
        heap = Heap()
    
        assert heap.delete_min() == None
    
        heap.insert(4)
    
>       assert heap.delete_min() == 4

0-ts/test_heap.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc892a0>

>   ???
E   NameError: name 'heap_list' is not defined

heap:45: NameError
[36m   -[0m [# 171] SVD heap: 
--------------------------------------------------------------------------------
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
[34m- 47:         min_val = self.heap_list[1][0m
[32m+ 47:         min_val = heap_list[1][0m
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
--------------------------------------------------------------------------------
[0.13340 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd163b0>

>   ???
E   NameError: name 'heap_list' is not defined

heap:47: NameError
[36m   -[0m [# 172] SVD heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
[34m- 48:         self.heap_list[1] = self.heap_list.pop()[0m
[32m+ 48:         heap_list[1] = self.heap_list.pop()[0m
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.12725 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bd409d0>

>   ???
E   NameError: name 'heap_list' is not defined

heap:48: NameError
[36m   -[0m [# 173] SVD heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
[34m- 48:         self.heap_list[1] = self.heap_list.pop()[0m
[32m+ 48:         self.heap_list[1] = heap_list.pop()[0m
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.10712 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc11e40>

>   ???
E   NameError: name 'heap_list' is not defined

heap:48: NameError
[36m   -[0m [# 174] SVD heap: 
--------------------------------------------------------------------------------
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
[34m- 49:         self.sift(1)[0m
[32m+ 49:         sift(1)[0m
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
--------------------------------------------------------------------------------
[0.10563 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
>       assert heap.delete_min() == 2

0-ts/test_heap.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc25090>

>   ???
E   NameError: name 'sift' is not defined

heap:49: NameError
[36m   -[0m [# 175] SVD heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
[34m- 54:         self.heap_list = [0] + lst[0m
[32m+ 54:         heap_list = [0] + lst[0m
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 176] SVD heap: 
--------------------------------------------------------------------------------
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
[34m- 56:             self.sift(i)[0m
[32m+ 56:             sift(i)[0m
  57:             i -= 1
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.13573 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
>       built.build([23,12,7,5,34,88,2])

0-ts/test_heap.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bdd2a40>, lst = [23, 12, 7, 5, 34, 88, ...]

>   ???
E   NameError: name 'sift' is not defined

heap:56: NameError
[36m   -[0m [# 177] SVD heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
[34m- 60:         return len(self.heap_list) - 1[0m
[32m+ 60:         return len(heap_list) - 1[0m
--------------------------------------------------------------------------------
[0.13369 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
>       heap = build_basic_heap()

0-ts/test_heap.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
0-ts/test_heap.py:7: in build_basic_heap
    heap.insert(23)
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x7f741bc26830>

>   ???
E   NameError: name 'heap_list' is not defined

heap:60: NameError
[36m   -[0m [# 178] ZIL heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
[34m- 12:             parent = i // 2[0m
[34m- 13:             if self.heap_list[i] < self.heap_list[parent]:[0m
[34m- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])[0m
[34m- 15:             i = i // 2[0m
[32m+ 12:             break[0m
[32m+ 13:     [0m
[32m+ 14:     [0m
[32m+ 15:     [0m
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.13278 s] [32mkilled[0m by 0-ts/test_heap.py::test_basic_creation

def test_basic_creation():
        heap = build_basic_heap()
    
>       assert heap.heap_list == [0,2,7,5,23,34,88, 12]
E       AssertionError

0-ts/test_heap.py:20: AssertionError
[36m   -[0m [# 179] ZIL heap: 
--------------------------------------------------------------------------------
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
[34m- 19:             mc_i = self.find_min_child_index(i)[0m
[34m- 20:             if self.heap_list[i] > self.heap_list[mc_i]:[0m
[34m- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])[0m
[34m- 22:             i = mc_i[0m
[32m+ 19:             break[0m
[32m+ 20:     [0m
[32m+ 21:     [0m
[32m+ 22:     [0m
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
--------------------------------------------------------------------------------
[0.16094 s] [32mkilled[0m by 0-ts/test_heap.py::test_delete_min

def test_delete_min():
        heap = build_basic_heap()
    
        assert heap.delete_min() == 2
    
>       assert heap.heap_list == [0,5,7,12,23,34,88]
E       AssertionError

0-ts/test_heap.py:27: AssertionError
[36m   -[0m [# 180] ZIL heap: 
--------------------------------------------------------------------------------
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
[34m- 56:             self.sift(i)[0m
[34m- 57:             i -= 1[0m
[32m+ 56:             break[0m
[32m+ 57:     [0m
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.12775 s] [32mkilled[0m by 0-ts/test_heap.py::test_build

def test_build():
    
        built = Heap()
    
        built.build([23,12,7,5,34,88,2])
    
>       assert built.heap_list == [0,2,5,7,12,34,88,23]
E       AssertionError

0-ts/test_heap.py:51: AssertionError
[34m[*][0m Mutation score [76.69073 s]: [1m[34m92.4%[0m
[36m   -[0m all: 180
[36m   -[0m killed: 125 (69.4%)
[36m   -[0m survived: 11 (6.1%)
[36m   -[0m incompetent: 35 (19.4%)
[36m   -[0m timeout: 9 (5.0%)
