import os
import sys
from heap import Heap

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import pytest

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def filled_heap():
    heap = Heap()
    heap.insert(5)
    heap.insert(3)
    heap.insert(8)
    heap.insert(1)
    heap.insert(10)
    return heap

def test_insert(empty_heap):
    assert empty_heap.size() == 0
    empty_heap.insert(7)
    assert empty_heap.size() == 1
    assert empty_heap.min() == 7

def test_percolate(empty_heap, filled_heap):
    empty_heap.insert(6)
    assert empty_heap.min() == 6

    filled_heap.insert(2)
    assert filled_heap.min() == 2

def test_sift(empty_heap, filled_heap):
    empty_heap.insert(5)
    empty_heap.insert(3)
    empty_heap.insert(8)
    empty_heap.insert(1)
    empty_heap.insert(10)
    assert empty_heap.min() == 1

    filled_heap.insert(2)
    filled_heap.insert(7)
    assert filled_heap.min() == 2

def test_find_min_child_index(empty_heap, filled_heap):
    assert filled_heap.find_min_child_index(1) == 2

def test_min(empty_heap, filled_heap):
    assert empty_heap.min() is None
    assert filled_heap.min() == 1

def test_delete_min(empty_heap, filled_heap):
    assert empty_heap.delete_min() is None
    assert filled_heap.delete_min() == 1
    assert filled_heap.size() == 4

def test_build(filled_heap):
    filled_heap.build([4, 2, 9, 6])
    assert filled_heap.min() == 2
    assert filled_heap.size() == 9