import os, sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    h = Heap()
    return h

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 3, 5, 7, 8, 10, 2]
    empty_heap.percolate(6)
    assert empty_heap.heap_list == [0, 2, 5, 3, 8, 10, 7]

def test_sift(empty_heap):
    empty_heap.heap_list = [0, 5, 10, 3, 8, 7]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 3, 10, 5, 8, 7]

def test_find_min_child_index(empty_heap):
    empty_heap.heap_list = [0, 5, 10, 3, 8, 7]
    result = empty_heap.find_min_child_index(1)
    assert result == 4

def test_min(empty_heap):
    empty_heap.heap_list = [0, 5, 10, 3, 8, 7]
    result = empty_heap.min()
    assert result == 5

def test_delete_min(empty_heap):
    empty_heap.heap_list = [0, 3, 5, 7, 8, 10]
    result = empty_heap.delete_min()
    assert result == 3
    assert empty_heap.heap_list == [0, 5, 10, 7, 8]

def test_build(empty_heap):
    lst = [9, 4, 1, 6, 2]
    empty_heap.build(lst)
    assert empty_heap.heap_list == [0, 1, 2, 4, 9, 6]

def test_size(empty_heap):
    assert empty_heap.size() == 0
    empty_heap.heap_list = [0, 3, 5, 7, 8]
    assert empty_heap.size() == 4