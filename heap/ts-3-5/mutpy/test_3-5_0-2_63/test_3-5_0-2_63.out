[*] Start mutation process:
   - targets: heap.py
   - tests: ts-3-5/test_3-5_0-2_63.py
[*] 8 tests passed:
   - test_3-5_0-2_63 [0.17704 s]
[*] Start mutants generation and execution:
   - [#   1] AOR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
- 11:         while i // 2 > 0:
+ 11:         while i / 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.17931 s] survived
   - [#   2] AOR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
- 11:         while i // 2 > 0:
+ 11:         while i * 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.16082 s] survived
   - [#   3] AOR heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
- 12:             parent = i // 2
+ 12:             parent = i / 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.18089 s] incompetent

TypeError: heap:13: TypeError: list indices must be integers or slices, not float

   - [#   4] AOR heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
- 12:             parent = i // 2
+ 12:             parent = i * 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.17889 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc5493640>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
>       empty_heap.percolate(2)

ts-3-5/test_3-5_0-2_63.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5493640>, i = 2

>   ???
E   IndexError: list index out of range

heap:13: IndexError
   - [#   5] AOR heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
- 15:             i = i // 2
+ 15:             i = i / 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.18353 s] incompetent

TypeError: heap:13: TypeError: list indices must be integers or slices, not float

   - [#   6] AOR heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
- 15:             i = i // 2
+ 15:             i = i * 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.18066 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc56ad6f0>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
>       empty_heap.percolate(2)

ts-3-5/test_3-5_0-2_63.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc56ad6f0>, i = 4

>   ???
E   IndexError: list index out of range

heap:13: IndexError
   - [#   7] AOR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while i / 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.17887 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [#   8] AOR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while i // 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.17988 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [#   9] AOR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while i ** 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.16131 s] survived
   - [#  10] AOR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if i / 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.16315 s] survived
   - [#  11] AOR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if i // 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.16349 s] survived
   - [#  12] AOR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if i ** 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.16149 s] survived
   - [#  13] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i / 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.18391 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc56aef80>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc56aef80>, i = 2

>   ???
E   IndexError: list index out of range

heap:30: IndexError
   - [#  14] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i // 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.18150 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc532d5a0>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc532d5a0>, i = 2

>   ???
E   IndexError: list index out of range

heap:30: IndexError
   - [#  15] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i ** 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.16168 s] survived
   - [#  16] AOR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i * 2) - 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.18377 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc54f1420>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc54f1420>, i = 2

>   ???
E   IndexError: list index out of range

heap:30: IndexError
   - [#  17] AOR heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
- 28:             return i * 2
+ 28:             return i / 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.20651 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

   - [#  18] AOR heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
- 28:             return i * 2
+ 28:             return i // 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[5.00665 s] timeout
   - [#  19] AOR heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
- 28:             return i * 2
+ 28:             return i ** 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.15847 s] survived
   - [#  20] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i / 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18201 s] incompetent

TypeError: heap:30: TypeError: list indices must be integers or slices, not float

   - [#  21] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i // 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.16190 s] survived
   - [#  22] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i ** 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18701 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5827580>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [#  23] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i / 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18261 s] incompetent

TypeError: heap:30: TypeError: list indices must be integers or slices, not float

   - [#  24] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i // 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18569 s] killed by ts-3-5/test_3-5_0-2_63.py::test_find_min_child_index

filled_heap = <heap.Heap object at 0x786fc5292ef0>

    def test_find_min_child_index(filled_heap):
>       assert filled_heap.find_min_child_index(1) == 2
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:39: AssertionError
   - [#  25] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i ** 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18875 s] killed by ts-3-5/test_3-5_0-2_63.py::test_find_min_child_index

filled_heap = <heap.Heap object at 0x786fc58279d0>

    def test_find_min_child_index(filled_heap):
>       assert filled_heap.find_min_child_index(1) == 2
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:39: AssertionError
   - [#  26] AOR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) - 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.17959 s] killed by ts-3-5/test_3-5_0-2_63.py::test_find_min_child_index

filled_heap = <heap.Heap object at 0x786fc5493220>

    def test_find_min_child_index(filled_heap):
>       assert filled_heap.find_min_child_index(1) == 2
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:39: AssertionError
   - [#  27] AOR heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
- 31:             return i * 2
+ 31:             return i / 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.17830 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

   - [#  28] AOR heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
- 31:             return i * 2
+ 31:             return i // 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[5.00679 s] timeout
   - [#  29] AOR heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
- 31:             return i * 2
+ 31:             return i ** 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[5.00671 s] timeout
   - [#  30] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
- 33:             return (i * 2) + 1
+ 33:             return (i / 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.15635 s] survived
   - [#  31] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
- 33:             return (i * 2) + 1
+ 33:             return (i // 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.15933 s] survived
   - [#  32] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
- 33:             return (i * 2) + 1
+ 33:             return (i ** 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.16057 s] survived
   - [#  33] AOR heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
- 33:             return (i * 2) + 1
+ 33:             return (i * 2) - 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.16140 s] survived
   - [#  34] AOR heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
- 53:         i = len(lst) // 2
+ 53:         i = len(lst) / 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.18218 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not float

   - [#  35] AOR heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
- 53:         i = len(lst) // 2
+ 53:         i = len(lst) * 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.16097 s] survived
   - [#  36] AOR heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
- 54:         self.heap_list = [0] + lst
+ 54:         self.heap_list = [0] - lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.18734 s] incompetent

TypeError: heap:54: TypeError: unsupported operand type(s) for -: 'list' and 'list'

   - [#  37] AOR heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
- 60:         return len(self.heap_list) - 1
+ 60:         return len(self.heap_list) + 1
--------------------------------------------------------------------------------
[0.17836 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc53cf580>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc53cf580>, i = 3

>   ???
E   IndexError: list index out of range

heap:13: IndexError
   - [#  38] ASR heap: 
--------------------------------------------------------------------------------
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
- 57:             i -= 1
+ 57:             i += 1
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[5.00691 s] timeout
   - [#  39] CDI heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
-  3:     def __init__(self):
-  4:         self.heap_list = [0]
-  5:     
+  3:     @classmethod
+  4:     def __init__(self):
+  5:         self.heap_list = [0]
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
--------------------------------------------------------------------------------
[0.15497 s] survived
   - [#  40] CDI heap: 
--------------------------------------------------------------------------------
   2:     
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
-  6:     def insert(self, value: int):
-  7:         self.heap_list.append(value)
-  8:         self.percolate(self.size())
-  9:     
+  6:     @classmethod
+  7:     def insert(self, value: int):
+  8:         self.heap_list.append(value)
+  9:         self.percolate(self.size())
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
--------------------------------------------------------------------------------
[0.17979 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc52da170>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>, value = 5

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:8: AttributeError
   - [#  41] CDI heap: 
--------------------------------------------------------------------------------
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
- 10:     def percolate(self, i):
- 11:         while i // 2 > 0:
- 12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
- 15:             i = i // 2
- 16:     
+ 10:     @classmethod
+ 11:     def percolate(self, i):
+ 12:         while i // 2 > 0:
+ 13:             parent = i // 2
+ 14:             if self.heap_list[i] < self.heap_list[parent]:
+ 15:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 16:             i = i // 2
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
--------------------------------------------------------------------------------
[0.19791 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc5694c40>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
>       empty_heap.percolate(2)

ts-3-5/test_3-5_0-2_63.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>, i = 2

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:14: AttributeError
   - [#  42] CDI heap: 
--------------------------------------------------------------------------------
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
- 17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
- 19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
- 22:             i = mc_i
- 23:     
+ 17:     @classmethod
+ 18:     def sift(self, i):
+ 19:         while i * 2 <= self.size():
+ 20:             mc_i = self.find_min_child_index(i)
+ 21:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 22:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 23:             i = mc_i
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
--------------------------------------------------------------------------------
[0.17981 s] incompetent

TypeError: heap:19: TypeError: Heap.size() missing 1 required positional argument: 'self'

   - [#  43] CDI heap: 
--------------------------------------------------------------------------------
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
- 24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
- 26:             return None
- 27:         if (i * 2) + 1 > self.size():
- 28:             return i * 2
- 29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
- 31:             return i * 2
- 32:         else:
- 33:             return (i * 2) + 1
- 34:     
+ 24:     @classmethod
+ 25:     def find_min_child_index(self, i):
+ 26:         if i * 2 > self.size():
+ 27:             return None
+ 28:         if (i * 2) + 1 > self.size():
+ 29:             return i * 2
+ 30:         
+ 31:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 32:             return i * 2
+ 33:         else:
+ 34:             return (i * 2) + 1
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
--------------------------------------------------------------------------------
[0.17932 s] incompetent

TypeError: heap:26: TypeError: Heap.size() missing 1 required positional argument: 'self'

   - [#  44] CDI heap: 
--------------------------------------------------------------------------------
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
- 35:     def min(self):
- 36:         if len(self.heap_list) > 1:
- 37:             return self.heap_list[1]
- 38:         else:
- 39:             return None
- 40:     
+ 35:     @classmethod
+ 36:     def min(self):
+ 37:         if len(self.heap_list) > 1:
+ 38:             return self.heap_list[1]
+ 39:         else:
+ 40:             return None
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
--------------------------------------------------------------------------------
[0.18597 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc54533a0>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1

ts-3-5/test_3-5_0-2_63.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:37: AttributeError
   - [#  45] CDI heap: 
--------------------------------------------------------------------------------
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
- 41:     def delete_min(self):
- 42:         if self.size() == 0:
- 43:             return None
- 44:         if self.size() == 1:
- 45:             return self.heap_list.pop()
- 46:         
- 47:         min_val = self.heap_list[1]
- 48:         self.heap_list[1] = self.heap_list.pop()
- 49:         self.sift(1)
- 50:         return min_val
- 51:     
+ 41:     @classmethod
+ 42:     def delete_min(self):
+ 43:         if self.size() == 0:
+ 44:             return None
+ 45:         if self.size() == 1:
+ 46:             return self.heap_list.pop()
+ 47:         
+ 48:         min_val = self.heap_list[1]
+ 49:         self.heap_list[1] = self.heap_list.pop()
+ 50:         self.sift(1)
+ 51:         return min_val
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
--------------------------------------------------------------------------------
[0.17975 s] incompetent

TypeError: heap:43: TypeError: Heap.size() missing 1 required positional argument: 'self'

   - [#  46] CDI heap: 
--------------------------------------------------------------------------------
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
- 52:     def build(self, lst: list):
- 53:         i = len(lst) // 2
- 54:         self.heap_list = [0] + lst
- 55:         while i > 0:
- 56:             self.sift(i)
- 57:             i -= 1
- 58:     
+ 52:     @classmethod
+ 53:     def build(self, lst: list):
+ 54:         i = len(lst) // 2
+ 55:         self.heap_list = [0] + lst
+ 56:         while i > 0:
+ 57:             self.sift(i)
+ 58:             i -= 1
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.17518 s] incompetent

TypeError: heap:57: TypeError: Heap.sift() missing 1 required positional argument: 'i'

   - [#  47] CDI heap: 
--------------------------------------------------------------------------------
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
- 59:     def size(self):
- 60:         return len(self.heap_list) - 1
+ 59:     @classmethod
+ 60:     def size(self):
+ 61:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.17949 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc54f6ef0>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'heap.Heap'>

>   ???
E   AttributeError: type object 'Heap' has no attribute 'heap_list'

heap:61: AttributeError
   - [#  48] COI heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
- 11:         while i // 2 > 0:
+ 11:         while not (i // 2 > 0):
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[5.00692 s] timeout
   - [#  49] COI heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
+ 13:             if not (self.heap_list[i] < self.heap_list[parent]):
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.17493 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc527b0a0>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
        empty_heap.percolate(2)
>       assert empty_heap.heap_list == [0, 3, 5]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:32: AssertionError
   - [#  50] COI heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while not (i * 2 <= self.size()):
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.18261 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5339240>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [#  51] COI heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 20:             if not (self.heap_list[i] > self.heap_list[mc_i]):
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.18265 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5150580>

    def test_sift(filled_heap):
        filled_heap.sift(1)
>       assert filled_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:36: AssertionError
   - [#  52] COI heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if not (i * 2 > self.size()):
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.19591 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [#  53] COI heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if not ((i * 2) + 1 > self.size()):
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.18092 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5446aa0>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5446aa0>, i = 2

>   ???
E   IndexError: list index out of range

heap:30: IndexError
   - [#  54] COI heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif not (self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]):
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18441 s] killed by ts-3-5/test_3-5_0-2_63.py::test_find_min_child_index

filled_heap = <heap.Heap object at 0x786fc5445bd0>

    def test_find_min_child_index(filled_heap):
>       assert filled_heap.find_min_child_index(1) == 2
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:39: AssertionError
   - [#  55] COI heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
- 36:         if len(self.heap_list) > 1:
+ 36:         if not (len(self.heap_list) > 1):
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.18020 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc56ea6b0>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:42: AssertionError
   - [#  56] COI heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
- 42:         if self.size() == 0:
+ 42:         if not (self.size() == 0):
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.17882 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5694b80>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
>       assert min_val == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:46: AssertionError
   - [#  57] COI heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
- 44:         if self.size() == 1:
+ 44:         if not (self.size() == 1):
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.18101 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5410580>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
>       assert min_val == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:46: AssertionError
   - [#  58] COI heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
- 55:         while i > 0:
+ 55:         while not (i > 0):
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[0.18563 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc55288e0>

    def test_build(empty_heap):
        empty_heap.build([5, 3, 8, 1, 10])
>       assert empty_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:51: AssertionError
   - [#  59] OIL heap: 
--------------------------------------------------------------------------------
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
- 16:     
+ 16:             break
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
--------------------------------------------------------------------------------
[0.18609 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc5936410>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:42: AssertionError
   - [#  60] OIL heap: 
--------------------------------------------------------------------------------
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
- 23:     
+ 23:             break
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
--------------------------------------------------------------------------------
[0.18636 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc57506a0>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [#  61] OIL heap: 
--------------------------------------------------------------------------------
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
- 58:     
+ 58:             break
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.19051 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc5934160>

    def test_build(empty_heap):
        empty_heap.build([5, 3, 8, 1, 10])
>       assert empty_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:51: AssertionError
   - [#  62] ROR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
- 11:         while i // 2 > 0:
+ 11:         while i // 2 < 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[0.18237 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5724e20>

    def test_sift(filled_heap):
        filled_heap.sift(1)
>       assert filled_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:36: AssertionError
   - [#  63] ROR heap: 
--------------------------------------------------------------------------------
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
- 11:         while i // 2 > 0:
+ 11:         while i // 2 >= 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
--------------------------------------------------------------------------------
[5.00690 s] timeout
   - [#  64] ROR heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
+ 13:             if self.heap_list[i] > self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.19887 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc56adf00>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
        empty_heap.percolate(2)
>       assert empty_heap.heap_list == [0, 3, 5]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:32: AssertionError
   - [#  65] ROR heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
+ 13:             if self.heap_list[i] <= self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.16093 s] survived
   - [#  66] ROR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while i * 2 >= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.18487 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5763af0>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [#  67] ROR heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while i * 2 < self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.18269 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc54df5e0>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [#  68] ROR heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 20:             if self.heap_list[i] < self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.18228 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5452560>

    def test_sift(filled_heap):
        filled_heap.sift(1)
>       assert filled_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:36: AssertionError
   - [#  69] ROR heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 20:             if self.heap_list[i] >= self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.16026 s] survived
   - [#  70] ROR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if i * 2 < self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.18272 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [#  71] ROR heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if i * 2 >= self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.17748 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [#  72] ROR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i * 2) + 1 < self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.18108 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5753b80>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5753b80>, i = 2

>   ???
E   IndexError: list index out of range

heap:30: IndexError
   - [#  73] ROR heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i * 2) + 1 >= self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.16132 s] survived
   - [#  74] ROR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] > self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18322 s] killed by ts-3-5/test_3-5_0-2_63.py::test_find_min_child_index

filled_heap = <heap.Heap object at 0x786fc5787310>

    def test_find_min_child_index(filled_heap):
>       assert filled_heap.find_min_child_index(1) == 2
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:39: AssertionError
   - [#  75] ROR heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] <= self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.15989 s] survived
   - [#  76] ROR heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
- 36:         if len(self.heap_list) > 1:
+ 36:         if len(self.heap_list) < 1:
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.18450 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc5752a70>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:42: AssertionError
   - [#  77] ROR heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
- 36:         if len(self.heap_list) > 1:
+ 36:         if len(self.heap_list) >= 1:
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.18484 s] survived
   - [#  78] ROR heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
- 42:         if self.size() == 0:
+ 42:         if self.size() != 0:
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.17796 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc56eaf80>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
>       assert min_val == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:46: AssertionError
   - [#  79] ROR heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
- 44:         if self.size() == 1:
+ 44:         if self.size() != 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.17881 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5450ca0>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
>       assert min_val == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:46: AssertionError
   - [#  80] ROR heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
- 55:         while i > 0:
+ 55:         while i < 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[0.18553 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc58262f0>

    def test_build(empty_heap):
        empty_heap.build([5, 3, 8, 1, 10])
>       assert empty_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:51: AssertionError
   - [#  81] ROR heap: 
--------------------------------------------------------------------------------
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
- 55:         while i > 0:
+ 55:         while i >= 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
--------------------------------------------------------------------------------
[5.00689 s] timeout
   - [#  82] SDI heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
-  3:     def __init__(self):
-  4:         self.heap_list = [0]
-  5:     
+  3:     @staticmethod
+  4:     def __init__(self):
+  5:         self.heap_list = [0]
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
--------------------------------------------------------------------------------
[0.17616 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/heap/ts-3-5/test_3-5_0-2_63.py:13: TypeError: Heap.__init__() missing 1 required positional argument: 'self'

   - [#  83] SDI heap: 
--------------------------------------------------------------------------------
   2:     
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
-  6:     def insert(self, value: int):
-  7:         self.heap_list.append(value)
-  8:         self.percolate(self.size())
-  9:     
+  6:     @staticmethod
+  7:     def insert(self, value: int):
+  8:         self.heap_list.append(value)
+  9:         self.percolate(self.size())
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
--------------------------------------------------------------------------------
[0.17546 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/heap/ts-3-5/test_3-5_0-2_63.py:26: TypeError: Heap.insert() missing 1 required positional argument: 'value'

   - [#  84] SDI heap: 
--------------------------------------------------------------------------------
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
- 10:     def percolate(self, i):
- 11:         while i // 2 > 0:
- 12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
- 15:             i = i // 2
- 16:     
+ 10:     @staticmethod
+ 11:     def percolate(self, i):
+ 12:         while i // 2 > 0:
+ 13:             parent = i // 2
+ 14:             if self.heap_list[i] < self.heap_list[parent]:
+ 15:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 16:             i = i // 2
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
--------------------------------------------------------------------------------
[0.17826 s] incompetent

TypeError: heap:8: TypeError: Heap.percolate() missing 1 required positional argument: 'i'

   - [#  85] SDI heap: 
--------------------------------------------------------------------------------
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
- 17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
- 19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
- 22:             i = mc_i
- 23:     
+ 17:     @staticmethod
+ 18:     def sift(self, i):
+ 19:         while i * 2 <= self.size():
+ 20:             mc_i = self.find_min_child_index(i)
+ 21:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 22:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 23:             i = mc_i
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
--------------------------------------------------------------------------------
[0.17594 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/heap/ts-3-5/test_3-5_0-2_63.py:35: TypeError: Heap.sift() missing 1 required positional argument: 'i'

   - [#  86] SDI heap: 
--------------------------------------------------------------------------------
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
- 24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
- 26:             return None
- 27:         if (i * 2) + 1 > self.size():
- 28:             return i * 2
- 29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
- 31:             return i * 2
- 32:         else:
- 33:             return (i * 2) + 1
- 34:     
+ 24:     @staticmethod
+ 25:     def find_min_child_index(self, i):
+ 26:         if i * 2 > self.size():
+ 27:             return None
+ 28:         if (i * 2) + 1 > self.size():
+ 29:             return i * 2
+ 30:         
+ 31:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 32:             return i * 2
+ 33:         else:
+ 34:             return (i * 2) + 1
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
--------------------------------------------------------------------------------
[0.17845 s] incompetent

TypeError: heap:19: TypeError: Heap.find_min_child_index() missing 1 required positional argument: 'i'

   - [#  87] SDI heap: 
--------------------------------------------------------------------------------
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
- 35:     def min(self):
- 36:         if len(self.heap_list) > 1:
- 37:             return self.heap_list[1]
- 38:         else:
- 39:             return None
- 40:     
+ 35:     @staticmethod
+ 36:     def min(self):
+ 37:         if len(self.heap_list) > 1:
+ 38:             return self.heap_list[1]
+ 39:         else:
+ 40:             return None
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
--------------------------------------------------------------------------------
[0.18458 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/heap/ts-3-5/test_3-5_0-2_63.py:42: TypeError: Heap.min() missing 1 required positional argument: 'self'

   - [#  88] SDI heap: 
--------------------------------------------------------------------------------
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
- 41:     def delete_min(self):
- 42:         if self.size() == 0:
- 43:             return None
- 44:         if self.size() == 1:
- 45:             return self.heap_list.pop()
- 46:         
- 47:         min_val = self.heap_list[1]
- 48:         self.heap_list[1] = self.heap_list.pop()
- 49:         self.sift(1)
- 50:         return min_val
- 51:     
+ 41:     @staticmethod
+ 42:     def delete_min(self):
+ 43:         if self.size() == 0:
+ 44:             return None
+ 45:         if self.size() == 1:
+ 46:             return self.heap_list.pop()
+ 47:         
+ 48:         min_val = self.heap_list[1]
+ 49:         self.heap_list[1] = self.heap_list.pop()
+ 50:         self.sift(1)
+ 51:         return min_val
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
--------------------------------------------------------------------------------
[0.17965 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/heap/ts-3-5/test_3-5_0-2_63.py:45: TypeError: Heap.delete_min() missing 1 required positional argument: 'self'

   - [#  89] SDI heap: 
--------------------------------------------------------------------------------
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
- 52:     def build(self, lst: list):
- 53:         i = len(lst) // 2
- 54:         self.heap_list = [0] + lst
- 55:         while i > 0:
- 56:             self.sift(i)
- 57:             i -= 1
- 58:     
+ 52:     @staticmethod
+ 53:     def build(self, lst: list):
+ 54:         i = len(lst) // 2
+ 55:         self.heap_list = [0] + lst
+ 56:         while i > 0:
+ 57:             self.sift(i)
+ 58:             i -= 1
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.17718 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/heap/ts-3-5/test_3-5_0-2_63.py:50: TypeError: Heap.build() missing 1 required positional argument: 'lst'

   - [#  90] SDI heap: 
--------------------------------------------------------------------------------
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
- 59:     def size(self):
- 60:         return len(self.heap_list) - 1
+ 59:     @staticmethod
+ 60:     def size(self):
+ 61:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.17737 s] incompetent

TypeError: heap:8: TypeError: Heap.size() missing 1 required positional argument: 'self'

   - [#  91] SDL heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
   3:     def __init__(self):
-  4:         self.heap_list = [0]
+  4:         pass
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
--------------------------------------------------------------------------------
[0.18217 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc542a1d0>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc542a1d0>, value = 5

>   ???
E   AttributeError: 'Heap' object has no attribute 'heap_list'

heap:7: AttributeError
   - [#  92] SDL heap: 
--------------------------------------------------------------------------------
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
-  7:         self.heap_list.append(value)
+  7:         pass
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
--------------------------------------------------------------------------------
[0.18157 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc5429090>

    def test_insert(empty_heap):
        empty_heap.insert(5)
>       assert empty_heap.heap_list == [0, 5]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:27: AssertionError
   - [#  93] SDL heap: 
--------------------------------------------------------------------------------
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
-  8:         self.percolate(self.size())
+  8:         pass
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
--------------------------------------------------------------------------------
[0.18237 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc56af0a0>

    def test_sift(filled_heap):
        filled_heap.sift(1)
>       assert filled_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:36: AssertionError
   - [#  94] SDL heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
- 12:             parent = i // 2
+ 12:             pass
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
--------------------------------------------------------------------------------
[0.18140 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc5298250>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
>       empty_heap.percolate(2)

ts-3-5/test_3-5_0-2_63.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5298250>, i = 2

>   ???
E   NameError: name 'parent' is not defined

heap:13: NameError
   - [#  95] SDL heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 14:                 pass
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.18432 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5825510>

    def test_sift(filled_heap):
        filled_heap.sift(1)
>       assert filled_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:36: AssertionError
   - [#  96] SDL heap: 
--------------------------------------------------------------------------------
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
- 15:             i = i // 2
+ 15:             pass
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[5.00670 s] timeout
   - [#  97] SDL heap: 
--------------------------------------------------------------------------------
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
- 19:             mc_i = self.find_min_child_index(i)
+ 19:             pass
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
--------------------------------------------------------------------------------
[0.17623 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc542a800>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc542a800>, i = 1

>   ???
E   NameError: name 'mc_i' is not defined

heap:20: NameError
   - [#  98] SDL heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 21:                 pass
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.18517 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc542b010>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [#  99] SDL heap: 
--------------------------------------------------------------------------------
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
- 22:             i = mc_i
+ 22:             pass
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
--------------------------------------------------------------------------------
[5.00686 s] timeout
   - [# 100] SDL heap: 
--------------------------------------------------------------------------------
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
- 26:             return None
+ 26:             pass
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
--------------------------------------------------------------------------------
[0.15827 s] survived
   - [# 101] SDL heap: 
--------------------------------------------------------------------------------
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
- 28:             return i * 2
+ 28:             pass
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
--------------------------------------------------------------------------------
[0.18103 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [# 102] SDL heap: 
--------------------------------------------------------------------------------
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
- 31:             return i * 2
+ 31:             pass
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
--------------------------------------------------------------------------------
[0.19522 s] incompetent

TypeError: heap:20: TypeError: list indices must be integers or slices, not NoneType

   - [# 103] SDL heap: 
--------------------------------------------------------------------------------
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
- 33:             return (i * 2) + 1
+ 33:             pass
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
--------------------------------------------------------------------------------
[0.16163 s] survived
   - [# 104] SDL heap: 
--------------------------------------------------------------------------------
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
- 37:             return self.heap_list[1]
+ 37:             pass
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
--------------------------------------------------------------------------------
[0.18359 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc52d34c0>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:42: AssertionError
   - [# 105] SDL heap: 
--------------------------------------------------------------------------------
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
- 39:             return None
+ 39:             pass
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
--------------------------------------------------------------------------------
[0.16179 s] survived
   - [# 106] SDL heap: 
--------------------------------------------------------------------------------
  39:             return None
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
- 43:             return None
+ 43:             pass
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
--------------------------------------------------------------------------------
[0.16316 s] survived
   - [# 107] SDL heap: 
--------------------------------------------------------------------------------
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
- 45:             return self.heap_list.pop()
+ 45:             pass
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
--------------------------------------------------------------------------------
[0.15730 s] survived
   - [# 108] SDL heap: 
--------------------------------------------------------------------------------
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
- 47:         min_val = self.heap_list[1]
+ 47:         pass
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
--------------------------------------------------------------------------------
[0.18366 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc517e560>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc517e560>

>   ???
E   NameError: name 'min_val' is not defined

heap:50: NameError
   - [# 109] SDL heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
- 48:         self.heap_list[1] = self.heap_list.pop()
+ 48:         pass
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.18508 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc56ac730>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [# 110] SDL heap: 
--------------------------------------------------------------------------------
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
- 49:         self.sift(1)
+ 49:         pass
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
--------------------------------------------------------------------------------
[0.18358 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5768340>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [# 111] SDL heap: 
--------------------------------------------------------------------------------
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
- 50:         return min_val
+ 50:         pass
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
--------------------------------------------------------------------------------
[0.18295 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5451480>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
>       assert min_val == 1
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:46: AssertionError
   - [# 112] SDL heap: 
--------------------------------------------------------------------------------
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
- 53:         i = len(lst) // 2
+ 53:         pass
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
--------------------------------------------------------------------------------
[0.18313 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc5714a30>

    def test_build(empty_heap):
>       empty_heap.build([5, 3, 8, 1, 10])

ts-3-5/test_3-5_0-2_63.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5714a30>, lst = [5, 3, 8, 1, 10]

>   ???
E   UnboundLocalError: local variable 'i' referenced before assignment

heap:55: UnboundLocalError
   - [# 113] SDL heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
- 54:         self.heap_list = [0] + lst
+ 54:         pass
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.18627 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc5441c00>

    def test_build(empty_heap):
        empty_heap.build([5, 3, 8, 1, 10])
>       assert empty_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:51: AssertionError
   - [# 114] SDL heap: 
--------------------------------------------------------------------------------
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
- 56:             self.sift(i)
+ 56:             pass
  57:             i -= 1
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.18151 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc5442ef0>

    def test_build(empty_heap):
        empty_heap.build([5, 3, 8, 1, 10])
>       assert empty_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:51: AssertionError
   - [# 115] SDL heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
- 60:         return len(self.heap_list) - 1
+ 60:         pass
--------------------------------------------------------------------------------
[0.20166 s] incompetent

TypeError: heap:11: TypeError: unsupported operand type(s) for //: 'NoneType' and 'int'

   - [# 116] SVD heap: 
--------------------------------------------------------------------------------
   1: class Heap:
   2:     
   3:     def __init__(self):
-  4:         self.heap_list = [0]
+  4:         heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
   8:         self.percolate(self.size())
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 117] SVD heap: 
--------------------------------------------------------------------------------
   3:     def __init__(self):
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
-  7:         self.heap_list.append(value)
+  7:         heap_list.append(value)
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
--------------------------------------------------------------------------------
[0.18093 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc5413670>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5413670>, value = 5

>   ???
E   NameError: name 'heap_list' is not defined

heap:7: NameError
   - [# 118] SVD heap: 
--------------------------------------------------------------------------------
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
-  8:         self.percolate(self.size())
+  8:         percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
--------------------------------------------------------------------------------
[0.17591 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc5751810>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5751810>, value = 5

>   ???
E   NameError: name 'percolate' is not defined

heap:8: NameError
   - [# 119] SVD heap: 
--------------------------------------------------------------------------------
   4:         self.heap_list = [0]
   5:     
   6:     def insert(self, value: int):
   7:         self.heap_list.append(value)
-  8:         self.percolate(self.size())
+  8:         self.percolate(size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
--------------------------------------------------------------------------------
[0.17660 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc5720e50>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5720e50>, value = 5

>   ???
E   NameError: name 'size' is not defined

heap:8: NameError
   - [# 120] SVD heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
+ 13:             if heap_list[i] < self.heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.18477 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc5793430>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
>       empty_heap.percolate(2)

ts-3-5/test_3-5_0-2_63.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5793430>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:13: NameError
   - [# 121] SVD heap: 
--------------------------------------------------------------------------------
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
+ 13:             if self.heap_list[i] < heap_list[parent]:
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
--------------------------------------------------------------------------------
[0.17852 s] killed by ts-3-5/test_3-5_0-2_63.py::test_percolate

empty_heap = <heap.Heap object at 0x786fc5695300>

    def test_percolate(empty_heap):
        empty_heap.heap_list = [0, 3, 5]
>       empty_heap.percolate(2)

ts-3-5/test_3-5_0-2_63.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5695300>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:13: NameError
   - [# 122] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 14:                 (heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.17921 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

@pytest.fixture
    def filled_heap():
        heap = Heap()
        heap.insert(5)
>       heap.insert(3)

ts-3-5/test_3-5_0-2_63.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc576c130>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
   - [# 123] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 14:                 (self.heap_list[i], heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.20827 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

@pytest.fixture
    def filled_heap():
        heap = Heap()
        heap.insert(5)
>       heap.insert(3)

ts-3-5/test_3-5_0-2_63.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc53fd000>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
   - [# 124] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 14:                 (self.heap_list[i], self.heap_list[parent]) = (heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.18948 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

@pytest.fixture
    def filled_heap():
        heap = Heap()
        heap.insert(5)
>       heap.insert(3)

ts-3-5/test_3-5_0-2_63.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5451870>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
   - [# 125] SVD heap: 
--------------------------------------------------------------------------------
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
  12:             parent = i // 2
  13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
+ 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
--------------------------------------------------------------------------------
[0.18089 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

@pytest.fixture
    def filled_heap():
        heap = Heap()
        heap.insert(5)
>       heap.insert(3)

ts-3-5/test_3-5_0-2_63.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5785f30>, i = 2

>   ???
E   NameError: name 'heap_list' is not defined

heap:14: NameError
   - [# 126] SVD heap: 
--------------------------------------------------------------------------------
  14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
- 18:         while i * 2 <= self.size():
+ 18:         while i * 2 <= size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
--------------------------------------------------------------------------------
[0.18102 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5720280>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5720280>, i = 1

>   ???
E   NameError: name 'size' is not defined

heap:18: NameError
   - [# 127] SVD heap: 
--------------------------------------------------------------------------------
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
- 19:             mc_i = self.find_min_child_index(i)
+ 19:             mc_i = find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
--------------------------------------------------------------------------------
[0.18955 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5722b30>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5722b30>, i = 1

>   ???
E   NameError: name 'find_min_child_index' is not defined

heap:19: NameError
   - [# 128] SVD heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 20:             if heap_list[i] > self.heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.20748 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5712c80>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5712c80>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:20: NameError
   - [# 129] SVD heap: 
--------------------------------------------------------------------------------
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
+ 20:             if self.heap_list[i] > heap_list[mc_i]:
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
--------------------------------------------------------------------------------
[0.18231 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc52d2470>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc52d2470>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:20: NameError
   - [# 130] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 21:                 (heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.19063 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5696aa0>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5696aa0>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
   - [# 131] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 21:                 (self.heap_list[i], heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.19565 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5750d60>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5750d60>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
   - [# 132] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.19283 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc57d1540>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc57d1540>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
   - [# 133] SVD heap: 
--------------------------------------------------------------------------------
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
  20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
+ 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
--------------------------------------------------------------------------------
[0.19263 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc57d0070>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:49: in delete_min
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc57d0070>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:21: NameError
   - [# 134] SVD heap: 
--------------------------------------------------------------------------------
  21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
  22:             i = mc_i
  23:     
  24:     def find_min_child_index(self, i):
- 25:         if i * 2 > self.size():
+ 25:         if i * 2 > size():
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
--------------------------------------------------------------------------------
[0.19068 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5751ba0>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5751ba0>, i = 1

>   ???
E   NameError: name 'size' is not defined

heap:25: NameError
   - [# 135] SVD heap: 
--------------------------------------------------------------------------------
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
- 27:         if (i * 2) + 1 > self.size():
+ 27:         if (i * 2) + 1 > size():
  28:             return i * 2
  29:         
  30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
--------------------------------------------------------------------------------
[0.18995 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc56e8fa0>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc56e8fa0>, i = 1

>   ???
E   NameError: name 'size' is not defined

heap:27: NameError
   - [# 136] SVD heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.18219 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc57235b0>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc57235b0>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:30: NameError
   - [# 137] SVD heap: 
--------------------------------------------------------------------------------
  26:             return None
  27:         if (i * 2) + 1 > self.size():
  28:             return i * 2
  29:         
- 30:         elif self.heap_list[i * 2] < self.heap_list[(i * 2) + 1]:
+ 30:         elif self.heap_list[i * 2] < heap_list[(i * 2) + 1]:
  31:             return i * 2
  32:         else:
  33:             return (i * 2) + 1
  34:     
--------------------------------------------------------------------------------
[0.19025 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc5717220>

    def test_sift(filled_heap):
>       filled_heap.sift(1)

ts-3-5/test_3-5_0-2_63.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:19: in sift
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5717220>, i = 1

>   ???
E   NameError: name 'heap_list' is not defined

heap:30: NameError
   - [# 138] SVD heap: 
--------------------------------------------------------------------------------
  32:         else:
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
- 36:         if len(self.heap_list) > 1:
+ 36:         if len(heap_list) > 1:
  37:             return self.heap_list[1]
  38:         else:
  39:             return None
  40:     
--------------------------------------------------------------------------------
[0.19981 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc5714550>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1

ts-3-5/test_3-5_0-2_63.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5714550>

>   ???
E   NameError: name 'heap_list' is not defined

heap:36: NameError
   - [# 139] SVD heap: 
--------------------------------------------------------------------------------
  33:             return (i * 2) + 1
  34:     
  35:     def min(self):
  36:         if len(self.heap_list) > 1:
- 37:             return self.heap_list[1]
+ 37:             return heap_list[1]
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
--------------------------------------------------------------------------------
[0.19479 s] killed by ts-3-5/test_3-5_0-2_63.py::test_min

filled_heap = <heap.Heap object at 0x786fc5723d00>

    def test_min(filled_heap):
>       assert filled_heap.min() == 1

ts-3-5/test_3-5_0-2_63.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5723d00>

>   ???
E   NameError: name 'heap_list' is not defined

heap:37: NameError
   - [# 140] SVD heap: 
--------------------------------------------------------------------------------
  38:         else:
  39:             return None
  40:     
  41:     def delete_min(self):
- 42:         if self.size() == 0:
+ 42:         if size() == 0:
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
--------------------------------------------------------------------------------
[0.19197 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc576f8b0>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc576f8b0>

>   ???
E   NameError: name 'size' is not defined

heap:42: NameError
   - [# 141] SVD heap: 
--------------------------------------------------------------------------------
  40:     
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
- 44:         if self.size() == 1:
+ 44:         if size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
--------------------------------------------------------------------------------
[0.19213 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc5469420>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5469420>

>   ???
E   NameError: name 'size' is not defined

heap:44: NameError
   - [# 142] SVD heap: 
--------------------------------------------------------------------------------
  41:     def delete_min(self):
  42:         if self.size() == 0:
  43:             return None
  44:         if self.size() == 1:
- 45:             return self.heap_list.pop()
+ 45:             return heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
--------------------------------------------------------------------------------
[0.16934 s] survived
   - [# 143] SVD heap: 
--------------------------------------------------------------------------------
  43:             return None
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
- 47:         min_val = self.heap_list[1]
+ 47:         min_val = heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
--------------------------------------------------------------------------------
[0.18657 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc542a920>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc542a920>

>   ???
E   NameError: name 'heap_list' is not defined

heap:47: NameError
   - [# 144] SVD heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
- 48:         self.heap_list[1] = self.heap_list.pop()
+ 48:         heap_list[1] = self.heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.19274 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc57205b0>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc57205b0>

>   ???
E   NameError: name 'heap_list' is not defined

heap:48: NameError
   - [# 145] SVD heap: 
--------------------------------------------------------------------------------
  44:         if self.size() == 1:
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
- 48:         self.heap_list[1] = self.heap_list.pop()
+ 48:         self.heap_list[1] = heap_list.pop()
  49:         self.sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
--------------------------------------------------------------------------------
[0.21068 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc542af50>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc542af50>

>   ???
E   NameError: name 'heap_list' is not defined

heap:48: NameError
   - [# 146] SVD heap: 
--------------------------------------------------------------------------------
  45:             return self.heap_list.pop()
  46:         
  47:         min_val = self.heap_list[1]
  48:         self.heap_list[1] = self.heap_list.pop()
- 49:         self.sift(1)
+ 49:         sift(1)
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
--------------------------------------------------------------------------------
[0.19290 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc59374f0>

    def test_delete_min(filled_heap):
>       min_val = filled_heap.delete_min()

ts-3-5/test_3-5_0-2_63.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc59374f0>

>   ???
E   NameError: name 'sift' is not defined

heap:49: NameError
   - [# 147] SVD heap: 
--------------------------------------------------------------------------------
  50:         return min_val
  51:     
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
- 54:         self.heap_list = [0] + lst
+ 54:         heap_list = [0] + lst
  55:         while i > 0:
  56:             self.sift(i)
  57:             i -= 1
  58:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 148] SVD heap: 
--------------------------------------------------------------------------------
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
- 56:             self.sift(i)
+ 56:             sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.19089 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc56ea170>

    def test_build(empty_heap):
>       empty_heap.build([5, 3, 8, 1, 10])

ts-3-5/test_3-5_0-2_63.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc56ea170>, lst = [5, 3, 8, 1, 10]

>   ???
E   NameError: name 'sift' is not defined

heap:56: NameError
   - [# 149] SVD heap: 
--------------------------------------------------------------------------------
  56:             self.sift(i)
  57:             i -= 1
  58:     
  59:     def size(self):
- 60:         return len(self.heap_list) - 1
+ 60:         return len(heap_list) - 1
--------------------------------------------------------------------------------
[0.19058 s] killed by ts-3-5/test_3-5_0-2_63.py::test_insert

empty_heap = <heap.Heap object at 0x786fc5428340>

    def test_insert(empty_heap):
>       empty_heap.insert(5)

ts-3-5/test_3-5_0-2_63.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
heap:8: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <heap.Heap object at 0x786fc5428340>

>   ???
E   NameError: name 'heap_list' is not defined

heap:60: NameError
   - [# 150] ZIL heap: 
--------------------------------------------------------------------------------
   8:         self.percolate(self.size())
   9:     
  10:     def percolate(self, i):
  11:         while i // 2 > 0:
- 12:             parent = i // 2
- 13:             if self.heap_list[i] < self.heap_list[parent]:
- 14:                 (self.heap_list[i], self.heap_list[parent]) = (self.heap_list[parent], self.heap_list[i])
- 15:             i = i // 2
+ 12:             break
+ 13:     
+ 14:     
+ 15:     
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
  19:             mc_i = self.find_min_child_index(i)
--------------------------------------------------------------------------------
[0.19163 s] killed by ts-3-5/test_3-5_0-2_63.py::test_sift

filled_heap = <heap.Heap object at 0x786fc56eb5b0>

    def test_sift(filled_heap):
        filled_heap.sift(1)
>       assert filled_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:36: AssertionError
   - [# 151] ZIL heap: 
--------------------------------------------------------------------------------
  15:             i = i // 2
  16:     
  17:     def sift(self, i):
  18:         while i * 2 <= self.size():
- 19:             mc_i = self.find_min_child_index(i)
- 20:             if self.heap_list[i] > self.heap_list[mc_i]:
- 21:                 (self.heap_list[i], self.heap_list[mc_i]) = (self.heap_list[mc_i], self.heap_list[i])
- 22:             i = mc_i
+ 19:             break
+ 20:     
+ 21:     
+ 22:     
  23:     
  24:     def find_min_child_index(self, i):
  25:         if i * 2 > self.size():
  26:             return None
--------------------------------------------------------------------------------
[0.18935 s] killed by ts-3-5/test_3-5_0-2_63.py::test_delete_min

filled_heap = <heap.Heap object at 0x786fc52b01f0>

    def test_delete_min(filled_heap):
        min_val = filled_heap.delete_min()
        assert min_val == 1
>       assert filled_heap.heap_list == [0, 3, 5, 8, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:47: AssertionError
   - [# 152] ZIL heap: 
--------------------------------------------------------------------------------
  52:     def build(self, lst: list):
  53:         i = len(lst) // 2
  54:         self.heap_list = [0] + lst
  55:         while i > 0:
- 56:             self.sift(i)
- 57:             i -= 1
+ 56:             break
+ 57:     
  58:     
  59:     def size(self):
  60:         return len(self.heap_list) - 1
--------------------------------------------------------------------------------
[0.19496 s] killed by ts-3-5/test_3-5_0-2_63.py::test_build

empty_heap = <heap.Heap object at 0x786fc56ebd30>

    def test_build(empty_heap):
        empty_heap.build([5, 3, 8, 1, 10])
>       assert empty_heap.heap_list == [0, 1, 3, 8, 5, 10]
E       AssertionError

ts-3-5/test_3-5_0-2_63.py:51: AssertionError
[*] Mutation score [77.03756 s]: 78.5%
   - all: 152
   - killed: 86 (56.6%)
   - survived: 26 (17.1%)
   - incompetent: 31 (20.4%)
   - timeout: 9 (5.9%)
