import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    heap = Heap()
    return heap

@pytest.fixture
def heap_with_values():
    heap = Heap()
    heap.insert(5)
    heap.insert(3)
    heap.insert(8)
    heap.insert(2)
    return heap

def test_insert_empty_heap(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

def test_insert_nonempty_heap(heap_with_values):
    heap_with_values.insert(1)
    assert heap_with_values.heap_list == [0, 1, 3, 8, 2, 5]

def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 3, 2, 5, 1, 8]
    empty_heap.percolate(4)
    assert empty_heap.heap_list == [0, 1, 2, 5, 3, 8]

def test_sift(empty_heap):
    empty_heap.heap_list = [0, 5, 3, 8, 2]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 3, 2, 8, 5]

def test_find_min_child_index(empty_heap):
    empty_heap.heap_list = [0, 3, 2, 8, 5]
    assert empty_heap.find_min_child_index(1) == 2

def test_min_nonempty_heap(heap_with_values):
    assert heap_with_values.min() == 2

def test_min_empty_heap(empty_heap):
    assert empty_heap.min() is None

def test_delete_min_nonempty_heap(heap_with_values):
    assert heap_with_values.delete_min() == 2
    assert heap_with_values.heap_list == [0, 3, 5, 8]

def test_delete_min_empty_heap(empty_heap):
    assert empty_heap.delete_min() is None

def test_build(empty_heap):
    empty_heap.build([3, 1, 4])
    assert empty_heap.heap_list == [0, 1, 3, 4]

def test_size_nonempty_heap(heap_with_values):
    assert heap_with_values.size() == 4

def test_size_empty_heap(empty_heap):
    assert empty_heap.size() == 0