import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def filled_heap():
    heap = Heap()
    heap.build([5, 3, 8, 1, 2])
    return heap

def test_insert(empty_heap, filled_heap):
    empty_heap.insert(10)
    assert empty_heap.min() == 10
    
    filled_heap.insert(0)
    assert filled_heap.min() == 0

def test_percolate(empty_heap, filled_heap):
    empty_heap.heap_list = [0, 3, 6, 2, 8, 5]
    empty_heap.percolate(5)
    assert empty_heap.heap_list == [0, 2, 6, 3, 8, 5]

    filled_heap.heap_list = [0, 3, 6, 2, 8, 5]
    filled_heap.percolate(5)
    assert filled_heap.heap_list == [0, 2, 6, 3, 8, 5]

def test_sift(empty_heap, filled_heap):
    empty_heap.heap_list = [0, 3, 2, 6, 8, 5]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 2, 3, 6, 8, 5]

    filled_heap.heap_list = [0, 3, 2, 6, 8, 5]
    filled_heap.sift(1)
    assert filled_heap.heap_list == [0, 2, 3, 6, 8, 5]

def test_find_min_child_index(empty_heap, filled_heap):
    empty_heap.heap_list = [0, 3, 1, 6, 2, 5]
    assert empty_heap.find_min_child_index(1) == 3

    filled_heap.heap_list = [0, 3, 1, 6, 2, 5]
    assert filled_heap.find_min_child_index(1) == 5

def test_min(empty_heap, filled_heap):
    assert empty_heap.min() is None

    assert filled_heap.min() == 1

def test_delete_min(empty_heap, filled_heap):
    assert empty_heap.delete_min() is None

    min_val = filled_heap.delete_min()
    assert min_val == 1
    assert filled_heap.min() == 2

def test_build(empty_heap, filled_heap):
    lst = [9, 4, 7, 2, 1]
    empty_heap.build(lst)
    assert empty_heap.heap_list == [0, 1, 2, 4, 9, 7]

    lst = [6, 3, 8, 5, 1]
    filled_heap.build(lst)
    assert filled_heap.heap_list == [0, 1, 3, 6, 5, 8]