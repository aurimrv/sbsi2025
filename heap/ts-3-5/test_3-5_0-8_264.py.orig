import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def prepopulated_heap():
    heap = Heap()
    heap.heap_list = [0, 3, 7, 10, 15, 11, 12, 18]
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]
    empty_heap.insert(2)
    assert empty_heap.heap_list == [0, 2, 5]

def test_percolate(prepopulated_heap):
    prepopulated_heap.percolate(5)
    assert prepopulated_heap.heap_list == [0, 3, 7, 10, 15, 11, 3, 18]

def test_sift(prepopulated_heap):
    prepopulated_heap.sift(1)
    assert prepopulated_heap.heap_list == [0, 3, 7, 10, 15, 11, 12, 18]

def test_find_min_child_index(prepopulated_heap):
    index = prepopulated_heap.find_min_child_index(2)
    assert index == 5

def test_min(prepopulated_heap):
    min_val = prepopulated_heap.min()
    assert min_val == 3

def test_delete_min(prepopulated_heap):
    min_val = prepopulated_heap.delete_min()
    assert min_val == 3
    assert prepopulated_heap.heap_list == [0, 7, 11, 10, 15, 18, 12]

def test_build():
    heap = Heap()
    heap.build([9, 6, 12, 5, 4, 7])
    assert heap.heap_list == [0, 4, 5, 7, 9, 6, 12]

def test_size(prepopulated_heap):
    size = prepopulated_heap.size()
    assert size == 7