import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def populated_heap():
    heap = Heap()
    heap.build([5, 3, 8, 2, 1])
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]
    empty_heap.insert(2)
    assert empty_heap.heap_list == [0, 2, 5]

def test_percolate(populated_heap):
    populated_heap.insert(1)
    assert populated_heap.heap_list == [0, 1, 3, 5, 2, 8, 1]

def test_sift(populated_heap):
    populated_heap.sift(1)
    assert populated_heap.heap_list == [0, 2, 3, 1, 5, 8]
    populated_heap.sift(2)
    assert populated_heap.heap_list == [0, 1, 2, 3, 5, 8]

def test_find_min_child_index(populated_heap):
    assert populated_heap.find_min_child_index(1) == 2
    assert populated_heap.find_min_child_index(3) == 6

def test_min(empty_heap):
    assert empty_heap.min() is None
    assert populated_heap.min() == 1

def test_delete_min(populated_heap):
    assert populated_heap.delete_min() == 1
    assert populated_heap.heap_list == [0, 2, 3, 8, 5]
    assert populated_heap.delete_min() == 2
    assert populated_heap.heap_list == [0, 3, 5, 8]

def test_build(empty_heap):
    empty_heap.build([4, 1, 7])
    assert empty_heap.heap_list == [0, 1, 4, 7]

def test_size(populated_heap):
    assert populated_heap.size() == 5
    populated_heap.insert(10)
    assert populated_heap.size() == 6