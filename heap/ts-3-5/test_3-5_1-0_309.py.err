import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    h = Heap()
    return h

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.size() == 1
    assert empty_heap.min() == 5

    empty_heap.insert(3)
    assert empty_heap.size() == 2
    assert empty_heap.min() == 3

def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 3, 5, 7, 9]
    empty_heap.percolate(4)
    assert empty_heap.heap_list == [0, 3, 5, 7, 9]

    empty_heap.percolate(2)
    assert empty_heap.heap_list == [0, 3, 5, 7, 9]

def test_sift(empty_heap):
    empty_heap.heap_list = [0, 5, 3, 7, 9]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 3, 5, 7, 9]

    empty_heap.heap_list = [0, 5, 7, 3, 9]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 3, 7, 5, 9]

def test_find_min_child_index(empty_heap):
    empty_heap.heap_list = [0, 3, 5, 7, 9]
    assert empty_heap.find_min_child_index(1) == 2

    empty_heap.heap_list = [0, 9, 7, 5, 3]
    assert empty_heap.find_min_child_index(1) == 4

def test_min(empty_heap):
    empty_heap.heap_list = [0, 2, 4, 6, 8]
    assert empty_heap.min() == 2

    empty_heap.heap_list = [0]
    assert empty_heap.min() is None

def test_delete_min(empty_heap):
    empty_heap.heap_list = [0, 2, 4, 6, 8]
    min_val = empty_heap.delete_min()
    assert min_val == 2
    assert empty_heap.size() == 4
    assert empty_heap.min() == 4

def test_build(empty_heap):
    empty_heap.build([3, 1, 4, 2, 5])
    assert empty_heap.size() == 5
    assert empty_heap.min() == 1
    assert empty_heap.heap_list == [0, 1, 2, 4, 3, 5]