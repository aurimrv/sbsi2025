import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def prepopulated_heap():
    heap = Heap()
    heap.heap_list = [0, 4, 2, 7, 1, 5, 3, 6]
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]
    empty_heap.insert(3)
    assert empty_heap.heap_list == [0, 3, 5]

def test_percolate(prepopulated_heap):
    prepopulated_heap.percolate(4)
    assert prepopulated_heap.heap_list == [0, 1, 2, 7, 4, 5, 3, 6]
    prepopulated_heap.percolate(6)
    assert prepopulated_heap.heap_list == [0, 1, 2, 7, 3, 5, 4, 6]

def test_sift(prepopulated_heap):
    prepopulated_heap.sift(2)
    assert prepopulated_heap.heap_list == [0, 2, 1, 7, 4, 5, 3, 6]
    prepopulated_heap.sift(1)
    assert prepopulated_heap.heap_list == [0, 1, 2, 7, 4, 5, 3, 6]

def test_find_min_child_index(prepopulated_heap):
    assert prepopulated_heap.find_min_child_index(2) == 3
    assert prepopulated_heap.find_min_child_index(1) == 2

def test_min(prepopulated_heap):
    assert prepopulated_heap.min() == 1

def test_delete_min(prepopulated_heap):
    min_val = prepopulated_heap.delete_min()
    assert min_val == 1
    assert prepopulated_heap.heap_list == [0, 2, 3, 7, 4, 5, 6]

def test_build(empty_heap):
    empty_heap.build([3, 5, 2, 1, 4])
    assert empty_heap.heap_list == [0, 1, 3, 2, 5, 4]

def test_size(empty_heap, prepopulated_heap):
    assert empty_heap.size() == 0
    assert prepopulated_heap.size() == 7