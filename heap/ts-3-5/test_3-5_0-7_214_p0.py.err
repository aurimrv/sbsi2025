import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def sample_heap():
    heap = Heap()
    heap.heap_list = [0, 3, 5, 8, 10, 12, 14, 20, 23]
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

    empty_heap.insert(3)
    assert empty_heap.heap_list == [0, 3, 5]

def test_percolate(sample_heap):
    sample_heap.percolate(8)
    assert sample_heap.heap_list == [0, 3, 5, 8, 10, 12, 14, 20, 23]

    sample_heap.percolate(3)
    assert sample_heap.heap_list == [0, 3, 5, 8, 10, 12, 14, 20, 23]

def test_sift(sample_heap):
    sample_heap.sift(1)
    assert sample_heap.heap_list == [0, 3, 5, 8, 10, 12, 14, 20, 23]

    sample_heap.sift(4)
    assert sample_heap.heap_list == [0, 3, 5, 8, 10, 12, 14, 20, 23]

def test_find_min_child_index(sample_heap):
    assert sample_heap.find_min_child_index(1) == 2
    assert sample_heap.find_min_child_index(4) == 8

def test_min(sample_heap):
    assert sample_heap.min() == 3

def test_delete_min(sample_heap):
    min_val = sample_heap.delete_min()
    assert min_val == 3
    assert sample_heap.heap_list == [0, 5, 8, 10, 12, 14, 20, 23]

def test_build(empty_heap):
    empty_heap.build([4, 10, 7, 9, 2, 5])
    assert empty_heap.heap_list == [0, 2, 4, 5, 9, 10, 7]

def test_size(empty_heap):
    assert empty_heap.size() == 0

    empty_heap.insert(5)
    assert empty_heap.size() == 1