import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.size() == 1
    assert empty_heap.min() == 5

def test_percolate(empty_heap):
    empty_heap.insert(10)
    empty_heap.insert(5)
    assert empty_heap.min() == 5

def test_sift(empty_heap):
    empty_heap.insert(10)
    empty_heap.insert(5)
    empty_heap.insert(7)
    assert empty_heap.min() == 5

def test_find_min_child_index(empty_heap):
    empty_heap.insert(10)
    empty_heap.insert(5)
    empty_heap.insert(7)
    min_child_index = empty_heap.find_min_child_index(1)
    assert min_child_index == 2

def test_min(empty_heap):
    empty_heap.insert(10)
    empty_heap.insert(5)
    assert empty_heap.min() == 5

def test_delete_min(empty_heap):
    empty_heap.insert(10)
    empty_heap.insert(5)
    empty_heap.insert(7)
    min_val = empty_heap.delete_min()
    assert min_val == 5
    assert empty_heap.size() == 2

def test_build(empty_heap):
    lst = [4, 1, 7, 3, 9]
    empty_heap.build(lst)
    assert empty_heap.size() == 5
    assert empty_heap.min() == 1

def test_size(empty_heap):
    empty_heap.insert(10)
    empty_heap.insert(5)
    assert empty_heap.size() == 2