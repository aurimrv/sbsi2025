import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def heap_with_data():
    heap = Heap()
    heap.build([7, 4, 2, 8, 1, 5, 3])
    return heap

def test_insert(empty_heap):
    empty_heap.insert(3)
    assert empty_heap.min() == 3

    empty_heap.insert(1)
    assert empty_heap.min() == 1

def test_percolate(empty_heap):
    heap = Heap()
    heap.heap_list = [0, 7, 3, 2, 8, 4, 5, 1]
    heap.percolate(7)
    assert heap.heap_list == [0, 1, 3, 7, 8, 4, 5, 2]

    heap.percolate(2)
    assert heap.heap_list == [0, 1, 3, 7, 8, 4, 5, 2]

def test_sift(heap_with_data):
    heap_with_data.sift(1)
    assert heap_with_data.heap_list == [0, 1, 3, 2, 8, 4, 5, 7]

def test_find_min_child_index(empty_heap):
    empty_heap.heap_list = [0, 3, 1, 2, 8, 4, 5]
    assert empty_heap.find_min_child_index(1) == 2

    empty_heap.heap_list = [0, 7, 4, 2, 8, 1, 3]
    assert empty_heap.find_min_child_index(2) == 6

def test_min(heap_with_data):
    assert heap_with_data.min() == 1

def test_delete_min(heap_with_data):
    assert heap_with_data.delete_min() == 1
    assert heap_with_data.min() == 2

def test_build(empty_heap):
    empty_heap.build([7, 4, 2, 8, 1, 5, 3])
    assert empty_heap.min() == 1

def test_size(heap_with_data):
    assert heap_with_data.size() == 7