import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def populated_heap():
    heap = Heap()
    heap.build([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5])
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

    empty_heap.insert(2)
    assert empty_heap.heap_list == [0, 2, 5]

def test_percolate(populated_heap):
    populated_heap.percolate(3)
    assert populated_heap.heap_list == [0, 1, 1, 3, 5, 4, 2, 6, 5, 3, 5, 9]

    populated_heap.percolate(6)
    assert populated_heap.heap_list == [0, 1, 1, 3, 5, 4, 2, 6, 5, 3, 5, 9]

def test_sift(populated_heap):
    populated_heap.sift(1)
    assert populated_heap.heap_list == [0, 1, 3, 1, 5, 4, 2, 6, 5, 3, 5, 9]

    populated_heap.sift(4)
    assert populated_heap.heap_list == [0, 1, 1, 3, 3, 4, 2, 6, 5, 5, 5, 9]

def test_find_min_child_index(populated_heap):
    assert populated_heap.find_min_child_index(1) == 2
    assert populated_heap.find_min_child_index(3) == 7

def test_min(empty_heap, populated_heap):
    assert empty_heap.min() is None
    assert populated_heap.min() == 1

def test_delete_min(empty_heap, populated_heap):
    assert empty_heap.delete_min() is None

    min_val = populated_heap.delete_min()
    assert min_val == 1
    assert populated_heap.heap_list == [0, 1, 3, 2, 5, 4, 5, 6, 9, 3, 5]

def test_build(empty_heap):
    empty_heap.build([9, 8, 7, 6, 5, 4, 3, 2, 1])
    assert empty_heap.heap_list == [0, 1, 2, 3, 6, 5, 4, 9, 8, 7, 5]

def test_size(empty_heap, populated_heap):
    assert empty_heap.size() == 0
    assert populated_heap.size() == 11