import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

class TestHeap:

    @pytest.fixture
    def heap(self):
        return Heap()

    def test_insert(self, heap):
        heap.insert(5)
        assert heap.heap_list == [0, 5]

        heap.insert(3)
        assert heap.heap_list == [0, 3, 5]

    def test_percolate(self, heap):
        heap.heap_list = [0, 3, 5, 7]
        heap.percolate(3)
        assert heap.heap_list == [0, 3, 5, 7]

        heap.heap_list = [0, 5, 7, 3]
        heap.percolate(3)
        assert heap.heap_list == [0, 3, 7, 5]

    def test_sift(self, heap):
        heap.heap_list = [0, 3, 5, 7]
        heap.sift(1)
        assert heap.heap_list == [0, 3, 5, 7]

        heap.heap_list = [0, 7, 5, 3]
        heap.sift(1)
        assert heap.heap_list == [0, 5, 7, 3]

    def test_find_min_child_index(self, heap):
        heap.heap_list = [0, 3, 5, 7]
        assert heap.find_min_child_index(1) == 2

        heap.heap_list = [0, 5, 3, 7]
        assert heap.find_min_child_index(1) == 3

    def test_min(self, heap):
        heap.heap_list = [0, 3, 5, 7]
        assert heap.min() == 3

        heap.heap_list = [0]
        assert heap.min() is None

    def test_delete_min(self, heap):
        heap.heap_list = [0, 3, 5, 7]
        assert heap.delete_min() == 3
        assert heap.heap_list == [0, 5, 7]

        heap.heap_list = [0]
        assert heap.delete_min() is None

    def test_build(self, heap):
        heap.build([3, 7, 2, 5, 6])
        assert heap.heap_list == [0, 2, 3, 5, 7, 6]

    def test_size(self, heap):
        heap.heap_list = [0, 3, 5]
        assert heap.size() == 2

        heap.heap_list = [0]
        assert heap.size() == 0