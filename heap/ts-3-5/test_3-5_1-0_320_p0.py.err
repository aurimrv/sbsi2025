import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap


@pytest.fixture
def empty_heap():
    return Heap()


def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.min() == 5

    empty_heap.insert(3)
    assert empty_heap.min() == 3


def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 5, 3, 1]
    empty_heap.percolate(3)
    assert empty_heap.heap_list == [0, 1, 3, 5]

    empty_heap.heap_list = [0, 8, 5, 4, 2]
    empty_heap.percolate(4)
    assert empty_heap.heap_list == [0, 2, 5, 4, 8]


def test_sift(empty_heap):
    empty_heap.heap_list = [0, 1, 3, 5]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 1, 3, 5]

    empty_heap.heap_list = [0, 5, 3, 1]
    empty_heap.sift(1)
    assert empty_heap.heap_list == [0, 3, 5, 1]


def test_find_min_child_index(empty_heap):
    empty_heap.heap_list = [0, 8, 5, 4, 2]
    assert empty_heap.find_min_child_index(1) == 4

    empty_heap.heap_list = [0, 3, 5, 8]
    assert empty_heap.find_min_child_index(1) == 2


def test_min(empty_heap):
    empty_heap.heap_list = [0, 5, 10, 3]
    assert empty_heap.min() == 3

    empty_heap.heap_list = [0]
    assert empty_heap.min() is None


def test_delete_min(empty_heap):
    empty_heap.heap_list = [0, 5, 10, 3]
    assert empty_heap.delete_min() == 3

    empty_heap.heap_list = [0]
    assert empty_heap.delete_min() is None


def test_build(empty_heap):
    lst = [5, 3, 8, 1, 6]
    empty_heap.build(lst)
    assert empty_heap.heap_list == [0, 1, 3, 8, 5, 6]

    lst = [6, 4, 2]
    empty_heap.build(lst)
    assert empty_heap.heap_list == [0, 2, 6, 4]