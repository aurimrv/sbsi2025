import sys
import os
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def heap():
    return Heap()

def test_insert(heap):
    heap.insert(5)
    assert heap.heap_list == [0, 5]

    heap.insert(3)
    assert heap.heap_list == [0, 3, 5]

def test_percolate(heap):
    heap.heap_list = [0, 3, 5]
    heap.percolate(2)
    assert heap.heap_list == [0, 3, 5]

    heap.heap_list = [0, 5, 3]
    heap.percolate(2)
    assert heap.heap_list == [0, 3, 5]

def test_sift(heap):
    heap.heap_list = [0, 3, 5, 8]
    heap.sift(1)
    assert heap.heap_list == [0, 3, 5, 8]

    heap.heap_list = [0, 8, 5, 3]
    heap.sift(1)
    assert heap.heap_list == [0, 8, 5, 3]

def test_find_min_child_index(heap):
    heap.heap_list = [0, 3, 5, 8]
    assert heap.find_min_child_index(1) == 2

    heap.heap_list = [0, 3, 8, 5, 12]
    assert heap.find_min_child_index(1) == 3

def test_min(heap):
    heap.heap_list = [0, 2, 4, 6]
    assert heap.min() == 2

    heap.heap_list = [0]
    assert heap.min() == None

def test_delete_min(heap):
    heap.heap_list = [0, 2, 4, 6]
    assert heap.delete_min() == 2
    assert heap.heap_list == [0, 4, 6]

    heap.heap_list = [0]
    assert heap.delete_min() == None
    assert heap.heap_list == [0]

def test_build(heap):
    heap.build([5, 3, 8, 1])
    assert heap.heap_list == [0, 1, 3, 8, 5]

def test_size(heap):
    heap.heap_list = [0, 5, 3, 8]
    assert heap.size() == 3

    heap.heap_list = [0]
    assert heap.size() == 0