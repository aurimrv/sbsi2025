import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def heap_with_values():
    heap = Heap()
    heap.build([9, 5, 2, 7, 3])
    return heap

def test_insert(empty_heap):
    empty_heap.insert(8)
    assert empty_heap.heap_list == [0, 8]

    empty_heap.insert(3)
    assert empty_heap.heap_list == [0, 3, 8]

def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 8, 3, 1]
    empty_heap.percolate(3)
    assert empty_heap.heap_list == [0, 1, 3, 8]

def test_sift(heap_with_values):
    heap_with_values.sift(1)
    assert heap_with_values.heap_list == [0, 3, 5, 2, 7, 9]

def test_find_min_child_index(heap_with_values):
    min_child_index = heap_with_values.find_min_child_index(1)
    assert min_child_index == 2

def test_min(heap_with_values):
    min_value = heap_with_values.min()
    assert min_value == 2

def test_delete_min(heap_with_values):
    min_value = heap_with_values.delete_min()
    assert min_value == 2
    assert heap_with_values.heap_list == [0, 3, 5, 9, 7]

def test_build(empty_heap):
    empty_heap.build([5, 3, 8, 1])
    assert empty_heap.heap_list == [0, 1, 3, 8, 5]

def test_size(empty_heap, heap_with_values):
    assert empty_heap.size() == 0
    assert heap_with_values.size() == 5 