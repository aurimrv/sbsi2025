import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def heap_with_values():
    h = Heap()
    h.build([9, 5, 7, 2, 6, 8, 1, 3, 4])
    return h

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

    empty_heap.insert(3)
    assert empty_heap.heap_list == [0, 3, 5]

def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 3, 5, 7, 9, 2]
    empty_heap.percolate(5)
    assert empty_heap.heap_list == [0, 2, 5, 7, 9, 3]

def test_sift(heap_with_values):
    heap_with_values.sift(1)
    assert heap_with_values.heap_list == [0, 2, 3, 7, 5, 8, 1, 9, 4]

def test_find_min_child_index(heap_with_values):
    assert heap_with_values.find_min_child_index(1) == 2
    assert heap_with_values.find_min_child_index(3) == 6

def test_min(heap_with_values):
    assert heap_with_values.min() == 1

def test_delete_min(heap_with_values):
    assert heap_with_values.delete_min() == 1
    assert heap_with_values.heap_list == [0, 2, 3, 4, 5, 8, 7, 9]

def test_build(empty_heap):
    empty_heap.build([3, 7, 1, 4, 9, 2, 8, 5])
    assert empty_heap.heap_list == [0, 1, 3, 2, 5, 9, 8, 7, 4]

def test_size(empty_heap):
    assert empty_heap.size() == 0

    empty_heap.insert(5)
    empty_heap.insert(3)
    assert empty_heap.size() == 2