import pytest
import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def sample_heap():
    sample_heap = Heap()
    sample_heap.heap_list = [0, 3, 7, 10, 15, 20, 17]
    return sample_heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]
    empty_heap.insert(12)
    assert empty_heap.heap_list == [0, 5, 12]

def test_percolate(sample_heap):
    sample_heap.percolate(3)
    assert sample_heap.heap_list == [0, 3, 7, 3, 15, 20, 17]

def test_sift(sample_heap):
    sample_heap.sift(2)
    assert sample_heap.heap_list == [0, 3, 7, 10, 15, 20, 17]

def test_find_min_child_index(sample_heap):
    assert sample_heap.find_min_child_index(3) == 6
    assert sample_heap.find_min_child_index(1) == 2

def test_min(sample_heap):
    assert sample_heap.min() == 3
    empty_heap = Heap()
    assert empty_heap.min() == None

def test_delete_min(sample_heap):
    min_val = sample_heap.delete_min()
    assert min_val == 3
    assert sample_heap.heap_list == [0, 7, 17, 10, 15, 20]

def test_build():
    new_heap = Heap()
    new_heap.build([6, 2, 11, 9, 21, 4, 5])
    assert new_heap.heap_list == [0, 2, 4, 5, 9, 21, 11, 6]

def test_size(sample_heap):
    assert sample_heap.size() == 6
    empty_heap = Heap()
    assert empty_heap.size() == 0