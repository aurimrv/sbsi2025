import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def initialized_heap():
    heap = Heap()
    heap.heap_list = [0, 5, 3, 7, 2, 6, 1, 8]  # Pre-populated heap for testing
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

    empty_heap.insert(3)
    assert empty_heap.heap_list == [0, 3, 5]

def test_percolate(initialized_heap):
    initialized_heap.percolate(7)
    assert initialized_heap.heap_list == [0, 1, 3, 5, 2, 6, 7, 8]

def test_sift(initialized_heap):
    initialized_heap.sift(1)
    assert initialized_heap.heap_list == [0, 2, 3, 5, 8, 6, 1, 7]

def test_find_min_child_index(initialized_heap):
    assert initialized_heap.find_min_child_index(1) == 6
    assert initialized_heap.find_min_child_index(2) == 3

def test_min(initialized_heap):
    assert initialized_heap.min() == 1

def test_delete_min(initialized_heap):
    min_val = initialized_heap.delete_min()
    assert min_val == 1
    assert initialized_heap.heap_list == [0, 2, 3, 5, 8, 6, 7]

def test_build(empty_heap):
    lst = [9, 4, 10, 1]
    empty_heap.build(lst)
    assert empty_heap.heap_list == [0, 1, 4, 9, 10]

def test_size(initialized_heap):
    assert initialized_heap.size() == 7