import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heap import Heap

@pytest.fixture
def empty_heap():
    return Heap()

@pytest.fixture
def heap_with_elements():
    heap = Heap()
    heap_list = [0, 3, 1, 6, 2, 7, 4, 5]
    heap.heap_list = heap_list
    return heap

def test_insert(empty_heap):
    empty_heap.insert(5)
    assert empty_heap.heap_list == [0, 5]

def test_percolate(empty_heap):
    empty_heap.heap_list = [0, 3, 7, 1, 6, 2, 4, 5]
    empty_heap.percolate(3)
    assert empty_heap.heap_list == [0, 1, 7, 3, 6, 2, 4, 5]

def test_sift(heap_with_elements):
    heap_with_elements.sift(2)
    assert heap_with_elements.heap_list == [0, 1, 3, 6, 2, 7, 4, 5]

def test_find_min_child_index(heap_with_elements):
    assert heap_with_elements.find_min_child_index(2) == 4

def test_min(heap_with_elements):
    assert heap_with_elements.min() == 1

def test_delete_min(heap_with_elements):
    min_val = heap_with_elements.delete_min()
    assert min_val == 0
    assert heap_with_elements.heap_list == [0, 2, 3, 4, 5, 7, 6]

def test_build(empty_heap):
    lst = [9, 5, 2, 7, 3, 6, 8, 4]
    empty_heap.build(lst)
    assert empty_heap.heap_list == [0, 2, 3, 4, 5, 7, 6, 8, 9]

def test_size(empty_heap):
    assert empty_heap.size() == 0
    empty_heap.insert(10)
    assert empty_heap.size() == 1