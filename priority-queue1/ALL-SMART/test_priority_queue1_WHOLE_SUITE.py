# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import priority_queue1 as module_0

@pytest.mark.xfail(strict=True)
def test_case_0():
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 37
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_1 = module_0.PriorityQueue()
    var_0 = priority_queue_1.add_task(priority_queue_1)
    assert len(module_0.PriorityQueue.mapper) == 38
    var_1 = priority_queue_1.remove_task(priority_queue_1)
    assert len(module_0.PriorityQueue.mapper) == 37
    var_2 = priority_queue_1.add_task(priority_queue_1)
    assert len(module_0.PriorityQueue.mapper) == 38
    var_3 = priority_queue_1.pop_task()
    assert len(module_0.PriorityQueue.mapper) == 37
    priority_queue_1.pop_task()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "priority_queue1.PriorityQueue"
    )
    assert len(module_0.PriorityQueue.mapper) == 36


@pytest.mark.xfail(strict=True)
def test_case_1():
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_1 = module_0.PriorityQueue()
    priority_queue_1.remove_task(priority_queue_0)

@pytest.mark.xfail(strict=True)
def test_case_2():
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_0.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bool_0 = False
    bool_1 = True
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.pq == [[True, 208, True]]
    assert len(module_0.PriorityQueue.mapper) == 36
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.add_task(bool_1)
    assert len(module_0.PriorityQueue.mapper) == 37
    var_0.remove_task(bool_0)

@pytest.mark.xfail(strict=True)
def test_case_4():
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 37
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    none_type_0 = None
    bool_0 = False
    priority_queue_1 = module_0.PriorityQueue()
    var_0 = priority_queue_1.set_priority(bool_0, none_type_0)
    var_1 = priority_queue_1.set_priority(bool_0)
    tuple_0 = (var_0,)
    var_2 = priority_queue_1.set_priority(tuple_0, priority_queue_1)
    var_3 = priority_queue_1.pop_task()
    assert module_0.PriorityQueue.pq == [[True, 208, True]]
    assert len(module_0.PriorityQueue.mapper) == 36


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"B\xae\xd2\xf0\xe3\x07\x9e"
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.add_task(bytes_0)
    var_0.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_6():
    none_type_0 = None
    bool_0 = True
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.pq == [
        [0, 212, b"B\xae\xd2\xf0\xe3\x07\x9e"],
        [True, 208, True],
    ]
    assert len(module_0.PriorityQueue.mapper) == 37
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.set_priority(bool_0, bool_0)
    var_0.set_priority(none_type_0)
