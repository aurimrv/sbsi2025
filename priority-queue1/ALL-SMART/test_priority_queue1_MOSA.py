# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import priority_queue1 as module_0



def test_case_0():
    none_type_0 = None
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.add_task(none_type_0)
    priority_queue_1 = module_0.PriorityQueue()
    var_1 = priority_queue_1.add_task(none_type_0)
    priority_queue_2 = module_0.PriorityQueue()
    var_2 = priority_queue_2.pop_task()
    var_3 = priority_queue_2.set_priority(var_1)
    none_type_1 = None
    var_4 = priority_queue_1.add_task(none_type_1)
    priority_queue_3 = module_0.PriorityQueue()
    priority_queue_4 = module_0.PriorityQueue()
    priority_queue_5 = module_0.PriorityQueue()
    var_5 = priority_queue_3.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_1():
    str_0 = "}-im|/v[|Y6s+5a"
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.add_task(str_0)
    assert len(module_0.PriorityQueue.mapper) == 15
    var_1 = priority_queue_0.set_priority(var_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    bool_0 = False
    bool_1 = True
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 15
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.set_priority(bool_1, bool_1)
    var_0.add_task(bool_0, bool_0)



def test_case_3():
    bytes_0 = b'G"\xc8D\xb0\xc6\xaaU:s\x18&\xc6s'
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_1 = module_0.PriorityQueue()
    var_0 = priority_queue_1.set_priority(bytes_0, bytes_0)
    priority_queue_2 = module_0.PriorityQueue()
    var_1 = priority_queue_1.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b'G"\xc8D\xb0\xc6\xaaU:s\x18&\xc6s'
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 15
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.set_priority(bytes_0, bytes_0)
    priority_queue_1 = module_0.PriorityQueue()
    priority_queue_0.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_5():
    priority_queue_0 = module_0.PriorityQueue()
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_1 = module_0.PriorityQueue()
    priority_queue_0.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b'G"\xc8D\xb0\xc6\xaaU:s\x18&\xc6s'
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 15
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.set_priority(bytes_0, bytes_0)
    priority_queue_1 = module_0.PriorityQueue()
    priority_queue_1.remove_task(priority_queue_1)


@pytest.mark.xfail(strict=True)
def test_case_7():
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 15
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_1 = module_0.PriorityQueue()
    priority_queue_2 = module_0.PriorityQueue()
    priority_queue_3 = module_0.PriorityQueue()
    priority_queue_4 = module_0.PriorityQueue()
    var_0 = priority_queue_3.set_priority(priority_queue_1)
    priority_queue_5 = module_0.PriorityQueue()
    priority_queue_3.pop_task()


@pytest.mark.xfail(strict=True)
def test_case_8():
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 15
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    priority_queue_0.pop_task()
    var_0 = priority_queue_0.pop_task()
    none_type_0 = None
    var_2 = var_1.add_task(none_type_0)
    priority_queue_1 = module_0.PriorityQueue()
    var_3 = priority_queue_0.remove_task(none_type_0)
    var_4 = var_3.set_priority(var_3)


@pytest.mark.xfail(strict=True)
def test_case_9():
    none_type_0 = None
    priority_queue_0 = module_0.PriorityQueue()
    assert len(module_0.PriorityQueue.mapper) == 15
    assert module_0.PriorityQueue.REMOVED == "__removed-task__"
    var_0 = priority_queue_0.set_priority(none_type_0, priority_queue_0)
