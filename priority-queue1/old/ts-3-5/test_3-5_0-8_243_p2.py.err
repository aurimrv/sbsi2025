import os
import sys
from priority_queue1 import PriorityQueue

def test_add_task():
    pq = PriorityQueue()
    
    pq.add_task('Task1', 1)
    assert pq.pq == [[1, 0, 'Task1']]
    assert pq.mapper == {'Task1': [1, 0, 'Task1']}
    
    pq.add_task('Task2', 2)
    assert pq.pq == [[1, 0, 'Task1'], [2, 1, 'Task2']]
    assert pq.mapper == {'Task1': [1, 0, 'Task1'], 'Task2': [2, 1, 'Task2']}

def test_remove_task():
    pq = PriorityQueue()
    
    pq.add_task('Task1', 1)
    pq.add_task('Task2', 2)
    
    pq.remove_task('Task1')
    assert 'Task1' not in pq.mapper
    assert pq.pq == [[2, 1, 'Task2']]

def test_set_priority():
    pq = PriorityQueue()
    
    pq.add_task('Task1', 1)
    pq.add_task('Task2', 2)
    
    pq.set_priority('Task1', 3)
    assert pq.mapper == {'Task1': [3, 2, 'Task1'], 'Task2': [2, 1, 'Task2']}
    assert pq.pq == [[2, 1, 'Task2'], [3, 2, 'Task1']]

def test_pop_task():
    pq = PriorityQueue()
    
    pq.add_task('Task1', 1)
    pq.add_task('Task2', 2)
    
    assert pq.pop_task() == 'Task1'
    assert pq.mapper == {}
    assert pq.pq == [[2, 1, 'Task2']]
    
    assert pq.pop_task() == 'Task2'
    assert pq.pq == []
    
    try:
        pq.pop_task()
    except Exception as e:
        assert str(e) == 'Pop from empty priority queue.'