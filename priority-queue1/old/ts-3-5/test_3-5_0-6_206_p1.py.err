import os
import sys
import itertools
from heapq import heappush, heappop

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from priority_queue1 import PriorityQueue

def test_add_task():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    assert len(pq.pq) == 1

def test_remove_task():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    pq.remove_task("task1")
    assert len(pq.pq) == 0
    assert "task1" not in pq.mapper

def test_set_priority():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    pq.set_priority("task1", 3)
    assert pq.mapper["task1"][0] == 3

def test_pop_task():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    task = pq.pop_task()
    assert task == "task1"
    assert len(pq.pq) == 0

def test_pop_task_empty_queue():
    pq = PriorityQueue()
    try:
        pq.pop_task()
    except KeyError as e:
        assert str(e) == 'Pop from empty priority queue.'

def test_multiple_tasks():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    pq.add_task("task2", 3)
    pq.add_task("task3", 7)
    assert len(pq.pq) == 3

def test_priority_update():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    pq.add_task("task2", 3)
    pq.set_priority("task1", 2)
    assert pq.mapper["task1"][0] == 2

def test_multiple_operations():
    pq = PriorityQueue()
    pq.add_task("task1", 5)
    pq.add_task("task2", 3)
    pq.remove_task("task1")
    pq.set_priority("task2", 1)
    task = pq.pop_task()
    assert task == "task2"