import os
import sys
import itertools
from heapq import heappush, heappop

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from priority_queue1 import PriorityQueue

def test_add_task():
    pq = PriorityQueue()
    pq.add_task("task1", 3)
    pq.add_task("task2", 1)
    assert pq.pq == [[1, 1, 'task2'], [3, 0, 'task1']]
    assert pq.mapper == {'task1': [3, 0, 'task1'], 'task2': [1, 1, 'task2']}

def test_remove_task():
    pq = PriorityQueue()
    pq.add_task("task1", 2)
    pq.add_task("task2", 1)
    pq.remove_task("task1")
    assert pq.pq == [[1, 1, 'task2']]
    assert pq.mapper == {'task2': [1, 1, 'task2']}

def test_set_priority():
    pq = PriorityQueue()
    pq.add_task("task1", 3)
    pq.add_task("task2", 2)
    pq.set_priority("task1", 1)
    assert pq.pq == [[1, 1, 'task1'], [2, 0, 'task2']]
    assert pq.mapper == {'task1': [1, 1, 'task1'], 'task2': [2, 0, 'task2']}

def test_pop_task():
    pq = PriorityQueue()
    pq.add_task("task1", 3)
    pq.add_task("task2", 2)
    task = pq.pop_task()
    assert task == 'task2'
    assert pq.pq == [[3, 0, 'task1']]
    assert pq.mapper == {'task1': [3, 0, 'task1']}

def test_pop_task_empty():
    pq = PriorityQueue()
    try:
        pq.pop_task()
    except KeyError as e:
        assert str(e) == 'Pop from empty priority queue.'