import os
import sys
import itertools
from heapq import heappush, heappop

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from priority_queue1 import PriorityQueue

def test_add_task():
    pq = PriorityQueue()
    pq.add_task('task_1', priority=1)
    assert len(pq.pq) == 1
    assert 'task_1' in pq.mapper

    pq.add_task('task_2', priority=2)
    assert len(pq.pq) == 2
    assert 'task_2' in pq.mapper

def test_remove_task():
    pq = PriorityQueue()
    pq.add_task('task_1', priority=1)
    pq.remove_task('task_1')
    assert len(pq.pq) == 0
    assert 'task_1' not in pq.mapper

def test_set_priority():
    pq = PriorityQueue()
    pq.add_task('task_1', priority=1)
    pq.set_priority('task_1', priority=2)
    assert pq.mapper['task_1'][0] == 2

def test_pop_task():
    pq = PriorityQueue()
    pq.add_task('task_1', priority=1)
    pq.add_task('task_2', priority=2)
    assert pq.pop_task() == 'task_2'
    assert pq.pop_task() == 'task_1'

def test_pop_task_empty():
    pq = PriorityQueue()
    try:
        pq.pop_task()
        assert False  # Should raise KeyError
    except KeyError:
        assert True