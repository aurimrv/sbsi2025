import os
import sys
from priority_queue1 import PriorityQueue

def test_add_task():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    assert pq.pq[0][2] == 'task1'
    assert pq.mapper['task1'] == [1, 0, 'task1']

    pq.add_task('task2', 3)
    assert pq.pq[1][2] == 'task2'
    assert pq.mapper['task2'] == [3, 1, 'task2']

def test_remove_task():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    pq.remove_task('task1')
    assert 'task1' not in pq.mapper
    assert pq.pq[0][2] == PriorityQueue.REMOVED

def test_set_priority():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    pq.set_priority('task1', 3)
    assert pq.mapper['task1'] == [3, 0, 'task1']
    assert pq.pq[0][0] == 3

def test_pop_task():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    pq.add_task('task2', 2)
    task = pq.pop_task()
    assert task == 'task1'
    assert 'task1' not in pq.mapper
    assert len(pq.pq) == 1

    task = pq.pop_task()
    assert task == 'task2'
    assert 'task2' not in pq.mapper
    assert len(pq.pq) == 0

def test_pop_task_empty_queue():
    pq = PriorityQueue()
    try:
        pq.pop_task()
    except KeyError as e:
        assert str(e) == 'Pop from empty priority queue.'