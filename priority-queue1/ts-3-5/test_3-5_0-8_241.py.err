import os
import sys
import itertools
from heapq import heappush, heappop

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from priority_queue1 import PriorityQueue

def test_add_task():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    assert pq.pq[0][2] == 'task1'  # Check if task1 is added with priority 1
    assert pq.mapper['task1'] == [1, 0, 'task1']  # Check if mapper is updated correctly

    pq.add_task('task2', 3)
    assert pq.pq[1][2] == 'task2'  # Check if task2 is added with priority 3
    assert pq.mapper['task2'] == [3, 1, 'task2']  # Check if mapper is updated correctly

def test_remove_task():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    pq.remove_task('task1')
    assert 'task1' not in pq.mapper  # Check if task1 is removed from mapper
    assert pq.pq[0][2] == PriorityQueue.REMOVED  # Check if task marked as removed in pq

def test_set_priority():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    pq.set_priority('task1', 3)
    assert pq.mapper['task1'] == [3, 0, 'task1']  # Check if priority is updated
    assert pq.pq[0][0] == 3  # Check if priority in pq is updated

def test_pop_task():
    pq = PriorityQueue()
    pq.add_task('task1', 1)
    pq.add_task('task2', 2)
    task = pq.pop_task()
    assert task == 'task1'  # Check if the task with the highest priority is popped
    assert 'task1' not in pq.mapper  # Check if task1 is removed from mapper
    assert len(pq.pq) == 1  # Check if pq size is reduced by 1

    task = pq.pop_task()
    assert task == 'task2'  # Check if the next highest priority task is popped
    assert 'task2' not in pq.mapper  # Check if task2 is removed from mapper
    assert len(pq.pq) == 0  # Check if pq size is reduced to 0

def test_pop_task_empty_queue():
    pq = PriorityQueue()
    try:
        pq.pop_task()
    except KeyError as e:
        assert str(e) == 'Pop from empty priority queue.'  # Check if KeyError is raised for empty queue