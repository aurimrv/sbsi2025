import os
import sys
import itertools
from heapq import heappush, heappop

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)
import priority_queue1

def test_add_task():
    pq = priority_queue1.PriorityQueue()
    pq.add_task("task1", 2)
    assert "task1" in pq.mapper
    assert len(pq.pq) == 1
    
    pq.add_task("task2", 1)
    assert "task2" in pq.mapper
    assert len(pq.pq) == 2

def test_remove_task():
    pq = priority_queue1.PriorityQueue()
    pq.add_task("task1", 2)
    pq.remove_task("task1")
    assert "task1" not in pq.mapper
    assert len(pq.pq) == 0

def test_set_priority():
    pq = priority_queue1.PriorityQueue()
    pq.add_task("task1", 2)
    pq.set_priority("task1", 1)
    assert pq.mapper["task1"][0] == 1
    
    pq.add_task("task2", 3)
    pq.set_priority("task2", 2)
    assert pq.mapper["task2"][0] == 2

def test_pop_task():
    pq = priority_queue1.PriorityQueue()
    pq.add_task("task1", 2)
    pq.add_task("task2", 1)
    assert pq.pop_task() == "task2"
    
    pq.add_task("task3", 3)
    assert pq.pop_task() == "task1"
    assert pq.pop_task() == "task3"

def test_pop_task_empty_queue():
    pq = priority_queue1.PriorityQueue()
    with pytest.raises(KeyError):
        pq.pop_task() 