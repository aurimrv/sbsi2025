# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst2 as module_0
import a_queue as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.breadth_first()
    bst_1 = module_0.Bst()
    bst_2 = module_0.Bst(var_1)
    assert f"{type(bst_2).__module__}.{type(bst_2).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}" == "bst2.Node"
    )
    var_2 = bst_1.insert(bst_1)
    var_3 = bst_1.balance()
    assert var_3 == 0
    var_4 = bst_1.depth()
    assert var_4 == 1
    var_3.post_order(var_0)


def test_case_1():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    none_type_0 = None
    node_0 = module_0.Node(parent=none_type_0)
    assert node_0.height == 1
    var_0 = bst_0.post_order()
    bst_1 = module_0.Bst(var_0)
    assert f"{type(bst_1).__module__}.{type(bst_1).__qualname__}" == "bst2.Bst"
    assert bst_1.root is None
    var_1 = bst_0.balance()
    assert var_1 == 0


def test_case_2():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None


@pytest.mark.xfail(strict=True)
def test_case_3():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.balance()
    assert var_1 == 0
    var_2 = bst_0.depth()
    assert var_2 == 1
    var_3 = bst_0.depth()
    assert var_3 == 1
    bst_0.insert(var_0)


def test_case_4():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    none_type_0 = None
    var_0 = bst_0.insert(none_type_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"\xe0<QM\x8afG>"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    bool_0 = True
    var_0 = bst_0.search(bool_0)
    bst_0.insert(bytes_0)


def test_case_6():
    bool_0 = True
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.contains(bool_0)
    assert var_0 is False


def test_case_7():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.depth()
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = 501
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.breadth_first()
    bst_0.balance(bst_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.balance()
    assert var_1 == 0
    var_2 = bst_0.delete(bst_0)
    assert bst_0.root is None
    var_3 = bst_0.in_order()
    var_4 = bst_0.insert(var_0)
    bst_0.delete(var_1)


def test_case_10():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.delete(bst_0)
    var_1 = bst_0.insert(var_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_2 = bst_0.delete(var_1)
    assert bst_0.root is None


def test_case_11():
    node_0 = module_0.Node()
    assert node_0.height == 1


def test_case_12():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.size()
    assert var_0 == 0


def test_case_13():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    none_type_0 = None
    var_0 = bst_0.insert(none_type_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.delete(var_0)
    assert bst_0.root is None


@pytest.mark.xfail(strict=True)
def test_case_14():
    str_0 = "&w].+%1J/owhIT*"
    bst_0 = module_0.Bst(str_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.post_order()
    node_0 = module_0.Node(parent=str_0)
    assert node_0.height == 1
    bst_1 = module_0.Bst(var_0)
    assert f"{type(bst_1).__module__}.{type(bst_1).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}" == "bst2.Node"
    )
    bool_0 = False
    bst_2 = module_0.Bst(bool_0)
    assert f"{type(bst_2).__module__}.{type(bst_2).__qualname__}" == "bst2.Bst"
    assert bst_2.root is None
    var_1 = bst_2.depth()
    assert var_1 == 0
    var_1.breadth_first()


@pytest.mark.xfail(strict=True)
def test_case_15():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.balance()
    assert var_0 == 0
    var_1 = bst_0.delete(bst_0)
    var_2 = bst_0.depth()
    assert var_2 == 0
    int_0 = 2024
    var_3 = bst_0.depth()
    assert var_3 == 0
    var_4 = bst_0.insert(int_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_5 = bst_0.delete(var_3)
    var_1.breadth_first()


@pytest.mark.xfail(strict=True)
def test_case_16():
    str_0 = "G1bI@(oH|"
    bst_0 = module_0.Bst(str_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.balance()
    assert var_0 == -1
    var_0.post_order()


def test_case_17():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.pre_order()
    queue_0 = module_1.Queue(var_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "a_queue.Queue"


@pytest.mark.xfail(strict=True)
def test_case_18():
    none_type_0 = None
    str_0 = 'Dpe~8)C?t2"A/h'
    str_1 = "dUF~ukB'O?Bti-"
    bst_0 = module_0.Bst(str_1)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.contains(str_0)
    assert var_0 is False
    var_0.balance(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_19():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.in_order()
    var_1 = bst_0.post_order()
    bst_1 = module_0.Bst(var_0)
    assert f"{type(bst_1).__module__}.{type(bst_1).__qualname__}" == "bst2.Bst"
    assert bst_1.root is None
    var_2 = bst_0.balance()
    assert var_2 == 0
    var_0.delete(var_0)


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = False
    none_type_0 = None
    bst_0 = module_0.Bst(bool_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.in_order(none_type_0)
    bst_1 = module_0.Bst(var_0)
    assert f"{type(bst_1).__module__}.{type(bst_1).__qualname__}" == "bst2.Bst"
    assert bst_1.root is None
    var_0.in_order(bool_0)


def test_case_21():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.breadth_first()
    bst_1 = module_0.Bst()
    var_1 = bst_0.post_order()
    bst_2 = module_0.Bst(var_0)
    assert f"{type(bst_2).__module__}.{type(bst_2).__qualname__}" == "bst2.Bst"
    assert bst_2.root is None
    var_2 = bst_1.insert(bst_1)
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}" == "bst2.Node"
    )
    var_3 = bst_1.balance()
    assert var_3 == 0
    var_4 = bst_1.delete(bst_1)
    assert bst_1.root is None
    var_5 = bst_1.depth()
    assert var_5 == 0
    var_6 = bst_1.contains(var_0)
    assert var_6 is False
    var_7 = bst_1.delete(var_5)


@pytest.mark.xfail(strict=True)
def test_case_22():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.in_order(bst_0)
    module_0.Bst(var_0)


@pytest.mark.xfail(strict=True)
def test_case_23():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.in_order()
    bst_1 = bst_0.insert(var_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    bst_2 = module_0.Bst(var_0)
    assert f"{type(bst_2).__module__}.{type(bst_2).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}" == "bst2.Node"
    )
    bst_1.insert(bst_1)


@pytest.mark.xfail(strict=True)
def test_case_24():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.pre_order()
    bst_1 = module_0.Bst()
    var_1 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    bst_2 = module_0.Bst(var_0)
    assert f"{type(bst_2).__module__}.{type(bst_2).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_2.root).__module__}.{type(bst_2.root).__qualname__}" == "bst2.Node"
    )
    var_0.balance()
