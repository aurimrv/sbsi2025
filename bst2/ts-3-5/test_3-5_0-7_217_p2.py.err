import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from bst2 import Bst, Node

@pytest.fixture
def sample_tree_data():
    return [5, 3, 8, 2, 4, 7, 9]

def test_insert(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert tree.size() == 7
    assert tree.search(5).val == 5
    assert tree.search(3).val == 3

def test_search(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert tree.search(2).val == 2
    assert tree.search(9).val == 9
    assert tree.search(6) is None

def test_size(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert tree.size() == 7

def test_depth(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert tree.depth() == 3

def test_contains(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert tree.contains(4) is True
    assert tree.contains(10) is False

def test_balance(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert tree.balance() == 0

def test_pre_order(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert list(tree.pre_order()) == [5, 3, 2, 4, 8, 7, 9]

def test_in_order(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert list(tree.in_order()) == [2, 3, 4, 5, 7, 8, 9]

def test_post_order(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert list(tree.post_order()) == [2, 4, 3, 7, 9, 8, 5]

def test_breadth_first(sample_tree_data):
    tree = Bst(sample_tree_data)
    assert list(tree.breadth_first()) == [5, 3, 8, 2, 4, 7, 9]

def test_delete(sample_tree_data):
    tree = Bst(sample_tree_data)
    tree.delete(3)
    assert tree.size() == 6
    assert tree.search(3) is None
    assert tree.search(2).parent.val == 5