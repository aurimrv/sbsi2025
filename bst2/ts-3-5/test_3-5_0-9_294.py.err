import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from bst2 import Bst, Node

# Test cases for Node class
class TestNode:
    def test_is_leaf(self):
        node = Node(5)
        assert node._is_leaf() == True

    def test_is_interior(self):
        node = Node(5)
        assert node._is_interior() == False

    def test_onlychild_left(self):
        node = Node(5)
        node.left = Node(3)
        assert node._onlychild() == 'left'

    def test_onlychild_right(self):
        node = Node(5)
        node.right = Node(7)
        assert node._onlychild() == 'right'

    def test_side_left_child(self):
        parent = Node(5)
        child = Node(3, parent)
        parent.left = child
        assert child._side() == 'left'

    def test_side_right_child(self):
        parent = Node(5)
        child = Node(7, parent)
        parent.right = child
        assert child._side() == 'right'


# Test cases for Bst class
class TestBst:
    @pytest.fixture
    def bst(self):
        return Bst([5, 3, 7])

    def test_insert(self, bst):
        bst.insert(2)
        assert bst.size() == 4
        assert bst.contains(2) == True

    def test_search(self, bst):
        assert bst.search(3).val == 3

    def test_size(self, bst):
        assert bst.size() == 3

    def test_depth(self, bst):
        assert bst.depth() == 2

    def test_contains_true(self, bst):
        assert bst.contains(7) == True

    def test_contains_false(self, bst):
        assert bst.contains(10) == False

    def test_balance_positive(self, bst):
        assert bst.balance() == 1

    def test_balance_negative(self):
        bst = Bst([5, 7, 3, 2, 1])
        assert bst.balance() == -2

    def test_in_order(self, bst):
        assert list(bst.in_order()) == [3, 5, 7]

    def test_pre_order(self, bst):
        assert list(bst.pre_order()) == [5, 3, 7]

    def test_post_order(self, bst):
        assert list(bst.post_order()) == [3, 7, 5]

    def test_breadth_first(self, bst):
        assert list(bst.breadth_first()) == [5, 3, 7]

    def test_delete(self, bst):
        bst.delete(3)
        assert bst.size() == 2
        assert bst.contains(3) == False