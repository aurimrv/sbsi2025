import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from bst2 import Bst, Node

class TestNodeClass:
    
    def test_is_leaf(self):
        node = Node(5)
        assert node._is_leaf() == True

    def test_is_interior(self):
        node1 = Node(5)
        node2 = Node(3)
        node1.left = node2
        assert node1._is_interior() == True

    def test_onlychild_left(self):
        node1 = Node(5)
        node2 = Node(3)
        node1.left = node2
        assert node1._onlychild() == 'left'

    def test_onlychild_right(self):
        node1 = Node(5)
        node2 = Node(7)
        node1.right = node2
        assert node1._onlychild() == 'right'

    def test_side_left(self):
        node1 = Node(5)
        node2 = Node(3, node1)
        node1.left = node2
        assert node2._side() == 'left'

    def test_side_right(self):
        node1 = Node(5)
        node2 = Node(7, node1)
        node1.right = node2
        assert node2._side() == 'right'

class TestBstClass:
    
    def test_insert(self):
        tree = Bst()
        tree.insert(5)
        tree.insert(3)
        assert tree.root.left.val == 3

    def test_search(self):
        tree = Bst([5, 3, 7])
        assert tree.search(3).val == 3

    def test_size(self):
        tree = Bst([5, 3, 7])
        assert tree.size() == 3

    def test_depth(self):
        tree = Bst([5, 3, 7])
        assert tree.depth() == 2

    def test_contains_true(self):
        tree = Bst([5, 3, 7])
        assert tree.contains(3) == True

    def test_contains_false(self):
        tree = Bst([5, 3, 7])
        assert tree.contains(9) == False

    def test_balance_positive(self):
        tree = Bst([5, 3, 1])
        assert tree.balance() == 1

    def test_balance_negative(self):
        tree = Bst([5, 7, 8])
        assert tree.balance() == -1

    def test_in_order(self):
        tree = Bst([5, 3, 7])
        assert list(tree.in_order()) == [3, 5, 7]

    def test_pre_order(self):
        tree = Bst([5, 3, 7])
        assert list(tree.pre_order()) == [5, 3, 7]

    def test_post_order(self):
        tree = Bst([5, 3, 7])
        assert list(tree.post_order()) == [3, 7, 5]

    def test_breadth_first(self):
        tree = Bst([5, 3, 7])
        assert list(tree.breadth_first()) == [5, 3, 7]

    def test_delete_leaf_node(self):
        tree = Bst([5, 3, 7])
        tree.delete(3)
        assert tree.root.left is None

    def test_delete_interior_node(self):
        tree = Bst([5, 3, 7, 4])
        tree.delete(3)
        assert tree.root.left.val == 4

    def test_delete_root_node(self):
        tree = Bst([5, 3, 7])
        tree.delete(5)
        assert tree.root.val == 7