[*] Start mutation process:
   - targets: bst2.py
   - tests: ts-3-5/test_3-5_0-8_249.py
[*] 11 tests passed:
   - test_3-5_0-8_249 [0.12546 s]
[*] Start mutants generation and execution:
   - [#   1] AOR bst2: 
--------------------------------------------------------------------------------
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
- 156:         return leftbranch - rightbranch
+ 156:         return leftbranch + rightbranch
  157:     
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
--------------------------------------------------------------------------------
[0.15023 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e4b8310>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:33: AssertionError
   - [#   2] ASR bst2: 
--------------------------------------------------------------------------------
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
   90:             self.root = Node(val)
-  91:             self._size += 1
+  91:             self._size -= 1
   92:         else:
   93:             self._step(val, self.root)
   94:     
   95:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.14823 s] killed by ts-3-5/test_3-5_0-8_249.py::test_size

sample_tree = <bst2.Bst object at 0x7c1a8e3a2470>

    def test_size(sample_tree):
>       assert sample_tree.size() == 7
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:24: AssertionError
   - [#   3] ASR bst2: 
--------------------------------------------------------------------------------
  105:         child = getattr(curr, side)
  106:         if child:
  107:             count = self._step(val, child)
  108:             if curr.height <= count:
- 109:                 curr.height += 1
+ 109:                 curr.height -= 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
  113:             if curr.height == 1:
--------------------------------------------------------------------------------
[0.14936 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e164580>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [#   4] ASR bst2: 
--------------------------------------------------------------------------------
  108:             if curr.height <= count:
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
- 112:             self._size += 1
+ 112:             self._size -= 1
  113:             if curr.height == 1:
  114:                 curr.height += 1
  115:         return curr
  116:     
--------------------------------------------------------------------------------
[0.15035 s] killed by ts-3-5/test_3-5_0-8_249.py::test_size

sample_tree = <bst2.Bst object at 0x7c1a8e030eb0>

    def test_size(sample_tree):
>       assert sample_tree.size() == 7
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:24: AssertionError
   - [#   5] ASR bst2: 
--------------------------------------------------------------------------------
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
  113:             if curr.height == 1:
- 114:                 curr.height += 1
+ 114:                 curr.height -= 1
  115:         return curr
  116:     
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
--------------------------------------------------------------------------------
[0.17529 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e7d25c0>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [#   6] ASR bst2: 
--------------------------------------------------------------------------------
  224:                 self.root = None
  225:         
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
- 228:             self._size += 1
+ 228:             self._size -= 1
  229:             self.delete(next_node.val)
  230:             node.val = next_node.val
  231:         else:
  232:             
--------------------------------------------------------------------------------
[0.12662 s] survived
   - [#   7] ASR bst2: 
--------------------------------------------------------------------------------
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
  238:                 self.root = child
  239:         
- 240:         self._size -= 1
+ 240:         self._size += 1
  241:     
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
--------------------------------------------------------------------------------
[0.12197 s] survived
   - [#   8] CDI bst2: 
--------------------------------------------------------------------------------
    5: 
    6: class Node(object):
    7:     '''Node, or leaf of the BST.'''
    8:     
-   9:     def __init__(self, val=None, parent=None):
-  10:         '''Create node object.'''
-  11:         self.val = val
-  12:         self.right = None
-  13:         self.left = None
-  14:         self.parent = parent
-  15:         self.height = 1
-  16:     
+   9:     @classmethod
+  10:     def __init__(self, val=None, parent=None):
+  11:         '''Create node object.'''
+  12:         self.val = val
+  13:         self.right = None
+  14:         self.left = None
+  15:         self.parent = parent
+  16:         self.height = 1
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
   19:         return (self.right is None and self.left is None)
   20:     
--------------------------------------------------------------------------------
[0.15694 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e2ff8b0>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AttributeError: 'NoneType' object has no attribute 'val'

ts-3-5/test_3-5_0-8_249.py:21: AttributeError
   - [#   9] CDI bst2: 
--------------------------------------------------------------------------------
   13:         self.left = None
   14:         self.parent = parent
   15:         self.height = 1
   16:     
-  17:     def _is_leaf(self):
-  18:         '''Return true if a leaf.'''
-  19:         return (self.right is None and self.left is None)
-  20:     
+  17:     @classmethod
+  18:     def _is_leaf(self):
+  19:         '''Return true if a leaf.'''
+  20:         return (self.right is None and self.left is None)
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
   24:     
--------------------------------------------------------------------------------
[0.15362 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e32d1b0>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:220: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'right'

bst2:20: AttributeError
   - [#  10] CDI bst2: 
--------------------------------------------------------------------------------
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
   19:         return (self.right is None and self.left is None)
   20:     
-  21:     def _is_interior(self):
-  22:         '''Return true if a interior node.'''
-  23:         return (self.right is not None and self.left is not None)
-  24:     
+  21:     @classmethod
+  22:     def _is_interior(self):
+  23:         '''Return true if a interior node.'''
+  24:         return (self.right is not None and self.left is not None)
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
--------------------------------------------------------------------------------
[0.12822 s] survived
   - [#  11] CDI bst2: 
--------------------------------------------------------------------------------
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
   24:     
-  25:     def _onlychild(self):
-  26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
-  28:             return 'left'
-  29:         if (self.right and not (self.left)):
-  30:             return 'right'
-  31:     
+  25:     @classmethod
+  26:     def _onlychild(self):
+  27:         '''Return string depending on children.'''
+  28:         if (self.left and not (self.right)):
+  29:             return 'left'
+  30:         if (self.right and not (self.left)):
+  31:             return 'right'
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
   34:         if self.parent:
   35:             return 'left' if self.parent.left == self else 'right'
--------------------------------------------------------------------------------
[0.12736 s] survived
   - [#  12] CDI bst2: 
--------------------------------------------------------------------------------
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
-  32:     def _side(self):
-  33:         '''Return if left or right child of parent.'''
-  34:         if self.parent:
-  35:             return 'left' if self.parent.left == self else 'right'
-  36: 
+  32:     @classmethod
+  33:     def _side(self):
+  34:         '''Return if left or right child of parent.'''
+  35:         if self.parent:
+  36:             return 'left' if self.parent.left == self else 'right'
   37: 
   38: class Bst(object):
   39:     '''Binary Search Tree.
   40: 
--------------------------------------------------------------------------------
[0.15292 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e428310>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:222: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'parent'

bst2:35: AttributeError
   - [#  13] CDI bst2: 
--------------------------------------------------------------------------------
   74:     using breadth frist traversal, one at a time.
   75: 
   76:     '''
   77:     
-  78:     def __init__(self, data=None):
-  79:         '''Initialize tree.'''
-  80:         self._size = 0
-  81:         self.root = None
-  82:         
-  83:         if data:
-  84:             for i in data:
-  85:                 self.insert(i)
-  86:     
+  78:     @classmethod
+  79:     def __init__(self, data=None):
+  80:         '''Initialize tree.'''
+  81:         self._size = 0
+  82:         self.root = None
+  83:         
+  84:         if data:
+  85:             for i in data:
+  86:                 self.insert(i)
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
   90:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.14645 s] incompetent

TypeError: bst2:86: TypeError: Bst.insert() missing 1 required positional argument: 'val'

   - [#  14] CDI bst2: 
--------------------------------------------------------------------------------
   83:         if data:
   84:             for i in data:
   85:                 self.insert(i)
   86:     
-  87:     def insert(self, val):
-  88:         '''Insert val into BST. If val is already present will be ignored.'''
-  89:         if not (self.root):
-  90:             self.root = Node(val)
-  91:             self._size += 1
-  92:         else:
-  93:             self._step(val, self.root)
-  94:     
+  87:     @classmethod
+  88:     def insert(self, val):
+  89:         '''Insert val into BST. If val is already present will be ignored.'''
+  90:         if not (self.root):
+  91:             self.root = Node(val)
+  92:             self._size += 1
+  93:         else:
+  94:             self._step(val, self.root)
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
--------------------------------------------------------------------------------
[0.14666 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, val = 50

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:90: AttributeError
   - [#  15] CDI bst2: 
--------------------------------------------------------------------------------
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
   94:     
-  95:     def _step(self, val, curr):
-  96:         '''Decide left or right and returns height.'''
-  97:         if val < curr.val:
-  98:             curr = self._set_child(curr, 'left', val)
-  99:         elif val > curr.val:
- 100:             curr = self._set_child(curr, 'right', val)
- 101:         return curr.height
- 102:     
+  95:     @classmethod
+  96:     def _step(self, val, curr):
+  97:         '''Decide left or right and returns height.'''
+  98:         if val < curr.val:
+  99:             curr = self._set_child(curr, 'left', val)
+ 100:         elif val > curr.val:
+ 101:             curr = self._set_child(curr, 'right', val)
+ 102:         return curr.height
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
--------------------------------------------------------------------------------
[0.14486 s] incompetent

TypeError: bst2:99: TypeError: Bst._set_child() missing 1 required positional argument: 'val'

   - [#  16] CDI bst2: 
--------------------------------------------------------------------------------
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
- 103:     def _set_child(self, curr, side, val):
- 104:         '''Helping.'''
- 105:         child = getattr(curr, side)
- 106:         if child:
- 107:             count = self._step(val, child)
- 108:             if curr.height <= count:
- 109:                 curr.height += 1
- 110:         else:
- 111:             setattr(curr, side, Node(val, curr))
- 112:             self._size += 1
- 113:             if curr.height == 1:
- 114:                 curr.height += 1
- 115:         return curr
- 116:     
+ 103:     @classmethod
+ 104:     def _set_child(self, curr, side, val):
+ 105:         '''Helping.'''
+ 106:         child = getattr(curr, side)
+ 107:         if child:
+ 108:             count = self._step(val, child)
+ 109:             if curr.height <= count:
+ 110:                 curr.height += 1
+ 111:         else:
+ 112:             setattr(curr, side, Node(val, curr))
+ 113:             self._size += 1
+ 114:             if curr.height == 1:
+ 115:                 curr.height += 1
+ 116:         return curr
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
  120:         while curr:
--------------------------------------------------------------------------------
[0.14786 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, curr = <bst2.Node object at 0x7c1a8e1ab130>
side = 'left', val = 30

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'. Did you mean: 'size'?

bst2:113: AttributeError
   - [#  17] CDI bst2: 
--------------------------------------------------------------------------------
  113:             if curr.height == 1:
  114:                 curr.height += 1
  115:         return curr
  116:     
- 117:     def search(self, val):
- 118:         '''Return the node containing val.'''
- 119:         curr = self.root
- 120:         while curr:
- 121:             if curr.val == val:
- 122:                 return curr
- 123:             elif val < curr.val:
- 124:                 curr = curr.left
- 125:             else:
- 126:                 curr = curr.right
- 127:     
+ 117:     @classmethod
+ 118:     def search(self, val):
+ 119:         '''Return the node containing val.'''
+ 120:         curr = self.root
+ 121:         while curr:
+ 122:             if curr.val == val:
+ 123:                 return curr
+ 124:             elif val < curr.val:
+ 125:                 curr = curr.left
+ 126:             else:
+ 127:                 curr = curr.right
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
  131:     
--------------------------------------------------------------------------------
[0.15029 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e05dba0>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True

ts-3-5/test_3-5_0-8_249.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:138: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, val = 90

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:120: AttributeError
   - [#  18] CDI bst2: 
--------------------------------------------------------------------------------
  124:                 curr = curr.left
  125:             else:
  126:                 curr = curr.right
  127:     
- 128:     def size(self):
- 129:         '''Return the size of the BST.'''
- 130:         return self._size
- 131:     
+ 128:     @classmethod
+ 129:     def size(self):
+ 130:         '''Return the size of the BST.'''
+ 131:         return self._size
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
  134:         return 0 if not (self.root) else self.root.height
  135:     
--------------------------------------------------------------------------------
[0.18134 s] killed by ts-3-5/test_3-5_0-8_249.py::test_size

sample_tree = <bst2.Bst object at 0x7c1a8e41efb0>

    def test_size(sample_tree):
>       assert sample_tree.size() == 7

ts-3-5/test_3-5_0-8_249.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'. Did you mean: 'size'?

bst2:131: AttributeError
   - [#  19] CDI bst2: 
--------------------------------------------------------------------------------
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
  131:     
- 132:     def depth(self):
- 133:         '''Return depth of the BST, representing total levels.'''
- 134:         return 0 if not (self.root) else self.root.height
- 135:     
+ 132:     @classmethod
+ 133:     def depth(self):
+ 134:         '''Return depth of the BST, representing total levels.'''
+ 135:         return 0 if not (self.root) else self.root.height
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
  139:     
--------------------------------------------------------------------------------
[0.15256 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e609390>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3

ts-3-5/test_3-5_0-8_249.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:135: AttributeError
   - [#  20] CDI bst2: 
--------------------------------------------------------------------------------
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
  134:         return 0 if not (self.root) else self.root.height
  135:     
- 136:     def contains(self, val):
- 137:         '''Return true if val is in the bst.'''
- 138:         return self.search(val) is not None
- 139:     
+ 136:     @classmethod
+ 137:     def contains(self, val):
+ 138:         '''Return true if val is in the bst.'''
+ 139:         return self.search(val) is not None
  140:     def balance(self, tree=None):
  141:         '''Return an integer of how well the tree is balanced.
  142: 
  143:         Trees which are higher on the left than the right should return a
--------------------------------------------------------------------------------
[0.14850 s] incompetent

TypeError: bst2:139: TypeError: Bst.search() missing 1 required positional argument: 'val'

   - [#  21] CDI bst2: 
--------------------------------------------------------------------------------
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
  139:     
- 140:     def balance(self, tree=None):
- 141:         '''Return an integer of how well the tree is balanced.
- 142: 
- 143:         Trees which are higher on the left than the right should return a
- 144:         positive value, trees which are higher on the right than the left
- 145:         should return a negative value. An ideally-balanced tree should
- 146:         return 0.
- 147:         '''
- 148:         if not tree:
- 149:             tree = self.root
- 150:             if not tree:
- 151:                 return 0
- 152:         
- 153:         leftbranch = 0 if not (tree.left) else tree.left.height
- 154:         rightbranch = 0 if not (tree.right) else tree.right.height
- 155:         
- 156:         return leftbranch - rightbranch
- 157:     
+ 140:     @classmethod
+ 141:     def balance(self, tree=None):
+ 142:         '''Return an integer of how well the tree is balanced.
+ 143: 
+ 144:         Trees which are higher on the left than the right should return a
+ 145:         positive value, trees which are higher on the right than the left
+ 146:         should return a negative value. An ideally-balanced tree should
+ 147:         return 0.
+ 148:         '''
+ 149:         if not tree:
+ 150:             tree = self.root
+ 151:             if not tree:
+ 152:                 return 0
+ 153:         
+ 154:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 155:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 156:         
+ 157:         return leftbranch - rightbranch
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
  161:             node = self.root
--------------------------------------------------------------------------------
[0.15188 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e1fe830>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0

ts-3-5/test_3-5_0-8_249.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, tree = None

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:150: AttributeError
   - [#  22] CDI bst2: 
--------------------------------------------------------------------------------
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
  156:         return leftbranch - rightbranch
  157:     
- 158:     def pre_order(self, node='root'):
- 159:         '''Depth first pre-order traversal of tree.'''
- 160:         if node == 'root':
- 161:             node = self.root
- 162:         
- 163:         if not node:
- 164:             return
- 165:         
- 166:         yield node.val
- 167:         
- 168:         for n in self.pre_order(node=node.left):
- 169:             yield n
- 170:         for n in self.pre_order(node=node.right):
- 171:             yield n
- 172:     
+ 158:     @classmethod
+ 159:     def pre_order(self, node='root'):
+ 160:         '''Depth first pre-order traversal of tree.'''
+ 161:         if node == 'root':
+ 162:             node = self.root
+ 163:         
+ 164:         if not node:
+ 165:             return
+ 166:         
+ 167:         yield node.val
+ 168:         
+ 169:         for n in self.pre_order(node=node.left):
+ 170:             yield n
+ 171:         for n in self.pre_order(node=node.right):
+ 172:             yield n
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
  176:             node = self.root
--------------------------------------------------------------------------------
[0.15432 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8dfbc040>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:162: AttributeError
   - [#  23] CDI bst2: 
--------------------------------------------------------------------------------
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
  172:     
- 173:     def in_order(self, node='root'):
- 174:         '''Depth first in-order traversal of tree.'''
- 175:         if node == 'root':
- 176:             node = self.root
- 177:         
- 178:         if not node:
- 179:             return
- 180:         
- 181:         for n in self.in_order(node=node.left):
- 182:             yield n
- 183:         yield node.val
- 184:         for n in self.in_order(node=node.right):
- 185:             yield n
- 186:     
+ 173:     @classmethod
+ 174:     def in_order(self, node='root'):
+ 175:         '''Depth first in-order traversal of tree.'''
+ 176:         if node == 'root':
+ 177:             node = self.root
+ 178:         
+ 179:         if not node:
+ 180:             return
+ 181:         
+ 182:         for n in self.in_order(node=node.left):
+ 183:             yield n
+ 184:         yield node.val
+ 185:         for n in self.in_order(node=node.right):
+ 186:             yield n
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
  190:             node = self.root
--------------------------------------------------------------------------------
[0.17426 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e609270>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:177: AttributeError
   - [#  24] CDI bst2: 
--------------------------------------------------------------------------------
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
  186:     
- 187:     def post_order(self, node='root'):
- 188:         '''Depth frist post_order traversal of tree.'''
- 189:         if node == 'root':
- 190:             node = self.root
- 191:         
- 192:         if not node:
- 193:             return
- 194:         
- 195:         for n in self.post_order(node=node.left):
- 196:             yield n
- 197:         for n in self.post_order(node=node.right):
- 198:             yield n
- 199:         yield node.val
- 200:     
+ 187:     @classmethod
+ 188:     def post_order(self, node='root'):
+ 189:         '''Depth frist post_order traversal of tree.'''
+ 190:         if node == 'root':
+ 191:             node = self.root
+ 192:         
+ 193:         if not node:
+ 194:             return
+ 195:         
+ 196:         for n in self.post_order(node=node.left):
+ 197:             yield n
+ 198:         for n in self.post_order(node=node.right):
+ 199:             yield n
+ 200:         yield node.val
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.15343 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e2f8ca0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, node = 'root'

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:191: AttributeError
   - [#  25] CDI bst2: 
--------------------------------------------------------------------------------
  197:         for n in self.post_order(node=node.right):
  198:             yield n
  199:         yield node.val
  200:     
- 201:     def breadth_first(self):
- 202:         '''Breadth first traversal of tree.'''
- 203:         q = Queue()
- 204:         q.enqueue(self.root)
- 205:         while q.peek():
- 206:             node = q.dequeue()
- 207:             yield node.val
- 208:             if node.left:
- 209:                 q.enqueue(node.left)
- 210:             if node.right:
- 211:                 q.enqueue(node.right)
- 212:     
+ 201:     @classmethod
+ 202:     def breadth_first(self):
+ 203:         '''Breadth first traversal of tree.'''
+ 204:         q = Queue()
+ 205:         q.enqueue(self.root)
+ 206:         while q.peek():
+ 207:             node = q.dequeue()
+ 208:             yield node.val
+ 209:             if node.left:
+ 210:                 q.enqueue(node.left)
+ 211:             if node.right:
+ 212:                 q.enqueue(node.right)
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
  216:             return
--------------------------------------------------------------------------------
[0.15735 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e454070>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]

ts-3-5/test_3-5_0-8_249.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>

>   ???
E   AttributeError: type object 'Bst' has no attribute 'root'

bst2:205: AttributeError
   - [#  26] CDI bst2: 
--------------------------------------------------------------------------------
  209:                 q.enqueue(node.left)
  210:             if node.right:
  211:                 q.enqueue(node.right)
  212:     
- 213:     def delete(self, val):
- 214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
- 216:             return
- 217:         
- 218:         node = self.search(val)
- 219:         
- 220:         if node._is_leaf():
- 221:             if node.parent:
- 222:                 setattr(node.parent, node._side(), None)
- 223:             else:
- 224:                 self.root = None
- 225:         
- 226:         elif node._is_interior():
- 227:             next_node = self._find_replacement(node)
- 228:             self._size += 1
- 229:             self.delete(next_node.val)
- 230:             node.val = next_node.val
- 231:         else:
- 232:             
- 233:             child = getattr(node, node._onlychild())
- 234:             if node.parent:
- 235:                 child.parent = node.parent
- 236:                 setattr(node.parent, node._side(), child)
- 237:             else:
- 238:                 self.root = child
- 239:         
- 240:         self._size -= 1
- 241:     
+ 213:     @classmethod
+ 214:     def delete(self, val):
+ 215:         '''Remove a node from the tree.'''
+ 216:         if (self._size < 1 or not (self.contains(val))):
+ 217:             return
+ 218:         
+ 219:         node = self.search(val)
+ 220:         
+ 221:         if node._is_leaf():
+ 222:             if node.parent:
+ 223:                 setattr(node.parent, node._side(), None)
+ 224:             else:
+ 225:                 self.root = None
+ 226:         
+ 227:         elif node._is_interior():
+ 228:             next_node = self._find_replacement(node)
+ 229:             self._size += 1
+ 230:             self.delete(next_node.val)
+ 231:             node.val = next_node.val
+ 232:         else:
+ 233:             
+ 234:             child = getattr(node, node._onlychild())
+ 235:             if node.parent:
+ 236:                 child.parent = node.parent
+ 237:                 setattr(node.parent, node._side(), child)
+ 238:             else:
+ 239:                 self.root = child
+ 240:         
+ 241:         self._size -= 1
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
  245:             return self._findmin(node.right)
--------------------------------------------------------------------------------
[0.16006 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e095c90>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'bst2.Bst'>, val = 20

>   ???
E   AttributeError: type object 'Bst' has no attribute '_size'. Did you mean: 'size'?

bst2:216: AttributeError
   - [#  27] CDI bst2: 
--------------------------------------------------------------------------------
  238:                 self.root = child
  239:         
  240:         self._size -= 1
  241:     
- 242:     def _find_replacement(self, node):
- 243:         '''Find left most node of right subtree.'''
- 244:         if node.right:
- 245:             return self._findmin(node.right)
- 246:         
- 247:         elif node.parent:
- 248:             if node._side() == 'left':
- 249:                 return self.parent
- 250:             else:
- 251:                 node.parent.right = None
- 252:                 tmp = self._find_replacement(node.parent)
- 253:                 node.parent.right = node
- 254:                 return tmp
- 255:     
+ 242:     @classmethod
+ 243:     def _find_replacement(self, node):
+ 244:         '''Find left most node of right subtree.'''
+ 245:         if node.right:
+ 246:             return self._findmin(node.right)
+ 247:         
+ 248:         elif node.parent:
+ 249:             if node._side() == 'left':
+ 250:                 return self.parent
+ 251:             else:
+ 252:                 node.parent.right = None
+ 253:                 tmp = self._find_replacement(node.parent)
+ 254:                 node.parent.right = node
+ 255:                 return tmp
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
  259:             node = node.left
--------------------------------------------------------------------------------
[0.12751 s] survived
   - [#  28] CDI bst2: 
--------------------------------------------------------------------------------
  252:                 tmp = self._find_replacement(node.parent)
  253:                 node.parent.right = node
  254:                 return tmp
  255:     
- 256:     def _findmin(self, node):
- 257:         '''Find min of subtree, Min is always left most node.'''
- 258:         while node.left:
- 259:             node = node.left
- 260:         return node
+ 256:     @classmethod
+ 257:     def _findmin(self, node):
+ 258:         '''Find min of subtree, Min is always left most node.'''
+ 259:         while node.left:
+ 260:             node = node.left
+ 261:         return node
--------------------------------------------------------------------------------
[0.12875 s] survived
   - [#  29] COD bst2: 
--------------------------------------------------------------------------------
   23:         return (self.right is not None and self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
+  27:         if (self.left and self.right):
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
--------------------------------------------------------------------------------
[0.12961 s] survived
   - [#  30] COD bst2: 
--------------------------------------------------------------------------------
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
-  29:         if (self.right and not (self.left)):
+  29:         if (self.right and self.left):
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.12808 s] survived
   - [#  31] COD bst2: 
--------------------------------------------------------------------------------
   85:                 self.insert(i)
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
-  89:         if not (self.root):
+  89:         if self.root:
   90:             self.root = Node(val)
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.17485 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e1acf40>, val = 50, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

bst2:97: AttributeError
   - [#  32] COD bst2: 
--------------------------------------------------------------------------------
  130:         return self._size
  131:     
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
- 134:         return 0 if not (self.root) else self.root.height
+ 134:         return 0 if self.root else self.root.height
  135:     
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.15218 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e234a60>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [#  33] COD bst2: 
--------------------------------------------------------------------------------
  144:         positive value, trees which are higher on the right than the left
  145:         should return a negative value. An ideally-balanced tree should
  146:         return 0.
  147:         '''
- 148:         if not tree:
+ 148:         if tree:
  149:             tree = self.root
  150:             if not tree:
  151:                 return 0
  152:         
--------------------------------------------------------------------------------
[0.14949 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e3d42b0>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0

ts-3-5/test_3-5_0-8_249.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e3d42b0>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

bst2:153: AttributeError
   - [#  34] COD bst2: 
--------------------------------------------------------------------------------
  146:         return 0.
  147:         '''
  148:         if not tree:
  149:             tree = self.root
- 150:             if not tree:
+ 150:             if tree:
  151:                 return 0
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
--------------------------------------------------------------------------------
[0.12520 s] survived
   - [#  35] COD bst2: 
--------------------------------------------------------------------------------
  149:             tree = self.root
  150:             if not tree:
  151:                 return 0
  152:         
- 153:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 153:         leftbranch = 0 if tree.left else tree.left.height
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
  156:         return leftbranch - rightbranch
  157:     
--------------------------------------------------------------------------------
[0.15236 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e428b50>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:33: AssertionError
   - [#  36] COD bst2: 
--------------------------------------------------------------------------------
  150:             if not tree:
  151:                 return 0
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
- 154:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 154:         rightbranch = 0 if tree.right else tree.right.height
  155:         
  156:         return leftbranch - rightbranch
  157:     
  158:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.15134 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8dfeada0>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:33: AssertionError
   - [#  37] COD bst2: 
--------------------------------------------------------------------------------
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
  161:             node = self.root
  162:         
- 163:         if not node:
+ 163:         if node:
  164:             return
  165:         
  166:         yield node.val
  167:         
--------------------------------------------------------------------------------
[0.15412 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e7d28f0>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [#  38] COD bst2: 
--------------------------------------------------------------------------------
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
  176:             node = self.root
  177:         
- 178:         if not node:
+ 178:         if node:
  179:             return
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
--------------------------------------------------------------------------------
[0.15443 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e4e45e0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [#  39] COD bst2: 
--------------------------------------------------------------------------------
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
  190:             node = self.root
  191:         
- 192:         if not node:
+ 192:         if node:
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
--------------------------------------------------------------------------------
[0.15412 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e5fed10>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [#  40] COD bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if (self._size < 1 or self.contains(val)):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.18622 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e65d7e0>

    def test_delete(sample_tree):
        sample_tree.delete(20)
>       assert sample_tree.contains(20) == False
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:49: AssertionError
   - [#  41] COI bst2: 
--------------------------------------------------------------------------------
   23:         return (self.right is not None and self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
+  27:         if not ((self.left and not (self.right))):
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
--------------------------------------------------------------------------------
[0.12874 s] survived
   - [#  42] COI bst2: 
--------------------------------------------------------------------------------
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
-  29:         if (self.right and not (self.left)):
+  29:         if not ((self.right and not (self.left))):
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.12860 s] survived
   - [#  43] COI bst2: 
--------------------------------------------------------------------------------
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
-  34:         if self.parent:
+  34:         if not (self.parent):
   35:             return 'left' if self.parent.left == self else 'right'
   36: 
   37: 
   38: class Bst(object):
--------------------------------------------------------------------------------
[0.15200 s] incompetent

TypeError: bst2:222: TypeError: attribute name must be string, not 'NoneType'

   - [#  44] COI bst2: 
--------------------------------------------------------------------------------
   79:         '''Initialize tree.'''
   80:         self._size = 0
   81:         self.root = None
   82:         
-  83:         if data:
+  83:         if not data:
   84:             for i in data:
   85:                 self.insert(i)
   86:     
   87:     def insert(self, val):
--------------------------------------------------------------------------------
[0.15016 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e5d86a0>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AttributeError: 'NoneType' object has no attribute 'val'

ts-3-5/test_3-5_0-8_249.py:21: AttributeError
   - [#  45] COI bst2: 
--------------------------------------------------------------------------------
   85:                 self.insert(i)
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
-  89:         if not (self.root):
+  89:         if not ((not (self.root))):
   90:             self.root = Node(val)
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.14656 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e563df0>, val = 50, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

bst2:97: AttributeError
   - [#  46] COI bst2: 
--------------------------------------------------------------------------------
   93:             self._step(val, self.root)
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
-  97:         if val < curr.val:
+  97:         if not (val < curr.val):
   98:             curr = self._set_child(curr, 'left', val)
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
--------------------------------------------------------------------------------
[0.14640 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e237f70>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [#  47] COI bst2: 
--------------------------------------------------------------------------------
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
-  99:         elif val > curr.val:
+  99:         elif not (val > curr.val):
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
  103:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.14925 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8dfe9690>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [#  48] COI bst2: 
--------------------------------------------------------------------------------
  102:     
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
- 106:         if child:
+ 106:         if not child:
  107:             count = self._step(val, child)
  108:             if curr.height <= count:
  109:                 curr.height += 1
  110:         else:
--------------------------------------------------------------------------------
[0.14880 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
bst2:107: in _set_child
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e25ca30>, val = 30, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

bst2:97: AttributeError
   - [#  49] COI bst2: 
--------------------------------------------------------------------------------
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
  107:             count = self._step(val, child)
- 108:             if curr.height <= count:
+ 108:             if not (curr.height <= count):
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
--------------------------------------------------------------------------------
[0.18078 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8df50fd0>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [#  50] COI bst2: 
--------------------------------------------------------------------------------
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
- 113:             if curr.height == 1:
+ 113:             if not (curr.height == 1):
  114:                 curr.height += 1
  115:         return curr
  116:     
  117:     def search(self, val):
--------------------------------------------------------------------------------
[0.15147 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e235810>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [#  51] COI bst2: 
--------------------------------------------------------------------------------
  116:     
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
- 120:         while curr:
+ 120:         while not curr:
  121:             if curr.val == val:
  122:                 return curr
  123:             elif val < curr.val:
  124:                 curr = curr.left
--------------------------------------------------------------------------------
[0.14868 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e609240>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [#  52] COI bst2: 
--------------------------------------------------------------------------------
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
  120:         while curr:
- 121:             if curr.val == val:
+ 121:             if not (curr.val == val):
  122:                 return curr
  123:             elif val < curr.val:
  124:                 curr = curr.left
  125:             else:
--------------------------------------------------------------------------------
[0.14756 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e129f00>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:21: AssertionError
   - [#  53] COI bst2: 
--------------------------------------------------------------------------------
  119:         curr = self.root
  120:         while curr:
  121:             if curr.val == val:
  122:                 return curr
- 123:             elif val < curr.val:
+ 123:             elif not (val < curr.val):
  124:                 curr = curr.left
  125:             else:
  126:                 curr = curr.right
  127:     
--------------------------------------------------------------------------------
[0.14894 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e5d4700>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [#  54] COI bst2: 
--------------------------------------------------------------------------------
  144:         positive value, trees which are higher on the right than the left
  145:         should return a negative value. An ideally-balanced tree should
  146:         return 0.
  147:         '''
- 148:         if not tree:
+ 148:         if not ((not tree)):
  149:             tree = self.root
  150:             if not tree:
  151:                 return 0
  152:         
--------------------------------------------------------------------------------
[0.15324 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e5e7e80>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0

ts-3-5/test_3-5_0-8_249.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e5e7e80>, tree = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

bst2:153: AttributeError
   - [#  55] COI bst2: 
--------------------------------------------------------------------------------
  146:         return 0.
  147:         '''
  148:         if not tree:
  149:             tree = self.root
- 150:             if not tree:
+ 150:             if not ((not tree)):
  151:                 return 0
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
--------------------------------------------------------------------------------
[0.12674 s] survived
   - [#  56] COI bst2: 
--------------------------------------------------------------------------------
  156:         return leftbranch - rightbranch
  157:     
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
- 160:         if node == 'root':
+ 160:         if not (node == 'root'):
  161:             node = self.root
  162:         
  163:         if not node:
  164:             return
--------------------------------------------------------------------------------
[0.15452 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e197100>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e197100>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

bst2:166: AttributeError
   - [#  57] COI bst2: 
--------------------------------------------------------------------------------
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
  161:             node = self.root
  162:         
- 163:         if not node:
+ 163:         if not ((not node)):
  164:             return
  165:         
  166:         yield node.val
  167:         
--------------------------------------------------------------------------------
[0.15371 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e490700>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [#  58] COI bst2: 
--------------------------------------------------------------------------------
  171:             yield n
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
- 175:         if node == 'root':
+ 175:         if not (node == 'root'):
  176:             node = self.root
  177:         
  178:         if not node:
  179:             return
--------------------------------------------------------------------------------
[0.18749 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e71dd20>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e71dd20>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

bst2:181: AttributeError
   - [#  59] COI bst2: 
--------------------------------------------------------------------------------
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
  176:             node = self.root
  177:         
- 178:         if not node:
+ 178:         if not ((not node)):
  179:             return
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
--------------------------------------------------------------------------------
[0.17394 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e8cd7b0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [#  60] COI bst2: 
--------------------------------------------------------------------------------
  185:             yield n
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
- 189:         if node == 'root':
+ 189:         if not (node == 'root'):
  190:             node = self.root
  191:         
  192:         if not node:
  193:             return
--------------------------------------------------------------------------------
[0.15672 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8df5f5b0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8df5f5b0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

bst2:195: AttributeError
   - [#  61] COI bst2: 
--------------------------------------------------------------------------------
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
  190:             node = self.root
  191:         
- 192:         if not node:
+ 192:         if not ((not node)):
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
--------------------------------------------------------------------------------
[0.16158 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e263400>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [#  62] COI bst2: 
--------------------------------------------------------------------------------
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
- 205:         while q.peek():
+ 205:         while not (q.peek()):
  206:             node = q.dequeue()
  207:             yield node.val
  208:             if node.left:
  209:                 q.enqueue(node.left)
--------------------------------------------------------------------------------
[0.15786 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e19b430>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [#  63] COI bst2: 
--------------------------------------------------------------------------------
  204:         q.enqueue(self.root)
  205:         while q.peek():
  206:             node = q.dequeue()
  207:             yield node.val
- 208:             if node.left:
+ 208:             if not (node.left):
  209:                 q.enqueue(node.left)
  210:             if node.right:
  211:                 q.enqueue(node.right)
  212:     
--------------------------------------------------------------------------------
[0.15421 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e7d2e00>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [#  64] COI bst2: 
--------------------------------------------------------------------------------
  206:             node = q.dequeue()
  207:             yield node.val
  208:             if node.left:
  209:                 q.enqueue(node.left)
- 210:             if node.right:
+ 210:             if not (node.right):
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
--------------------------------------------------------------------------------
[0.15380 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e562770>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [#  65] COI bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if not ((self._size < 1 or not (self.contains(val)))):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.15415 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e212e30>

    def test_delete(sample_tree):
        sample_tree.delete(20)
>       assert sample_tree.contains(20) == False
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:49: AssertionError
   - [#  66] COI bst2: 
--------------------------------------------------------------------------------
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
- 220:         if node._is_leaf():
+ 220:         if not (node._is_leaf()):
  221:             if node.parent:
  222:                 setattr(node.parent, node._side(), None)
  223:             else:
  224:                 self.root = None
--------------------------------------------------------------------------------
[0.15259 s] incompetent

TypeError: bst2:233: TypeError: getattr(): attribute name must be string

   - [#  67] COI bst2: 
--------------------------------------------------------------------------------
  217:         
  218:         node = self.search(val)
  219:         
  220:         if node._is_leaf():
- 221:             if node.parent:
+ 221:             if not (node.parent):
  222:                 setattr(node.parent, node._side(), None)
  223:             else:
  224:                 self.root = None
  225:         
--------------------------------------------------------------------------------
[0.15945 s] survived
   - [#  68] COI bst2: 
--------------------------------------------------------------------------------
  222:                 setattr(node.parent, node._side(), None)
  223:             else:
  224:                 self.root = None
  225:         
- 226:         elif node._is_interior():
+ 226:         elif not (node._is_interior()):
  227:             next_node = self._find_replacement(node)
  228:             self._size += 1
  229:             self.delete(next_node.val)
  230:             node.val = next_node.val
--------------------------------------------------------------------------------
[0.12990 s] survived
   - [#  69] COI bst2: 
--------------------------------------------------------------------------------
  230:             node.val = next_node.val
  231:         else:
  232:             
  233:             child = getattr(node, node._onlychild())
- 234:             if node.parent:
+ 234:             if not (node.parent):
  235:                 child.parent = node.parent
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
  238:                 self.root = child
--------------------------------------------------------------------------------
[0.12919 s] survived
   - [#  70] COI bst2: 
--------------------------------------------------------------------------------
  240:         self._size -= 1
  241:     
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
- 244:         if node.right:
+ 244:         if not (node.right):
  245:             return self._findmin(node.right)
  246:         
  247:         elif node.parent:
  248:             if node._side() == 'left':
--------------------------------------------------------------------------------
[0.12854 s] survived
   - [#  71] COI bst2: 
--------------------------------------------------------------------------------
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
  245:             return self._findmin(node.right)
  246:         
- 247:         elif node.parent:
+ 247:         elif not (node.parent):
  248:             if node._side() == 'left':
  249:                 return self.parent
  250:             else:
  251:                 node.parent.right = None
--------------------------------------------------------------------------------
[0.12879 s] survived
   - [#  72] COI bst2: 
--------------------------------------------------------------------------------
  244:         if node.right:
  245:             return self._findmin(node.right)
  246:         
  247:         elif node.parent:
- 248:             if node._side() == 'left':
+ 248:             if not (node._side() == 'left'):
  249:                 return self.parent
  250:             else:
  251:                 node.parent.right = None
  252:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.12854 s] survived
   - [#  73] COI bst2: 
--------------------------------------------------------------------------------
  254:                 return tmp
  255:     
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
- 258:         while node.left:
+ 258:         while not (node.left):
  259:             node = node.left
  260:         return node
--------------------------------------------------------------------------------
[0.12726 s] survived
   - [#  74] LCR bst2: 
--------------------------------------------------------------------------------
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
-  19:         return (self.right is None and self.left is None)
+  19:         return (self.right is None or self.left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
--------------------------------------------------------------------------------
[0.12846 s] survived
   - [#  75] LCR bst2: 
--------------------------------------------------------------------------------
   19:         return (self.right is None and self.left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
-  23:         return (self.right is not None and self.left is not None)
+  23:         return (self.right is not None or self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.12847 s] survived
   - [#  76] LCR bst2: 
--------------------------------------------------------------------------------
   23:         return (self.right is not None and self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
+  27:         if (self.left or not (self.right)):
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
--------------------------------------------------------------------------------
[0.14892 s] survived
   - [#  77] LCR bst2: 
--------------------------------------------------------------------------------
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
-  29:         if (self.right and not (self.left)):
+  29:         if (self.right or not (self.left)):
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.12646 s] survived
   - [#  78] LCR bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if (self._size < 1 and not (self.contains(val))):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.12889 s] survived
   - [#  79] OIL bst2: 
--------------------------------------------------------------------------------
   82:         
   83:         if data:
   84:             for i in data:
   85:                 self.insert(i)
-  86:     
+  86:                 break
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
   90:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.15064 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e588850>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AttributeError: 'NoneType' object has no attribute 'val'

ts-3-5/test_3-5_0-8_249.py:21: AttributeError
   - [#  80] OIL bst2: 
--------------------------------------------------------------------------------
  122:                 return curr
  123:             elif val < curr.val:
  124:                 curr = curr.left
  125:             else:
- 126:                 curr = curr.right
+ 126:                 curr = curr.rightbreak
  127:     
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
--------------------------------------------------------------------------------
[0.17729 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e029d80>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [#  81] OIL bst2: 
--------------------------------------------------------------------------------
  166:         yield node.val
  167:         
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
- 170:         for n in self.pre_order(node=node.right):
- 171:             yield n
- 172:     
+ 170:             break
+ 171:         for n in self.pre_order(node=node.right):
+ 172:             yield n
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
  176:             node = self.root
--------------------------------------------------------------------------------
[0.15286 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e0cbf70>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [#  82] OIL bst2: 
--------------------------------------------------------------------------------
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
- 172:     
+ 172:             break
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
  176:             node = self.root
--------------------------------------------------------------------------------
[0.15327 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e29d960>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [#  83] OIL bst2: 
--------------------------------------------------------------------------------
  179:             return
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
- 183:         yield node.val
- 184:         for n in self.in_order(node=node.right):
- 185:             yield n
- 186:     
+ 183:             break
+ 184:         yield node.val
+ 185:         for n in self.in_order(node=node.right):
+ 186:             yield n
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
  190:             node = self.root
--------------------------------------------------------------------------------
[0.15214 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e4c64d0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [#  84] OIL bst2: 
--------------------------------------------------------------------------------
  182:             yield n
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
- 186:     
+ 186:             break
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
  190:             node = self.root
--------------------------------------------------------------------------------
[0.15608 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e188670>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [#  85] OIL bst2: 
--------------------------------------------------------------------------------
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
- 197:         for n in self.post_order(node=node.right):
- 198:             yield n
- 199:         yield node.val
- 200:     
+ 197:             break
+ 198:         for n in self.post_order(node=node.right):
+ 199:             yield n
+ 200:         yield node.val
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.15545 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e8e99f0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [#  86] OIL bst2: 
--------------------------------------------------------------------------------
  195:         for n in self.post_order(node=node.left):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
  198:             yield n
- 199:         yield node.val
- 200:     
+ 199:             break
+ 200:         yield node.val
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.15284 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8dfe87f0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [#  87] OIL bst2: 
--------------------------------------------------------------------------------
  208:             if node.left:
  209:                 q.enqueue(node.left)
  210:             if node.right:
  211:                 q.enqueue(node.right)
- 212:     
+ 212:             break
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
  216:             return
--------------------------------------------------------------------------------
[0.15606 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e3ffc40>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [#  88] OIL bst2: 
--------------------------------------------------------------------------------
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
  259:             node = node.left
- 260:         return node
+ 260:             break
+ 261:         return node
--------------------------------------------------------------------------------
[0.12895 s] survived
   - [#  89] RIL bst2: 
--------------------------------------------------------------------------------
   80:         self._size = 0
   81:         self.root = None
   82:         
   83:         if data:
-  84:             for i in data:
+  84:             for i in reversed(data):
   85:                 self.insert(i)
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
--------------------------------------------------------------------------------
[0.18099 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e0f4970>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [#  90] RIL bst2: 
--------------------------------------------------------------------------------
  164:             return
  165:         
  166:         yield node.val
  167:         
- 168:         for n in self.pre_order(node=node.left):
+ 168:         for n in reversed(self.pre_order(node=node.left)):
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
  172:     
--------------------------------------------------------------------------------
[0.15349 s] incompetent

TypeError: bst2:168: TypeError: 'generator' object is not reversible

   - [#  91] RIL bst2: 
--------------------------------------------------------------------------------
  166:         yield node.val
  167:         
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
- 170:         for n in self.pre_order(node=node.right):
+ 170:         for n in reversed(self.pre_order(node=node.right)):
  171:             yield n
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
--------------------------------------------------------------------------------
[0.15498 s] incompetent

TypeError: bst2:170: TypeError: 'generator' object is not reversible

   - [#  92] RIL bst2: 
--------------------------------------------------------------------------------
  177:         
  178:         if not node:
  179:             return
  180:         
- 181:         for n in self.in_order(node=node.left):
+ 181:         for n in reversed(self.in_order(node=node.left)):
  182:             yield n
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
--------------------------------------------------------------------------------
[0.15233 s] incompetent

TypeError: bst2:181: TypeError: 'generator' object is not reversible

   - [#  93] RIL bst2: 
--------------------------------------------------------------------------------
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
  183:         yield node.val
- 184:         for n in self.in_order(node=node.right):
+ 184:         for n in reversed(self.in_order(node=node.right)):
  185:             yield n
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
--------------------------------------------------------------------------------
[0.15484 s] incompetent

TypeError: bst2:184: TypeError: 'generator' object is not reversible

   - [#  94] RIL bst2: 
--------------------------------------------------------------------------------
  191:         
  192:         if not node:
  193:             return
  194:         
- 195:         for n in self.post_order(node=node.left):
+ 195:         for n in reversed(self.post_order(node=node.left)):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
  198:             yield n
  199:         yield node.val
--------------------------------------------------------------------------------
[0.15438 s] incompetent

TypeError: bst2:195: TypeError: 'generator' object is not reversible

   - [#  95] RIL bst2: 
--------------------------------------------------------------------------------
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
- 197:         for n in self.post_order(node=node.right):
+ 197:         for n in reversed(self.post_order(node=node.right)):
  198:             yield n
  199:         yield node.val
  200:     
  201:     def breadth_first(self):
--------------------------------------------------------------------------------
[0.15328 s] incompetent

TypeError: bst2:197: TypeError: 'generator' object is not reversible

   - [#  96] ROR bst2: 
--------------------------------------------------------------------------------
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
   34:         if self.parent:
-  35:             return 'left' if self.parent.left == self else 'right'
+  35:             return 'left' if self.parent.left != self else 'right'
   36: 
   37: 
   38: class Bst(object):
   39:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.15919 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e29c130>

    def test_delete(sample_tree):
        sample_tree.delete(20)
>       assert sample_tree.contains(20) == False
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:49: AssertionError
   - [#  97] ROR bst2: 
--------------------------------------------------------------------------------
   93:             self._step(val, self.root)
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
-  97:         if val < curr.val:
+  97:         if val > curr.val:
   98:             curr = self._set_child(curr, 'left', val)
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
--------------------------------------------------------------------------------
[0.14952 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e01f730>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [#  98] ROR bst2: 
--------------------------------------------------------------------------------
   93:             self._step(val, self.root)
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
-  97:         if val < curr.val:
+  97:         if val <= curr.val:
   98:             curr = self._set_child(curr, 'left', val)
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
--------------------------------------------------------------------------------
[0.12780 s] survived
   - [#  99] ROR bst2: 
--------------------------------------------------------------------------------
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
-  99:         elif val > curr.val:
+  99:         elif val < curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
  103:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.14855 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e211090>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 100] ROR bst2: 
--------------------------------------------------------------------------------
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
-  99:         elif val > curr.val:
+  99:         elif val >= curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
  103:     def _set_child(self, curr, side, val):
--------------------------------------------------------------------------------
[0.12811 s] survived
   - [# 101] ROR bst2: 
--------------------------------------------------------------------------------
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
  107:             count = self._step(val, child)
- 108:             if curr.height <= count:
+ 108:             if curr.height >= count:
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
--------------------------------------------------------------------------------
[0.14913 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e4c5f00>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [# 102] ROR bst2: 
--------------------------------------------------------------------------------
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
  107:             count = self._step(val, child)
- 108:             if curr.height <= count:
+ 108:             if curr.height < count:
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
--------------------------------------------------------------------------------
[0.15030 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e446d40>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [# 103] ROR bst2: 
--------------------------------------------------------------------------------
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
- 113:             if curr.height == 1:
+ 113:             if curr.height != 1:
  114:                 curr.height += 1
  115:         return curr
  116:     
  117:     def search(self, val):
--------------------------------------------------------------------------------
[0.17848 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e29d690>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [# 104] ROR bst2: 
--------------------------------------------------------------------------------
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
  120:         while curr:
- 121:             if curr.val == val:
+ 121:             if curr.val != val:
  122:                 return curr
  123:             elif val < curr.val:
  124:                 curr = curr.left
  125:             else:
--------------------------------------------------------------------------------
[0.14971 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8dfe84c0>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:21: AssertionError
   - [# 105] ROR bst2: 
--------------------------------------------------------------------------------
  119:         curr = self.root
  120:         while curr:
  121:             if curr.val == val:
  122:                 return curr
- 123:             elif val < curr.val:
+ 123:             elif val > curr.val:
  124:                 curr = curr.left
  125:             else:
  126:                 curr = curr.right
  127:     
--------------------------------------------------------------------------------
[0.14692 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8dfaf730>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 106] ROR bst2: 
--------------------------------------------------------------------------------
  119:         curr = self.root
  120:         while curr:
  121:             if curr.val == val:
  122:                 return curr
- 123:             elif val < curr.val:
+ 123:             elif val <= curr.val:
  124:                 curr = curr.left
  125:             else:
  126:                 curr = curr.right
  127:     
--------------------------------------------------------------------------------
[0.12799 s] survived
   - [# 107] ROR bst2: 
--------------------------------------------------------------------------------
  156:         return leftbranch - rightbranch
  157:     
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
- 160:         if node == 'root':
+ 160:         if node != 'root':
  161:             node = self.root
  162:         
  163:         if not node:
  164:             return
--------------------------------------------------------------------------------
[0.15697 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e50e290>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e50e290>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

bst2:166: AttributeError
   - [# 108] ROR bst2: 
--------------------------------------------------------------------------------
  171:             yield n
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
- 175:         if node == 'root':
+ 175:         if node != 'root':
  176:             node = self.root
  177:         
  178:         if not node:
  179:             return
--------------------------------------------------------------------------------
[0.15501 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e2138b0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e2138b0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

bst2:181: AttributeError
   - [# 109] ROR bst2: 
--------------------------------------------------------------------------------
  185:             yield n
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
- 189:         if node == 'root':
+ 189:         if node != 'root':
  190:             node = self.root
  191:         
  192:         if not node:
  193:             return
--------------------------------------------------------------------------------
[0.15634 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e60f670>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e60f670>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

bst2:195: AttributeError
   - [# 110] ROR bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if (self._size > 1 or not (self.contains(val))):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.15565 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e5c4d00>

    def test_delete(sample_tree):
        sample_tree.delete(20)
>       assert sample_tree.contains(20) == False
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:49: AssertionError
   - [# 111] ROR bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if (self._size <= 1 or not (self.contains(val))):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.12635 s] survived
   - [# 112] ROR bst2: 
--------------------------------------------------------------------------------
  244:         if node.right:
  245:             return self._findmin(node.right)
  246:         
  247:         elif node.parent:
- 248:             if node._side() == 'left':
+ 248:             if node._side() != 'left':
  249:                 return self.parent
  250:             else:
  251:                 node.parent.right = None
  252:                 tmp = self._find_replacement(node.parent)
--------------------------------------------------------------------------------
[0.17623 s] survived
   - [# 113] SDI bst2: 
--------------------------------------------------------------------------------
    5: 
    6: class Node(object):
    7:     '''Node, or leaf of the BST.'''
    8:     
-   9:     def __init__(self, val=None, parent=None):
-  10:         '''Create node object.'''
-  11:         self.val = val
-  12:         self.right = None
-  13:         self.left = None
-  14:         self.parent = parent
-  15:         self.height = 1
-  16:     
+   9:     @staticmethod
+  10:     def __init__(self, val=None, parent=None):
+  11:         '''Create node object.'''
+  12:         self.val = val
+  13:         self.right = None
+  14:         self.left = None
+  15:         self.parent = parent
+  16:         self.height = 1
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
   19:         return (self.right is None and self.left is None)
   20:     
--------------------------------------------------------------------------------
[0.14794 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:90: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 50, val = None, parent = None

>   ???
E   AttributeError: 'int' object has no attribute 'val'

bst2:12: AttributeError
   - [# 114] SDI bst2: 
--------------------------------------------------------------------------------
   13:         self.left = None
   14:         self.parent = parent
   15:         self.height = 1
   16:     
-  17:     def _is_leaf(self):
-  18:         '''Return true if a leaf.'''
-  19:         return (self.right is None and self.left is None)
-  20:     
+  17:     @staticmethod
+  18:     def _is_leaf(self):
+  19:         '''Return true if a leaf.'''
+  20:         return (self.right is None and self.left is None)
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
   24:     
--------------------------------------------------------------------------------
[0.15303 s] incompetent

TypeError: bst2:220: TypeError: Node._is_leaf() missing 1 required positional argument: 'self'

   - [# 115] SDI bst2: 
--------------------------------------------------------------------------------
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
   19:         return (self.right is None and self.left is None)
   20:     
-  21:     def _is_interior(self):
-  22:         '''Return true if a interior node.'''
-  23:         return (self.right is not None and self.left is not None)
-  24:     
+  21:     @staticmethod
+  22:     def _is_interior(self):
+  23:         '''Return true if a interior node.'''
+  24:         return (self.right is not None and self.left is not None)
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
--------------------------------------------------------------------------------
[0.13013 s] survived
   - [# 116] SDI bst2: 
--------------------------------------------------------------------------------
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
   24:     
-  25:     def _onlychild(self):
-  26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
-  28:             return 'left'
-  29:         if (self.right and not (self.left)):
-  30:             return 'right'
-  31:     
+  25:     @staticmethod
+  26:     def _onlychild(self):
+  27:         '''Return string depending on children.'''
+  28:         if (self.left and not (self.right)):
+  29:             return 'left'
+  30:         if (self.right and not (self.left)):
+  31:             return 'right'
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
   34:         if self.parent:
   35:             return 'left' if self.parent.left == self else 'right'
--------------------------------------------------------------------------------
[0.13025 s] survived
   - [# 117] SDI bst2: 
--------------------------------------------------------------------------------
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
-  32:     def _side(self):
-  33:         '''Return if left or right child of parent.'''
-  34:         if self.parent:
-  35:             return 'left' if self.parent.left == self else 'right'
-  36: 
+  32:     @staticmethod
+  33:     def _side(self):
+  34:         '''Return if left or right child of parent.'''
+  35:         if self.parent:
+  36:             return 'left' if self.parent.left == self else 'right'
   37: 
   38: class Bst(object):
   39:     '''Binary Search Tree.
   40: 
--------------------------------------------------------------------------------
[0.15065 s] incompetent

TypeError: bst2:222: TypeError: Node._side() missing 1 required positional argument: 'self'

   - [# 118] SDI bst2: 
--------------------------------------------------------------------------------
   74:     using breadth frist traversal, one at a time.
   75: 
   76:     '''
   77:     
-  78:     def __init__(self, data=None):
-  79:         '''Initialize tree.'''
-  80:         self._size = 0
-  81:         self.root = None
-  82:         
-  83:         if data:
-  84:             for i in data:
-  85:                 self.insert(i)
-  86:     
+  78:     @staticmethod
+  79:     def __init__(self, data=None):
+  80:         '''Initialize tree.'''
+  81:         self._size = 0
+  82:         self.root = None
+  83:         
+  84:         if data:
+  85:             for i in data:
+  86:                 self.insert(i)
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
   90:             self.root = Node(val)
--------------------------------------------------------------------------------
[0.14703 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = [50, 30, 70, 20, 40, 60, ...], data = None

>   ???
E   AttributeError: 'list' object has no attribute '_size'

bst2:81: AttributeError
   - [# 119] SDI bst2: 
--------------------------------------------------------------------------------
   83:         if data:
   84:             for i in data:
   85:                 self.insert(i)
   86:     
-  87:     def insert(self, val):
-  88:         '''Insert val into BST. If val is already present will be ignored.'''
-  89:         if not (self.root):
-  90:             self.root = Node(val)
-  91:             self._size += 1
-  92:         else:
-  93:             self._step(val, self.root)
-  94:     
+  87:     @staticmethod
+  88:     def insert(self, val):
+  89:         '''Insert val into BST. If val is already present will be ignored.'''
+  90:         if not (self.root):
+  91:             self.root = Node(val)
+  92:             self._size += 1
+  93:         else:
+  94:             self._step(val, self.root)
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
--------------------------------------------------------------------------------
[0.14810 s] incompetent

TypeError: bst2:85: TypeError: Bst.insert() missing 1 required positional argument: 'val'

   - [# 120] SDI bst2: 
--------------------------------------------------------------------------------
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
   94:     
-  95:     def _step(self, val, curr):
-  96:         '''Decide left or right and returns height.'''
-  97:         if val < curr.val:
-  98:             curr = self._set_child(curr, 'left', val)
-  99:         elif val > curr.val:
- 100:             curr = self._set_child(curr, 'right', val)
- 101:         return curr.height
- 102:     
+  95:     @staticmethod
+  96:     def _step(self, val, curr):
+  97:         '''Decide left or right and returns height.'''
+  98:         if val < curr.val:
+  99:             curr = self._set_child(curr, 'left', val)
+ 100:         elif val > curr.val:
+ 101:             curr = self._set_child(curr, 'right', val)
+ 102:         return curr.height
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
--------------------------------------------------------------------------------
[0.15010 s] incompetent

TypeError: bst2:93: TypeError: Bst._step() missing 1 required positional argument: 'curr'

   - [# 121] SDI bst2: 
--------------------------------------------------------------------------------
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
- 103:     def _set_child(self, curr, side, val):
- 104:         '''Helping.'''
- 105:         child = getattr(curr, side)
- 106:         if child:
- 107:             count = self._step(val, child)
- 108:             if curr.height <= count:
- 109:                 curr.height += 1
- 110:         else:
- 111:             setattr(curr, side, Node(val, curr))
- 112:             self._size += 1
- 113:             if curr.height == 1:
- 114:                 curr.height += 1
- 115:         return curr
- 116:     
+ 103:     @staticmethod
+ 104:     def _set_child(self, curr, side, val):
+ 105:         '''Helping.'''
+ 106:         child = getattr(curr, side)
+ 107:         if child:
+ 108:             count = self._step(val, child)
+ 109:             if curr.height <= count:
+ 110:                 curr.height += 1
+ 111:         else:
+ 112:             setattr(curr, side, Node(val, curr))
+ 113:             self._size += 1
+ 114:             if curr.height == 1:
+ 115:                 curr.height += 1
+ 116:         return curr
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
  120:         while curr:
--------------------------------------------------------------------------------
[0.14012 s] incompetent

TypeError: bst2:98: TypeError: Bst._set_child() missing 1 required positional argument: 'val'

   - [# 122] SDI bst2: 
--------------------------------------------------------------------------------
  113:             if curr.height == 1:
  114:                 curr.height += 1
  115:         return curr
  116:     
- 117:     def search(self, val):
- 118:         '''Return the node containing val.'''
- 119:         curr = self.root
- 120:         while curr:
- 121:             if curr.val == val:
- 122:                 return curr
- 123:             elif val < curr.val:
- 124:                 curr = curr.left
- 125:             else:
- 126:                 curr = curr.right
- 127:     
+ 117:     @staticmethod
+ 118:     def search(self, val):
+ 119:         '''Return the node containing val.'''
+ 120:         curr = self.root
+ 121:         while curr:
+ 122:             if curr.val == val:
+ 123:                 return curr
+ 124:             elif val < curr.val:
+ 125:                 curr = curr.left
+ 126:             else:
+ 127:                 curr = curr.right
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
  131:     
--------------------------------------------------------------------------------
[0.15044 s] incompetent

TypeError: bst2:138: TypeError: Bst.search() missing 1 required positional argument: 'val'

   - [# 123] SDI bst2: 
--------------------------------------------------------------------------------
  124:                 curr = curr.left
  125:             else:
  126:                 curr = curr.right
  127:     
- 128:     def size(self):
- 129:         '''Return the size of the BST.'''
- 130:         return self._size
- 131:     
+ 128:     @staticmethod
+ 129:     def size(self):
+ 130:         '''Return the size of the BST.'''
+ 131:         return self._size
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
  134:         return 0 if not (self.root) else self.root.height
  135:     
--------------------------------------------------------------------------------
[0.15160 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:24: TypeError: Bst.size() missing 1 required positional argument: 'self'

   - [# 124] SDI bst2: 
--------------------------------------------------------------------------------
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
  131:     
- 132:     def depth(self):
- 133:         '''Return depth of the BST, representing total levels.'''
- 134:         return 0 if not (self.root) else self.root.height
- 135:     
+ 132:     @staticmethod
+ 133:     def depth(self):
+ 134:         '''Return depth of the BST, representing total levels.'''
+ 135:         return 0 if not (self.root) else self.root.height
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
  139:     
--------------------------------------------------------------------------------
[0.15078 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:27: TypeError: Bst.depth() missing 1 required positional argument: 'self'

   - [# 125] SDI bst2: 
--------------------------------------------------------------------------------
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
  134:         return 0 if not (self.root) else self.root.height
  135:     
- 136:     def contains(self, val):
- 137:         '''Return true if val is in the bst.'''
- 138:         return self.search(val) is not None
- 139:     
+ 136:     @staticmethod
+ 137:     def contains(self, val):
+ 138:         '''Return true if val is in the bst.'''
+ 139:         return self.search(val) is not None
  140:     def balance(self, tree=None):
  141:         '''Return an integer of how well the tree is balanced.
  142: 
  143:         Trees which are higher on the left than the right should return a
--------------------------------------------------------------------------------
[0.17084 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:18: TypeError: Bst.contains() missing 1 required positional argument: 'val'

   - [# 126] SDI bst2: 
--------------------------------------------------------------------------------
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
  139:     
- 140:     def balance(self, tree=None):
- 141:         '''Return an integer of how well the tree is balanced.
- 142: 
- 143:         Trees which are higher on the left than the right should return a
- 144:         positive value, trees which are higher on the right than the left
- 145:         should return a negative value. An ideally-balanced tree should
- 146:         return 0.
- 147:         '''
- 148:         if not tree:
- 149:             tree = self.root
- 150:             if not tree:
- 151:                 return 0
- 152:         
- 153:         leftbranch = 0 if not (tree.left) else tree.left.height
- 154:         rightbranch = 0 if not (tree.right) else tree.right.height
- 155:         
- 156:         return leftbranch - rightbranch
- 157:     
+ 140:     @staticmethod
+ 141:     def balance(self, tree=None):
+ 142:         '''Return an integer of how well the tree is balanced.
+ 143: 
+ 144:         Trees which are higher on the left than the right should return a
+ 145:         positive value, trees which are higher on the right than the left
+ 146:         should return a negative value. An ideally-balanced tree should
+ 147:         return 0.
+ 148:         '''
+ 149:         if not tree:
+ 150:             tree = self.root
+ 151:             if not tree:
+ 152:                 return 0
+ 153:         
+ 154:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 155:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 156:         
+ 157:         return leftbranch - rightbranch
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
  161:             node = self.root
--------------------------------------------------------------------------------
[0.15378 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:33: TypeError: Bst.balance() missing 1 required positional argument: 'self'

   - [# 127] SDI bst2: 
--------------------------------------------------------------------------------
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
  156:         return leftbranch - rightbranch
  157:     
- 158:     def pre_order(self, node='root'):
- 159:         '''Depth first pre-order traversal of tree.'''
- 160:         if node == 'root':
- 161:             node = self.root
- 162:         
- 163:         if not node:
- 164:             return
- 165:         
- 166:         yield node.val
- 167:         
- 168:         for n in self.pre_order(node=node.left):
- 169:             yield n
- 170:         for n in self.pre_order(node=node.right):
- 171:             yield n
- 172:     
+ 158:     @staticmethod
+ 159:     def pre_order(self, node='root'):
+ 160:         '''Depth first pre-order traversal of tree.'''
+ 161:         if node == 'root':
+ 162:             node = self.root
+ 163:         
+ 164:         if not node:
+ 165:             return
+ 166:         
+ 167:         yield node.val
+ 168:         
+ 169:         for n in self.pre_order(node=node.left):
+ 170:             yield n
+ 171:         for n in self.pre_order(node=node.right):
+ 172:             yield n
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
  176:             node = self.root
--------------------------------------------------------------------------------
[0.15275 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:36: TypeError: Bst.pre_order() missing 1 required positional argument: 'self'

   - [# 128] SDI bst2: 
--------------------------------------------------------------------------------
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
  172:     
- 173:     def in_order(self, node='root'):
- 174:         '''Depth first in-order traversal of tree.'''
- 175:         if node == 'root':
- 176:             node = self.root
- 177:         
- 178:         if not node:
- 179:             return
- 180:         
- 181:         for n in self.in_order(node=node.left):
- 182:             yield n
- 183:         yield node.val
- 184:         for n in self.in_order(node=node.right):
- 185:             yield n
- 186:     
+ 173:     @staticmethod
+ 174:     def in_order(self, node='root'):
+ 175:         '''Depth first in-order traversal of tree.'''
+ 176:         if node == 'root':
+ 177:             node = self.root
+ 178:         
+ 179:         if not node:
+ 180:             return
+ 181:         
+ 182:         for n in self.in_order(node=node.left):
+ 183:             yield n
+ 184:         yield node.val
+ 185:         for n in self.in_order(node=node.right):
+ 186:             yield n
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
  190:             node = self.root
--------------------------------------------------------------------------------
[0.14763 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:39: TypeError: Bst.in_order() missing 1 required positional argument: 'self'

   - [# 129] SDI bst2: 
--------------------------------------------------------------------------------
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
  186:     
- 187:     def post_order(self, node='root'):
- 188:         '''Depth frist post_order traversal of tree.'''
- 189:         if node == 'root':
- 190:             node = self.root
- 191:         
- 192:         if not node:
- 193:             return
- 194:         
- 195:         for n in self.post_order(node=node.left):
- 196:             yield n
- 197:         for n in self.post_order(node=node.right):
- 198:             yield n
- 199:         yield node.val
- 200:     
+ 187:     @staticmethod
+ 188:     def post_order(self, node='root'):
+ 189:         '''Depth frist post_order traversal of tree.'''
+ 190:         if node == 'root':
+ 191:             node = self.root
+ 192:         
+ 193:         if not node:
+ 194:             return
+ 195:         
+ 196:         for n in self.post_order(node=node.left):
+ 197:             yield n
+ 198:         for n in self.post_order(node=node.right):
+ 199:             yield n
+ 200:         yield node.val
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
--------------------------------------------------------------------------------
[0.18854 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:42: TypeError: Bst.post_order() missing 1 required positional argument: 'self'

   - [# 130] SDI bst2: 
--------------------------------------------------------------------------------
  197:         for n in self.post_order(node=node.right):
  198:             yield n
  199:         yield node.val
  200:     
- 201:     def breadth_first(self):
- 202:         '''Breadth first traversal of tree.'''
- 203:         q = Queue()
- 204:         q.enqueue(self.root)
- 205:         while q.peek():
- 206:             node = q.dequeue()
- 207:             yield node.val
- 208:             if node.left:
- 209:                 q.enqueue(node.left)
- 210:             if node.right:
- 211:                 q.enqueue(node.right)
- 212:     
+ 201:     @staticmethod
+ 202:     def breadth_first(self):
+ 203:         '''Breadth first traversal of tree.'''
+ 204:         q = Queue()
+ 205:         q.enqueue(self.root)
+ 206:         while q.peek():
+ 207:             node = q.dequeue()
+ 208:             yield node.val
+ 209:             if node.left:
+ 210:                 q.enqueue(node.left)
+ 211:             if node.right:
+ 212:                 q.enqueue(node.right)
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
  216:             return
--------------------------------------------------------------------------------
[0.17346 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:45: TypeError: Bst.breadth_first() missing 1 required positional argument: 'self'

   - [# 131] SDI bst2: 
--------------------------------------------------------------------------------
  209:                 q.enqueue(node.left)
  210:             if node.right:
  211:                 q.enqueue(node.right)
  212:     
- 213:     def delete(self, val):
- 214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
- 216:             return
- 217:         
- 218:         node = self.search(val)
- 219:         
- 220:         if node._is_leaf():
- 221:             if node.parent:
- 222:                 setattr(node.parent, node._side(), None)
- 223:             else:
- 224:                 self.root = None
- 225:         
- 226:         elif node._is_interior():
- 227:             next_node = self._find_replacement(node)
- 228:             self._size += 1
- 229:             self.delete(next_node.val)
- 230:             node.val = next_node.val
- 231:         else:
- 232:             
- 233:             child = getattr(node, node._onlychild())
- 234:             if node.parent:
- 235:                 child.parent = node.parent
- 236:                 setattr(node.parent, node._side(), child)
- 237:             else:
- 238:                 self.root = child
- 239:         
- 240:         self._size -= 1
- 241:     
+ 213:     @staticmethod
+ 214:     def delete(self, val):
+ 215:         '''Remove a node from the tree.'''
+ 216:         if (self._size < 1 or not (self.contains(val))):
+ 217:             return
+ 218:         
+ 219:         node = self.search(val)
+ 220:         
+ 221:         if node._is_leaf():
+ 222:             if node.parent:
+ 223:                 setattr(node.parent, node._side(), None)
+ 224:             else:
+ 225:                 self.root = None
+ 226:         
+ 227:         elif node._is_interior():
+ 228:             next_node = self._find_replacement(node)
+ 229:             self._size += 1
+ 230:             self.delete(next_node.val)
+ 231:             node.val = next_node.val
+ 232:         else:
+ 233:             
+ 234:             child = getattr(node, node._onlychild())
+ 235:             if node.parent:
+ 236:                 child.parent = node.parent
+ 237:                 setattr(node.parent, node._side(), child)
+ 238:             else:
+ 239:                 self.root = child
+ 240:         
+ 241:         self._size -= 1
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
  245:             return self._findmin(node.right)
--------------------------------------------------------------------------------
[0.15312 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:48: TypeError: Bst.delete() missing 1 required positional argument: 'val'

   - [# 132] SDI bst2: 
--------------------------------------------------------------------------------
  238:                 self.root = child
  239:         
  240:         self._size -= 1
  241:     
- 242:     def _find_replacement(self, node):
- 243:         '''Find left most node of right subtree.'''
- 244:         if node.right:
- 245:             return self._findmin(node.right)
- 246:         
- 247:         elif node.parent:
- 248:             if node._side() == 'left':
- 249:                 return self.parent
- 250:             else:
- 251:                 node.parent.right = None
- 252:                 tmp = self._find_replacement(node.parent)
- 253:                 node.parent.right = node
- 254:                 return tmp
- 255:     
+ 242:     @staticmethod
+ 243:     def _find_replacement(self, node):
+ 244:         '''Find left most node of right subtree.'''
+ 245:         if node.right:
+ 246:             return self._findmin(node.right)
+ 247:         
+ 248:         elif node.parent:
+ 249:             if node._side() == 'left':
+ 250:                 return self.parent
+ 251:             else:
+ 252:                 node.parent.right = None
+ 253:                 tmp = self._find_replacement(node.parent)
+ 254:                 node.parent.right = node
+ 255:                 return tmp
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
  259:             node = node.left
--------------------------------------------------------------------------------
[0.12914 s] survived
   - [# 133] SDI bst2: 
--------------------------------------------------------------------------------
  252:                 tmp = self._find_replacement(node.parent)
  253:                 node.parent.right = node
  254:                 return tmp
  255:     
- 256:     def _findmin(self, node):
- 257:         '''Find min of subtree, Min is always left most node.'''
- 258:         while node.left:
- 259:             node = node.left
- 260:         return node
+ 256:     @staticmethod
+ 257:     def _findmin(self, node):
+ 258:         '''Find min of subtree, Min is always left most node.'''
+ 259:         while node.left:
+ 260:             node = node.left
+ 261:         return node
--------------------------------------------------------------------------------
[0.12753 s] survived
   - [# 134] SDL bst2: 
--------------------------------------------------------------------------------
    7:     '''Node, or leaf of the BST.'''
    8:     
    9:     def __init__(self, val=None, parent=None):
   10:         '''Create node object.'''
-  11:         self.val = val
+  11:         pass
   12:         self.right = None
   13:         self.left = None
   14:         self.parent = parent
   15:         self.height = 1
--------------------------------------------------------------------------------
[0.14837 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8dfafee0>, val = 30
curr = <bst2.Node object at 0x7c1a8dfad150>

>   ???
E   AttributeError: 'Node' object has no attribute 'val'

bst2:97: AttributeError
   - [# 135] SDL bst2: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self, val=None, parent=None):
   10:         '''Create node object.'''
   11:         self.val = val
-  12:         self.right = None
+  12:         pass
   13:         self.left = None
   14:         self.parent = parent
   15:         self.height = 1
   16:     
--------------------------------------------------------------------------------
[0.14177 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:100: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e5291b0>
curr = <bst2.Node object at 0x7c1a8e52aa70>, side = 'right', val = 70

>   ???
E   AttributeError: 'Node' object has no attribute 'right'. Did you mean: 'height'?

bst2:105: AttributeError
   - [# 136] SDL bst2: 
--------------------------------------------------------------------------------
    9:     def __init__(self, val=None, parent=None):
   10:         '''Create node object.'''
   11:         self.val = val
   12:         self.right = None
-  13:         self.left = None
+  13:         pass
   14:         self.parent = parent
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
--------------------------------------------------------------------------------
[0.14750 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e3b8040>
curr = <bst2.Node object at 0x7c1a8e3b80d0>, side = 'left', val = 30

>   ???
E   AttributeError: 'Node' object has no attribute 'left'

bst2:105: AttributeError
   - [# 137] SDL bst2: 
--------------------------------------------------------------------------------
   10:         '''Create node object.'''
   11:         self.val = val
   12:         self.right = None
   13:         self.left = None
-  14:         self.parent = parent
+  14:         pass
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
--------------------------------------------------------------------------------
[0.15594 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e178220>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e178220>, val = 20

>   ???
E   AttributeError: 'Node' object has no attribute 'parent'

bst2:221: AttributeError
   - [# 138] SDL bst2: 
--------------------------------------------------------------------------------
   11:         self.val = val
   12:         self.right = None
   13:         self.left = None
   14:         self.parent = parent
-  15:         self.height = 1
+  15:         pass
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
   19:         return (self.right is None and self.left is None)
--------------------------------------------------------------------------------
[0.18031 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e71e050>
curr = <bst2.Node object at 0x7c1a8e71e110>, side = 'left', val = 30

>   ???
E   AttributeError: 'Node' object has no attribute 'height'. Did you mean: 'right'?

bst2:113: AttributeError
   - [# 139] SDL bst2: 
--------------------------------------------------------------------------------
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
-  19:         return (self.right is None and self.left is None)
+  19:         pass
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
--------------------------------------------------------------------------------
[0.15519 s] incompetent

TypeError: bst2:233: TypeError: getattr(): attribute name must be string

   - [# 140] SDL bst2: 
--------------------------------------------------------------------------------
   19:         return (self.right is None and self.left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
-  23:         return (self.right is not None and self.left is not None)
+  23:         pass
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.13156 s] survived
   - [# 141] SDL bst2: 
--------------------------------------------------------------------------------
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
-  28:             return 'left'
+  28:             pass
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
   32:     def _side(self):
--------------------------------------------------------------------------------
[0.13170 s] survived
   - [# 142] SDL bst2: 
--------------------------------------------------------------------------------
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
   29:         if (self.right and not (self.left)):
-  30:             return 'right'
+  30:             pass
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
   34:         if self.parent:
--------------------------------------------------------------------------------
[0.13161 s] survived
   - [# 143] SDL bst2: 
--------------------------------------------------------------------------------
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
   34:         if self.parent:
-  35:             return 'left' if self.parent.left == self else 'right'
+  35:             pass
   36: 
   37: 
   38: class Bst(object):
   39:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.15461 s] incompetent

TypeError: bst2:222: TypeError: attribute name must be string, not 'NoneType'

   - [# 144] SDL bst2: 
--------------------------------------------------------------------------------
   76:     '''
   77:     
   78:     def __init__(self, data=None):
   79:         '''Initialize tree.'''
-  80:         self._size = 0
+  80:         pass
   81:         self.root = None
   82:         
   83:         if data:
   84:             for i in data:
--------------------------------------------------------------------------------
[0.15092 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8dfadf30>, val = 50

>   ???
E   AttributeError: 'Bst' object has no attribute '_size'. Did you mean: 'size'?

bst2:91: AttributeError
   - [# 145] SDL bst2: 
--------------------------------------------------------------------------------
   77:     
   78:     def __init__(self, data=None):
   79:         '''Initialize tree.'''
   80:         self._size = 0
-  81:         self.root = None
+  81:         pass
   82:         
   83:         if data:
   84:             for i in data:
   85:                 self.insert(i)
--------------------------------------------------------------------------------
[0.15104 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e10e500>, val = 50

>   ???
E   AttributeError: 'Bst' object has no attribute 'root'

bst2:89: AttributeError
   - [# 146] SDL bst2: 
--------------------------------------------------------------------------------
   81:         self.root = None
   82:         
   83:         if data:
   84:             for i in data:
-  85:                 self.insert(i)
+  85:                 pass
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
--------------------------------------------------------------------------------
[0.15180 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e1dc580>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AttributeError: 'NoneType' object has no attribute 'val'

ts-3-5/test_3-5_0-8_249.py:21: AttributeError
   - [# 147] SDL bst2: 
--------------------------------------------------------------------------------
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
-  90:             self.root = Node(val)
+  90:             pass
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
   94:     
--------------------------------------------------------------------------------
[0.18346 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e0c4b50>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 148] SDL bst2: 
--------------------------------------------------------------------------------
   89:         if not (self.root):
   90:             self.root = Node(val)
   91:             self._size += 1
   92:         else:
-  93:             self._step(val, self.root)
+  93:             pass
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
--------------------------------------------------------------------------------
[0.14918 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e535390>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 149] SDL bst2: 
--------------------------------------------------------------------------------
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
-  98:             curr = self._set_child(curr, 'left', val)
+  98:             pass
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
--------------------------------------------------------------------------------
[0.14917 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e636410>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AttributeError: 'NoneType' object has no attribute 'val'

ts-3-5/test_3-5_0-8_249.py:21: AttributeError
   - [# 150] SDL bst2: 
--------------------------------------------------------------------------------
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
   99:         elif val > curr.val:
- 100:             curr = self._set_child(curr, 'right', val)
+ 100:             pass
  101:         return curr.height
  102:     
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
--------------------------------------------------------------------------------
[0.14387 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e4447c0>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 151] SDL bst2: 
--------------------------------------------------------------------------------
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
- 101:         return curr.height
+ 101:         pass
  102:     
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
--------------------------------------------------------------------------------
[0.14811 s] incompetent

TypeError: bst2:108: TypeError: '<=' not supported between instances of 'int' and 'NoneType'

   - [# 152] SDL bst2: 
--------------------------------------------------------------------------------
  101:         return curr.height
  102:     
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
- 105:         child = getattr(curr, side)
+ 105:         pass
  106:         if child:
  107:             count = self._step(val, child)
  108:             if curr.height <= count:
  109:                 curr.height += 1
--------------------------------------------------------------------------------
[0.14842 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e2af970>
curr = <bst2.Node object at 0x7c1a8e2ade10>, side = 'left', val = 30

>   ???
E   NameError: name 'child' is not defined

bst2:106: NameError
   - [# 153] SDL bst2: 
--------------------------------------------------------------------------------
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
- 107:             count = self._step(val, child)
+ 107:             pass
  108:             if curr.height <= count:
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
--------------------------------------------------------------------------------
[0.14042 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e236530>
curr = <bst2.Node object at 0x7c1a8e236a40>, side = 'left', val = 20

>   ???
E   NameError: name 'count' is not defined

bst2:108: NameError
   - [# 154] SDL bst2: 
--------------------------------------------------------------------------------
  107:             count = self._step(val, child)
  108:             if curr.height <= count:
  109:                 curr.height += 1
  110:         else:
- 111:             setattr(curr, side, Node(val, curr))
+ 111:             pass
  112:             self._size += 1
  113:             if curr.height == 1:
  114:                 curr.height += 1
  115:         return curr
--------------------------------------------------------------------------------
[0.15084 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e2fb3a0>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 155] SDL bst2: 
--------------------------------------------------------------------------------
  111:             setattr(curr, side, Node(val, curr))
  112:             self._size += 1
  113:             if curr.height == 1:
  114:                 curr.height += 1
- 115:         return curr
+ 115:         pass
  116:     
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
--------------------------------------------------------------------------------
[0.14897 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e30ec50>, val = 30, curr = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'height'

bst2:101: AttributeError
   - [# 156] SDL bst2: 
--------------------------------------------------------------------------------
  115:         return curr
  116:     
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
- 119:         curr = self.root
+ 119:         pass
  120:         while curr:
  121:             if curr.val == val:
  122:                 return curr
  123:             elif val < curr.val:
--------------------------------------------------------------------------------
[0.14838 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8df2f280>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True

ts-3-5/test_3-5_0-8_249.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:138: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8df2f280>, val = 90

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

bst2:120: UnboundLocalError
   - [# 157] SDL bst2: 
--------------------------------------------------------------------------------
  118:         '''Return the node containing val.'''
  119:         curr = self.root
  120:         while curr:
  121:             if curr.val == val:
- 122:                 return curr
+ 122:                 pass
  123:             elif val < curr.val:
  124:                 curr = curr.left
  125:             else:
  126:                 curr = curr.right
--------------------------------------------------------------------------------
[5.00706 s] timeout
   - [# 158] SDL bst2: 
--------------------------------------------------------------------------------
  120:         while curr:
  121:             if curr.val == val:
  122:                 return curr
  123:             elif val < curr.val:
- 124:                 curr = curr.left
+ 124:                 pass
  125:             else:
  126:                 curr = curr.right
  127:     
  128:     def size(self):
--------------------------------------------------------------------------------
[5.00682 s] timeout
   - [# 159] SDL bst2: 
--------------------------------------------------------------------------------
  122:                 return curr
  123:             elif val < curr.val:
  124:                 curr = curr.left
  125:             else:
- 126:                 curr = curr.right
+ 126:                 pass
  127:     
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
--------------------------------------------------------------------------------
[5.00691 s] timeout
   - [# 160] SDL bst2: 
--------------------------------------------------------------------------------
  126:                 curr = curr.right
  127:     
  128:     def size(self):
  129:         '''Return the size of the BST.'''
- 130:         return self._size
+ 130:         pass
  131:     
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
  134:         return 0 if not (self.root) else self.root.height
--------------------------------------------------------------------------------
[0.14761 s] killed by ts-3-5/test_3-5_0-8_249.py::test_size

sample_tree = <bst2.Bst object at 0x7c1a8e4946a0>

    def test_size(sample_tree):
>       assert sample_tree.size() == 7
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:24: AssertionError
   - [# 161] SDL bst2: 
--------------------------------------------------------------------------------
  130:         return self._size
  131:     
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
- 134:         return 0 if not (self.root) else self.root.height
+ 134:         pass
  135:     
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.17867 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e60ee60>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:27: AssertionError
   - [# 162] SDL bst2: 
--------------------------------------------------------------------------------
  134:         return 0 if not (self.root) else self.root.height
  135:     
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
- 138:         return self.search(val) is not None
+ 138:         pass
  139:     
  140:     def balance(self, tree=None):
  141:         '''Return an integer of how well the tree is balanced.
  142: 
--------------------------------------------------------------------------------
[0.14924 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e2f94e0>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 163] SDL bst2: 
--------------------------------------------------------------------------------
  145:         should return a negative value. An ideally-balanced tree should
  146:         return 0.
  147:         '''
  148:         if not tree:
- 149:             tree = self.root
+ 149:             pass
  150:             if not tree:
  151:                 return 0
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
--------------------------------------------------------------------------------
[0.12692 s] survived
   - [# 164] SDL bst2: 
--------------------------------------------------------------------------------
  147:         '''
  148:         if not tree:
  149:             tree = self.root
  150:             if not tree:
- 151:                 return 0
+ 151:                 pass
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
--------------------------------------------------------------------------------
[0.12822 s] survived
   - [# 165] SDL bst2: 
--------------------------------------------------------------------------------
  149:             tree = self.root
  150:             if not tree:
  151:                 return 0
  152:         
- 153:         leftbranch = 0 if not (tree.left) else tree.left.height
+ 153:         pass
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
  156:         return leftbranch - rightbranch
  157:     
--------------------------------------------------------------------------------
[0.15316 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e32c100>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0

ts-3-5/test_3-5_0-8_249.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e32c100>
tree = <bst2.Node object at 0x7c1a8e32cf40>

>   ???
E   NameError: name 'leftbranch' is not defined

bst2:156: NameError
   - [# 166] SDL bst2: 
--------------------------------------------------------------------------------
  150:             if not tree:
  151:                 return 0
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
- 154:         rightbranch = 0 if not (tree.right) else tree.right.height
+ 154:         pass
  155:         
  156:         return leftbranch - rightbranch
  157:     
  158:     def pre_order(self, node='root'):
--------------------------------------------------------------------------------
[0.15260 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8dfeb4c0>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0

ts-3-5/test_3-5_0-8_249.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8dfeb4c0>
tree = <bst2.Node object at 0x7c1a8dfead40>

>   ???
E   NameError: name 'rightbranch' is not defined

bst2:156: NameError
   - [# 167] SDL bst2: 
--------------------------------------------------------------------------------
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
  154:         rightbranch = 0 if not (tree.right) else tree.right.height
  155:         
- 156:         return leftbranch - rightbranch
+ 156:         pass
  157:     
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
--------------------------------------------------------------------------------
[0.15209 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e211fc0>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:33: AssertionError
   - [# 168] SDL bst2: 
--------------------------------------------------------------------------------
  157:     
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
- 161:             node = self.root
+ 161:             pass
  162:         
  163:         if not node:
  164:             return
  165:         
--------------------------------------------------------------------------------
[0.15444 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e61efb0>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e61efb0>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'val'

bst2:166: AttributeError
   - [# 169] SDL bst2: 
--------------------------------------------------------------------------------
  160:         if node == 'root':
  161:             node = self.root
  162:         
  163:         if not node:
- 164:             return
+ 164:             pass
  165:         
  166:         yield node.val
  167:         
  168:         for n in self.pre_order(node=node.left):
--------------------------------------------------------------------------------
[0.15463 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e5056c0>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:168: in pre_order
    ???
bst2:168: in pre_order
    ???
bst2:168: in pre_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e5056c0>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'val'

bst2:166: AttributeError
   - [# 170] SDL bst2: 
--------------------------------------------------------------------------------
  162:         
  163:         if not node:
  164:             return
  165:         
- 166:         yield node.val
+ 166:         pass
  167:         
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
--------------------------------------------------------------------------------
[0.18153 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e2396f0>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [# 171] SDL bst2: 
--------------------------------------------------------------------------------
  165:         
  166:         yield node.val
  167:         
  168:         for n in self.pre_order(node=node.left):
- 169:             yield n
+ 169:             pass
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
  172:     
  173:     def in_order(self, node='root'):
--------------------------------------------------------------------------------
[0.15129 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e213160>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [# 172] SDL bst2: 
--------------------------------------------------------------------------------
  167:         
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
- 171:             yield n
+ 171:             pass
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
--------------------------------------------------------------------------------
[0.15162 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e502950>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [# 173] SDL bst2: 
--------------------------------------------------------------------------------
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
- 176:             node = self.root
+ 176:             pass
  177:         
  178:         if not node:
  179:             return
  180:         
--------------------------------------------------------------------------------
[0.15138 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e495690>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e495690>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

bst2:181: AttributeError
   - [# 174] SDL bst2: 
--------------------------------------------------------------------------------
  175:         if node == 'root':
  176:             node = self.root
  177:         
  178:         if not node:
- 179:             return
+ 179:             pass
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
  183:         yield node.val
--------------------------------------------------------------------------------
[0.15477 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e34dae0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:181: in in_order
    ???
bst2:181: in in_order
    ???
bst2:181: in in_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e34dae0>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

bst2:181: AttributeError
   - [# 175] SDL bst2: 
--------------------------------------------------------------------------------
  178:         if not node:
  179:             return
  180:         
  181:         for n in self.in_order(node=node.left):
- 182:             yield n
+ 182:             pass
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
  186:     
--------------------------------------------------------------------------------
[0.15439 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8dfad060>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [# 176] SDL bst2: 
--------------------------------------------------------------------------------
  179:             return
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
- 183:         yield node.val
+ 183:         pass
  184:         for n in self.in_order(node=node.right):
  185:             yield n
  186:     
  187:     def post_order(self, node='root'):
--------------------------------------------------------------------------------
[0.15089 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e2fa7a0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [# 177] SDL bst2: 
--------------------------------------------------------------------------------
  181:         for n in self.in_order(node=node.left):
  182:             yield n
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
- 185:             yield n
+ 185:             pass
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
--------------------------------------------------------------------------------
[0.15302 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e12f520>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [# 178] SDL bst2: 
--------------------------------------------------------------------------------
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
- 190:             node = self.root
+ 190:             pass
  191:         
  192:         if not node:
  193:             return
  194:         
--------------------------------------------------------------------------------
[0.15568 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e376f20>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e376f20>, node = 'root'

>   ???
E   AttributeError: 'str' object has no attribute 'left'

bst2:195: AttributeError
   - [# 179] SDL bst2: 
--------------------------------------------------------------------------------
  189:         if node == 'root':
  190:             node = self.root
  191:         
  192:         if not node:
- 193:             return
+ 193:             pass
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
--------------------------------------------------------------------------------
[0.18290 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e589390>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:195: in post_order
    ???
bst2:195: in post_order
    ???
bst2:195: in post_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e589390>, node = None

>   ???
E   AttributeError: 'NoneType' object has no attribute 'left'

bst2:195: AttributeError
   - [# 180] SDL bst2: 
--------------------------------------------------------------------------------
  192:         if not node:
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
- 196:             yield n
+ 196:             pass
  197:         for n in self.post_order(node=node.right):
  198:             yield n
  199:         yield node.val
  200:     
--------------------------------------------------------------------------------
[0.15463 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8dfe81f0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [# 181] SDL bst2: 
--------------------------------------------------------------------------------
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
- 198:             yield n
+ 198:             pass
  199:         yield node.val
  200:     
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
--------------------------------------------------------------------------------
[0.15583 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e30c580>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [# 182] SDL bst2: 
--------------------------------------------------------------------------------
  195:         for n in self.post_order(node=node.left):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
  198:             yield n
- 199:         yield node.val
+ 199:         pass
  200:     
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
--------------------------------------------------------------------------------
[0.15375 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e2222c0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [# 183] SDL bst2: 
--------------------------------------------------------------------------------
  199:         yield node.val
  200:     
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
- 203:         q = Queue()
+ 203:         pass
  204:         q.enqueue(self.root)
  205:         while q.peek():
  206:             node = q.dequeue()
  207:             yield node.val
--------------------------------------------------------------------------------
[0.15645 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e3bbc40>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]

ts-3-5/test_3-5_0-8_249.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e3bbc40>

>   ???
E   NameError: name 'q' is not defined

bst2:204: NameError
   - [# 184] SDL bst2: 
--------------------------------------------------------------------------------
  200:     
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
- 204:         q.enqueue(self.root)
+ 204:         pass
  205:         while q.peek():
  206:             node = q.dequeue()
  207:             yield node.val
  208:             if node.left:
--------------------------------------------------------------------------------
[0.15613 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e29c520>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [# 185] SDL bst2: 
--------------------------------------------------------------------------------
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
  205:         while q.peek():
- 206:             node = q.dequeue()
+ 206:             pass
  207:             yield node.val
  208:             if node.left:
  209:                 q.enqueue(node.left)
  210:             if node.right:
--------------------------------------------------------------------------------
[0.15395 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e500cd0>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]

ts-3-5/test_3-5_0-8_249.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e500cd0>

>   ???
E   NameError: name 'node' is not defined

bst2:207: NameError
   - [# 186] SDL bst2: 
--------------------------------------------------------------------------------
  203:         q = Queue()
  204:         q.enqueue(self.root)
  205:         while q.peek():
  206:             node = q.dequeue()
- 207:             yield node.val
+ 207:             pass
  208:             if node.left:
  209:                 q.enqueue(node.left)
  210:             if node.right:
  211:                 q.enqueue(node.right)
--------------------------------------------------------------------------------
[0.15520 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:45: TypeError: 'NoneType' object is not iterable

   - [# 187] SDL bst2: 
--------------------------------------------------------------------------------
  205:         while q.peek():
  206:             node = q.dequeue()
  207:             yield node.val
  208:             if node.left:
- 209:                 q.enqueue(node.left)
+ 209:                 pass
  210:             if node.right:
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
--------------------------------------------------------------------------------
[0.15569 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e3d73a0>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [# 188] SDL bst2: 
--------------------------------------------------------------------------------
  207:             yield node.val
  208:             if node.left:
  209:                 q.enqueue(node.left)
  210:             if node.right:
- 211:                 q.enqueue(node.right)
+ 211:                 pass
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
--------------------------------------------------------------------------------
[0.15494 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e5540d0>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:45: AssertionError
   - [# 189] SDL bst2: 
--------------------------------------------------------------------------------
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
- 216:             return
+ 216:             pass
  217:         
  218:         node = self.search(val)
  219:         
  220:         if node._is_leaf():
--------------------------------------------------------------------------------
[0.13002 s] survived
   - [# 190] SDL bst2: 
--------------------------------------------------------------------------------
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
  216:             return
  217:         
- 218:         node = self.search(val)
+ 218:         pass
  219:         
  220:         if node._is_leaf():
  221:             if node.parent:
  222:                 setattr(node.parent, node._side(), None)
--------------------------------------------------------------------------------
[0.15482 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e536890>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e536890>, val = 20

>   ???
E   NameError: name 'node' is not defined

bst2:220: NameError
   - [# 191] SDL bst2: 
--------------------------------------------------------------------------------
  218:         node = self.search(val)
  219:         
  220:         if node._is_leaf():
  221:             if node.parent:
- 222:                 setattr(node.parent, node._side(), None)
+ 222:                 pass
  223:             else:
  224:                 self.root = None
  225:         
  226:         elif node._is_interior():
--------------------------------------------------------------------------------
[0.15948 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e520070>

    def test_delete(sample_tree):
        sample_tree.delete(20)
>       assert sample_tree.contains(20) == False
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:49: AssertionError
   - [# 192] SDL bst2: 
--------------------------------------------------------------------------------
  220:         if node._is_leaf():
  221:             if node.parent:
  222:                 setattr(node.parent, node._side(), None)
  223:             else:
- 224:                 self.root = None
+ 224:                 pass
  225:         
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
  228:             self._size += 1
--------------------------------------------------------------------------------
[0.13048 s] survived
   - [# 193] SDL bst2: 
--------------------------------------------------------------------------------
  223:             else:
  224:                 self.root = None
  225:         
  226:         elif node._is_interior():
- 227:             next_node = self._find_replacement(node)
+ 227:             pass
  228:             self._size += 1
  229:             self.delete(next_node.val)
  230:             node.val = next_node.val
  231:         else:
--------------------------------------------------------------------------------
[0.14906 s] survived
   - [# 194] SDL bst2: 
--------------------------------------------------------------------------------
  225:         
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
  228:             self._size += 1
- 229:             self.delete(next_node.val)
+ 229:             pass
  230:             node.val = next_node.val
  231:         else:
  232:             
  233:             child = getattr(node, node._onlychild())
--------------------------------------------------------------------------------
[0.12738 s] survived
   - [# 195] SDL bst2: 
--------------------------------------------------------------------------------
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
  228:             self._size += 1
  229:             self.delete(next_node.val)
- 230:             node.val = next_node.val
+ 230:             pass
  231:         else:
  232:             
  233:             child = getattr(node, node._onlychild())
  234:             if node.parent:
--------------------------------------------------------------------------------
[0.13021 s] survived
   - [# 196] SDL bst2: 
--------------------------------------------------------------------------------
  229:             self.delete(next_node.val)
  230:             node.val = next_node.val
  231:         else:
  232:             
- 233:             child = getattr(node, node._onlychild())
+ 233:             pass
  234:             if node.parent:
  235:                 child.parent = node.parent
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
--------------------------------------------------------------------------------
[0.14949 s] survived
   - [# 197] SDL bst2: 
--------------------------------------------------------------------------------
  231:         else:
  232:             
  233:             child = getattr(node, node._onlychild())
  234:             if node.parent:
- 235:                 child.parent = node.parent
+ 235:                 pass
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
  238:                 self.root = child
  239:         
--------------------------------------------------------------------------------
[0.12888 s] survived
   - [# 198] SDL bst2: 
--------------------------------------------------------------------------------
  232:             
  233:             child = getattr(node, node._onlychild())
  234:             if node.parent:
  235:                 child.parent = node.parent
- 236:                 setattr(node.parent, node._side(), child)
+ 236:                 pass
  237:             else:
  238:                 self.root = child
  239:         
  240:         self._size -= 1
--------------------------------------------------------------------------------
[0.12822 s] survived
   - [# 199] SDL bst2: 
--------------------------------------------------------------------------------
  234:             if node.parent:
  235:                 child.parent = node.parent
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
- 238:                 self.root = child
+ 238:                 pass
  239:         
  240:         self._size -= 1
  241:     
  242:     def _find_replacement(self, node):
--------------------------------------------------------------------------------
[0.12918 s] survived
   - [# 200] SDL bst2: 
--------------------------------------------------------------------------------
  241:     
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
- 245:             return self._findmin(node.right)
+ 245:             pass
  246:         
  247:         elif node.parent:
  248:             if node._side() == 'left':
  249:                 return self.parent
--------------------------------------------------------------------------------
[0.13072 s] survived
   - [# 201] SDL bst2: 
--------------------------------------------------------------------------------
  245:             return self._findmin(node.right)
  246:         
  247:         elif node.parent:
  248:             if node._side() == 'left':
- 249:                 return self.parent
+ 249:                 pass
  250:             else:
  251:                 node.parent.right = None
  252:                 tmp = self._find_replacement(node.parent)
  253:                 node.parent.right = node
--------------------------------------------------------------------------------
[0.12717 s] survived
   - [# 202] SDL bst2: 
--------------------------------------------------------------------------------
  247:         elif node.parent:
  248:             if node._side() == 'left':
  249:                 return self.parent
  250:             else:
- 251:                 node.parent.right = None
+ 251:                 pass
  252:                 tmp = self._find_replacement(node.parent)
  253:                 node.parent.right = node
  254:                 return tmp
  255:     
--------------------------------------------------------------------------------
[0.15962 s] survived
   - [# 203] SDL bst2: 
--------------------------------------------------------------------------------
  248:             if node._side() == 'left':
  249:                 return self.parent
  250:             else:
  251:                 node.parent.right = None
- 252:                 tmp = self._find_replacement(node.parent)
+ 252:                 pass
  253:                 node.parent.right = node
  254:                 return tmp
  255:     
  256:     def _findmin(self, node):
--------------------------------------------------------------------------------
[0.12945 s] survived
   - [# 204] SDL bst2: 
--------------------------------------------------------------------------------
  249:                 return self.parent
  250:             else:
  251:                 node.parent.right = None
  252:                 tmp = self._find_replacement(node.parent)
- 253:                 node.parent.right = node
+ 253:                 pass
  254:                 return tmp
  255:     
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
--------------------------------------------------------------------------------
[0.13063 s] survived
   - [# 205] SDL bst2: 
--------------------------------------------------------------------------------
  250:             else:
  251:                 node.parent.right = None
  252:                 tmp = self._find_replacement(node.parent)
  253:                 node.parent.right = node
- 254:                 return tmp
+ 254:                 pass
  255:     
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
--------------------------------------------------------------------------------
[0.12823 s] survived
   - [# 206] SDL bst2: 
--------------------------------------------------------------------------------
  255:     
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
- 259:             node = node.left
+ 259:             pass
  260:         return node
--------------------------------------------------------------------------------
[0.12951 s] survived
   - [# 207] SDL bst2: 
--------------------------------------------------------------------------------
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
  259:             node = node.left
- 260:         return node
+ 260:         pass
--------------------------------------------------------------------------------
[0.12936 s] survived
   - [# 208] SVD bst2: 
--------------------------------------------------------------------------------
    7:     '''Node, or leaf of the BST.'''
    8:     
    9:     def __init__(self, val=None, parent=None):
   10:         '''Create node object.'''
-  11:         self.val = val
+  11:         val = val
   12:         self.right = None
   13:         self.left = None
   14:         self.parent = parent
   15:         self.height = 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 209] SVD bst2: 
--------------------------------------------------------------------------------
    8:     
    9:     def __init__(self, val=None, parent=None):
   10:         '''Create node object.'''
   11:         self.val = val
-  12:         self.right = None
+  12:         right = None
   13:         self.left = None
   14:         self.parent = parent
   15:         self.height = 1
   16:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 210] SVD bst2: 
--------------------------------------------------------------------------------
    9:     def __init__(self, val=None, parent=None):
   10:         '''Create node object.'''
   11:         self.val = val
   12:         self.right = None
-  13:         self.left = None
+  13:         left = None
   14:         self.parent = parent
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 211] SVD bst2: 
--------------------------------------------------------------------------------
   10:         '''Create node object.'''
   11:         self.val = val
   12:         self.right = None
   13:         self.left = None
-  14:         self.parent = parent
+  14:         parent = parent
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 212] SVD bst2: 
--------------------------------------------------------------------------------
   11:         self.val = val
   12:         self.right = None
   13:         self.left = None
   14:         self.parent = parent
-  15:         self.height = 1
+  15:         height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
   19:         return (self.right is None and self.left is None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 213] SVD bst2: 
--------------------------------------------------------------------------------
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
-  19:         return (self.right is None and self.left is None)
+  19:         return (right is None and self.left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
--------------------------------------------------------------------------------
[0.15393 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e235db0>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:220: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Node object at 0x7c1a8e12c0d0>

>   ???
E   NameError: name 'right' is not defined

bst2:19: NameError
   - [# 214] SVD bst2: 
--------------------------------------------------------------------------------
   15:         self.height = 1
   16:     
   17:     def _is_leaf(self):
   18:         '''Return true if a leaf.'''
-  19:         return (self.right is None and self.left is None)
+  19:         return (self.right is None and left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
   23:         return (self.right is not None and self.left is not None)
--------------------------------------------------------------------------------
[0.15341 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e23a8c0>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:220: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Node object at 0x7c1a8e57f460>

>   ???
E   NameError: name 'left' is not defined

bst2:19: NameError
   - [# 215] SVD bst2: 
--------------------------------------------------------------------------------
   19:         return (self.right is None and self.left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
-  23:         return (self.right is not None and self.left is not None)
+  23:         return (right is not None and self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.12774 s] survived
   - [# 216] SVD bst2: 
--------------------------------------------------------------------------------
   19:         return (self.right is None and self.left is None)
   20:     
   21:     def _is_interior(self):
   22:         '''Return true if a interior node.'''
-  23:         return (self.right is not None and self.left is not None)
+  23:         return (self.right is not None and left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
--------------------------------------------------------------------------------
[0.15802 s] survived
   - [# 217] SVD bst2: 
--------------------------------------------------------------------------------
   23:         return (self.right is not None and self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
+  27:         if (left and not (self.right)):
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
--------------------------------------------------------------------------------
[0.12885 s] survived
   - [# 218] SVD bst2: 
--------------------------------------------------------------------------------
   23:         return (self.right is not None and self.left is not None)
   24:     
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
-  27:         if (self.left and not (self.right)):
+  27:         if (self.left and not right):
   28:             return 'left'
   29:         if (self.right and not (self.left)):
   30:             return 'right'
   31:     
--------------------------------------------------------------------------------
[0.16677 s] survived
   - [# 219] SVD bst2: 
--------------------------------------------------------------------------------
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
-  29:         if (self.right and not (self.left)):
+  29:         if (right and not (self.left)):
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.12666 s] survived
   - [# 220] SVD bst2: 
--------------------------------------------------------------------------------
   25:     def _onlychild(self):
   26:         '''Return string depending on children.'''
   27:         if (self.left and not (self.right)):
   28:             return 'left'
-  29:         if (self.right and not (self.left)):
+  29:         if (self.right and not left):
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
--------------------------------------------------------------------------------
[0.12983 s] survived
   - [# 221] SVD bst2: 
--------------------------------------------------------------------------------
   30:             return 'right'
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
-  34:         if self.parent:
+  34:         if parent:
   35:             return 'left' if self.parent.left == self else 'right'
   36: 
   37: 
   38: class Bst(object):
--------------------------------------------------------------------------------
[0.15478 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e5356f0>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:222: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Node object at 0x7c1a8e537520>

>   ???
E   NameError: name 'parent' is not defined

bst2:34: NameError
   - [# 222] SVD bst2: 
--------------------------------------------------------------------------------
   31:     
   32:     def _side(self):
   33:         '''Return if left or right child of parent.'''
   34:         if self.parent:
-  35:             return 'left' if self.parent.left == self else 'right'
+  35:             return 'left' if parent.left == self else 'right'
   36: 
   37: 
   38: class Bst(object):
   39:     '''Binary Search Tree.
--------------------------------------------------------------------------------
[0.15333 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e236140>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:222: in delete
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Node object at 0x7c1a8e234850>

>   ???
E   NameError: name 'parent' is not defined

bst2:35: NameError
   - [# 223] SVD bst2: 
--------------------------------------------------------------------------------
   76:     '''
   77:     
   78:     def __init__(self, data=None):
   79:         '''Initialize tree.'''
-  80:         self._size = 0
+  80:         _size = 0
   81:         self.root = None
   82:         
   83:         if data:
   84:             for i in data:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 224] SVD bst2: 
--------------------------------------------------------------------------------
   77:     
   78:     def __init__(self, data=None):
   79:         '''Initialize tree.'''
   80:         self._size = 0
-  81:         self.root = None
+  81:         root = None
   82:         
   83:         if data:
   84:             for i in data:
   85:                 self.insert(i)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 225] SVD bst2: 
--------------------------------------------------------------------------------
   81:         self.root = None
   82:         
   83:         if data:
   84:             for i in data:
-  85:                 self.insert(i)
+  85:                 insert(i)
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
--------------------------------------------------------------------------------
[0.17797 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e10d810>, data = [50, 30, 70, 20, 40, 60, ...]

>   ???
E   NameError: name 'insert' is not defined

bst2:85: NameError
   - [# 226] SVD bst2: 
--------------------------------------------------------------------------------
   85:                 self.insert(i)
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
-  89:         if not (self.root):
+  89:         if not root:
   90:             self.root = Node(val)
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
--------------------------------------------------------------------------------
[0.13886 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e5ece50>, val = 50

>   ???
E   NameError: name 'root' is not defined

bst2:89: NameError
   - [# 227] SVD bst2: 
--------------------------------------------------------------------------------
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
-  90:             self.root = Node(val)
+  90:             root = Node(val)
   91:             self._size += 1
   92:         else:
   93:             self._step(val, self.root)
   94:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 228] SVD bst2: 
--------------------------------------------------------------------------------
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
   90:             self.root = Node(val)
-  91:             self._size += 1
+  91:             _size += 1
   92:         else:
   93:             self._step(val, self.root)
   94:     
   95:     def _step(self, val, curr):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 229] SVD bst2: 
--------------------------------------------------------------------------------
   89:         if not (self.root):
   90:             self.root = Node(val)
   91:             self._size += 1
   92:         else:
-  93:             self._step(val, self.root)
+  93:             _step(val, self.root)
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
--------------------------------------------------------------------------------
[0.14758 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e2ace20>, val = 30

>   ???
E   NameError: name '_step' is not defined

bst2:93: NameError
   - [# 230] SVD bst2: 
--------------------------------------------------------------------------------
   89:         if not (self.root):
   90:             self.root = Node(val)
   91:             self._size += 1
   92:         else:
-  93:             self._step(val, self.root)
+  93:             self._step(val, root)
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
--------------------------------------------------------------------------------
[0.14795 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e1f3df0>, val = 30

>   ???
E   NameError: name 'root' is not defined

bst2:93: NameError
   - [# 231] SVD bst2: 
--------------------------------------------------------------------------------
   94:     
   95:     def _step(self, val, curr):
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
-  98:             curr = self._set_child(curr, 'left', val)
+  98:             curr = _set_child(curr, 'left', val)
   99:         elif val > curr.val:
  100:             curr = self._set_child(curr, 'right', val)
  101:         return curr.height
  102:     
--------------------------------------------------------------------------------
[0.14931 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e5ef850>, val = 30
curr = <bst2.Node object at 0x7c1a8e5ec490>

>   ???
E   NameError: name '_set_child' is not defined

bst2:98: NameError
   - [# 232] SVD bst2: 
--------------------------------------------------------------------------------
   96:         '''Decide left or right and returns height.'''
   97:         if val < curr.val:
   98:             curr = self._set_child(curr, 'left', val)
   99:         elif val > curr.val:
- 100:             curr = self._set_child(curr, 'right', val)
+ 100:             curr = _set_child(curr, 'right', val)
  101:         return curr.height
  102:     
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
--------------------------------------------------------------------------------
[0.14884 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e4adae0>, val = 70
curr = <bst2.Node object at 0x7c1a8e4adbd0>

>   ???
E   NameError: name '_set_child' is not defined

bst2:100: NameError
   - [# 233] SVD bst2: 
--------------------------------------------------------------------------------
  103:     def _set_child(self, curr, side, val):
  104:         '''Helping.'''
  105:         child = getattr(curr, side)
  106:         if child:
- 107:             count = self._step(val, child)
+ 107:             count = _step(val, child)
  108:             if curr.height <= count:
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
--------------------------------------------------------------------------------
[0.15568 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

@pytest.fixture
    def sample_tree():
>       bst = Bst([50, 30, 70, 20, 40, 60, 80])

ts-3-5/test_3-5_0-8_249.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:85: in __init__
    ???
bst2:93: in insert
    ???
bst2:98: in _step
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8df6b0d0>
curr = <bst2.Node object at 0x7c1a8df6b1c0>, side = 'left', val = 20

>   ???
E   NameError: name '_step' is not defined

bst2:107: NameError
   - [# 234] SVD bst2: 
--------------------------------------------------------------------------------
  108:             if curr.height <= count:
  109:                 curr.height += 1
  110:         else:
  111:             setattr(curr, side, Node(val, curr))
- 112:             self._size += 1
+ 112:             _size += 1
  113:             if curr.height == 1:
  114:                 curr.height += 1
  115:         return curr
  116:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 235] SVD bst2: 
--------------------------------------------------------------------------------
  115:         return curr
  116:     
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
- 119:         curr = self.root
+ 119:         curr = root
  120:         while curr:
  121:             if curr.val == val:
  122:                 return curr
  123:             elif val < curr.val:
--------------------------------------------------------------------------------
[0.15206 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e195210>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True

ts-3-5/test_3-5_0-8_249.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:138: in contains
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e195210>, val = 90

>   ???
E   NameError: name 'root' is not defined

bst2:119: NameError
   - [# 236] SVD bst2: 
--------------------------------------------------------------------------------
  126:                 curr = curr.right
  127:     
  128:     def size(self):
  129:         '''Return the size of the BST.'''
- 130:         return self._size
+ 130:         return _size
  131:     
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
  134:         return 0 if not (self.root) else self.root.height
--------------------------------------------------------------------------------
[0.15352 s] killed by ts-3-5/test_3-5_0-8_249.py::test_size

sample_tree = <bst2.Bst object at 0x7c1a8e12eec0>

    def test_size(sample_tree):
>       assert sample_tree.size() == 7

ts-3-5/test_3-5_0-8_249.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e12eec0>

>   ???
E   NameError: name '_size' is not defined

bst2:130: NameError
   - [# 237] SVD bst2: 
--------------------------------------------------------------------------------
  130:         return self._size
  131:     
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
- 134:         return 0 if not (self.root) else self.root.height
+ 134:         return 0 if not root else self.root.height
  135:     
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.15413 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e371360>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3

ts-3-5/test_3-5_0-8_249.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e371360>

>   ???
E   NameError: name 'root' is not defined

bst2:134: NameError
   - [# 238] SVD bst2: 
--------------------------------------------------------------------------------
  130:         return self._size
  131:     
  132:     def depth(self):
  133:         '''Return depth of the BST, representing total levels.'''
- 134:         return 0 if not (self.root) else self.root.height
+ 134:         return 0 if not (self.root) else root.height
  135:     
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
  138:         return self.search(val) is not None
--------------------------------------------------------------------------------
[0.15217 s] killed by ts-3-5/test_3-5_0-8_249.py::test_depth

sample_tree = <bst2.Bst object at 0x7c1a8e3ed7e0>

    def test_depth(sample_tree):
>       assert sample_tree.depth() == 3

ts-3-5/test_3-5_0-8_249.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e3ed7e0>

>   ???
E   NameError: name 'root' is not defined

bst2:134: NameError
   - [# 239] SVD bst2: 
--------------------------------------------------------------------------------
  134:         return 0 if not (self.root) else self.root.height
  135:     
  136:     def contains(self, val):
  137:         '''Return true if val is in the bst.'''
- 138:         return self.search(val) is not None
+ 138:         return search(val) is not None
  139:     
  140:     def balance(self, tree=None):
  141:         '''Return an integer of how well the tree is balanced.
  142: 
--------------------------------------------------------------------------------
[0.16938 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8e60cc70>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True

ts-3-5/test_3-5_0-8_249.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e60cc70>, val = 90

>   ???
E   NameError: name 'search' is not defined

bst2:138: NameError
   - [# 240] SVD bst2: 
--------------------------------------------------------------------------------
  145:         should return a negative value. An ideally-balanced tree should
  146:         return 0.
  147:         '''
  148:         if not tree:
- 149:             tree = self.root
+ 149:             tree = root
  150:             if not tree:
  151:                 return 0
  152:         
  153:         leftbranch = 0 if not (tree.left) else tree.left.height
--------------------------------------------------------------------------------
[0.15427 s] killed by ts-3-5/test_3-5_0-8_249.py::test_balance

sample_tree = <bst2.Bst object at 0x7c1a8e29d5d0>

    def test_balance(sample_tree):
>       assert sample_tree.balance() == 0

ts-3-5/test_3-5_0-8_249.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e29d5d0>, tree = None

>   ???
E   NameError: name 'root' is not defined

bst2:149: NameError
   - [# 241] SVD bst2: 
--------------------------------------------------------------------------------
  157:     
  158:     def pre_order(self, node='root'):
  159:         '''Depth first pre-order traversal of tree.'''
  160:         if node == 'root':
- 161:             node = self.root
+ 161:             node = root
  162:         
  163:         if not node:
  164:             return
  165:         
--------------------------------------------------------------------------------
[0.15512 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e635330>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e635330>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

bst2:161: NameError
   - [# 242] SVD bst2: 
--------------------------------------------------------------------------------
  164:             return
  165:         
  166:         yield node.val
  167:         
- 168:         for n in self.pre_order(node=node.left):
+ 168:         for n in pre_order(node=node.left):
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
  172:     
--------------------------------------------------------------------------------
[0.15594 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e222f80>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e222f80>
node = <bst2.Node object at 0x7c1a8e424280>

>   ???
E   NameError: name 'pre_order' is not defined

bst2:168: NameError
   - [# 243] SVD bst2: 
--------------------------------------------------------------------------------
  166:         yield node.val
  167:         
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
- 170:         for n in self.pre_order(node=node.right):
+ 170:         for n in pre_order(node=node.right):
  171:             yield n
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
--------------------------------------------------------------------------------
[0.15611 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e520b80>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]

ts-3-5/test_3-5_0-8_249.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:168: in pre_order
    ???
bst2:168: in pre_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e520b80>
node = <bst2.Node object at 0x7c1a8e5219f0>

>   ???
E   NameError: name 'pre_order' is not defined

bst2:170: NameError
   - [# 244] SVD bst2: 
--------------------------------------------------------------------------------
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
- 176:             node = self.root
+ 176:             node = root
  177:         
  178:         if not node:
  179:             return
  180:         
--------------------------------------------------------------------------------
[0.15531 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e212740>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e212740>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

bst2:176: NameError
   - [# 245] SVD bst2: 
--------------------------------------------------------------------------------
  177:         
  178:         if not node:
  179:             return
  180:         
- 181:         for n in self.in_order(node=node.left):
+ 181:         for n in in_order(node=node.left):
  182:             yield n
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
--------------------------------------------------------------------------------
[0.15702 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e5288b0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e5288b0>
node = <bst2.Node object at 0x7c1a8e503370>

>   ???
E   NameError: name 'in_order' is not defined

bst2:181: NameError
   - [# 246] SVD bst2: 
--------------------------------------------------------------------------------
  180:         
  181:         for n in self.in_order(node=node.left):
  182:             yield n
  183:         yield node.val
- 184:         for n in self.in_order(node=node.right):
+ 184:         for n in in_order(node=node.right):
  185:             yield n
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
--------------------------------------------------------------------------------
[0.15865 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e0141f0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]

ts-3-5/test_3-5_0-8_249.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:181: in in_order
    ???
bst2:181: in in_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e0141f0>
node = <bst2.Node object at 0x7c1a8e015600>

>   ???
E   NameError: name 'in_order' is not defined

bst2:184: NameError
   - [# 247] SVD bst2: 
--------------------------------------------------------------------------------
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
- 190:             node = self.root
+ 190:             node = root
  191:         
  192:         if not node:
  193:             return
  194:         
--------------------------------------------------------------------------------
[0.15532 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e21c280>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e21c280>, node = 'root'

>   ???
E   NameError: name 'root' is not defined

bst2:190: NameError
   - [# 248] SVD bst2: 
--------------------------------------------------------------------------------
  191:         
  192:         if not node:
  193:             return
  194:         
- 195:         for n in self.post_order(node=node.left):
+ 195:         for n in post_order(node=node.left):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
  198:             yield n
  199:         yield node.val
--------------------------------------------------------------------------------
[0.18497 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e58a470>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e58a470>
node = <bst2.Node object at 0x7c1a8e589000>

>   ???
E   NameError: name 'post_order' is not defined

bst2:195: NameError
   - [# 249] SVD bst2: 
--------------------------------------------------------------------------------
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
- 197:         for n in self.post_order(node=node.right):
+ 197:         for n in post_order(node=node.right):
  198:             yield n
  199:         yield node.val
  200:     
  201:     def breadth_first(self):
--------------------------------------------------------------------------------
[0.15791 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8dfaf8b0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]

ts-3-5/test_3-5_0-8_249.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
bst2:195: in post_order
    ???
bst2:195: in post_order
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8dfaf8b0>
node = <bst2.Node object at 0x7c1a8dfae5f0>

>   ???
E   NameError: name 'post_order' is not defined

bst2:197: NameError
   - [# 250] SVD bst2: 
--------------------------------------------------------------------------------
  200:     
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
- 204:         q.enqueue(self.root)
+ 204:         q.enqueue(root)
  205:         while q.peek():
  206:             node = q.dequeue()
  207:             yield node.val
  208:             if node.left:
--------------------------------------------------------------------------------
[0.15585 s] killed by ts-3-5/test_3-5_0-8_249.py::test_breadth_first

sample_tree = <bst2.Bst object at 0x7c1a8e3bb910>

    def test_breadth_first(sample_tree):
>       assert list(sample_tree.breadth_first()) == [50, 30, 70, 20, 40, 60, 80]

ts-3-5/test_3-5_0-8_249.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e3bb910>

>   ???
E   NameError: name 'root' is not defined

bst2:204: NameError
   - [# 251] SVD bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if (_size < 1 or not (self.contains(val))):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.16184 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e26c820>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e26c820>, val = 20

>   ???
E   NameError: name '_size' is not defined

bst2:215: NameError
   - [# 252] SVD bst2: 
--------------------------------------------------------------------------------
  211:                 q.enqueue(node.right)
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
- 215:         if (self._size < 1 or not (self.contains(val))):
+ 215:         if (self._size < 1 or not (contains(val))):
  216:             return
  217:         
  218:         node = self.search(val)
  219:         
--------------------------------------------------------------------------------
[0.15117 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e01ca30>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e01ca30>, val = 20

>   ???
E   NameError: name 'contains' is not defined

bst2:215: NameError
   - [# 253] SVD bst2: 
--------------------------------------------------------------------------------
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
  216:             return
  217:         
- 218:         node = self.search(val)
+ 218:         node = search(val)
  219:         
  220:         if node._is_leaf():
  221:             if node.parent:
  222:                 setattr(node.parent, node._side(), None)
--------------------------------------------------------------------------------
[0.15075 s] killed by ts-3-5/test_3-5_0-8_249.py::test_delete

sample_tree = <bst2.Bst object at 0x7c1a8e8cdb40>

    def test_delete(sample_tree):
>       sample_tree.delete(20)

ts-3-5/test_3-5_0-8_249.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <bst2.Bst object at 0x7c1a8e8cdb40>, val = 20

>   ???
E   NameError: name 'search' is not defined

bst2:218: NameError
   - [# 254] SVD bst2: 
--------------------------------------------------------------------------------
  220:         if node._is_leaf():
  221:             if node.parent:
  222:                 setattr(node.parent, node._side(), None)
  223:             else:
- 224:                 self.root = None
+ 224:                 root = None
  225:         
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
  228:             self._size += 1
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 255] SVD bst2: 
--------------------------------------------------------------------------------
  223:             else:
  224:                 self.root = None
  225:         
  226:         elif node._is_interior():
- 227:             next_node = self._find_replacement(node)
+ 227:             next_node = _find_replacement(node)
  228:             self._size += 1
  229:             self.delete(next_node.val)
  230:             node.val = next_node.val
  231:         else:
--------------------------------------------------------------------------------
[0.13024 s] survived
   - [# 256] SVD bst2: 
--------------------------------------------------------------------------------
  224:                 self.root = None
  225:         
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
- 228:             self._size += 1
+ 228:             _size += 1
  229:             self.delete(next_node.val)
  230:             node.val = next_node.val
  231:         else:
  232:             
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 257] SVD bst2: 
--------------------------------------------------------------------------------
  225:         
  226:         elif node._is_interior():
  227:             next_node = self._find_replacement(node)
  228:             self._size += 1
- 229:             self.delete(next_node.val)
+ 229:             delete(next_node.val)
  230:             node.val = next_node.val
  231:         else:
  232:             
  233:             child = getattr(node, node._onlychild())
--------------------------------------------------------------------------------
[0.15894 s] survived
   - [# 258] SVD bst2: 
--------------------------------------------------------------------------------
  234:             if node.parent:
  235:                 child.parent = node.parent
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
- 238:                 self.root = child
+ 238:                 root = child
  239:         
  240:         self._size -= 1
  241:     
  242:     def _find_replacement(self, node):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 259] SVD bst2: 
--------------------------------------------------------------------------------
  236:                 setattr(node.parent, node._side(), child)
  237:             else:
  238:                 self.root = child
  239:         
- 240:         self._size -= 1
+ 240:         _size -= 1
  241:     
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 260] SVD bst2: 
--------------------------------------------------------------------------------
  241:     
  242:     def _find_replacement(self, node):
  243:         '''Find left most node of right subtree.'''
  244:         if node.right:
- 245:             return self._findmin(node.right)
+ 245:             return _findmin(node.right)
  246:         
  247:         elif node.parent:
  248:             if node._side() == 'left':
  249:                 return self.parent
--------------------------------------------------------------------------------
[0.14802 s] survived
   - [# 261] SVD bst2: 
--------------------------------------------------------------------------------
  245:             return self._findmin(node.right)
  246:         
  247:         elif node.parent:
  248:             if node._side() == 'left':
- 249:                 return self.parent
+ 249:                 return parent
  250:             else:
  251:                 node.parent.right = None
  252:                 tmp = self._find_replacement(node.parent)
  253:                 node.parent.right = node
--------------------------------------------------------------------------------
[0.13096 s] survived
   - [# 262] SVD bst2: 
--------------------------------------------------------------------------------
  248:             if node._side() == 'left':
  249:                 return self.parent
  250:             else:
  251:                 node.parent.right = None
- 252:                 tmp = self._find_replacement(node.parent)
+ 252:                 tmp = _find_replacement(node.parent)
  253:                 node.parent.right = node
  254:                 return tmp
  255:     
  256:     def _findmin(self, node):
--------------------------------------------------------------------------------
[0.12760 s] survived
   - [# 263] ZIL bst2: 
--------------------------------------------------------------------------------
   81:         self.root = None
   82:         
   83:         if data:
   84:             for i in data:
-  85:                 self.insert(i)
+  85:                 break
   86:     
   87:     def insert(self, val):
   88:         '''Insert val into BST. If val is already present will be ignored.'''
   89:         if not (self.root):
--------------------------------------------------------------------------------
[0.15147 s] killed by ts-3-5/test_3-5_0-8_249.py::test_search

sample_tree = <bst2.Bst object at 0x7c1a8e5348e0>

    def test_search(sample_tree):
>       assert sample_tree.search(30).val == 30
E       AttributeError: 'NoneType' object has no attribute 'val'

ts-3-5/test_3-5_0-8_249.py:21: AttributeError
   - [# 264] ZIL bst2: 
--------------------------------------------------------------------------------
  117:     def search(self, val):
  118:         '''Return the node containing val.'''
  119:         curr = self.root
  120:         while curr:
- 121:             if curr.val == val:
- 122:                 return curr
- 123:             elif val < curr.val:
- 124:                 curr = curr.left
- 125:             else:
- 126:                 curr = curr.right
+ 121:             break
+ 122:     
+ 123:     
+ 124:     
+ 125:     
+ 126:     
  127:     
  128:     def size(self):
  129:         '''Return the size of the BST.'''
  130:         return self._size
--------------------------------------------------------------------------------
[0.15121 s] killed by ts-3-5/test_3-5_0-8_249.py::test_insert

sample_tree = <bst2.Bst object at 0x7c1a8df2eb60>

    def test_insert(sample_tree):
        sample_tree.insert(90)
>       assert sample_tree.contains(90) == True
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:18: AssertionError
   - [# 265] ZIL bst2: 
--------------------------------------------------------------------------------
  165:         
  166:         yield node.val
  167:         
  168:         for n in self.pre_order(node=node.left):
- 169:             yield n
+ 169:             break
  170:         for n in self.pre_order(node=node.right):
  171:             yield n
  172:     
  173:     def in_order(self, node='root'):
--------------------------------------------------------------------------------
[0.14618 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8e020cd0>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [# 266] ZIL bst2: 
--------------------------------------------------------------------------------
  167:         
  168:         for n in self.pre_order(node=node.left):
  169:             yield n
  170:         for n in self.pre_order(node=node.right):
- 171:             yield n
+ 171:             break
  172:     
  173:     def in_order(self, node='root'):
  174:         '''Depth first in-order traversal of tree.'''
  175:         if node == 'root':
--------------------------------------------------------------------------------
[0.18127 s] killed by ts-3-5/test_3-5_0-8_249.py::test_pre_order

sample_tree = <bst2.Bst object at 0x7c1a8de702b0>

    def test_pre_order(sample_tree):
>       assert list(sample_tree.pre_order()) == [50, 30, 20, 40, 70, 60, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:36: AssertionError
   - [# 267] ZIL bst2: 
--------------------------------------------------------------------------------
  178:         if not node:
  179:             return
  180:         
  181:         for n in self.in_order(node=node.left):
- 182:             yield n
+ 182:             break
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
  185:             yield n
  186:     
--------------------------------------------------------------------------------
[0.15618 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e1963e0>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [# 268] ZIL bst2: 
--------------------------------------------------------------------------------
  181:         for n in self.in_order(node=node.left):
  182:             yield n
  183:         yield node.val
  184:         for n in self.in_order(node=node.right):
- 185:             yield n
+ 185:             break
  186:     
  187:     def post_order(self, node='root'):
  188:         '''Depth frist post_order traversal of tree.'''
  189:         if node == 'root':
--------------------------------------------------------------------------------
[0.15675 s] killed by ts-3-5/test_3-5_0-8_249.py::test_in_order

sample_tree = <bst2.Bst object at 0x7c1a8e234790>

    def test_in_order(sample_tree):
>       assert list(sample_tree.in_order()) == [20, 30, 40, 50, 60, 70, 80]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:39: AssertionError
   - [# 269] ZIL bst2: 
--------------------------------------------------------------------------------
  192:         if not node:
  193:             return
  194:         
  195:         for n in self.post_order(node=node.left):
- 196:             yield n
+ 196:             break
  197:         for n in self.post_order(node=node.right):
  198:             yield n
  199:         yield node.val
  200:     
--------------------------------------------------------------------------------
[0.15528 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e10ebf0>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [# 270] ZIL bst2: 
--------------------------------------------------------------------------------
  194:         
  195:         for n in self.post_order(node=node.left):
  196:             yield n
  197:         for n in self.post_order(node=node.right):
- 198:             yield n
+ 198:             break
  199:         yield node.val
  200:     
  201:     def breadth_first(self):
  202:         '''Breadth first traversal of tree.'''
--------------------------------------------------------------------------------
[0.15670 s] killed by ts-3-5/test_3-5_0-8_249.py::test_post_order

sample_tree = <bst2.Bst object at 0x7c1a8e20cc10>

    def test_post_order(sample_tree):
>       assert list(sample_tree.post_order()) == [20, 40, 30, 60, 80, 70, 50]
E       AssertionError

ts-3-5/test_3-5_0-8_249.py:42: AssertionError
   - [# 271] ZIL bst2: 
--------------------------------------------------------------------------------
  202:         '''Breadth first traversal of tree.'''
  203:         q = Queue()
  204:         q.enqueue(self.root)
  205:         while q.peek():
- 206:             node = q.dequeue()
- 207:             yield node.val
- 208:             if node.left:
- 209:                 q.enqueue(node.left)
- 210:             if node.right:
- 211:                 q.enqueue(node.right)
+ 206:             break
+ 207:     
+ 208:     
+ 209:     
+ 210:     
+ 211:     
  212:     
  213:     def delete(self, val):
  214:         '''Remove a node from the tree.'''
  215:         if (self._size < 1 or not (self.contains(val))):
--------------------------------------------------------------------------------
[0.16251 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/bst2/ts-3-5/test_3-5_0-8_249.py:45: TypeError: 'NoneType' object is not iterable

   - [# 272] ZIL bst2: 
--------------------------------------------------------------------------------
  255:     
  256:     def _findmin(self, node):
  257:         '''Find min of subtree, Min is always left most node.'''
  258:         while node.left:
- 259:             node = node.left
+ 259:             break
  260:         return node
--------------------------------------------------------------------------------
[0.12135 s] survived
[*] Mutation score [89.71237 s]: 70.0%
   - all: 272
   - killed: 156 (57.4%)
   - survived: 68 (25.0%)
   - incompetent: 45 (16.5%)
   - timeout: 3 (1.1%)
