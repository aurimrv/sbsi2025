[*] Start mutation process:
   - targets: radixsort.py
   - tests: ts-3-5/test_3-5_0-9_294.py
[*] 6 tests passed:
   - test_3-5_0-9_294 [0.21195 s]
[*] Start mutants generation and execution:
   - [#   1] AOR radixsort: 
--------------------------------------------------------------------------------
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
-  8:             digit = (num // (base ** iteration)) % base
+  8:             digit = (num / (base ** iteration)) % base
   9:             buckets[digit].append(num)
  10:         
  11:         return buckets
  12:     
--------------------------------------------------------------------------------
[0.19741 s] incompetent

TypeError: radixsort:9: TypeError: list indices must be integers or slices, not float

   - [#   2] AOR radixsort: 
--------------------------------------------------------------------------------
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
-  8:             digit = (num // (base ** iteration)) % base
+  8:             digit = (num * (base ** iteration)) % base
   9:             buckets[digit].append(num)
  10:         
  11:         return buckets
  12:     
--------------------------------------------------------------------------------
[0.21080 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar1-10-expected1]

ar = [170, 45, 75, 90, 802, 24, ...], base = 10
expected = [2, 24, 45, 66, 75, 90, ...]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#   3] AOR radixsort: 
--------------------------------------------------------------------------------
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
-  8:             digit = (num // (base ** iteration)) % base
+  8:             digit = (num // (base * iteration)) % base
   9:             buckets[digit].append(num)
  10:         
  11:         return buckets
  12:     
--------------------------------------------------------------------------------
[0.21371 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
radixsort:25: in radixsort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [3, 2, 5, 1, 4], iteration = 0

>   ???
E   ZeroDivisionError: integer division or modulo by zero

radixsort:8: ZeroDivisionError
   - [#   4] AOR radixsort: 
--------------------------------------------------------------------------------
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
-  8:             digit = (num // (base ** iteration)) % base
+  8:             digit = (num // (base ** iteration)) * base
   9:             buckets[digit].append(num)
  10:         
  11:         return buckets
  12:     
--------------------------------------------------------------------------------
[0.22189 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
radixsort:25: in radixsort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [3, 2, 5, 1, 4], iteration = 0

>   ???
E   IndexError: list index out of range

radixsort:9: IndexError
   - [#   5] AOR radixsort: 
--------------------------------------------------------------------------------
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
  23:     
- 24:     while base ** iteration <= max_value:
+ 24:     while base * iteration <= max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.18905 s] survived
   - [#   6] ASR radixsort: 
--------------------------------------------------------------------------------
  22:     iteration = 0
  23:     
  24:     while base ** iteration <= max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
- 26:         iteration += 1
+ 26:         iteration -= 1
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.21382 s] incompetent

TypeError: radixsort:9: TypeError: list indices must be integers or slices, not float

   - [#   7] COI radixsort: 
--------------------------------------------------------------------------------
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
  23:     
- 24:     while base ** iteration <= max_value:
+ 24:     while not (base ** iteration <= max_value):
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.21044 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#   8] OIL radixsort: 
--------------------------------------------------------------------------------
   6:         
   7:         for num in ar:
   8:             digit = (num // (base ** iteration)) % base
   9:             buckets[digit].append(num)
- 10:         
+ 10:             break
  11:         return buckets
  12:     
  13:     def create_list(buckets):
  14:         nums = []
--------------------------------------------------------------------------------
[0.21329 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#   9] OIL radixsort: 
--------------------------------------------------------------------------------
  14:         nums = []
  15:         for bucket in buckets:
  16:             for num in bucket:
  17:                 nums.append(num)
- 18:         return nums
- 19:     
+ 18:             break
+ 19:         return nums
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
  23:     
--------------------------------------------------------------------------------
[0.20951 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  10] OIL radixsort: 
--------------------------------------------------------------------------------
  14:         nums = []
  15:         for bucket in buckets:
  16:             for num in bucket:
  17:                 nums.append(num)
- 18:         return nums
- 19:     
+ 18:                 break
+ 19:         return nums
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
  23:     
--------------------------------------------------------------------------------
[0.21500 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar1-10-expected1]

ar = [170, 45, 75, 90, 802, 24, ...], base = 10
expected = [2, 24, 45, 66, 75, 90, ...]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  11] OIL radixsort: 
--------------------------------------------------------------------------------
  23:     
  24:     while base ** iteration <= max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
- 27:     
+ 27:         break
  28:     return ar
--------------------------------------------------------------------------------
[0.21053 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar1-10-expected1]

ar = [170, 45, 75, 90, 802, 24, ...], base = 10
expected = [2, 24, 45, 66, 75, 90, ...]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  12] RIL radixsort: 
--------------------------------------------------------------------------------
   3:     '''
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
-  7:         for num in ar:
+  7:         for num in reversed(ar):
   8:             digit = (num // (base ** iteration)) % base
   9:             buckets[digit].append(num)
  10:         
  11:         return buckets
--------------------------------------------------------------------------------
[0.21120 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar1-10-expected1]

ar = [170, 45, 75, 90, 802, 24, ...], base = 10
expected = [2, 24, 45, 66, 75, 90, ...]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  13] RIL radixsort: 
--------------------------------------------------------------------------------
  11:         return buckets
  12:     
  13:     def create_list(buckets):
  14:         nums = []
- 15:         for bucket in buckets:
+ 15:         for bucket in reversed(buckets):
  16:             for num in bucket:
  17:                 nums.append(num)
  18:         return nums
  19:     
--------------------------------------------------------------------------------
[0.20964 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  14] RIL radixsort: 
--------------------------------------------------------------------------------
  12:     
  13:     def create_list(buckets):
  14:         nums = []
  15:         for bucket in buckets:
- 16:             for num in bucket:
+ 16:             for num in reversed(bucket):
  17:                 nums.append(num)
  18:         return nums
  19:     
  20:     max_value = max(ar)
--------------------------------------------------------------------------------
[0.21343 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar1-10-expected1]

ar = [170, 45, 75, 90, 802, 24, ...], base = 10
expected = [2, 24, 45, 66, 75, 90, ...]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  15] ROR radixsort: 
--------------------------------------------------------------------------------
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
  23:     
- 24:     while base ** iteration <= max_value:
+ 24:     while base ** iteration >= max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.19727 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  16] ROR radixsort: 
--------------------------------------------------------------------------------
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
  23:     
- 24:     while base ** iteration <= max_value:
+ 24:     while base ** iteration < max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.19869 s] survived
   - [#  17] SDL radixsort: 
--------------------------------------------------------------------------------
   1: def radixsort(ar: list, base=10):
   2:     '''
   3:     '''
   4:     def create_buckets(ar, iteration):
-  5:         buckets = [[] for x in range(0, base)]
+  5:         pass
   6:         
   7:         for num in ar:
   8:             digit = (num // (base ** iteration)) % base
   9:             buckets[digit].append(num)
--------------------------------------------------------------------------------
[0.20143 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
radixsort:25: in radixsort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [3, 2, 5, 1, 4], iteration = 0

>   ???
E   NameError: name 'buckets' is not defined

radixsort:9: NameError
   - [#  18] SDL radixsort: 
--------------------------------------------------------------------------------
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
-  8:             digit = (num // (base ** iteration)) % base
+  8:             pass
   9:             buckets[digit].append(num)
  10:         
  11:         return buckets
  12:     
--------------------------------------------------------------------------------
[0.21928 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
radixsort:25: in radixsort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [3, 2, 5, 1, 4], iteration = 0

>   ???
E   NameError: name 'digit' is not defined

radixsort:9: NameError
   - [#  19] SDL radixsort: 
--------------------------------------------------------------------------------
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
   8:             digit = (num // (base ** iteration)) % base
-  9:             buckets[digit].append(num)
+  9:             pass
  10:         
  11:         return buckets
  12:     
  13:     def create_list(buckets):
--------------------------------------------------------------------------------
[0.19727 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  20] SDL radixsort: 
--------------------------------------------------------------------------------
   7:         for num in ar:
   8:             digit = (num // (base ** iteration)) % base
   9:             buckets[digit].append(num)
  10:         
- 11:         return buckets
+ 11:         pass
  12:     
  13:     def create_list(buckets):
  14:         nums = []
  15:         for bucket in buckets:
--------------------------------------------------------------------------------
[0.20260 s] incompetent

TypeError: radixsort:15: TypeError: 'NoneType' object is not iterable

   - [#  21] SDL radixsort: 
--------------------------------------------------------------------------------
  10:         
  11:         return buckets
  12:     
  13:     def create_list(buckets):
- 14:         nums = []
+ 14:         pass
  15:         for bucket in buckets:
  16:             for num in bucket:
  17:                 nums.append(num)
  18:         return nums
--------------------------------------------------------------------------------
[0.20509 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
radixsort:25: in radixsort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

buckets = [[], [1], [2], [3], [4], [5], ...]

>   ???
E   NameError: name 'nums' is not defined

radixsort:17: NameError
   - [#  22] SDL radixsort: 
--------------------------------------------------------------------------------
  13:     def create_list(buckets):
  14:         nums = []
  15:         for bucket in buckets:
  16:             for num in bucket:
- 17:                 nums.append(num)
+ 17:                 pass
  18:         return nums
  19:     
  20:     max_value = max(ar)
  21:     
--------------------------------------------------------------------------------
[0.20086 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  23] SDL radixsort: 
--------------------------------------------------------------------------------
  14:         nums = []
  15:         for bucket in buckets:
  16:             for num in bucket:
  17:                 nums.append(num)
- 18:         return nums
+ 18:         pass
  19:     
  20:     max_value = max(ar)
  21:     
  22:     iteration = 0
--------------------------------------------------------------------------------
[0.19978 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  24] SDL radixsort: 
--------------------------------------------------------------------------------
  16:             for num in bucket:
  17:                 nums.append(num)
  18:         return nums
  19:     
- 20:     max_value = max(ar)
+ 20:     pass
  21:     
  22:     iteration = 0
  23:     
  24:     while base ** iteration <= max_value:
--------------------------------------------------------------------------------
[0.20062 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [3, 2, 5, 1, 4], base = 10

>   ???
E   NameError: name 'max_value' is not defined

radixsort:24: NameError
   - [#  25] SDL radixsort: 
--------------------------------------------------------------------------------
  18:         return nums
  19:     
  20:     max_value = max(ar)
  21:     
- 22:     iteration = 0
+ 22:     pass
  23:     
  24:     while base ** iteration <= max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
--------------------------------------------------------------------------------
[0.20282 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected

ts-3-5/test_3-5_0-9_294.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

ar = [3, 2, 5, 1, 4], base = 10

>   ???
E   UnboundLocalError: local variable 'iteration' referenced before assignment

radixsort:24: UnboundLocalError
   - [#  26] SDL radixsort: 
--------------------------------------------------------------------------------
  21:     
  22:     iteration = 0
  23:     
  24:     while base ** iteration <= max_value:
- 25:         ar = create_list(create_buckets(ar, iteration))
+ 25:         pass
  26:         iteration += 1
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.20252 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  27] SDL radixsort: 
--------------------------------------------------------------------------------
  24:     while base ** iteration <= max_value:
  25:         ar = create_list(create_buckets(ar, iteration))
  26:         iteration += 1
  27:     
- 28:     return ar
+ 28:     pass
--------------------------------------------------------------------------------
[0.20191 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  28] ZIL radixsort: 
--------------------------------------------------------------------------------
   4:     def create_buckets(ar, iteration):
   5:         buckets = [[] for x in range(0, base)]
   6:         
   7:         for num in ar:
-  8:             digit = (num // (base ** iteration)) % base
-  9:             buckets[digit].append(num)
+  8:             break
+  9:         
  10:         
  11:         return buckets
  12:     
  13:     def create_list(buckets):
--------------------------------------------------------------------------------
[0.20264 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  29] ZIL radixsort: 
--------------------------------------------------------------------------------
  12:     
  13:     def create_list(buckets):
  14:         nums = []
  15:         for bucket in buckets:
- 16:             for num in bucket:
- 17:                 nums.append(num)
+ 16:             break
+ 17:         
  18:         return nums
  19:     
  20:     max_value = max(ar)
  21:     
--------------------------------------------------------------------------------
[0.20266 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  30] ZIL radixsort: 
--------------------------------------------------------------------------------
  13:     def create_list(buckets):
  14:         nums = []
  15:         for bucket in buckets:
  16:             for num in bucket:
- 17:                 nums.append(num)
+ 17:                 break
  18:         return nums
  19:     
  20:     max_value = max(ar)
  21:     
--------------------------------------------------------------------------------
[0.20367 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
   - [#  31] ZIL radixsort: 
--------------------------------------------------------------------------------
  21:     
  22:     iteration = 0
  23:     
  24:     while base ** iteration <= max_value:
- 25:         ar = create_list(create_buckets(ar, iteration))
- 26:         iteration += 1
+ 25:         break
+ 26:     
  27:     
  28:     return ar
--------------------------------------------------------------------------------
[0.20008 s] killed by ts-3-5/test_3-5_0-9_294.py::test_radixsort[ar0-10-expected0]

ar = [3, 2, 5, 1, 4], base = 10, expected = [1, 2, 3, 4, 5]

    @pytest.mark.parametrize("ar, base, expected", [
        ([3, 2, 5, 1, 4], 10, [1, 2, 3, 4, 5]),  # Test sorting list of integers with base 10
        ([170, 45, 75, 90, 802, 24, 2, 66], 10, [2, 24, 45, 66, 75, 90, 170, 802]),  # Test sorting large list of integers with base 10
        ([543, 764, 245, 530, 345, 760, 555], 10, [245, 345, 530, 543, 555, 760, 764]),  # Test sorting list of different integers with base 10
    ])
    def test_radixsort(ar, base, expected):
>       assert radixsort(ar, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-9_294.py:17: AssertionError
[*] Mutation score [7.12415 s]: 92.9%
   - all: 31
   - killed: 26 (83.9%)
   - survived: 2 (6.5%)
   - incompetent: 3 (9.7%)
   - timeout: 0 (0.0%)
