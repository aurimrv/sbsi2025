[*] Start mutation process:
   - targets: hash_map.py
   - tests: ts-3-5/test_3-5_0-9_300.py
[*] 7 tests passed:
   - test_3-5_0-9_300 [0.19719 s]
[*] Start mutants generation and execution:
   - [#   1] AOR hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         hash_key = self.hash_function(key) * len(self.buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.20354 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e622c14e0>
hashmap = <hash_map.HashMap object at 0x707e622c3f70>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e622c3f70>, key = 'key1'
value = 'value1'

>   ???
E   IndexError: cannot fit 'int' into an index-sized integer

hash_map:32: IndexError
   - [#   2] AOR hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         hash_key = self.hash_function(key) * len(self.buckets)
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.19198 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e621a4340>
hashmap = <hash_map.HashMap object at 0x707e621a5ba0>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e621a5ba0>, key = 'key1'

>   ???
E   IndexError: cannot fit 'int' into an index-sized integer

hash_map:59: IndexError
   - [#   3] AOR hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         hash_key = self.hash_function(key) * len(self.buckets)
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.20279 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e6205e860>
hashmap = <hash_map.HashMap object at 0x707e6205f040>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e6205f040>, key = 'key1'

>   ???
E   IndexError: cannot fit 'int' into an index-sized integer

hash_map:84: IndexError
   - [#   4] AOR hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         hash = ((hash << 5) - hash) + ord(letter)
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.20422 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e621ed7b0>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#   5] AOR hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         hash = ((hash << 5) + hash) - ord(letter)
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.19448 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e620c9f90>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#   6] AOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) - (hash << 6)) + (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20960 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61e13520>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#   7] AOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash << 6)) - (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.19817 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61ebea70>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#   8] AOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) + hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20249 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e620c8880>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#   9] ASR hash_map: 
--------------------------------------------------------------------------------
  129:     '''
  130:     hash = 0
  131:     
  132:     for letter in str(key):
- 133:         hash += ord(letter)
+ 133:         hash -= ord(letter)
  134:     
  135:     return hash
--------------------------------------------------------------------------------
[0.20596 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_lose_lose_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e62164e80>

    def test_lose_lose_hash(self):
>       assert lose_lose("test") == 448
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:45: AssertionError
   - [#  10] CDI hash_map: 
--------------------------------------------------------------------------------
    2:     '''
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
-   6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
-   9:     
+   6:     @classmethod
+   7:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
+   8:         self.buckets = [[] for i in range(buckets)]
+   9:         self.hash_function = hash_function
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
   13: 
--------------------------------------------------------------------------------
[0.18593 s] incompetent

TypeError: hash_map:30: TypeError: HashMap.<lambda>() takes 1 positional argument but 2 were given

   - [#  11] CDI hash_map: 
--------------------------------------------------------------------------------
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
    8:         self.hash_function = hash_function
    9:     
-  10:     def insert(self, key, value):
-  11:         """
-  12:         Insert a key into the hash map.
-  13: 
-  14:         Insert a key into the map.  Internally the
-  15:         key is hashed with the internal hashing_function
-  16:         and placed into a bucket.  If the bucket  contains
-  17:         an element with the same key that keys value 
-  18:         will be overridden.
-  19: 
-  20:         Args:
-  21:             key: the key that will be hashed to index 
-  22:                 the value 
-  23:             value: the value that will be stored at
-  24:                 the index of 'key'
-  25: 
-  26:         Returns:
-  27:             None 
-  28:         """
-  29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
-  31:         
-  32:         bucket = self.buckets[hash_key]
-  33:         
-  34:         for (i, val) in enumerate(bucket):
-  35:             
-  36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
-  38:                 return
-  39:         
-  40:         bucket.append((key, value))
-  41:     
+  10:     @classmethod
+  11:     def insert(self, key, value):
+  12:         """
+  13:         Insert a key into the hash map.
+  14: 
+  15:         Insert a key into the map.  Internally the
+  16:         key is hashed with the internal hashing_function
+  17:         and placed into a bucket.  If the bucket  contains
+  18:         an element with the same key that keys value 
+  19:         will be overridden.
+  20: 
+  21:         Args:
+  22:             key: the key that will be hashed to index 
+  23:                 the value 
+  24:             value: the value that will be stored at
+  25:                 the index of 'key'
+  26: 
+  27:         Returns:
+  28:             None 
+  29:         """
+  30:         
+  31:         hash_key = self.hash_function(key) % len(self.buckets)
+  32:         
+  33:         bucket = self.buckets[hash_key]
+  34:         
+  35:         for (i, val) in enumerate(bucket):
+  36:             
+  37:             if val[0] == key:
+  38:                 bucket[i] = (key, value)
+  39:                 return
+  40:         
+  41:         bucket.append((key, value))
   42:     def get(self, key):
   43:         '''
   44:         Get a value from the map.
   45: 
--------------------------------------------------------------------------------
[0.19797 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61d21120>
hashmap = <hash_map.HashMap object at 0x707e61d214b0>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'hash_map.HashMap'>, key = 'key1', value = 'value1'

>   ???
E   AttributeError: type object 'HashMap' has no attribute 'hash_function'

hash_map:31: AttributeError
   - [#  12] CDI hash_map: 
--------------------------------------------------------------------------------
   38:                 return
   39:         
   40:         bucket.append((key, value))
   41:     
-  42:     def get(self, key):
-  43:         '''
-  44:         Get a value from the map.
-  45: 
-  46:         Args:
-  47:             key: the identifying key which will have its
-  48:                 value returned
-  49:         
-  50:         Returns:
-  51:             The value that is stored within key.
-  52: 
-  53:         Raises:
-  54:             KeyError: Raised when key cannot be found.
-  55:         '''
-  56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
-  58:         
-  59:         bucket = self.buckets[hash_key]
-  60:         
+  42:     @classmethod
+  43:     def get(self, key):
+  44:         '''
+  45:         Get a value from the map.
+  46: 
+  47:         Args:
+  48:             key: the identifying key which will have its
+  49:                 value returned
+  50:         
+  51:         Returns:
+  52:             The value that is stored within key.
+  53: 
+  54:         Raises:
+  55:             KeyError: Raised when key cannot be found.
+  56:         '''
+  57:         
+  58:         hash_key = self.hash_function(key) % len(self.buckets)
+  59:         
+  60:         bucket = self.buckets[hash_key]
   61:         
-  62:         for val in bucket:
-  63:             if val[0] == key:
-  64:                 return val[1]
-  65:         
-  66:         raise KeyError
-  67:     
+  62:         
+  63:         for val in bucket:
+  64:             if val[0] == key:
+  65:                 return val[1]
+  66:         
+  67:         raise KeyError
   68:     def delete(self, key):
   69:         '''
   70:         Delete a key from the map.
   71: 
--------------------------------------------------------------------------------
[0.20273 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61bcdde0>
hashmap = <hash_map.HashMap object at 0x707e61bce170>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'hash_map.HashMap'>, key = 'key1'

>   ???
E   AttributeError: type object 'HashMap' has no attribute 'hash_function'

hash_map:58: AttributeError
   - [#  13] CDI hash_map: 
--------------------------------------------------------------------------------
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
-  68:     def delete(self, key):
-  69:         '''
-  70:         Delete a key from the map.
-  71: 
-  72:         Args:
-  73:             key: the key to delete
-  74:         
-  75:         Returns:
-  76:             The value of the key that was deleted.
-  77: 
-  78:         Raises:
-  79:             KeyError: Raised when the key cannot be found.
-  80:         '''
-  81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
-  83:         
-  84:         bucket = self.buckets[hash_key]
-  85:         
+  68:     @classmethod
+  69:     def delete(self, key):
+  70:         '''
+  71:         Delete a key from the map.
+  72: 
+  73:         Args:
+  74:             key: the key to delete
+  75:         
+  76:         Returns:
+  77:             The value of the key that was deleted.
+  78: 
+  79:         Raises:
+  80:             KeyError: Raised when the key cannot be found.
+  81:         '''
+  82:         
+  83:         hash_key = self.hash_function(key) % len(self.buckets)
+  84:         
+  85:         bucket = self.buckets[hash_key]
   86:         
-  87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
-  89:                 del bucket[i]
-  90:                 return val
-  91:         
-  92:         raise KeyError
-  93: 
+  87:         
+  88:         for (i, val) in enumerate(bucket):
+  89:             if val[0] == key:
+  90:                 del bucket[i]
+  91:                 return val
+  92:         
+  93:         raise KeyError
   94: def djb2(key):
   95:     '''
   96:     Classic hashing function by Bernstein.
   97: 
--------------------------------------------------------------------------------
[0.20383 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62167fd0>
hashmap = <hash_map.HashMap object at 0x707e62167f40>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'hash_map.HashMap'>, key = 'key1'

>   ???
E   AttributeError: type object 'HashMap' has no attribute 'hash_function'

hash_map:83: AttributeError
   - [#  14] COI hash_map: 
--------------------------------------------------------------------------------
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
-  36:             if val[0] == key:
+  36:             if not (val[0] == key):
   37:                 bucket[i] = (key, value)
   38:                 return
   39:         
   40:         bucket.append((key, value))
--------------------------------------------------------------------------------
[0.22279 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_override_existing_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620cbb20>
hashmap = <hash_map.HashMap object at 0x707e620ca6b0>

    def test_insert_override_existing_key(self, hashmap):
        hashmap.insert("key1", "value1")
        hashmap.insert("key1", "new_value")
>       assert hashmap.get("key1") == "new_value"
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:29: AssertionError
   - [#  15] COI hash_map: 
--------------------------------------------------------------------------------
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
-  63:             if val[0] == key:
+  63:             if not (val[0] == key):
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
--------------------------------------------------------------------------------
[0.22054 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61eb11b0>
hashmap = <hash_map.HashMap object at 0x707e61bdc070>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61bdc070>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  16] COI hash_map: 
--------------------------------------------------------------------------------
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
+  88:             if not (val[0] == key):
   89:                 del bucket[i]
   90:                 return val
   91:         
   92:         raise KeyError
--------------------------------------------------------------------------------
[0.19779 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61d6a650>
hashmap = <hash_map.HashMap object at 0x707e61d699f0>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61d699f0>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  17] LOR hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         hash = ((hash >> 5) + hash) + ord(letter)
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.20305 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61e0c9d0>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#  18] LOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash >> 6)) + (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20028 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61e0fbb0>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  19] LOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash << 6)) + (hash >> 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20612 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e621a4dc0>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  20] OIL hash_map: 
--------------------------------------------------------------------------------
   35:             
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
   38:                 return
-  39:         
+  39:             break
   40:         bucket.append((key, value))
   41:     
   42:     def get(self, key):
   43:         '''
--------------------------------------------------------------------------------
[0.18029 s] survived
   - [#  21] OIL hash_map: 
--------------------------------------------------------------------------------
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
   64:                 return val[1]
-  65:         
+  65:             break
   66:         raise KeyError
   67:     
   68:     def delete(self, key):
   69:         '''
--------------------------------------------------------------------------------
[0.17695 s] survived
   - [#  22] OIL hash_map: 
--------------------------------------------------------------------------------
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
   89:                 del bucket[i]
   90:                 return val
-  91:         
+  91:             break
   92:         raise KeyError
   93: 
   94: def djb2(key):
   95:     '''
--------------------------------------------------------------------------------
[0.17714 s] survived
   - [#  23] OIL hash_map: 
--------------------------------------------------------------------------------
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
  104:         hash = ((hash << 5) + hash) + ord(letter)
- 105:     
+ 105:         break
  106:     return hash
  107: 
  108: def sdbm(key):
  109:     '''
--------------------------------------------------------------------------------
[0.20506 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e6205ec50>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#  24] OIL hash_map: 
--------------------------------------------------------------------------------
  115:     hash = 0
  116:     
  117:     for letter in str(key):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
- 119:     
+ 119:         break
  120:     return hash
  121: 
  122: def lose_lose(key):
  123:     '''
--------------------------------------------------------------------------------
[0.21317 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61e0e9b0>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  25] OIL hash_map: 
--------------------------------------------------------------------------------
  130:     hash = 0
  131:     
  132:     for letter in str(key):
  133:         hash += ord(letter)
- 134:     
+ 134:         break
  135:     return hash
--------------------------------------------------------------------------------
[0.20083 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_lose_lose_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61de0a30>

    def test_lose_lose_hash(self):
>       assert lose_lose("test") == 448
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:45: AssertionError
   - [#  26] RIL hash_map: 
--------------------------------------------------------------------------------
   30:         hash_key = self.hash_function(key) % len(self.buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
-  34:         for (i, val) in enumerate(bucket):
+  34:         for (i, val) in reversed(enumerate(bucket)):
   35:             
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
   38:                 return
--------------------------------------------------------------------------------
[0.19900 s] incompetent

TypeError: hash_map:34: TypeError: 'enumerate' object is not reversible

   - [#  27] RIL hash_map: 
--------------------------------------------------------------------------------
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
-  62:         for val in bucket:
+  62:         for val in reversed(bucket):
   63:             if val[0] == key:
   64:                 return val[1]
   65:         
   66:         raise KeyError
--------------------------------------------------------------------------------
[0.18855 s] survived
   - [#  28] RIL hash_map: 
--------------------------------------------------------------------------------
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
-  87:         for (i, val) in enumerate(bucket):
+  87:         for (i, val) in reversed(enumerate(bucket)):
   88:             if val[0] == key:
   89:                 del bucket[i]
   90:                 return val
   91:         
--------------------------------------------------------------------------------
[0.20954 s] incompetent

TypeError: hash_map:87: TypeError: 'enumerate' object is not reversible

   - [#  29] RIL hash_map: 
--------------------------------------------------------------------------------
   99:     by dan bernstein many years ago in comp.lang.c.
  100:     '''
  101:     hash = 5381
  102:     
- 103:     for letter in str(key):
+ 103:     for letter in reversed(str(key)):
  104:         hash = ((hash << 5) + hash) + ord(letter)
  105:     
  106:     return hash
  107: 
--------------------------------------------------------------------------------
[0.20314 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61c133a0>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#  30] RIL hash_map: 
--------------------------------------------------------------------------------
  113:      reimplementation of ndbm) database library.
  114:     '''
  115:     hash = 0
  116:     
- 117:     for letter in str(key):
+ 117:     for letter in reversed(str(key)):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
--------------------------------------------------------------------------------
[0.22032 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e6202a440>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  31] RIL hash_map: 
--------------------------------------------------------------------------------
  128:     algorithm, but it has the merit of extreme simplicity."
  129:     '''
  130:     hash = 0
  131:     
- 132:     for letter in str(key):
+ 132:     for letter in reversed(str(key)):
  133:         hash += ord(letter)
  134:     
  135:     return hash
--------------------------------------------------------------------------------
[0.17937 s] survived
   - [#  32] ROR hash_map: 
--------------------------------------------------------------------------------
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
-  36:             if val[0] == key:
+  36:             if val[0] != key:
   37:                 bucket[i] = (key, value)
   38:                 return
   39:         
   40:         bucket.append((key, value))
--------------------------------------------------------------------------------
[0.20284 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_override_existing_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620c95a0>
hashmap = <hash_map.HashMap object at 0x707e620c8400>

    def test_insert_override_existing_key(self, hashmap):
        hashmap.insert("key1", "value1")
        hashmap.insert("key1", "new_value")
>       assert hashmap.get("key1") == "new_value"
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:29: AssertionError
   - [#  33] ROR hash_map: 
--------------------------------------------------------------------------------
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
-  63:             if val[0] == key:
+  63:             if val[0] != key:
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
--------------------------------------------------------------------------------
[0.20532 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61dc9210>
hashmap = <hash_map.HashMap object at 0x707e61dca410>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61dca410>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  34] ROR hash_map: 
--------------------------------------------------------------------------------
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
+  88:             if val[0] != key:
   89:                 del bucket[i]
   90:                 return val
   91:         
   92:         raise KeyError
--------------------------------------------------------------------------------
[0.20074 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61dc8f10>
hashmap = <hash_map.HashMap object at 0x707e61dc9c30>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61dc9c30>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  35] SDI hash_map: 
--------------------------------------------------------------------------------
    2:     '''
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
-   6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
-   9:     
+   6:     @staticmethod
+   7:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
+   8:         self.buckets = [[] for i in range(buckets)]
+   9:         self.hash_function = hash_function
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
   13: 
--------------------------------------------------------------------------------
[0.20264 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_300.py:14: TypeError: HashMap.__init__() missing 1 required positional argument: 'self'

   - [#  36] SDI hash_map: 
--------------------------------------------------------------------------------
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
    8:         self.hash_function = hash_function
    9:     
-  10:     def insert(self, key, value):
-  11:         """
-  12:         Insert a key into the hash map.
-  13: 
-  14:         Insert a key into the map.  Internally the
-  15:         key is hashed with the internal hashing_function
-  16:         and placed into a bucket.  If the bucket  contains
-  17:         an element with the same key that keys value 
-  18:         will be overridden.
-  19: 
-  20:         Args:
-  21:             key: the key that will be hashed to index 
-  22:                 the value 
-  23:             value: the value that will be stored at
-  24:                 the index of 'key'
-  25: 
-  26:         Returns:
-  27:             None 
-  28:         """
-  29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
-  31:         
-  32:         bucket = self.buckets[hash_key]
-  33:         
-  34:         for (i, val) in enumerate(bucket):
-  35:             
-  36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
-  38:                 return
-  39:         
-  40:         bucket.append((key, value))
-  41:     
+  10:     @staticmethod
+  11:     def insert(self, key, value):
+  12:         """
+  13:         Insert a key into the hash map.
+  14: 
+  15:         Insert a key into the map.  Internally the
+  16:         key is hashed with the internal hashing_function
+  17:         and placed into a bucket.  If the bucket  contains
+  18:         an element with the same key that keys value 
+  19:         will be overridden.
+  20: 
+  21:         Args:
+  22:             key: the key that will be hashed to index 
+  23:                 the value 
+  24:             value: the value that will be stored at
+  25:                 the index of 'key'
+  26: 
+  27:         Returns:
+  28:             None 
+  29:         """
+  30:         
+  31:         hash_key = self.hash_function(key) % len(self.buckets)
+  32:         
+  33:         bucket = self.buckets[hash_key]
+  34:         
+  35:         for (i, val) in enumerate(bucket):
+  36:             
+  37:             if val[0] == key:
+  38:                 bucket[i] = (key, value)
+  39:                 return
+  40:         
+  41:         bucket.append((key, value))
   42:     def get(self, key):
   43:         '''
   44:         Get a value from the map.
   45: 
--------------------------------------------------------------------------------
[0.19908 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_300.py:17: TypeError: HashMap.insert() missing 1 required positional argument: 'value'

   - [#  37] SDI hash_map: 
--------------------------------------------------------------------------------
   38:                 return
   39:         
   40:         bucket.append((key, value))
   41:     
-  42:     def get(self, key):
-  43:         '''
-  44:         Get a value from the map.
-  45: 
-  46:         Args:
-  47:             key: the identifying key which will have its
-  48:                 value returned
-  49:         
-  50:         Returns:
-  51:             The value that is stored within key.
-  52: 
-  53:         Raises:
-  54:             KeyError: Raised when key cannot be found.
-  55:         '''
-  56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
-  58:         
-  59:         bucket = self.buckets[hash_key]
-  60:         
+  42:     @staticmethod
+  43:     def get(self, key):
+  44:         '''
+  45:         Get a value from the map.
+  46: 
+  47:         Args:
+  48:             key: the identifying key which will have its
+  49:                 value returned
+  50:         
+  51:         Returns:
+  52:             The value that is stored within key.
+  53: 
+  54:         Raises:
+  55:             KeyError: Raised when key cannot be found.
+  56:         '''
+  57:         
+  58:         hash_key = self.hash_function(key) % len(self.buckets)
+  59:         
+  60:         bucket = self.buckets[hash_key]
   61:         
-  62:         for val in bucket:
-  63:             if val[0] == key:
-  64:                 return val[1]
-  65:         
-  66:         raise KeyError
-  67:     
+  62:         
+  63:         for val in bucket:
+  64:             if val[0] == key:
+  65:                 return val[1]
+  66:         
+  67:         raise KeyError
   68:     def delete(self, key):
   69:         '''
   70:         Delete a key from the map.
   71: 
--------------------------------------------------------------------------------
[0.20184 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_300.py:18: TypeError: HashMap.get() missing 1 required positional argument: 'key'

   - [#  38] SDI hash_map: 
--------------------------------------------------------------------------------
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
-  68:     def delete(self, key):
-  69:         '''
-  70:         Delete a key from the map.
-  71: 
-  72:         Args:
-  73:             key: the key to delete
-  74:         
-  75:         Returns:
-  76:             The value of the key that was deleted.
-  77: 
-  78:         Raises:
-  79:             KeyError: Raised when the key cannot be found.
-  80:         '''
-  81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
-  83:         
-  84:         bucket = self.buckets[hash_key]
-  85:         
+  68:     @staticmethod
+  69:     def delete(self, key):
+  70:         '''
+  71:         Delete a key from the map.
+  72: 
+  73:         Args:
+  74:             key: the key to delete
+  75:         
+  76:         Returns:
+  77:             The value of the key that was deleted.
+  78: 
+  79:         Raises:
+  80:             KeyError: Raised when the key cannot be found.
+  81:         '''
+  82:         
+  83:         hash_key = self.hash_function(key) % len(self.buckets)
+  84:         
+  85:         bucket = self.buckets[hash_key]
   86:         
-  87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
-  89:                 del bucket[i]
-  90:                 return val
-  91:         
-  92:         raise KeyError
-  93: 
+  87:         
+  88:         for (i, val) in enumerate(bucket):
+  89:             if val[0] == key:
+  90:                 del bucket[i]
+  91:                 return val
+  92:         
+  93:         raise KeyError
   94: def djb2(key):
   95:     '''
   96:     Classic hashing function by Bernstein.
   97: 
--------------------------------------------------------------------------------
[0.20160 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_300.py:33: TypeError: HashMap.delete() missing 1 required positional argument: 'key'

   - [#  39] SDL hash_map: 
--------------------------------------------------------------------------------
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
+   7:         pass
    8:         self.hash_function = hash_function
    9:     
   10:     def insert(self, key, value):
   11:         """
--------------------------------------------------------------------------------
[0.20271 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62071f00>
hashmap = <hash_map.HashMap object at 0x707e62070b50>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e62070b50>, key = 'key1'
value = 'value1'

>   ???
E   AttributeError: 'HashMap' object has no attribute 'buckets'

hash_map:30: AttributeError
   - [#  40] SDL hash_map: 
--------------------------------------------------------------------------------
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
+   8:         pass
    9:     
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
--------------------------------------------------------------------------------
[0.20008 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e6202b280>
hashmap = <hash_map.HashMap object at 0x707e6202a8f0>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e6202a8f0>, key = 'key1'
value = 'value1'

>   ???
E   AttributeError: 'HashMap' object has no attribute 'hash_function'

hash_map:30: AttributeError
   - [#  41] SDL hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         pass
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.19969 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620735b0>
hashmap = <hash_map.HashMap object at 0x707e62072740>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e62072740>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'hash_key' is not defined

hash_map:32: NameError
   - [#  42] SDL hash_map: 
--------------------------------------------------------------------------------
   28:         """
   29:         
   30:         hash_key = self.hash_function(key) % len(self.buckets)
   31:         
-  32:         bucket = self.buckets[hash_key]
+  32:         pass
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
--------------------------------------------------------------------------------
[0.19906 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620c8a30>
hashmap = <hash_map.HashMap object at 0x707e620cafe0>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620cafe0>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'bucket' is not defined

hash_map:34: NameError
   - [#  43] SDL hash_map: 
--------------------------------------------------------------------------------
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
+  37:                 pass
   38:                 return
   39:         
   40:         bucket.append((key, value))
   41:     
--------------------------------------------------------------------------------
[0.21952 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_override_existing_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61eb3130>
hashmap = <hash_map.HashMap object at 0x707e61eb2aa0>

    def test_insert_override_existing_key(self, hashmap):
        hashmap.insert("key1", "value1")
        hashmap.insert("key1", "new_value")
>       assert hashmap.get("key1") == "new_value"
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:29: AssertionError
   - [#  44] SDL hash_map: 
--------------------------------------------------------------------------------
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
-  38:                 return
+  38:                 pass
   39:         
   40:         bucket.append((key, value))
   41:     
   42:     def get(self, key):
--------------------------------------------------------------------------------
[0.19695 s] survived
   - [#  45] SDL hash_map: 
--------------------------------------------------------------------------------
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
   38:                 return
   39:         
-  40:         bucket.append((key, value))
+  40:         pass
   41:     
   42:     def get(self, key):
   43:         '''
   44:         Get a value from the map.
--------------------------------------------------------------------------------
[0.20515 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e621ec940>
hashmap = <hash_map.HashMap object at 0x707e621edf90>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e621edf90>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  46] SDL hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         pass
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.20176 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62166d10>
hashmap = <hash_map.HashMap object at 0x707e620f1150>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620f1150>, key = 'key1'

>   ???
E   NameError: name 'hash_key' is not defined

hash_map:59: NameError
   - [#  47] SDL hash_map: 
--------------------------------------------------------------------------------
   55:         '''
   56:         
   57:         hash_key = self.hash_function(key) % len(self.buckets)
   58:         
-  59:         bucket = self.buckets[hash_key]
+  59:         pass
   60:         
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20277 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62166bf0>
hashmap = <hash_map.HashMap object at 0x707e621640d0>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e621640d0>, key = 'key1'

>   ???
E   NameError: name 'bucket' is not defined

hash_map:62: NameError
   - [#  48] SDL hash_map: 
--------------------------------------------------------------------------------
   60:         
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
-  64:                 return val[1]
+  64:                 pass
   65:         
   66:         raise KeyError
   67:     
   68:     def delete(self, key):
--------------------------------------------------------------------------------
[0.20816 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620f2b90>
hashmap = <hash_map.HashMap object at 0x707e620f2fe0>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620f2fe0>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  49] SDL hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         pass
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.20225 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61e0ca60>
hashmap = <hash_map.HashMap object at 0x707e61e0d600>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61e0d600>, key = 'key1'

>   ???
E   NameError: name 'hash_key' is not defined

hash_map:84: NameError
   - [#  50] SDL hash_map: 
--------------------------------------------------------------------------------
   80:         '''
   81:         
   82:         hash_key = self.hash_function(key) % len(self.buckets)
   83:         
-  84:         bucket = self.buckets[hash_key]
+  84:         pass
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20173 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62045360>
hashmap = <hash_map.HashMap object at 0x707e621ef910>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e621ef910>, key = 'key1'

>   ???
E   NameError: name 'bucket' is not defined

hash_map:87: NameError
   - [#  51] SDL hash_map: 
--------------------------------------------------------------------------------
   86:         
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
   89:                 del bucket[i]
-  90:                 return val
+  90:                 pass
   91:         
   92:         raise KeyError
   93: 
   94: def djb2(key):
--------------------------------------------------------------------------------
[0.20500 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62045360>
hashmap = <hash_map.HashMap object at 0x707e61d6b400>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61d6b400>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  52] SDL hash_map: 
--------------------------------------------------------------------------------
   97: 
   98:     This algorithm (k=33) was first reported 
   99:     by dan bernstein many years ago in comp.lang.c.
  100:     '''
- 101:     hash = 5381
+ 101:     pass
  102:     
  103:     for letter in str(key):
  104:         hash = ((hash << 5) + hash) + ord(letter)
  105:     
--------------------------------------------------------------------------------
[0.20767 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e6205f640>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493

ts-3-5/test_3-5_0-9_300.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = 'test'

>   ???
E   UnboundLocalError: local variable 'hash' referenced before assignment

hash_map:104: UnboundLocalError
   - [#  53] SDL hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         pass
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.20547 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e621eda50>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#  54] SDL hash_map: 
--------------------------------------------------------------------------------
  102:     
  103:     for letter in str(key):
  104:         hash = ((hash << 5) + hash) + ord(letter)
  105:     
- 106:     return hash
+ 106:     pass
  107: 
  108: def sdbm(key):
  109:     '''
  110:     This function is a good bit scrambling function.
--------------------------------------------------------------------------------
[0.20510 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e620cb250>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#  55] SDL hash_map: 
--------------------------------------------------------------------------------
  111: 
  112:     This algorithm was created for sdbm (a public-domain
  113:      reimplementation of ndbm) database library.
  114:     '''
- 115:     hash = 0
+ 115:     pass
  116:     
  117:     for letter in str(key):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
  119:     
--------------------------------------------------------------------------------
[0.20503 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61ebe5c0>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586

ts-3-5/test_3-5_0-9_300.py:42: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = 'test'

>   ???
E   UnboundLocalError: local variable 'hash' referenced before assignment

hash_map:118: UnboundLocalError
   - [#  56] SDL hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         pass
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.22231 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61d68040>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  57] SDL hash_map: 
--------------------------------------------------------------------------------
  116:     
  117:     for letter in str(key):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
  119:     
- 120:     return hash
+ 120:     pass
  121: 
  122: def lose_lose(key):
  123:     '''
  124:     This hash function is extremely bad.  Don\'t use it.
--------------------------------------------------------------------------------
[0.20895 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e620c8820>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  58] SDL hash_map: 
--------------------------------------------------------------------------------
  126:     This hash function appeared in K&R (1st ed) but at least 
  127:     the reader was warned: "This is not the best possible 
  128:     algorithm, but it has the merit of extreme simplicity."
  129:     '''
- 130:     hash = 0
+ 130:     pass
  131:     
  132:     for letter in str(key):
  133:         hash += ord(letter)
  134:     
--------------------------------------------------------------------------------
[0.20243 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_lose_lose_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61ebded0>

    def test_lose_lose_hash(self):
>       assert lose_lose("test") == 448

ts-3-5/test_3-5_0-9_300.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = 'test'

>   ???
E   UnboundLocalError: local variable 'hash' referenced before assignment

hash_map:133: UnboundLocalError
   - [#  59] SDL hash_map: 
--------------------------------------------------------------------------------
  131:     
  132:     for letter in str(key):
  133:         hash += ord(letter)
  134:     
- 135:     return hash
+ 135:     pass
--------------------------------------------------------------------------------
[0.20068 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_lose_lose_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e62046890>

    def test_lose_lose_hash(self):
>       assert lose_lose("test") == 448
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:45: AssertionError
   - [#  60] SVD hash_map: 
--------------------------------------------------------------------------------
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
+   7:         buckets = [[] for i in range(buckets)]
    8:         self.hash_function = hash_function
    9:     
   10:     def insert(self, key, value):
   11:         """
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  61] SVD hash_map: 
--------------------------------------------------------------------------------
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
+   8:         hash_function = hash_function
    9:     
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  62] SVD hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         hash_key = hash_function(key) % len(self.buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.19722 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e62046830>
hashmap = <hash_map.HashMap object at 0x707e620449d0>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620449d0>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'hash_function' is not defined

hash_map:30: NameError
   - [#  63] SVD hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         hash_key = self.hash_function(key) % len(buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.19690 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620f2500>
hashmap = <hash_map.HashMap object at 0x707e620f0070>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620f0070>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:30: NameError
   - [#  64] SVD hash_map: 
--------------------------------------------------------------------------------
   28:         """
   29:         
   30:         hash_key = self.hash_function(key) % len(self.buckets)
   31:         
-  32:         bucket = self.buckets[hash_key]
+  32:         bucket = buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
--------------------------------------------------------------------------------
[0.19976 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61de2c50>
hashmap = <hash_map.HashMap object at 0x707e61de3b20>

    def test_insert_and_get_single_key(self, hashmap):
>       hashmap.insert("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61de3b20>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:32: NameError
   - [#  65] SVD hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         hash_key = hash_function(key) % len(self.buckets)
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.20696 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e621672b0>
hashmap = <hash_map.HashMap object at 0x707e62166e90>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e62166e90>, key = 'key1'

>   ???
E   NameError: name 'hash_function' is not defined

hash_map:57: NameError
   - [#  66] SVD hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         hash_key = self.hash_function(key) % len(buckets)
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.19935 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620c97e0>
hashmap = <hash_map.HashMap object at 0x707e620cabc0>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620cabc0>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:57: NameError
   - [#  67] SVD hash_map: 
--------------------------------------------------------------------------------
   55:         '''
   56:         
   57:         hash_key = self.hash_function(key) % len(self.buckets)
   58:         
-  59:         bucket = self.buckets[hash_key]
+  59:         bucket = buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20060 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61d8c580>
hashmap = <hash_map.HashMap object at 0x707e61d8e1d0>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61d8e1d0>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:59: NameError
   - [#  68] SVD hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         hash_key = hash_function(key) % len(self.buckets)
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.20227 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61e5e290>
hashmap = <hash_map.HashMap object at 0x707e61e5e4a0>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61e5e4a0>, key = 'key1'

>   ???
E   NameError: name 'hash_function' is not defined

hash_map:82: NameError
   - [#  69] SVD hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         hash_key = self.hash_function(key) % len(buckets)
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.20175 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61e5eec0>
hashmap = <hash_map.HashMap object at 0x707e61e5df30>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61e5df30>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:82: NameError
   - [#  70] SVD hash_map: 
--------------------------------------------------------------------------------
   80:         '''
   81:         
   82:         hash_key = self.hash_function(key) % len(self.buckets)
   83:         
-  84:         bucket = self.buckets[hash_key]
+  84:         bucket = buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20153 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61d8c910>
hashmap = <hash_map.HashMap object at 0x707e61d8ebc0>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61d8ebc0>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:84: NameError
   - [#  71] ZIL hash_map: 
--------------------------------------------------------------------------------
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
-  36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
-  38:                 return
+  36:             break
+  37:         
+  38:         
   39:         
   40:         bucket.append((key, value))
   41:     
   42:     def get(self, key):
--------------------------------------------------------------------------------
[0.20502 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_override_existing_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61c39a50>
hashmap = <hash_map.HashMap object at 0x707e61c393c0>

    def test_insert_override_existing_key(self, hashmap):
        hashmap.insert("key1", "value1")
        hashmap.insert("key1", "new_value")
>       assert hashmap.get("key1") == "new_value"
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:29: AssertionError
   - [#  72] ZIL hash_map: 
--------------------------------------------------------------------------------
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
-  63:             if val[0] == key:
-  64:                 return val[1]
+  63:             break
+  64:         
   65:         
   66:         raise KeyError
   67:     
   68:     def delete(self, key):
--------------------------------------------------------------------------------
[0.20275 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_insert_and_get_single_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e61eb1570>
hashmap = <hash_map.HashMap object at 0x707e61eb1ed0>

    def test_insert_and_get_single_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.get("key1") == "value1"

ts-3-5/test_3-5_0-9_300.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e61eb1ed0>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  73] ZIL hash_map: 
--------------------------------------------------------------------------------
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
-  89:                 del bucket[i]
-  90:                 return val
+  88:             break
+  89:         
+  90:         
   91:         
   92:         raise KeyError
   93: 
   94: def djb2(key):
--------------------------------------------------------------------------------
[0.21715 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashMap::test_delete_key

self = <test_3-5_0-9_300.TestHashMap object at 0x707e620f13f0>
hashmap = <hash_map.HashMap object at 0x707e620f33d0>

    def test_delete_key(self, hashmap):
        hashmap.insert("key1", "value1")
>       assert hashmap.delete("key1") == ("key1", "value1")

ts-3-5/test_3-5_0-9_300.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x707e620f33d0>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  74] ZIL hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         break
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.20550 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_djb2_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61de3f40>

    def test_djb2_hash(self):
>       assert djb2("test") == 6385723493
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:39: AssertionError
   - [#  75] ZIL hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         break
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20361 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_sdbm_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e6205c340>

    def test_sdbm_hash(self):
>       assert sdbm("test") == 32745785343201586
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:42: AssertionError
   - [#  76] ZIL hash_map: 
--------------------------------------------------------------------------------
  129:     '''
  130:     hash = 0
  131:     
  132:     for letter in str(key):
- 133:         hash += ord(letter)
+ 133:         break
  134:     
  135:     return hash
--------------------------------------------------------------------------------
[0.20351 s] killed by ts-3-5/test_3-5_0-9_300.py::TestHashFunctions::test_lose_lose_hash

self = <test_3-5_0-9_300.TestHashFunctions object at 0x707e61d6bf70>

    def test_lose_lose_hash(self):
>       assert lose_lose("test") == 448
E       AssertionError

ts-3-5/test_3-5_0-9_300.py:45: AssertionError
[*] Mutation score [18.39507 s]: 91.0%
   - all: 76
   - killed: 61 (80.3%)
   - survived: 6 (7.9%)
   - incompetent: 9 (11.8%)
   - timeout: 0 (0.0%)
