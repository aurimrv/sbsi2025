[*] Start mutation process:
   - targets: hash_map.py
   - tests: ts-3-5/test_3-5_0-9_274.py
[*] 6 tests passed:
   - test_3-5_0-9_274 [0.19672 s]
[*] Start mutants generation and execution:
   - [#   1] AOR hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         hash_key = self.hash_function(key) * len(self.buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.21167 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e856050>, key = 'key1'
value = 'value1'

>   ???
E   IndexError: list index out of range

hash_map:32: IndexError
   - [#   2] AOR hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         hash_key = self.hash_function(key) * len(self.buckets)
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.20131 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e913df0>, key = 'key1'

>   ???
E   IndexError: list index out of range

hash_map:59: IndexError
   - [#   3] AOR hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         hash_key = self.hash_function(key) * len(self.buckets)
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.20923 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e913ca0>, key = 'key1'

>   ???
E   IndexError: list index out of range

hash_map:84: IndexError
   - [#   4] AOR hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         hash = ((hash << 5) - hash) + ord(letter)
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.19999 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#   5] AOR hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         hash = ((hash << 5) + hash) - ord(letter)
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.20396 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#   6] AOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) - (hash << 6)) + (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.18746 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#   7] AOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash << 6)) - (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20032 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#   8] AOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) + hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20395 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#   9] ASR hash_map: 
--------------------------------------------------------------------------------
  129:     '''
  130:     hash = 0
  131:     
  132:     for letter in str(key):
- 133:         hash += ord(letter)
+ 133:         hash -= ord(letter)
  134:     
  135:     return hash
--------------------------------------------------------------------------------
[0.20180 s] killed by ts-3-5/test_3-5_0-9_274.py::test_lose_lose_hash_function

def test_lose_lose_hash_function():
>       assert lose_lose('ABC') == 198
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:48: AssertionError
   - [#  10] CDI hash_map: 
--------------------------------------------------------------------------------
    2:     '''
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
-   6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
-   9:     
+   6:     @classmethod
+   7:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
+   8:         self.buckets = [[] for i in range(buckets)]
+   9:         self.hash_function = hash_function
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
   13: 
--------------------------------------------------------------------------------
[0.19768 s] incompetent

TypeError: hash_map:30: TypeError: djb2() takes 1 positional argument but 2 were given

   - [#  11] CDI hash_map: 
--------------------------------------------------------------------------------
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
    8:         self.hash_function = hash_function
    9:     
-  10:     def insert(self, key, value):
-  11:         """
-  12:         Insert a key into the hash map.
-  13: 
-  14:         Insert a key into the map.  Internally the
-  15:         key is hashed with the internal hashing_function
-  16:         and placed into a bucket.  If the bucket  contains
-  17:         an element with the same key that keys value 
-  18:         will be overridden.
-  19: 
-  20:         Args:
-  21:             key: the key that will be hashed to index 
-  22:                 the value 
-  23:             value: the value that will be stored at
-  24:                 the index of 'key'
-  25: 
-  26:         Returns:
-  27:             None 
-  28:         """
-  29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
-  31:         
-  32:         bucket = self.buckets[hash_key]
-  33:         
-  34:         for (i, val) in enumerate(bucket):
-  35:             
-  36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
-  38:                 return
-  39:         
-  40:         bucket.append((key, value))
-  41:     
+  10:     @classmethod
+  11:     def insert(self, key, value):
+  12:         """
+  13:         Insert a key into the hash map.
+  14: 
+  15:         Insert a key into the map.  Internally the
+  16:         key is hashed with the internal hashing_function
+  17:         and placed into a bucket.  If the bucket  contains
+  18:         an element with the same key that keys value 
+  19:         will be overridden.
+  20: 
+  21:         Args:
+  22:             key: the key that will be hashed to index 
+  23:                 the value 
+  24:             value: the value that will be stored at
+  25:                 the index of 'key'
+  26: 
+  27:         Returns:
+  28:             None 
+  29:         """
+  30:         
+  31:         hash_key = self.hash_function(key) % len(self.buckets)
+  32:         
+  33:         bucket = self.buckets[hash_key]
+  34:         
+  35:         for (i, val) in enumerate(bucket):
+  36:             
+  37:             if val[0] == key:
+  38:                 bucket[i] = (key, value)
+  39:                 return
+  40:         
+  41:         bucket.append((key, value))
   42:     def get(self, key):
   43:         '''
   44:         Get a value from the map.
   45: 
--------------------------------------------------------------------------------
[0.20464 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'hash_map.HashMap'>, key = 'key1', value = 'value1'

>   ???
E   AttributeError: type object 'HashMap' has no attribute 'hash_function'

hash_map:31: AttributeError
   - [#  12] CDI hash_map: 
--------------------------------------------------------------------------------
   38:                 return
   39:         
   40:         bucket.append((key, value))
   41:     
-  42:     def get(self, key):
-  43:         '''
-  44:         Get a value from the map.
-  45: 
-  46:         Args:
-  47:             key: the identifying key which will have its
-  48:                 value returned
-  49:         
-  50:         Returns:
-  51:             The value that is stored within key.
-  52: 
-  53:         Raises:
-  54:             KeyError: Raised when key cannot be found.
-  55:         '''
-  56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
-  58:         
-  59:         bucket = self.buckets[hash_key]
-  60:         
+  42:     @classmethod
+  43:     def get(self, key):
+  44:         '''
+  45:         Get a value from the map.
+  46: 
+  47:         Args:
+  48:             key: the identifying key which will have its
+  49:                 value returned
+  50:         
+  51:         Returns:
+  52:             The value that is stored within key.
+  53: 
+  54:         Raises:
+  55:             KeyError: Raised when key cannot be found.
+  56:         '''
+  57:         
+  58:         hash_key = self.hash_function(key) % len(self.buckets)
+  59:         
+  60:         bucket = self.buckets[hash_key]
   61:         
-  62:         for val in bucket:
-  63:             if val[0] == key:
-  64:                 return val[1]
-  65:         
-  66:         raise KeyError
-  67:     
+  62:         
+  63:         for val in bucket:
+  64:             if val[0] == key:
+  65:                 return val[1]
+  66:         
+  67:         raise KeyError
   68:     def delete(self, key):
   69:         '''
   70:         Delete a key from the map.
   71: 
--------------------------------------------------------------------------------
[0.19665 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'hash_map.HashMap'>, key = 'key1'

>   ???
E   AttributeError: type object 'HashMap' has no attribute 'hash_function'

hash_map:58: AttributeError
   - [#  13] CDI hash_map: 
--------------------------------------------------------------------------------
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
-  68:     def delete(self, key):
-  69:         '''
-  70:         Delete a key from the map.
-  71: 
-  72:         Args:
-  73:             key: the key to delete
-  74:         
-  75:         Returns:
-  76:             The value of the key that was deleted.
-  77: 
-  78:         Raises:
-  79:             KeyError: Raised when the key cannot be found.
-  80:         '''
-  81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
-  83:         
-  84:         bucket = self.buckets[hash_key]
-  85:         
+  68:     @classmethod
+  69:     def delete(self, key):
+  70:         '''
+  71:         Delete a key from the map.
+  72: 
+  73:         Args:
+  74:             key: the key to delete
+  75:         
+  76:         Returns:
+  77:             The value of the key that was deleted.
+  78: 
+  79:         Raises:
+  80:             KeyError: Raised when the key cannot be found.
+  81:         '''
+  82:         
+  83:         hash_key = self.hash_function(key) % len(self.buckets)
+  84:         
+  85:         bucket = self.buckets[hash_key]
   86:         
-  87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
-  89:                 del bucket[i]
-  90:                 return val
-  91:         
-  92:         raise KeyError
-  93: 
+  87:         
+  88:         for (i, val) in enumerate(bucket):
+  89:             if val[0] == key:
+  90:                 del bucket[i]
+  91:                 return val
+  92:         
+  93:         raise KeyError
   94: def djb2(key):
   95:     '''
   96:     Classic hashing function by Bernstein.
   97: 
--------------------------------------------------------------------------------
[0.18847 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'hash_map.HashMap'>, key = 'key1'

>   ???
E   AttributeError: type object 'HashMap' has no attribute 'hash_function'

hash_map:83: AttributeError
   - [#  14] COI hash_map: 
--------------------------------------------------------------------------------
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
-  36:             if val[0] == key:
+  36:             if not (val[0] == key):
   37:                 bucket[i] = (key, value)
   38:                 return
   39:         
   40:         bucket.append((key, value))
--------------------------------------------------------------------------------
[0.20162 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
        assert h.get('key1') == 'value1'
    
        h.insert('key1', 'value2')
>       assert h.get('key1') == 'value2'
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:16: AssertionError
   - [#  15] COI hash_map: 
--------------------------------------------------------------------------------
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
-  63:             if val[0] == key:
+  63:             if not (val[0] == key):
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
--------------------------------------------------------------------------------
[0.22050 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e5c61a0>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  16] COI hash_map: 
--------------------------------------------------------------------------------
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
+  88:             if not (val[0] == key):
   89:                 del bucket[i]
   90:                 return val
   91:         
   92:         raise KeyError
--------------------------------------------------------------------------------
[0.20071 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e5d1a20>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  17] LOR hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         hash = ((hash >> 5) + hash) + ord(letter)
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.19900 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#  18] LOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash >> 6)) + (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20701 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  19] LOR hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         hash = ((ord(letter) + (hash << 6)) + (hash >> 16)) - hash
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.18749 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  20] OIL hash_map: 
--------------------------------------------------------------------------------
   35:             
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
   38:                 return
-  39:         
+  39:             break
   40:         bucket.append((key, value))
   41:     
   42:     def get(self, key):
   43:         '''
--------------------------------------------------------------------------------
[0.18084 s] survived
   - [#  21] OIL hash_map: 
--------------------------------------------------------------------------------
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
   64:                 return val[1]
-  65:         
+  65:             break
   66:         raise KeyError
   67:     
   68:     def delete(self, key):
   69:         '''
--------------------------------------------------------------------------------
[0.18256 s] survived
   - [#  22] OIL hash_map: 
--------------------------------------------------------------------------------
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
   89:                 del bucket[i]
   90:                 return val
-  91:         
+  91:             break
   92:         raise KeyError
   93: 
   94: def djb2(key):
   95:     '''
--------------------------------------------------------------------------------
[0.18150 s] survived
   - [#  23] OIL hash_map: 
--------------------------------------------------------------------------------
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
  104:         hash = ((hash << 5) + hash) + ord(letter)
- 105:     
+ 105:         break
  106:     return hash
  107: 
  108: def sdbm(key):
  109:     '''
--------------------------------------------------------------------------------
[0.21085 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#  24] OIL hash_map: 
--------------------------------------------------------------------------------
  115:     hash = 0
  116:     
  117:     for letter in str(key):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
- 119:     
+ 119:         break
  120:     return hash
  121: 
  122: def lose_lose(key):
  123:     '''
--------------------------------------------------------------------------------
[0.20464 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  25] OIL hash_map: 
--------------------------------------------------------------------------------
  130:     hash = 0
  131:     
  132:     for letter in str(key):
  133:         hash += ord(letter)
- 134:     
+ 134:         break
  135:     return hash
--------------------------------------------------------------------------------
[0.19815 s] killed by ts-3-5/test_3-5_0-9_274.py::test_lose_lose_hash_function

def test_lose_lose_hash_function():
>       assert lose_lose('ABC') == 198
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:48: AssertionError
   - [#  26] RIL hash_map: 
--------------------------------------------------------------------------------
   30:         hash_key = self.hash_function(key) % len(self.buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
-  34:         for (i, val) in enumerate(bucket):
+  34:         for (i, val) in reversed(enumerate(bucket)):
   35:             
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
   38:                 return
--------------------------------------------------------------------------------
[0.18577 s] incompetent

TypeError: hash_map:34: TypeError: 'enumerate' object is not reversible

   - [#  27] RIL hash_map: 
--------------------------------------------------------------------------------
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
-  62:         for val in bucket:
+  62:         for val in reversed(bucket):
   63:             if val[0] == key:
   64:                 return val[1]
   65:         
   66:         raise KeyError
--------------------------------------------------------------------------------
[0.19492 s] survived
   - [#  28] RIL hash_map: 
--------------------------------------------------------------------------------
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
-  87:         for (i, val) in enumerate(bucket):
+  87:         for (i, val) in reversed(enumerate(bucket)):
   88:             if val[0] == key:
   89:                 del bucket[i]
   90:                 return val
   91:         
--------------------------------------------------------------------------------
[0.20507 s] incompetent

TypeError: hash_map:87: TypeError: 'enumerate' object is not reversible

   - [#  29] RIL hash_map: 
--------------------------------------------------------------------------------
   99:     by dan bernstein many years ago in comp.lang.c.
  100:     '''
  101:     hash = 5381
  102:     
- 103:     for letter in str(key):
+ 103:     for letter in reversed(str(key)):
  104:         hash = ((hash << 5) + hash) + ord(letter)
  105:     
  106:     return hash
  107: 
--------------------------------------------------------------------------------
[0.20029 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#  30] RIL hash_map: 
--------------------------------------------------------------------------------
  113:      reimplementation of ndbm) database library.
  114:     '''
  115:     hash = 0
  116:     
- 117:     for letter in str(key):
+ 117:     for letter in reversed(str(key)):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
  119:     
  120:     return hash
  121: 
--------------------------------------------------------------------------------
[0.21726 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  31] RIL hash_map: 
--------------------------------------------------------------------------------
  128:     algorithm, but it has the merit of extreme simplicity."
  129:     '''
  130:     hash = 0
  131:     
- 132:     for letter in str(key):
+ 132:     for letter in reversed(str(key)):
  133:         hash += ord(letter)
  134:     
  135:     return hash
--------------------------------------------------------------------------------
[0.18638 s] survived
   - [#  32] ROR hash_map: 
--------------------------------------------------------------------------------
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
-  36:             if val[0] == key:
+  36:             if val[0] != key:
   37:                 bucket[i] = (key, value)
   38:                 return
   39:         
   40:         bucket.append((key, value))
--------------------------------------------------------------------------------
[0.21063 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
        assert h.get('key1') == 'value1'
    
        h.insert('key1', 'value2')
>       assert h.get('key1') == 'value2'
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:16: AssertionError
   - [#  33] ROR hash_map: 
--------------------------------------------------------------------------------
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
-  63:             if val[0] == key:
+  63:             if val[0] != key:
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
--------------------------------------------------------------------------------
[0.18481 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e3e5450>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  34] ROR hash_map: 
--------------------------------------------------------------------------------
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
+  88:             if val[0] != key:
   89:                 del bucket[i]
   90:                 return val
   91:         
   92:         raise KeyError
--------------------------------------------------------------------------------
[0.20208 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e834f40>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  35] SDI hash_map: 
--------------------------------------------------------------------------------
    2:     '''
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
-   6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
-   9:     
+   6:     @staticmethod
+   7:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
+   8:         self.buckets = [[] for i in range(buckets)]
+   9:         self.hash_function = hash_function
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
   13: 
--------------------------------------------------------------------------------
[0.20308 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_274.py:10: TypeError: HashMap.__init__() missing 1 required positional argument: 'self'

   - [#  36] SDI hash_map: 
--------------------------------------------------------------------------------
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
    8:         self.hash_function = hash_function
    9:     
-  10:     def insert(self, key, value):
-  11:         """
-  12:         Insert a key into the hash map.
-  13: 
-  14:         Insert a key into the map.  Internally the
-  15:         key is hashed with the internal hashing_function
-  16:         and placed into a bucket.  If the bucket  contains
-  17:         an element with the same key that keys value 
-  18:         will be overridden.
-  19: 
-  20:         Args:
-  21:             key: the key that will be hashed to index 
-  22:                 the value 
-  23:             value: the value that will be stored at
-  24:                 the index of 'key'
-  25: 
-  26:         Returns:
-  27:             None 
-  28:         """
-  29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
-  31:         
-  32:         bucket = self.buckets[hash_key]
-  33:         
-  34:         for (i, val) in enumerate(bucket):
-  35:             
-  36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
-  38:                 return
-  39:         
-  40:         bucket.append((key, value))
-  41:     
+  10:     @staticmethod
+  11:     def insert(self, key, value):
+  12:         """
+  13:         Insert a key into the hash map.
+  14: 
+  15:         Insert a key into the map.  Internally the
+  16:         key is hashed with the internal hashing_function
+  17:         and placed into a bucket.  If the bucket  contains
+  18:         an element with the same key that keys value 
+  19:         will be overridden.
+  20: 
+  21:         Args:
+  22:             key: the key that will be hashed to index 
+  23:                 the value 
+  24:             value: the value that will be stored at
+  25:                 the index of 'key'
+  26: 
+  27:         Returns:
+  28:             None 
+  29:         """
+  30:         
+  31:         hash_key = self.hash_function(key) % len(self.buckets)
+  32:         
+  33:         bucket = self.buckets[hash_key]
+  34:         
+  35:         for (i, val) in enumerate(bucket):
+  36:             
+  37:             if val[0] == key:
+  38:                 bucket[i] = (key, value)
+  39:                 return
+  40:         
+  41:         bucket.append((key, value))
   42:     def get(self, key):
   43:         '''
   44:         Get a value from the map.
   45: 
--------------------------------------------------------------------------------
[0.20854 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_274.py:12: TypeError: HashMap.insert() missing 1 required positional argument: 'value'

   - [#  37] SDI hash_map: 
--------------------------------------------------------------------------------
   38:                 return
   39:         
   40:         bucket.append((key, value))
   41:     
-  42:     def get(self, key):
-  43:         '''
-  44:         Get a value from the map.
-  45: 
-  46:         Args:
-  47:             key: the identifying key which will have its
-  48:                 value returned
-  49:         
-  50:         Returns:
-  51:             The value that is stored within key.
-  52: 
-  53:         Raises:
-  54:             KeyError: Raised when key cannot be found.
-  55:         '''
-  56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
-  58:         
-  59:         bucket = self.buckets[hash_key]
-  60:         
+  42:     @staticmethod
+  43:     def get(self, key):
+  44:         '''
+  45:         Get a value from the map.
+  46: 
+  47:         Args:
+  48:             key: the identifying key which will have its
+  49:                 value returned
+  50:         
+  51:         Returns:
+  52:             The value that is stored within key.
+  53: 
+  54:         Raises:
+  55:             KeyError: Raised when key cannot be found.
+  56:         '''
+  57:         
+  58:         hash_key = self.hash_function(key) % len(self.buckets)
+  59:         
+  60:         bucket = self.buckets[hash_key]
   61:         
-  62:         for val in bucket:
-  63:             if val[0] == key:
-  64:                 return val[1]
-  65:         
-  66:         raise KeyError
-  67:     
+  62:         
+  63:         for val in bucket:
+  64:             if val[0] == key:
+  65:                 return val[1]
+  66:         
+  67:         raise KeyError
   68:     def delete(self, key):
   69:         '''
   70:         Delete a key from the map.
   71: 
--------------------------------------------------------------------------------
[0.20083 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_274.py:13: TypeError: HashMap.get() missing 1 required positional argument: 'key'

   - [#  38] SDI hash_map: 
--------------------------------------------------------------------------------
   64:                 return val[1]
   65:         
   66:         raise KeyError
   67:     
-  68:     def delete(self, key):
-  69:         '''
-  70:         Delete a key from the map.
-  71: 
-  72:         Args:
-  73:             key: the key to delete
-  74:         
-  75:         Returns:
-  76:             The value of the key that was deleted.
-  77: 
-  78:         Raises:
-  79:             KeyError: Raised when the key cannot be found.
-  80:         '''
-  81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
-  83:         
-  84:         bucket = self.buckets[hash_key]
-  85:         
+  68:     @staticmethod
+  69:     def delete(self, key):
+  70:         '''
+  71:         Delete a key from the map.
+  72: 
+  73:         Args:
+  74:             key: the key to delete
+  75:         
+  76:         Returns:
+  77:             The value of the key that was deleted.
+  78: 
+  79:         Raises:
+  80:             KeyError: Raised when the key cannot be found.
+  81:         '''
+  82:         
+  83:         hash_key = self.hash_function(key) % len(self.buckets)
+  84:         
+  85:         bucket = self.buckets[hash_key]
   86:         
-  87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
-  89:                 del bucket[i]
-  90:                 return val
-  91:         
-  92:         raise KeyError
-  93: 
+  87:         
+  88:         for (i, val) in enumerate(bucket):
+  89:             if val[0] == key:
+  90:                 del bucket[i]
+  91:                 return val
+  92:         
+  93:         raise KeyError
   94: def djb2(key):
   95:     '''
   96:     Classic hashing function by Bernstein.
   97: 
--------------------------------------------------------------------------------
[0.20815 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/hashmap/ts-3-5/test_3-5_0-9_274.py:31: TypeError: HashMap.delete() missing 1 required positional argument: 'key'

   - [#  39] SDL hash_map: 
--------------------------------------------------------------------------------
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
+   7:         pass
    8:         self.hash_function = hash_function
    9:     
   10:     def insert(self, key, value):
   11:         """
--------------------------------------------------------------------------------
[0.18922 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e8547f0>, key = 'key1'
value = 'value1'

>   ???
E   AttributeError: 'HashMap' object has no attribute 'buckets'

hash_map:30: AttributeError
   - [#  40] SDL hash_map: 
--------------------------------------------------------------------------------
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
+   8:         pass
    9:     
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
--------------------------------------------------------------------------------
[0.20432 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e8550c0>, key = 'key1'
value = 'value1'

>   ???
E   AttributeError: 'HashMap' object has no attribute 'hash_function'

hash_map:30: AttributeError
   - [#  41] SDL hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         pass
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.20430 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e528190>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'hash_key' is not defined

hash_map:32: NameError
   - [#  42] SDL hash_map: 
--------------------------------------------------------------------------------
   28:         """
   29:         
   30:         hash_key = self.hash_function(key) % len(self.buckets)
   31:         
-  32:         bucket = self.buckets[hash_key]
+  32:         pass
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20188 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e52a080>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'bucket' is not defined

hash_map:34: NameError
   - [#  43] SDL hash_map: 
--------------------------------------------------------------------------------
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
+  37:                 pass
   38:                 return
   39:         
   40:         bucket.append((key, value))
   41:     
--------------------------------------------------------------------------------
[0.20266 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
        assert h.get('key1') == 'value1'
    
        h.insert('key1', 'value2')
>       assert h.get('key1') == 'value2'
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:16: AssertionError
   - [#  44] SDL hash_map: 
--------------------------------------------------------------------------------
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
-  38:                 return
+  38:                 pass
   39:         
   40:         bucket.append((key, value))
   41:     
   42:     def get(self, key):
--------------------------------------------------------------------------------
[0.20171 s] survived
   - [#  45] SDL hash_map: 
--------------------------------------------------------------------------------
   36:             if val[0] == key:
   37:                 bucket[i] = (key, value)
   38:                 return
   39:         
-  40:         bucket.append((key, value))
+  40:         pass
   41:     
   42:     def get(self, key):
   43:         '''
   44:         Get a value from the map.
--------------------------------------------------------------------------------
[0.19266 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e835c00>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  46] SDL hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         pass
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.19594 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e3e4fa0>, key = 'key1'

>   ???
E   NameError: name 'hash_key' is not defined

hash_map:59: NameError
   - [#  47] SDL hash_map: 
--------------------------------------------------------------------------------
   55:         '''
   56:         
   57:         hash_key = self.hash_function(key) % len(self.buckets)
   58:         
-  59:         bucket = self.buckets[hash_key]
+  59:         pass
   60:         
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20063 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e5c7070>, key = 'key1'

>   ???
E   NameError: name 'bucket' is not defined

hash_map:62: NameError
   - [#  48] SDL hash_map: 
--------------------------------------------------------------------------------
   60:         
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
-  64:                 return val[1]
+  64:                 pass
   65:         
   66:         raise KeyError
   67:     
   68:     def delete(self, key):
--------------------------------------------------------------------------------
[0.22301 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e8f8220>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  49] SDL hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         pass
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.19943 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e836ad0>, key = 'key1'

>   ???
E   NameError: name 'hash_key' is not defined

hash_map:84: NameError
   - [#  50] SDL hash_map: 
--------------------------------------------------------------------------------
   80:         '''
   81:         
   82:         hash_key = self.hash_function(key) % len(self.buckets)
   83:         
-  84:         bucket = self.buckets[hash_key]
+  84:         pass
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
--------------------------------------------------------------------------------
[0.20047 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e9b9270>, key = 'key1'

>   ???
E   NameError: name 'bucket' is not defined

hash_map:87: NameError
   - [#  51] SDL hash_map: 
--------------------------------------------------------------------------------
   86:         
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
   89:                 del bucket[i]
-  90:                 return val
+  90:                 pass
   91:         
   92:         raise KeyError
   93: 
   94: def djb2(key):
--------------------------------------------------------------------------------
[0.20475 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e87cdc0>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  52] SDL hash_map: 
--------------------------------------------------------------------------------
   97: 
   98:     This algorithm (k=33) was first reported 
   99:     by dan bernstein many years ago in comp.lang.c.
  100:     '''
- 101:     hash = 5381
+ 101:     pass
  102:     
  103:     for letter in str(key):
  104:         hash = ((hash << 5) + hash) + ord(letter)
  105:     
--------------------------------------------------------------------------------
[0.19924 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
hash_map:30: in insert
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = 'key1'

>   ???
E   UnboundLocalError: local variable 'hash' referenced before assignment

hash_map:104: UnboundLocalError
   - [#  53] SDL hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         pass
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.20053 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#  54] SDL hash_map: 
--------------------------------------------------------------------------------
  102:     
  103:     for letter in str(key):
  104:         hash = ((hash << 5) + hash) + ord(letter)
  105:     
- 106:     return hash
+ 106:     pass
  107: 
  108: def sdbm(key):
  109:     '''
  110:     This function is a good bit scrambling function.
--------------------------------------------------------------------------------
[0.20163 s] incompetent

TypeError: hash_map:30: TypeError: unsupported operand type(s) for %: 'NoneType' and 'int'

   - [#  55] SDL hash_map: 
--------------------------------------------------------------------------------
  111: 
  112:     This algorithm was created for sdbm (a public-domain
  113:      reimplementation of ndbm) database library.
  114:     '''
- 115:     hash = 0
+ 115:     pass
  116:     
  117:     for letter in str(key):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
  119:     
--------------------------------------------------------------------------------
[0.19967 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666

ts-3-5/test_3-5_0-9_274.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = 'ABC'

>   ???
E   UnboundLocalError: local variable 'hash' referenced before assignment

hash_map:118: UnboundLocalError
   - [#  56] SDL hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         pass
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.20123 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  57] SDL hash_map: 
--------------------------------------------------------------------------------
  116:     
  117:     for letter in str(key):
  118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
  119:     
- 120:     return hash
+ 120:     pass
  121: 
  122: def lose_lose(key):
  123:     '''
  124:     This hash function is extremely bad.  Don\'t use it.
--------------------------------------------------------------------------------
[0.20527 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  58] SDL hash_map: 
--------------------------------------------------------------------------------
  126:     This hash function appeared in K&R (1st ed) but at least 
  127:     the reader was warned: "This is not the best possible 
  128:     algorithm, but it has the merit of extreme simplicity."
  129:     '''
- 130:     hash = 0
+ 130:     pass
  131:     
  132:     for letter in str(key):
  133:         hash += ord(letter)
  134:     
--------------------------------------------------------------------------------
[0.20106 s] killed by ts-3-5/test_3-5_0-9_274.py::test_lose_lose_hash_function

def test_lose_lose_hash_function():
>       assert lose_lose('ABC') == 198

ts-3-5/test_3-5_0-9_274.py:48: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

key = 'ABC'

>   ???
E   UnboundLocalError: local variable 'hash' referenced before assignment

hash_map:133: UnboundLocalError
   - [#  59] SDL hash_map: 
--------------------------------------------------------------------------------
  131:     
  132:     for letter in str(key):
  133:         hash += ord(letter)
  134:     
- 135:     return hash
+ 135:     pass
--------------------------------------------------------------------------------
[0.19584 s] killed by ts-3-5/test_3-5_0-9_274.py::test_lose_lose_hash_function

def test_lose_lose_hash_function():
>       assert lose_lose('ABC') == 198
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:48: AssertionError
   - [#  60] SVD hash_map: 
--------------------------------------------------------------------------------
    3:     Data structure that stores key:value pairs.
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
-   7:         self.buckets = [[] for i in range(buckets)]
+   7:         buckets = [[] for i in range(buckets)]
    8:         self.hash_function = hash_function
    9:     
   10:     def insert(self, key, value):
   11:         """
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  61] SVD hash_map: 
--------------------------------------------------------------------------------
    4:     '''
    5:     
    6:     def __init__(self, buckets=256, hash_function=lambda key: (hash(key))):
    7:         self.buckets = [[] for i in range(buckets)]
-   8:         self.hash_function = hash_function
+   8:         hash_function = hash_function
    9:     
   10:     def insert(self, key, value):
   11:         """
   12:         Insert a key into the hash map.
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  62] SVD hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         hash_key = hash_function(key) % len(self.buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.19695 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e9573a0>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'hash_function' is not defined

hash_map:30: NameError
   - [#  63] SVD hash_map: 
--------------------------------------------------------------------------------
   26:         Returns:
   27:             None 
   28:         """
   29:         
-  30:         hash_key = self.hash_function(key) % len(self.buckets)
+  30:         hash_key = self.hash_function(key) % len(buckets)
   31:         
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
--------------------------------------------------------------------------------
[0.19886 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e580160>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:30: NameError
   - [#  64] SVD hash_map: 
--------------------------------------------------------------------------------
   28:         """
   29:         
   30:         hash_key = self.hash_function(key) % len(self.buckets)
   31:         
-  32:         bucket = self.buckets[hash_key]
+  32:         bucket = buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
   36:             if val[0] == key:
--------------------------------------------------------------------------------
[0.19907 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
>       h.insert('key1', 'value1')

ts-3-5/test_3-5_0-9_274.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e4dbc70>, key = 'key1'
value = 'value1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:32: NameError
   - [#  65] SVD hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         hash_key = hash_function(key) % len(self.buckets)
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.20375 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e5d03d0>, key = 'key1'

>   ???
E   NameError: name 'hash_function' is not defined

hash_map:57: NameError
   - [#  66] SVD hash_map: 
--------------------------------------------------------------------------------
   53:         Raises:
   54:             KeyError: Raised when key cannot be found.
   55:         '''
   56:         
-  57:         hash_key = self.hash_function(key) % len(self.buckets)
+  57:         hash_key = self.hash_function(key) % len(buckets)
   58:         
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
--------------------------------------------------------------------------------
[0.20874 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e583940>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:57: NameError
   - [#  67] SVD hash_map: 
--------------------------------------------------------------------------------
   55:         '''
   56:         
   57:         hash_key = self.hash_function(key) % len(self.buckets)
   58:         
-  59:         bucket = self.buckets[hash_key]
+  59:         bucket = buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
   63:             if val[0] == key:
--------------------------------------------------------------------------------
[0.19765 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e6a3940>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:59: NameError
   - [#  68] SVD hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         hash_key = hash_function(key) % len(self.buckets)
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.19984 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e4db490>, key = 'key1'

>   ???
E   NameError: name 'hash_function' is not defined

hash_map:82: NameError
   - [#  69] SVD hash_map: 
--------------------------------------------------------------------------------
   78:         Raises:
   79:             KeyError: Raised when the key cannot be found.
   80:         '''
   81:         
-  82:         hash_key = self.hash_function(key) % len(self.buckets)
+  82:         hash_key = self.hash_function(key) % len(buckets)
   83:         
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
--------------------------------------------------------------------------------
[0.20285 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e4dad70>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:82: NameError
   - [#  70] SVD hash_map: 
--------------------------------------------------------------------------------
   80:         '''
   81:         
   82:         hash_key = self.hash_function(key) % len(self.buckets)
   83:         
-  84:         bucket = self.buckets[hash_key]
+  84:         bucket = buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
   88:             if val[0] == key:
--------------------------------------------------------------------------------
[0.19915 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e53c550>, key = 'key1'

>   ???
E   NameError: name 'buckets' is not defined

hash_map:84: NameError
   - [#  71] ZIL hash_map: 
--------------------------------------------------------------------------------
   32:         bucket = self.buckets[hash_key]
   33:         
   34:         for (i, val) in enumerate(bucket):
   35:             
-  36:             if val[0] == key:
-  37:                 bucket[i] = (key, value)
-  38:                 return
+  36:             break
+  37:         
+  38:         
   39:         
   40:         bucket.append((key, value))
   41:     
   42:     def get(self, key):
--------------------------------------------------------------------------------
[0.20164 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
        assert h.get('key1') == 'value1'
    
        h.insert('key1', 'value2')
>       assert h.get('key1') == 'value2'
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:16: AssertionError
   - [#  72] ZIL hash_map: 
--------------------------------------------------------------------------------
   59:         bucket = self.buckets[hash_key]
   60:         
   61:         
   62:         for val in bucket:
-  63:             if val[0] == key:
-  64:                 return val[1]
+  63:             break
+  64:         
   65:         
   66:         raise KeyError
   67:     
   68:     def delete(self, key):
--------------------------------------------------------------------------------
[0.20735 s] killed by ts-3-5/test_3-5_0-9_274.py::test_insert

def test_insert():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       assert h.get('key1') == 'value1'

ts-3-5/test_3-5_0-9_274.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e4dbe80>, key = 'key1'

>   ???
E   KeyError

hash_map:66: KeyError
   - [#  73] ZIL hash_map: 
--------------------------------------------------------------------------------
   84:         bucket = self.buckets[hash_key]
   85:         
   86:         
   87:         for (i, val) in enumerate(bucket):
-  88:             if val[0] == key:
-  89:                 del bucket[i]
-  90:                 return val
+  88:             break
+  89:         
+  90:         
   91:         
   92:         raise KeyError
   93: 
   94: def djb2(key):
--------------------------------------------------------------------------------
[0.22555 s] killed by ts-3-5/test_3-5_0-9_274.py::test_delete

def test_delete():
        h = HashMap(buckets=2, hash_function=djb2)
    
        h.insert('key1', 'value1')
>       deleted = h.delete('key1')

ts-3-5/test_3-5_0-9_274.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <hash_map.HashMap object at 0x73bc3e854a30>, key = 'key1'

>   ???
E   KeyError

hash_map:92: KeyError
   - [#  74] ZIL hash_map: 
--------------------------------------------------------------------------------
  100:     '''
  101:     hash = 5381
  102:     
  103:     for letter in str(key):
- 104:         hash = ((hash << 5) + hash) + ord(letter)
+ 104:         break
  105:     
  106:     return hash
  107: 
  108: def sdbm(key):
--------------------------------------------------------------------------------
[0.19365 s] killed by ts-3-5/test_3-5_0-9_274.py::test_djb2_hash_function

def test_djb2_hash_function():
>       assert djb2('ABC') == 193450027
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:40: AssertionError
   - [#  75] ZIL hash_map: 
--------------------------------------------------------------------------------
  114:     '''
  115:     hash = 0
  116:     
  117:     for letter in str(key):
- 118:         hash = ((ord(letter) + (hash << 6)) + (hash << 16)) - hash
+ 118:         break
  119:     
  120:     return hash
  121: 
  122: def lose_lose(key):
--------------------------------------------------------------------------------
[0.19973 s] killed by ts-3-5/test_3-5_0-9_274.py::test_sdbm_hash_function

def test_sdbm_hash_function():
>       assert sdbm('ABC') == 279714201666
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:44: AssertionError
   - [#  76] ZIL hash_map: 
--------------------------------------------------------------------------------
  129:     '''
  130:     hash = 0
  131:     
  132:     for letter in str(key):
- 133:         hash += ord(letter)
+ 133:         break
  134:     
  135:     return hash
--------------------------------------------------------------------------------
[0.20507 s] killed by ts-3-5/test_3-5_0-9_274.py::test_lose_lose_hash_function

def test_lose_lose_hash_function():
>       assert lose_lose('ABC') == 198
E       AssertionError

ts-3-5/test_3-5_0-9_274.py:48: AssertionError
[*] Mutation score [18.31351 s]: 90.9%
   - all: 76
   - killed: 60 (78.9%)
   - survived: 6 (7.9%)
   - incompetent: 10 (13.2%)
   - timeout: 0 (0.0%)
