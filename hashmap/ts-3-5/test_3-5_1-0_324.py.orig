import pytest
import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from hash_map import HashMap, djb2, sdbm, lose_lose

@pytest.fixture
def empty_hashmap():
    return HashMap()

@pytest.fixture
def filled_hashmap():
    hm = HashMap()
    hm.insert('key1', 'value1')
    hm.insert('key2', 'value2')
    return hm

def test_insert_new_key(empty_hashmap):
    empty_hashmap.insert('new_key', 'new_value')
    assert empty_hashmap.get('new_key') == 'new_value'

def test_insert_override_key(empty_hashmap):
    empty_hashmap.insert('key1', 'value1')
    empty_hashmap.insert('key1', 'updated_value')
    assert empty_hashmap.get('key1') == 'updated_value'

def test_get_existing_key(filled_hashmap):
    assert filled_hashmap.get('key1') == 'value1'

def test_get_non_existing_key(empty_hashmap):
    with pytest.raises(KeyError):
        empty_hashmap.get('non_existing_key')

def test_delete_existing_key(filled_hashmap):
    deleted_val = filled_hashmap.delete('key1')
    assert deleted_val[1] == 'value1'
    with pytest.raises(KeyError):
        filled_hashmap.get('key1')

def test_delete_non_existing_key(empty_hashmap):
    with pytest.raises(KeyError):
        empty_hashmap.delete('non_existing_key')

def test_djb2_hash_function():
    assert djb2('test') == 2090753665

def test_sdbm_hash_function():
    assert sdbm('test') == -1915591046

def test_lose_lose_hash_function():
    assert lose_lose('test') == 448