import os
import sys
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
from hash_map import HashMap, djb2, sdbm, lose_lose

def test_hash_map_insert():
    hm = HashMap()
    hm.insert('key1', 'value1')
    assert hm.get('key1') == 'value1'

def test_hash_map_insert_override():
    hm = HashMap()
    hm.insert('key1', 'value1')
    hm.insert('key1', 'value2')
    assert hm.get('key1') == 'value2'

def test_hash_map_get_key_error():
    hm = HashMap()
    try:
        hm.get('non_existent_key')
        assert False, "KeyError not raised for non-existent key"
    except KeyError:
        assert True

def test_hash_map_delete():
    hm = HashMap()
    hm.insert('key1', 'value1')
    deleted_value = hm.delete('key1')
    assert deleted_value == ('key1', 'value1')

def test_hash_map_delete_key_error():
    hm = HashMap()
    try:
        hm.delete('non_existent_key')
        assert False, "KeyError not raised for non-existent key"
    except KeyError:
        assert True

def test_hash_map_custom_hash_function():
    hm = HashMap(hash_function=djb2)
    hm.insert('key1', 'value1')
    assert hm.get('key1') == 'value1'

def test_hash_map_custom_hash_function_collision():
    hm = HashMap(buckets=1, hash_function=lambda key: 0)  # Force a collision
    hm.insert('key1', 'value1')
    hm.insert('key2', 'value2')
    assert hm.get('key1') == 'value1'

def test_custom_hash_functions():
    assert djb2('hello') == 1624026973
    assert sdbm('hello') == -1964518085
    assert lose_lose('hello') == 532