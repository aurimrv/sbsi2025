import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import linked_list1

import pytest

class TestListNode:

    def test_contains_cycle_single_node(self):
        node = linked_list1.ListNode(1)
        assert node.contains_cycle() == False

    def test_contains_cycle_no_cycle(self):
        node1 = linked_list1.ListNode(1)
        node2 = linked_list1.ListNode(2)
        node3 = linked_list1.ListNode(3)
        node1.next = node2
        node2.next = node3
        assert node1.contains_cycle() == False

    def test_contains_cycle_with_cycle(self):
        node1 = linked_list1.ListNode(1)
        node2 = linked_list1.ListNode(2)
        node3 = linked_list1.ListNode(3)
        node1.next = node2
        node2.next = node3
        node3.next = node1
        assert node1.contains_cycle() == True

    def test_get_beginning_of_cycle_if_exists_no_cycle(self):
        node1 = linked_list1.ListNode(1)
        node2 = linked_list1.ListNode(2)
        node3 = linked_list1.ListNode(3)
        node1.next = node2
        node2.next = node3
        assert node1.get_beginning_of_cycle_if_exists() == None

    def test_get_beginning_of_cycle_if_exists_with_cycle(self):
        node1 = linked_list1.ListNode(1)
        node2 = linked_list1.ListNode(2)
        node3 = linked_list1.ListNode(3)
        node1.next = node2
        node2.next = node3
        node3.next = node1
        assert node1.get_beginning_of_cycle_if_exists().val == 1

    def test_reverse_single_node(self):
        node = linked_list1.ListNode(1)
        reversed_node = node.reverse()
        assert reversed_node.val == 1 and reversed_node.next == None

    def test_reverse_multiple_nodes(self):
        node1 = linked_list1.ListNode(1)
        node2 = linked_list1.ListNode(2)
        node3 = linked_list1.ListNode(3)
        node1.next = node2
        node2.next = node3
        reversed_head = node1.reverse()
        assert reversed_head.val == 3 and reversed_head.next.val == 2 and reversed_head.next.next.val == 1 and reversed_head.next.next.next == None

    def test_reverse_recursive_single_node(self):
        node = linked_list1.ListNode(1)
        reversed_node = node.reverse_recursive()
        assert reversed_node.val == 1 and reversed_node.next == None

    def test_reverse_recursive_multiple_nodes(self):
        node1 = linked_list1.ListNode(1)
        node2 = linked_list1.ListNode(2)
        node3 = linked_list1.ListNode(3)
        node1.next = node2
        node2.next = node3
        reversed_head = node1.reverse_recursive()
        assert reversed_head.val == 3 and reversed_head.next.val == 2 and reversed_head.next.next.val == 1 and reversed_head.next.next.next == None