import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list1 import ListNode

def test_contains_cycle():
    # Test case 1: No cycle - single node
    node1 = ListNode(1)
    assert node1.contains_cycle() == False

    # Test case 2: No cycle - multiple nodes
    node2 = ListNode(1, ListNode(2, ListNode(3)))
    assert node2.contains_cycle() == False

    # Test case 3: Cycle present
    node3 = ListNode(1, ListNode(2, ListNode(3)))
    node3.next.next.next = node3
    assert node3.contains_cycle() == True

def test_get_beginning_of_cycle_if_exists():
    # Test case 1: No cycle - single node
    node1 = ListNode(1)
    assert node1.get_beginning_of_cycle_if_exists() == None

    # Test case 2: No cycle - multiple nodes
    node2 = ListNode(1, ListNode(2, ListNode(3)))
    assert node2.get_beginning_of_cycle_if_exists() == None

    # Test case 3: Cycle present
    node3 = ListNode(1, ListNode(2, ListNode(3)))
    node3.next.next.next = node3
    assert node3.get_beginning_of_cycle_if_exists() == node3

def test_reverse():
    # Test case 1: Single node list
    node1 = ListNode(1)
    reversed_node1 = node1.reverse()
    assert reversed_node1.val == 1 and reversed_node1.next == None

    # Test case 2: Multiple nodes list
    node2 = ListNode(1, ListNode(2, ListNode(3)))
    reversed_node2 = node2.reverse()
    assert reversed_node2.val == 3 and reversed_node2.next.val == 2 and reversed_node2.next.next.val == 1

def test_reverse_recursive():
    # Test case 1: Single node list
    node1 = ListNode(1)
    reversed_node1 = node1.reverse_recursive()
    assert reversed_node1.val == 1 and reversed_node1.next == None

    # Test case 2: Multiple nodes list
    node2 = ListNode(1, ListNode(2, ListNode(3)))
    reversed_node2 = node2.reverse_recursive()
    assert reversed_node2.val == 3 and reversed_node2.next.val == 2 and reversed_node2.next.next.val == 1