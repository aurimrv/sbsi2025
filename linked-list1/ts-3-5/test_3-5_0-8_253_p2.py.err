import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list1 import ListNode

import pytest

@pytest.fixture
def example_linked_list():
    node_1 = ListNode(1)
    node_2 = ListNode(2)
    node_3 = ListNode(3)
    node_1.next = node_2
    node_2.next = node_3
    node_3.next = node_1  
    return node_1

def test_contains_cycle_true(example_linked_list):
    assert example_linked_list.contains_cycle() is True

def test_contains_cycle_false():
    node_1 = ListNode(1)
    node_2 = ListNode(2)
    node_3 = ListNode(3)
    node_1.next = node_2
    node_2.next = node_3
    assert node_1.contains_cycle() is False

def test_get_beginning_of_cycle_if_exists(example_linked_list):
    assert example_linked_list.get_beginning_of_cycle_if_exists() == example_linked_list

def test_reverse():
    node_1 = ListNode(1)
    node_2 = ListNode(2)
    node_3 = ListNode(3)
    node_1.next = node_2
    node_2.next = node_3
    reversed_list = node_1.reverse()
    assert reversed_list.val == 3
    assert reversed_list.next.val == 2
    assert reversed_list.next.next.val == 1

def test_reverse_recursive():
    node_1 = ListNode(1)
    node_2 = ListNode(2)
    node_3 = ListNode(3)
    node_1.next = node_2
    node_2.next = node_3
    reversed_list = node_1.reverse_recursive()
    assert reversed_list.val == 3
    assert reversed_list.next.val == 2
    assert reversed_list.next.next.val == 1