import os
import sys
import pytest

# Add project directory to sys.path
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list1 import ListNode

# Test cases for ListNode class methods

# Test cases for contains_cycle method
def test_contains_cycle_empty_list():
    node = ListNode(1)
    assert not node.contains_cycle()

def test_contains_cycle_no_cycle():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    assert not node1.contains_cycle()

def test_contains_cycle_with_cycle():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    node3.next = node1
    assert node1.contains_cycle()

# Test cases for get_beginning_of_cycle_if_exists method
def test_get_beginning_of_cycle_if_exists_empty_list():
    node = ListNode(1)
    assert not node.get_beginning_of_cycle_if_exists()

def test_get_beginning_of_cycle_if_exists_no_cycle():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    assert not node1.get_beginning_of_cycle_if_exists()

def test_get_beginning_of_cycle_if_exists_with_cycle():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    node3.next = node1
    assert node1.get_beginning_of_cycle_if_exists() == node1

# Test cases for reverse method
def test_reverse_empty_list():
    node = ListNode(1)
    reversed_node = node.reverse()
    assert reversed_node.val == 1
    assert not reversed_node.next

def test_reverse_non_empty_list():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    reversed_node = node1.reverse()
    assert reversed_node.val == 3
    assert reversed_node.next.val == 2
    assert reversed_node.next.next.val == 1
    assert not reversed_node.next.next.next

# Test cases for reverse_recursive method
def test_reverse_recursive_empty_list():
    node = ListNode(1)
    reversed_node = node.reverse_recursive()
    assert reversed_node.val == 1
    assert not reversed_node.next

def test_reverse_recursive_non_empty_list():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    reversed_node = node1.reverse_recursive()
    assert reversed_node.val == 3
    assert reversed_node.next.val == 2
    assert reversed_node.next.next.val == 1
    assert not reversed_node.next.next.next