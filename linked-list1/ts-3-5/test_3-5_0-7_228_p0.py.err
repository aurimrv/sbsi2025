import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list1 import ListNode

import pytest

@pytest.fixture
def example_list():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    node3.next = node1
    return node1

def test_contains_cycle_true(example_list):
    assert example_list.contains_cycle() == True

def test_contains_cycle_false():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    assert node1.contains_cycle() == False

def test_get_beginning_of_cycle_if_exists(example_list):
    cycle_start = example_list.get_beginning_of_cycle_if_exists()
    assert cycle_start.val == 1

def test_reverse():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    reversed_list = node1.reverse()
    assert reversed_list.val == 3
    assert reversed_list.next.val == 2
    assert reversed_list.next.next.val == 1

def test_reverse_recursive():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    reversed_list = node1.reverse_recursive()
    assert reversed_list.val == 3
    assert reversed_list.next.val == 2
    assert reversed_list.next.next.val == 1