import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list1 import ListNode

def test_contains_cycle():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    assert node1.contains_cycle() == False

    node1.next = node2
    node2.next = node1
    assert node1.contains_cycle() == True

def test_get_beginning_of_cycle_if_exists():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    assert node1.get_beginning_of_cycle_if_exists() is None

    node1.next = node2
    node2.next = node1
    assert node1.get_beginning_of_cycle_if_exists() == node1

def test_reverse():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    new_head = node1.reverse()
    assert new_head.val == 3
    assert new_head.next.val == 2
    assert new_head.next.next.val == 1

    node4 = ListNode(4)
    new_head_single = node4.reverse()
    assert new_head_single.val == 4

def test_reverse_recursive():
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3
    new_head = node1.reverse_recursive()
    assert new_head.val == 3
    assert new_head.next.val == 2
    assert new_head.next.next.val == 1

    node4 = ListNode(4)
    new_head_single = node4.reverse_recursive()
    assert new_head_single.val == 4