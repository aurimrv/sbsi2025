import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list1 import ListNode

# Test cases for ListNode class methods

def test_contains_cycle():
    # Test case for an empty list
    assert ListNode(None).contains_cycle() is False

    # Test case for a single node list without a cycle
    node1 = ListNode(1)
    assert node1.contains_cycle() is False

    # Test case for a single node list with a cycle
    node2 = ListNode(2)
    node2.next = node2
    assert node2.contains_cycle() is True

def test_get_beginning_of_cycle_if_exists():
    # Test case for an empty list
    assert ListNode(None).get_beginning_of_cycle_if_exists() is None

    # Test case for a single node list without a cycle
    node1 = ListNode(1)
    assert node1.get_beginning_of_cycle_if_exists() is None

    # Test case for a single node list with a cycle
    node2 = ListNode(2)
    node2.next = node2
    assert node2.get_beginning_of_cycle_if_exists() == node2

def test_reverse():
    # Test case for an empty list
    assert ListNode(None).reverse() is None

    # Test case for a list with multiple nodes
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3

    reversed_list = node1.reverse()
    assert reversed_list.val == 3
    assert reversed_list.next.val == 2
    assert reversed_list.next.next.val == 1

def test_reverse_recursive():
    # Test case for an empty list
    assert ListNode(None).reverse_recursive() is None

    # Test case for a list with multiple nodes
    node1 = ListNode(1)
    node2 = ListNode(2)
    node3 = ListNode(3)
    node1.next = node2
    node2.next = node3

    reversed_list = node1.reverse_recursive()
    assert reversed_list.val == 3
    assert reversed_list.next.val == 2
    assert reversed_list.next.next.val == 1