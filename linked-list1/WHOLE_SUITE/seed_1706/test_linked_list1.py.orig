# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import linked_list1 as module_0


def test_case_0():
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)


def test_case_1():
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)
    var_0 = list_node_0.reverse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val is None
    assert var_0.next is None


@pytest.mark.xfail(strict=True)
def test_case_2():
    set_0 = set()
    list_node_0 = module_0.ListNode(set_0)
    var_0 = list_node_0.reverse_recursive()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val == {*()}
    assert var_0.next is None
    var_1 = var_0.contains_cycle()
    assert var_1 is False
    var_1.reverse()


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b""
    list_node_0 = module_0.ListNode(bytes_0)
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    var_0 = list_node_0.reverse_recursive()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val == b""
    assert var_0.next is None
    var_1 = var_0.get_beginning_of_cycle_if_exists()
    var_2 = list_node_1.reverse_recursive()
    var_3 = var_2.get_beginning_of_cycle_if_exists()
    list_node_2 = module_0.ListNode(bytes_0, list_node_0)
    var_4 = list_node_2.reverse()
    assert (
        f"{type(list_node_1.next).__module__}.{type(list_node_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.val).__module__}.{type(var_4.val).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.next).__module__}.{type(var_4.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_4.get_beginning_of_cycle_if_exists()


def test_case_4():
    bytes_0 = b""
    list_node_0 = module_0.ListNode(bytes_0)
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    var_0 = list_node_0.reverse_recursive()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val == b""
    assert var_0.next is None
    var_1 = var_0.get_beginning_of_cycle_if_exists()
    var_2 = list_node_1.reverse_recursive()
    var_3 = var_2.get_beginning_of_cycle_if_exists()
    list_node_2 = module_0.ListNode(bytes_0, list_node_0)
    var_4 = list_node_2.reverse()
    assert (
        f"{type(list_node_1.next).__module__}.{type(list_node_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.val).__module__}.{type(var_4.val).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.next).__module__}.{type(var_4.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_5 = var_4.reverse_recursive()
    assert (
        f"{type(list_node_2.next).__module__}.{type(list_node_2.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_5.next).__module__}.{type(var_5.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_6 = var_5.reverse_recursive()
    assert (
        f"{type(list_node_1.next).__module__}.{type(list_node_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.next).__module__}.{type(var_4.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_6.val).__module__}.{type(var_6.val).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_6.next).__module__}.{type(var_6.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_7 = var_6.reverse()
    assert (
        f"{type(list_node_2.next).__module__}.{type(list_node_2.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_5.next).__module__}.{type(var_5.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_7).__module__}.{type(var_7).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_7.val == b""
    assert (
        f"{type(var_7.next).__module__}.{type(var_7.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_8 = var_7.contains_cycle()
    assert var_8 is True


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b""
    list_node_0 = module_0.ListNode(bytes_0)
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    var_0 = list_node_0.reverse_recursive()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val == b""
    assert var_0.next is None
    var_1 = var_0.get_beginning_of_cycle_if_exists()
    var_2 = list_node_1.reverse_recursive()
    var_3 = var_2.get_beginning_of_cycle_if_exists()
    list_node_2 = module_0.ListNode(bytes_0, list_node_0)
    list_node_3 = module_0.ListNode(bytes_0)
    var_4 = list_node_3.reverse_recursive()
    list_node_2.get_beginning_of_cycle_if_exists()


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0)
    var_0 = list_node_0.get_beginning_of_cycle_if_exists()
    float_0 = 1004.81
    list_node_1 = module_0.ListNode(float_0)
    list_node_2 = module_0.ListNode(list_node_1)
    var_1 = list_node_1.get_beginning_of_cycle_if_exists()
    var_2 = list_node_1.reverse_recursive()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_2.val == pytest.approx(1004.81, abs=0.01, rel=0.01)
    assert var_2.next is None
    var_3 = list_node_2.contains_cycle()
    assert var_3 is False
    var_4 = list_node_2.reverse_recursive()
    var_5 = var_4.contains_cycle()
    var_5.contains_cycle()


@pytest.mark.xfail(strict=True)
def test_case_7():
    bool_0 = True
    list_node_0 = module_0.ListNode(bool_0)
    var_0 = list_node_0.reverse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val is True
    assert var_0.next is None
    list_node_1 = module_0.ListNode(var_0, var_0)
    none_type_0 = None
    list_node_2 = module_0.ListNode(none_type_0)
    var_1 = list_node_2.reverse()
    var_2 = list_node_2.contains_cycle()
    assert var_2 is False
    var_3 = var_1.reverse()
    var_4 = var_1.reverse_recursive()
    assert (
        f"{type(var_4).__module__}.{type(var_4).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_4.val is None
    assert var_4.next is None
    var_5 = var_3.get_beginning_of_cycle_if_exists()
    var_5.contains_cycle()


@pytest.mark.xfail(strict=True)
def test_case_8():
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)
    var_0 = list_node_0.reverse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val is None
    assert var_0.next is None
    var_1 = var_0.reverse()
    var_2 = var_1.reverse_recursive()
    assert (
        f"{type(var_2).__module__}.{type(var_2).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_2.val is None
    assert var_2.next is None
    list_node_1 = module_0.ListNode(var_1, var_2)
    var_3 = list_node_0.reverse()
    var_4 = list_node_1.reverse()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_3.next).__module__}.{type(var_3.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_4.val is None
    assert (
        f"{type(var_4.next).__module__}.{type(var_4.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_5 = var_4.reverse_recursive()
    assert (
        f"{type(list_node_1.next).__module__}.{type(list_node_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_5.next).__module__}.{type(var_5.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    list_node_2 = module_0.ListNode(var_4, list_node_0)
    var_6 = list_node_2.get_beginning_of_cycle_if_exists()
    var_7 = list_node_2.reverse()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_3.next).__module__}.{type(var_3.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.next).__module__}.{type(var_4.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_7.val is None
    assert (
        f"{type(var_7.next).__module__}.{type(var_7.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_8 = var_7.contains_cycle()
    assert var_8 is False
    list_node_3 = module_0.ListNode(var_5, var_5)
    var_9 = list_node_3.contains_cycle()
    assert var_9 is False
    var_10 = var_4.reverse()
    assert (
        f"{type(list_node_2.next).__module__}.{type(list_node_2.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_10.next).__module__}.{type(var_10.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_11 = var_10.reverse()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_2.next).__module__}.{type(var_2.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_3.next).__module__}.{type(var_3.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_4.next).__module__}.{type(var_4.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_7.next).__module__}.{type(var_7.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_11.val is None
    assert (
        f"{type(var_11.next).__module__}.{type(var_11.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_12 = list_node_3.get_beginning_of_cycle_if_exists()
    var_12.reverse()


@pytest.mark.xfail(strict=True)
def test_case_9():
    bool_0 = False
    list_node_0 = module_0.ListNode(bool_0, bool_0)
    var_0 = list_node_0.get_beginning_of_cycle_if_exists()
    var_1 = list_node_0.reverse_recursive()
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_1.val is False
    assert var_1.next is False
    list_node_1 = module_0.ListNode(var_1, var_1)
    var_2 = var_1.get_beginning_of_cycle_if_exists()
    var_3 = var_1.get_beginning_of_cycle_if_exists()
    list_node_1.get_beginning_of_cycle_if_exists()
