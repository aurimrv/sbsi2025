import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree, BinaryTreeNode

import pytest

@pytest.fixture
def empty_tree():
    return BinarySearchTree()

@pytest.fixture
def sample_binary_search_tree():
    tree = BinarySearchTree()
    tree.insert(5)
    tree.insert(3)
    tree.insert(7)
    tree.insert(2)
    tree.insert(4)
    tree.insert(6)
    tree.insert(8)
    return tree

def test_insert(empty_tree):
    empty_tree.insert(5)
    empty_tree.insert(3)
    assert empty_tree.in_order_traversal() == [3, 5]

def test_min(sample_binary_search_tree):
    assert sample_binary_search_tree.min() == 2

def test_delete(sample_binary_search_tree):
    sample_binary_search_tree.delete(3)
    assert sample_binary_search_tree.in_order_traversal() == [2, 4, 5, 6, 7, 8]

def test_search(sample_binary_search_tree):
    assert sample_binary_search_tree.search(6).value == 6
    assert sample_binary_search_tree.search(10) is None

def test_in_order_traversal(sample_binary_search_tree):
    assert sample_binary_search_tree.in_order_traversal() == [2, 3, 4, 5, 6, 7, 8]

def test_merge():
    tree1 = BinarySearchTree()
    tree1.insert(10)
    tree1.insert(5)
    
    tree2 = BinarySearchTree()
    tree2.insert(7)
    tree2.insert(3)
    
    tree1.merge(tree2)
    assert tree1.in_order_traversal() == [3, 5, 7, 10]