import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree, BinaryTreeNode

import pytest


@pytest.fixture
def bst():
    return BinarySearchTree()


def test_insert(bst):
    bst.insert(5)
    assert bst.head.value == 5

    bst.insert(3)
    assert bst.head.left.value == 3

    bst.insert(7)
    assert bst.head.right.value == 7


def test_min(bst):
    bst.insert(5)
    bst.insert(3)
    bst.insert(7)
    assert bst.min() == 3


def test_delete(bst):
    bst.insert(5)
    bst.insert(3)
    bst.insert(7)
    bst.delete(5)
    assert bst.search(5) is None


def test_search(bst):
    bst.insert(5)
    bst.insert(3)
    bst.insert(7)
    assert bst.search(3).value == 3
    assert bst.search(7).value == 7
    assert bst.search(10) is None


def test_in_order_traversal(bst):
    bst.insert(5)
    bst.insert(3)
    bst.insert(7)
    assert bst.in_order_traversal() == [3, 5, 7]

    bst.insert(4)
    bst.insert(2)
    bst.insert(6)
    assert bst.in_order_traversal() == [2, 3, 4, 5, 6, 7]


def test_merge(bst):
    bst.insert(5)
    bst.insert(3)
    bst.insert(7)

    tree = BinarySearchTree()
    tree.insert(4)
    tree.insert(1)
    tree.insert(6)

    bst.merge(tree)

    assert bst.in_order_traversal() == [1, 3, 4, 5, 6, 7]