import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree

@pytest.fixture
def binary_search_tree():
    return BinarySearchTree()

def test_insert(binary_search_tree):
    binary_search_tree.insert(5)
    assert binary_search_tree.head.value == 5

def test_min(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.insert(15)
    assert binary_search_tree.min() == 5

def test_delete(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.insert(15)
    binary_search_tree.delete(5)
    assert binary_search_tree.search(5) is None

def test_search(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.insert(15)
    assert binary_search_tree.search(5).value == 5

def test_in_order_traversal(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.insert(15)
    assert binary_search_tree.in_order_traversal() == [5, 10, 15]

def test_merge(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.insert(15)

    tree_to_merge = BinarySearchTree()
    tree_to_merge.insert(20)
    tree_to_merge.insert(25)

    binary_search_tree.merge(tree_to_merge)

    assert binary_search_tree.in_order_traversal() == [5, 10, 15, 20, 25]