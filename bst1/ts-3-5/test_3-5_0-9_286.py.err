import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree

# Test case for insert method
def test_insert():
    bst = BinarySearchTree()
    bst.insert(5)
    assert bst.in_order_traversal() == [5]
    
    bst.insert(3)
    bst.insert(7)
    assert bst.in_order_traversal() == [3, 5, 7]

# Test case for min method
def test_min():
    bst = BinarySearchTree()
    bst.insert(10)
    bst.insert(5)
    bst.insert(15)
    assert bst.min() == 5

# Test case for delete method
def test_delete():
    bst = BinarySearchTree()
    bst.insert(10)
    bst.insert(5)
    bst.insert(15)
    bst.delete(5)
    assert bst.in_order_traversal() == [10, 15]

# Test case for search method
def test_search():
    bst = BinarySearchTree()
    bst.insert(10)
    bst.insert(5)
    bst.insert(15)
    assert bst.search(5).value == 5
    assert bst.search(20) is None

# Test case for in_order_traversal method
def test_in_order_traversal():
    bst = BinarySearchTree()
    bst.insert(10)
    bst.insert(5)
    bst.insert(15)
    assert bst.in_order_traversal() == [5, 10, 15]

# Test case for merge method
def test_merge():
    bst1 = BinarySearchTree()
    bst1.insert(10)
    bst1.insert(5)
    
    bst2 = BinarySearchTree()
    bst2.insert(15)
    bst2.insert(20)
    
    bst1.merge(bst2)
    assert bst1.in_order_traversal() == [15, 30, 20]
