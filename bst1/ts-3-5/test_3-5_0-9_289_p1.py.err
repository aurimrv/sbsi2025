import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree

import pytest
from tree_node import BinaryTreeNode

@pytest.fixture
def sample_binary_tree():
    tree = BinarySearchTree()
    tree.insert(5)
    tree.insert(3)
    tree.insert(7)
    tree.insert(2)
    tree.insert(4)
    return tree

def test_insert_one_element():
    tree = BinarySearchTree()
    tree.insert(5)
    assert tree.head.value == 5

def test_insert_multiple_elements(sample_binary_tree):
    assert sample_binary_tree.head.value == 5
    assert sample_binary_tree.head.left.value == 3
    assert sample_binary_tree.head.right.value == 7
    assert sample_binary_tree.head.left.left.value == 2
    assert sample_binary_tree.head.left.right.value == 4

def test_min(sample_binary_tree):
    assert sample_binary_tree.min() == 2

def test_delete(sample_binary_tree):
    sample_binary_tree.delete(3)
    assert sample_binary_tree.head.left == None

def test_search_existing_element(sample_binary_tree):
    assert sample_binary_tree.search(7).value == 7

def test_search_non_existing_element(sample_binary_tree):
    assert sample_binary_tree.search(10) is None

def test_in_order_traversal(sample_binary_tree):
    assert sample_binary_tree.in_order_traversal() == [2, 3, 4, 5, 7]

def test_merge(sample_binary_tree):
    tree2 = BinarySearchTree()
    tree2.insert(5)
    tree2.insert(3)
    tree2.insert(6)
    
    sample_binary_tree.merge(tree2)
    
    assert sample_binary_tree.head.value == 10
    assert sample_binary_tree.head.left.value == 6
    assert sample_binary_tree.head.right.value == 13