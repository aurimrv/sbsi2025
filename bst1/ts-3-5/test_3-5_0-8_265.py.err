import os
import sys
from tree_node import BinaryTreeNode

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree

import pytest

@pytest.fixture
def sample_binary_search_tree():
    bst = BinarySearchTree()
    bst.insert(8)
    bst.insert(3)
    bst.insert(10)
    bst.insert(1)
    bst.insert(6)
    bst.insert(14)
    return bst

# Test cases for insert method
def test_insert_one_element():
    bst = BinarySearchTree()
    bst.insert(5)
    assert bst.head.value == 5

def test_insert_multiple_elements(sample_binary_search_tree):
    assert sample_binary_search_tree.head.value == 8
    assert sample_binary_search_tree.head.left.value == 3
    assert sample_binary_search_tree.head.right.value == 10

# Test cases for min method
def test_min(sample_binary_search_tree):
    assert sample_binary_search_tree.min() == 1

# Test cases for delete method
def test_delete_existing_element(sample_binary_search_tree):
    sample_binary_search_tree.delete(3)
    assert sample_binary_search_tree.head.left is None

def test_delete_non_existing_element(sample_binary_search_tree):
    sample_binary_search_tree.delete(100)
    assert sample_binary_search_tree.head.left.value == 3

# Test cases for search method
def test_search_existing_element(sample_binary_search_tree):
    node = sample_binary_search_tree.search(6)
    assert node.value == 6

def test_search_non_existing_element(sample_binary_search_tree):
    node = sample_binary_search_tree.search(20)
    assert node is None

# Test cases for in_order_traversal method
def test_in_order_traversal(sample_binary_search_tree):
    assert sample_binary_search_tree.in_order_traversal() == [1, 3, 6, 8, 10, 14]

# Test cases for merge method
def test_merge_with_empty_tree():
    bst1 = BinarySearchTree()
    bst1.insert(5)
    
    bst2 = BinarySearchTree()
    
    bst1.merge(bst2)
    
    assert bst1.head.value == 5

def test_merge_with_non_empty_trees(sample_binary_search_tree):
    bst1 = sample_binary_search_tree
    
    bst2 = BinarySearchTree()
    bst2.insert(15)
    bst2.insert(12)
    
    bst1.merge(bst2)
    
    assert bst1.in_order_traversal() == [1, 3, 6, 8, 10, 12, 14, 15]