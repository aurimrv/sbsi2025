import os
import sys
from binary_search_tree import BinarySearchTree

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import pytest

@pytest.fixture
def sample_tree():
    tree = BinarySearchTree()
    tree.insert(5)
    tree.insert(3)
    tree.insert(7)
    tree.insert(2)
    tree.insert(4)
    tree.insert(6)
    tree.insert(8)
    return tree

def test_insert(sample_tree):
    assert sample_tree.head.value == 5
    assert sample_tree.head.left.value == 3
    assert sample_tree.head.right.value == 7
    assert sample_tree.head.left.left.value == 2
    assert sample_tree.head.left.right.value == 4
    assert sample_tree.head.right.left.value == 6
    assert sample_tree.head.right.right.value == 8

def test_min(sample_tree):
    assert sample_tree.min() == 2

def test_delete(sample_tree):
    sample_tree.delete(3)
    assert sample_tree.head.left.value == 2
    sample_tree.delete(5)
    assert sample_tree.head.value == 6

def test_search(sample_tree):
    assert sample_tree.search(3).value == 3
    assert sample_tree.search(8).value == 8
    assert sample_tree.search(1) is None

def test_in_order_traversal(sample_tree):
    assert sample_tree.in_order_traversal() == [2, 3, 4, 5, 6, 7, 8]

def test_merge(sample_tree):
    new_tree = BinarySearchTree()
    new_tree.insert(10)
    new_tree.insert(12)
    sample_tree.merge(new_tree)
    assert sample_tree.head.value == 15
    assert sample_tree.head.right.value == 19
    assert sample_tree.head.right.right.value == 12