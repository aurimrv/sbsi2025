import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree, BinaryTreeNode

import pytest

@pytest.fixture
def sample_binary_search_tree():
    bst = BinarySearchTree()
    bst.insert(5)
    bst.insert(3)
    bst.insert(7)
    bst.insert(2)
    bst.insert(4)
    bst.insert(6)
    bst.insert(8)
    return bst

def test_insert(sample_binary_search_tree):
    assert sample_binary_search_tree.head.value == 5
    assert sample_binary_search_tree.head.left.value == 3
    assert sample_binary_search_tree.head.right.value == 7

def test_min(sample_binary_search_tree):
    assert sample_binary_search_tree.min() == 2

def test_delete(sample_binary_search_tree):
    sample_binary_search_tree.delete(3)
    assert sample_binary_search_tree.search(3) is None

def test_search(sample_binary_search_tree):
    assert sample_binary_search_tree.search(7).value == 7
    assert sample_binary_search_tree.search(10) is None

def test_in_order_traversal(sample_binary_search_tree):
    assert sample_binary_search_tree.in_order_traversal() == [2, 3, 4, 5, 6, 7, 8]

def test_merge(sample_binary_search_tree):
    bst_to_merge = BinarySearchTree()
    bst_to_merge.insert(1)
    bst_to_merge.insert(9)
    sample_binary_search_tree.merge(bst_to_merge)
    assert sample_binary_search_tree.in_order_traversal() == [1, 2, 3, 4, 5, 6, 7, 8, 9]