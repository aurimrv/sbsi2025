import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree

import pytest

@pytest.fixture
def binary_search_tree():
    return BinarySearchTree()

def test_insert(binary_search_tree):
    binary_search_tree.insert(5)
    binary_search_tree.insert(3)
    assert binary_search_tree.head.value == 5
    assert binary_search_tree.head.left.value == 3

def test_min(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    assert binary_search_tree.min() == 5

def test_delete(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.delete(5)
    assert binary_search_tree.search(5) is None

def test_search(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    assert binary_search_tree.search(5).value == 5

def test_in_order_traversal(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    binary_search_tree.insert(15)
    assert binary_search_tree.in_order_traversal() == [5, 10, 15]

def test_merge(binary_search_tree):
    binary_search_tree.insert(10)
    binary_search_tree.insert(5)
    
    other_tree = BinarySearchTree()
    other_tree.insert(7)
    other_tree.insert(3)
    
    binary_search_tree.merge(other_tree)
    
    assert binary_search_tree.search(7) is not None
    assert binary_search_tree.search(7).value == 7
    assert binary_search_tree.search(3) is not None
    assert binary_search_tree.search(3).value == 3
    assert binary_search_tree.in_order_traversal() == [3, 5, 7, 10]