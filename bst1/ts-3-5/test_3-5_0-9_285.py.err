import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)
from binary_search_tree import BinarySearchTree, BinaryTreeNode

import pytest

@pytest.fixture
def create_sample_tree():
    tree = BinarySearchTree()
    tree.insert(5)
    tree.insert(3)
    tree.insert(7)
    tree.insert(2)
    tree.insert(4)
    tree.insert(6)
    tree.insert(8)
    return tree

def test_insert(create_sample_tree):
    assert create_sample_tree.in_order_traversal() == [2, 3, 4, 5, 6, 7, 8]
    
    create_sample_tree.insert(1)
    assert create_sample_tree.search(1) is not None
    
    create_sample_tree.insert(9)
    assert create_sample_tree.search(9) is not None

def test_min(create_sample_tree):
    assert create_sample_tree.min() == 2
    
def test_delete(create_sample_tree):
    create_sample_tree.delete(3)
    assert create_sample_tree.search(3) is None
    
    create_sample_tree.delete(7)
    assert create_sample_tree.search(7) is None

def test_search(create_sample_tree):
    assert create_sample_tree.search(5).value == 5
    
    assert create_sample_tree.search(10) is None

def test_merge(create_sample_tree):
    tree2 = BinarySearchTree()
    tree2.insert(10)
    tree2.insert(12)
    tree2.insert(15)
    
    create_sample_tree.merge(tree2)
    
    assert create_sample_tree.search(12) is not None
    assert create_sample_tree.search(15) is not None

def test_in_order_traversal(create_sample_tree):
    assert create_sample_tree.in_order_traversal() == [1, 2, 4, 5, 6, 8, 9]