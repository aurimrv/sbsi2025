import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree

import pytest
from tree_node import BinaryTreeNode

@pytest.fixture
def empty_tree():
    return BinarySearchTree()

@pytest.fixture
def sample_tree():
    tree = BinarySearchTree()
    tree.insert(5)
    tree.insert(3)
    tree.insert(7)
    tree.insert(2)
    tree.insert(4)
    tree.insert(6)
    tree.insert(8)
    return tree

def test_insert_empty_tree(empty_tree):
    empty_tree.insert(5)
    assert empty_tree.head.value == 5

def test_insert_non_empty_tree(sample_tree):
    sample_tree.insert(1)
    assert sample_tree.search(1) is not None

def test_min_empty_tree(empty_tree):
    with pytest.raises(AttributeError):
        empty_tree.min()

def test_min_non_empty_tree(sample_tree):
    assert sample_tree.min() == 2

def test_delete_existing_node(sample_tree):
    sample_tree.delete(3)
    assert sample_tree.search(3) is None

def test_delete_non_existing_node(sample_tree):
    with pytest.raises(AttributeError):
        sample_tree.delete(10)

def test_search_existing_node(sample_tree):
    assert sample_tree.search(7).value == 7

def test_search_non_existing_node(sample_tree):
    assert sample_tree.search(10) is None

def test_in_order_traversal(sample_tree):
    assert sample_tree.in_order_traversal() == [2, 3, 4, 5, 6, 7, 8]

def test_merge(sample_tree):
    new_tree = BinarySearchTree()
    new_tree.insert(10)
    new_tree.insert(9)
    new_tree.insert(11)

    sample_tree.merge(new_tree)
    assert sample_tree.in_order_traversal() == [2, 3, 4, 5, 6, 7, 8, 9, 10, 11]