import os
import sys
from tree_node import BinaryTreeNode
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)
from binary_search_tree import BinarySearchTree

import pytest

@pytest.fixture
def binary_tree():
    return BinarySearchTree()

def test_insert(binary_tree):
    binary_tree.insert(5)
    assert binary_tree.head.value == 5
    binary_tree.insert(2)
    assert binary_tree.head.left.value == 2
    binary_tree.insert(7)
    assert binary_tree.head.right.value == 7

def test_min(binary_tree):
    binary_tree.insert(5)
    binary_tree.insert(2)
    binary_tree.insert(7)
    assert binary_tree.min() == 2

def test_delete(binary_tree):
    binary_tree.insert(5)
    binary_tree.insert(2)
    binary_tree.insert(7)
    binary_tree.delete(2)
    assert binary_tree.head.left is None

def test_search(binary_tree):
    binary_tree.insert(5)
    binary_tree.insert(2)
    binary_tree.insert(7)
    assert binary_tree.search(2).value == 2
    assert binary_tree.search(7).value == 7
    assert binary_tree.search(10) is None

def test_in_order_traversal(binary_tree):
    binary_tree.insert(5)
    binary_tree.insert(2)
    binary_tree.insert(7)
    assert binary_tree.in_order_traversal() == [2, 5, 7]

def test_merge(binary_tree):
    binary_tree.insert(5)
    binary_tree.insert(2)
    merge_tree = BinarySearchTree()
    merge_tree.insert(3)
    merge_tree.insert(4)
    binary_tree.merge(merge_tree)
    assert binary_tree.head.value == 8
    assert binary_tree.head.left.value == 6
    assert binary_tree.head.left.right.value == 4