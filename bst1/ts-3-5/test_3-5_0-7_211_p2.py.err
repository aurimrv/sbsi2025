import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree, BinaryTreeNode

import pytest

@pytest.fixture
def sample_binary_search_tree():
    bst = BinarySearchTree()
    bst.insert(50)
    bst.insert(30)
    bst.insert(70)
    bst.insert(20)
    bst.insert(40)
    bst.insert(60)
    bst.insert(80)
    return bst

def test_insert(sample_binary_search_tree):
    assert sample_binary_search_tree.search(50) is not None
    assert sample_binary_search_tree.search(30) is not None
    assert sample_binary_search_tree.search(70) is not None

def test_min(sample_binary_search_tree):
    assert sample_binary_search_tree.min() == 20

def test_delete(sample_binary_search_tree):
    sample_binary_search_tree.delete(30)
    assert sample_binary_search_tree.search(30) is None

def test_search(sample_binary_search_tree):
    assert sample_binary_search_tree.search(40) is not None
    assert sample_binary_search_tree.search(90) is None

def test_in_order_traversal(sample_binary_search_tree):
    assert sample_binary_search_tree.in_order_traversal() == [20, 30, 40, 50, 60, 70, 80]

def test_merge(sample_binary_search_tree):
    bst2 = BinarySearchTree()
    bst2.insert(55)
    bst2.insert(65)
    
    sample_binary_search_tree.merge(bst2)
    
    assert sample_binary_search_tree.search(55) is not None
    assert sample_binary_search_tree.search(65) is not None