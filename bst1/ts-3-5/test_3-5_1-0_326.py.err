import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binary_search_tree import BinarySearchTree, BinaryTreeNode

import pytest

@pytest.fixture
def setup_binary_tree():
    tree = BinarySearchTree()
    tree.insert(5)
    tree.insert(3)
    tree.insert(7)
    return tree

def test_insert(setup_binary_tree):
    # Test inserting a node into the tree
    assert setup_binary_tree.search(5).value == 5
    assert setup_binary_tree.search(3).value == 3
    assert setup_binary_tree.search(7).value == 7

def test_min(setup_binary_tree):
    # Test finding the minimum value in the tree
    assert setup_binary_tree.min() == 3

def test_search(setup_binary_tree):
    # Test searching for a value in the tree
    assert setup_binary_tree.search(5).value == 5
    assert setup_binary_tree.search(3).value == 3
    assert setup_binary_tree.search(7).value == 7
    assert setup_binary_tree.search(8) is None

def test_delete(setup_binary_tree):
    # Test deleting a node from the tree
    setup_binary_tree.delete(3)
    assert setup_binary_tree.search(3) is None

def test_in_order_traversal(setup_binary_tree):
    # Test in-order traversal of the tree
    assert setup_binary_tree.in_order_traversal() == [3, 5, 7]

def test_merge(setup_binary_tree):
    # Test merging two binary search trees
    tree2 = BinarySearchTree()
    tree2.insert(2)
    tree2.insert(4)
    tree2.insert(6)

    setup_binary_tree.merge(tree2)

    assert setup_binary_tree.in_order_traversal() == [5, 9, 13]