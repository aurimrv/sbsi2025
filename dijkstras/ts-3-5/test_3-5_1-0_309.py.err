import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

# Define weighted graph object for testing
class WeightedGraph:
    def __init__(self, vertices):
        self.vertices = vertices

class Vertex:
    def __init__(self, name, adjacent):
        self.name = name
        self.adjacent = adjacent
        
# Test cases for dijkstras function
def test_dijkstras_single_path():
    vertex_a = Vertex('A', {'B': 1, 'C': 4})
    vertex_b = Vertex('B', {'C': 2, 'D': 5})
    vertex_c = Vertex('C', {'D': 1})
    vertex_d = Vertex('D', {})

    weighted_graph = WeightedGraph({'A': vertex_a, 'B': vertex_b, 'C': vertex_c, 'D': vertex_d})

    src = 'A'
    dst = 'D'

    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']

def test_dijkstras_multiple_paths():
    vertex_a = Vertex('A', {'B': 1, 'C': 4})
    vertex_b = Vertex('B', {'C': 2, 'D': 5, 'E': 3})
    vertex_c = Vertex('C', {'D': 1, 'E': 1})
    vertex_d = Vertex('D', {'E': 2})
    vertex_e = Vertex('E', {})

    weighted_graph = WeightedGraph({'A': vertex_a, 'B': vertex_b, 'C': vertex_c, 'D': vertex_d, 'E': vertex_e})

    src = 'A'
    dst = 'E'

    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'E']

def test_dijkstras_same_source_and_destination():
    vertex_a = Vertex('A', {'B': 1, 'C': 4})
    vertex_b = Vertex('B', {'C': 2, 'D': 5})
    vertex_c = Vertex('C', {})

    weighted_graph = WeightedGraph({'A': vertex_a, 'B': vertex_b, 'C': vertex_c})

    src = 'A'
    dst = 'A'

    assert dijkstras(weighted_graph, src, dst) == ['A']

def test_dijkstras_no_path():
    vertex_a = Vertex('A', {'B': 1})
    vertex_b = Vertex('B', {'C': 2})
    vertex_c = Vertex('C', {})

    weighted_graph = WeightedGraph({'A': vertex_a, 'B': vertex_b, 'C': vertex_c})

    src = 'A'
    dst = 'C'

    assert dijkstras(weighted_graph, src, dst) == []
