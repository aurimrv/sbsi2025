import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_shortest_path_positive(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2},
            'C': {'A': 4, 'B': 2}
        }
        src = 'A'
        dst = 'C'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    def test_shortest_path_negative(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2},
            'C': {'A': 4, 'B': 2}
        }
        src = 'B'
        dst = 'C'
        assert dijkstras(weighted_graph, src, dst) == ['B', 'C']

    def test_shortest_path_same_node(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2},
            'C': {'A': 4, 'B': 2}
        }
        src = 'A'
        dst = 'A'
        assert dijkstras(weighted_graph, src, dst) == ['A']

    def test_shortest_path_unreachable(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2},
            'C': {'A': 4, 'B': 2}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == []

    def test_shortest_path_empty_graph(self):
        weighted_graph = {}
        src = 'A'
        dst = 'B'
        assert dijkstras(weighted_graph, src, dst) == []

    def test_shortest_path_negative_weights(self):
        weighted_graph = {
            'A': {'B': -1, 'C': -4},
            'B': {'A': -1, 'C': -2},
            'C': {'A': -4, 'B': -2}
        }
        src = 'A'
        dst = 'C'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']