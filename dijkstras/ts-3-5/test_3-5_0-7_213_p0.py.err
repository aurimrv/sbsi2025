import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_case1(self):
        weighted_graph = WeightedGraph() 
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 1)
        
        path = dijkstras(weighted_graph, 'A', 'C')
        assert path == ['A', 'C']
    
    def test_case2(self):
        weighted_graph = WeightedGraph()  
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 1)
        weighted_graph.add_edge('C', 'D', 3)
        
        path = dijkstras(weighted_graph, 'A', 'D')
        assert path == ['A', 'C', 'D']
    
    def test_case3(self):
        weighted_graph = WeightedGraph()  
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('C', 'D', 3)
        
        path = dijkstras(weighted_graph, 'A', 'D')
        assert path == ['A', 'B', 'C', 'D']

    def test_case4(self):
        weighted_graph = WeightedGraph()  
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('A', 'C', 3)
        weighted_graph.add_edge('B', 'C', 2)
        
        path = dijkstras(weighted_graph, 'A', 'C')
        assert path == ['A', 'B', 'C']