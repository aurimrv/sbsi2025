import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_valid_path():
    # Test for a valid path between two nodes in the graph
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 2)
    weighted_graph.add_edge('A', 'C', 3)
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C']

def test_dijkstras_no_path():
    # Test for when there is no path between the source and destination nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 2)
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_same_source_destination():
    # Test for the case where source and destination nodes are the same
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

def test_dijkstras_invalid_source():
    # Test for an invalid source node
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    src = 'B'
    dst = 'A'
    with pytest.raises(KeyError):
        dijkstras(weighted_graph, src, dst)

def test_dijkstras_invalid_destination():
    # Test for an invalid destination node
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    src = 'A'
    dst = 'B'
    with pytest.raises(KeyError):
        dijkstras(weighted_graph, src, dst)

def test_dijkstras_disconnected_graph():
    # Test for a graph with disconnected components
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('C', 'D', 2)
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == []