import os
import sys
from functools import reduce

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import dijkstras

def test_dijkstras_single_vertex():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    src = 'A'
    dst = 'A'
    assert dijkstras.dijkstras(weighted_graph, src, dst) == ['A']

def test_dijkstras_direct_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 5)
    src = 'A'
    dst = 'B'
    assert dijkstras.dijkstras(weighted_graph, src, dst) == ['A', 'B']

def test_dijkstras_indirect_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 2)
    weighted_graph.add_edge('B', 'C', 3)
    src = 'A'
    dst = 'C'
    assert dijkstras.dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    src = 'A'
    dst = 'B'
    assert dijkstras.dijkstras(weighted_graph, src, dst) == []

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        if vertex not in self.vertices:
            self.vertices[vertex] = Vertex(vertex)
    
    def add_edge(self, start, end, weight):
        self.vertices[start].add_adjacent(end, weight)

class Vertex:
    def __init__(self, vertex):
        self.vertex = vertex
        self.adjacent = {}
    
    def add_adjacent(self, vertex, weight):
        self.adjacent[vertex] = weight