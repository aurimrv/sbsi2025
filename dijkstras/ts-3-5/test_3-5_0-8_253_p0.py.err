import pytest
import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_shortest_path_between_nodes(self):
        weighted_graph = {
            'A': {'B': 5, 'C': 3},
            'B': {'A': 5, 'C': 2, 'D': 1},
            'C': {'A': 3, 'B': 2, 'D': 8},
            'D': {'B': 1, 'C': 8}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    def test_shortest_path_same_source_and_destination(self):
        weighted_graph = {
            'A': {'B': 5, 'C': 3},
            'B': {'A': 5, 'C': 2, 'D': 1},
            'C': {'A': 3, 'B': 2, 'D': 8},
            'D': {'B': 1, 'C': 8}
        }
        src = 'A'
        dst = 'A'
        assert dijkstras(weighted_graph, src, dst) == ['A']

    def test_shortest_path_no_path(self):
        weighted_graph = {
            'A': {'B': 5, 'C': 3},
            'B': {'A': 5, 'C': 2, 'D': 1},
            'C': {'A': 3, 'B': 2, 'D': 8},
            'D': {'B': 1, 'C': 8}
        }
        src = 'A'
        dst = 'E'
        assert dijkstras(weighted_graph, src, dst) == []

    def test_shortest_path_negative_weights(self):
        weighted_graph = {
            'A': {'B': 5, 'C': -3},
            'B': {'A': -5, 'C': 2, 'D': 1},
            'C': {'A': 3, 'B': 2, 'D': 8},
            'D': {'B': 1, 'C': 8}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    def test_shortest_path_all_nodes_same_weight(self):
        weighted_graph = {
            'A': {'B': 2, 'C': 2},
            'B': {'A': 2, 'C': 2, 'D': 2},
            'C': {'A': 2, 'B': 2, 'D': 2},
            'D': {'B': 2, 'C': 2}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']