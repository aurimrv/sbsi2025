import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_empty_graph():
    weighted_graph = WeightedGraph()
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_shortest_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 2)
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == []

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        if vertex not in self.vertices:
            self.vertices[vertex] = Vertex(vertex)

    def add_edge(self, src, dst, weight):
        if src in self.vertices and dst in self.vertices:
            self.vertices[src].add_adjacent(dst, weight)
            self.vertices[dst].add_adjacent(src, weight)

class Vertex:
    def __init__(self, value):
        self.value = value
        self.adjacent = {}

    def add_adjacent(self, vertex, weight):
        self.adjacent[vertex] = weight