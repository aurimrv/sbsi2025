import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:

    def test_dijkstras_basic(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        
        weighted_graph.add_edge('A', 'B', 5)
        weighted_graph.add_edge('A', 'C', 3)
        weighted_graph.add_edge('B', 'D', 2)
        weighted_graph.add_edge('C', 'D', 4)
        
        src = 'A'
        dst = 'D'
        
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'C', 'D']

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        
        weighted_graph.add_edge('A', 'B', 2)
        weighted_graph.add_edge('C', 'B', 3)
        
        src = 'A'
        dst = 'C'
        
        result = dijkstras(weighted_graph, src, dst)
        assert result == []

    def test_dijkstras_same_src_dst(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('X')
        
        src = 'X'
        dst = 'X'
        
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['X']

class WeightedGraph:
    def __init__(self):
        self.vertices = {}
    
    def add_vertex(self, vertex):
        self.vertices[vertex] = GraphNode(vertex)
    
    def add_edge(self, start_vertex, end_vertex, weight):
        self.vertices[start_vertex].add_edge(end_vertex, weight)

class GraphNode:
    def __init__(self, vertex):
        self.vertex = vertex
        self.adjacent = {}
    
    def add_edge(self, end_vertex, weight):
        self.adjacent[end_vertex] = weight