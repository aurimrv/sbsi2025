import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path between two directly connected nodes
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1}
    }
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    # Test case 2: Shortest path between two nodes with multiple intermediate nodes
    weighted_graph = {
        'A': {'B': 2, 'C': 1},
        'B': {'A': 2, 'C': 1, 'D': 3},
        'C': {'A': 1, 'B': 1, 'D': 2},
        'D': {'B': 3, 'C': 2}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    # Test case 3: Shortest path between two nodes with no direct connection
    weighted_graph = {
        'A': {'B': 2, 'C': 1},
        'B': {'A': 2, 'D': 3},
        'C': {'A': 1, 'D': 2},
        'D': {'B': 3, 'C': 2}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    # Test case 4: Shortest path between two nodes with a longer alternate path
    weighted_graph = {
        'A': {'B': 2, 'C': 1},
        'B': {'A': 2, 'D': 3},
        'C': {'A': 1, 'D': 2},
        'D': {'B': 3, 'C': 2, 'E': 1},
        'E': {'D': 1}
    }
    src = 'A'
    dst = 'E'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D', 'E']

    # Test case 5: Shortest path between two nodes with negative weights
    weighted_graph = {
        'A': {'B': 2, 'C': -1},
        'B': {'A': 2, 'D': 3},
        'C': {'A': -1, 'D': 2},
        'D': {'B': 3, 'C': 2}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    # Test case 6: Shortest path between two nodes with all equal weights
    weighted_graph = {
        'A': {'B': 1, 'C': 1},
        'B': {'A': 1, 'D': 1},
        'C': {'A': 1, 'D': 1},
        'D': {'B': 1, 'C': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']