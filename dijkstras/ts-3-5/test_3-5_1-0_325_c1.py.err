import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)
from dijkstras import weighted_graph, dijkstras

def test_dijkstras_empty_graph():
    graph = weighted_graph.WeightedGraph({})
    path = dijkstras(graph, 1, 2)
    assert path == []

def test_dijkstras_single_node_graph():
    graph = weighted_graph.WeightedGraph({1: weighted_graph.Vertex(1)})
    path = dijkstras(graph, 1, 1)
    assert path == [1]

def test_dijkstras_two_node_graph():
    v1 = weighted_graph.Vertex(1)
    v2 = weighted_graph.Vertex(2)
    v1.add_edge(2, 10)
    graph = weighted_graph.WeightedGraph({1: v1, 2: v2})
    path = dijkstras(graph, 1, 2)
    assert path == [1, 2]

def test_dijkstras_three_node_graph():
    v1 = weighted_graph.Vertex(1)
    v2 = weighted_graph.Vertex(2)
    v3 = weighted_graph.Vertex(3)
    v1.add_edge(2, 10)
    v2.add_edge(3, 20)
    graph = weighted_graph.WeightedGraph({1: v1, 2: v2, 3: v3})
    path = dijkstras(graph, 1, 3)
    assert path == [1, 2, 3]

def test_dijkstras_unreachable_destination():
    v1 = weighted_graph.Vertex(1)
    v2 = weighted_graph.Vertex(2)
    v1.add_edge(2, 10)
    graph = weighted_graph.WeightedGraph({1: v1, 2: v2})
    path = dijkstras(graph, 1, 3)
    assert path == []

def test_dijkstras_cyclic_graph():
    v1 = weighted_graph.Vertex(1)
    v2 = weighted_graph.Vertex(2)
    v3 = weighted_graph.Vertex(3)
    v1.add_edge(2, 10)
    v2.add_edge(3, 20)
    v3.add_edge(1, 5)
    graph = weighted_graph.WeightedGraph({1: v1, 2: v2, 3: v3})
    path = dijkstras(graph, 1, 3)
    assert path == [1, 2, 3]