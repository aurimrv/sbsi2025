import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras, WeightedGraph, Vertex

def test_dijkstras_simple_case():
    g = WeightedGraph()
    v1 = Vertex("A")
    v2 = Vertex("B")
    v3 = Vertex("C")
    g.add_vertex(v1)
    g.add_vertex(v2)
    g.add_vertex(v3)
    g.add_edge(v1, v2, 1)
    g.add_edge(v2, v3, 2)
    g.add_edge(v1, v3, 3)
    
    result = dijkstras(g, "A", "C")
    assert result == ["A", "C"]

def test_dijkstras_multiple_paths():
    g = WeightedGraph()
    v1 = Vertex("A")
    v2 = Vertex("B")
    v3 = Vertex("C")
    g.add_vertex(v1)
    g.add_vertex(v2)
    g.add_vertex(v3)
    g.add_edge(v1, v2, 1)
    g.add_edge(v2, v3, 2)
    g.add_edge(v1, v3, 3)
    g.add_edge(v1, v3, 1)  # Alternate shorter path
    
    result = dijkstras(g, "A", "C")
    assert result == ["A", "C"]

def test_dijkstras_no_path():
    g = WeightedGraph()
    v1 = Vertex("A")
    v2 = Vertex("B")
    v3 = Vertex("C")
    g.add_vertex(v1)
    g.add_vertex(v2)
    g.add_vertex(v3)
    g.add_edge(v1, v2, 1)
    g.add_edge(v2, v3, 2)
    
    result = dijkstras(g, "A", "C")
    assert result == []

def test_dijkstras_same_source_dest():
    g = WeightedGraph()
    v1 = Vertex("A")
    g.add_vertex(v1)
    
    result = dijkstras(g, "A", "A")
    assert result == ["A"]