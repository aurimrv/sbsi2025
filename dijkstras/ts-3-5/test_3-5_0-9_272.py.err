import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_basic():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    
    vertex_a.add_adjacent(vertex_b, 5)
    vertex_a.add_adjacent(vertex_c, 10)
    vertex_b.add_adjacent(vertex_c, 3)
    
    weighted_graph.add_vertex(vertex_a)
    weighted_graph.add_vertex(vertex_b)
    weighted_graph.add_vertex(vertex_c)
    
    path = dijkstras(weighted_graph, 'A', 'C')
    
    assert path == ['A', 'B', 'C']
    
    path = dijkstras(weighted_graph, 'B', 'C')
    
    assert path == ['B', 'C']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    
    vertex_a.add_adjacent(vertex_b, 5)
    vertex_a.add_adjacent(vertex_c, 10)
    
    weighted_graph.add_vertex(vertex_a)
    weighted_graph.add_vertex(vertex_b)
    weighted_graph.add_vertex(vertex_c)
    
    path = dijkstras(weighted_graph, 'A', 'C')
    
    assert path == []

def test_dijkstras_same_node():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    
    weighted_graph.add_vertex(vertex_a)
    
    path = dijkstras(weighted_graph, 'A', 'A')
    
    assert path == ['A']