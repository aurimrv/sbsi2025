import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path from src to dst in a simple graph
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']

    # Test case 2: Shortest path from src to dst in a graph with negative weights
    weighted_graph = {
        'A': {'B': 1, 'C': -2},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': -2, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    # Test case 3: Shortest path from src to dst in a graph with same weight edges
    weighted_graph = {
        'A': {'B': 2, 'C': 2},
        'B': {'A': 2, 'C': 2, 'D': 2},
        'C': {'A': 2, 'B': 2, 'D': 2},
        'D': {'B': 2, 'C': 2}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    # Test case 4: Shortest path from src to dst in a graph with no path
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1},
        'C': {}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == []

    # Test case 5: Shortest path from src to dst in a graph with self-loop
    weighted_graph = {
        'A': {'A': 1, 'B': 2},
        'B': {'A': 2, 'C': 3},
        'C': {'B': 3}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 6: Shortest path from src to dst in a graph with multiple paths
    weighted_graph = {
        'A': {'B': 1, 'C': 2},
        'B': {'A': 1, 'C': 1, 'D': 1},
        'C': {'A': 2, 'B': 1, 'D': 2},
        'D': {'B': 1, 'C': 2}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    # Test case 7: Shortest path from src to dst in a graph with all equal weights
    weighted_graph = {
        'A': {'B': 1, 'C': 1},
        'B': {'A': 1, 'C': 1, 'D': 1},
        'C': {'A': 1, 'B': 1, 'D': 1},
        'D': {'B': 1, 'C': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    # Test case 8: Shortest path from src to dst in a graph with only one node
    weighted_graph = {
        'A': {}
    }
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

    # Test case 9: Shortest path from src to dst in a graph with negative cycles
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': -2}
    }
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    # Test case 10: Shortest path from src to dst in a graph with loops
    weighted_graph = {
        'A': {'A': 1, 'B': 2},
        'B': {'A': 2, 'B': 1}
    }
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    # Test case 11: Shortest path from src to dst in a graph with large weights
    weighted_graph = {
        'A': {'B': 1000, 'C': 2000},
        'B': {'A': 1000, 'C': 1000, 'D': 1000},
        'C': {'A': 2000, 'B': 1000, 'D': 2000},
        'D': {'B': 1000, 'C': 2000}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']