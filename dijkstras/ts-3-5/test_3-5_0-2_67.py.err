import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path from src to dst in a simple graph
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2},
        'C': {'A': 4, 'B': 2}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 2: Shortest path from src to dst in a graph with multiple paths
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    # Test case 3: Shortest path from src to dst in a graph with cycles
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1, 'E': 3},
        'E': {'D': 3}
    }
    src = 'A'
    dst = 'E'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D', 'E']

    # Test case 4: Shortest path from src to dst in a graph with same distance paths
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1, 'E': 3},
        'E': {'D': 3, 'F': 2},
        'F': {'E': 2}
    }
    src = 'A'
    dst = 'F'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D', 'E', 'F']

    # Test case 5: Shortest path from src to dst in a graph with no path
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1},
        'C': {}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == []

    # Test case 6: Shortest path from src to dst in a graph with negative weights
    weighted_graph = {
        'A': {'B': 1, 'C': -2},
        'B': {'A': 1, 'C': 2},
        'C': {'A': -2, 'B': 2}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C']

    # Test case 7: Shortest path from src to dst in a graph with same source and destination
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2},
        'C': {'A': 4, 'B': 2}
    }
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

    # Test case 8: Shortest path from src to dst in a graph with single node
    weighted_graph = {
        'A': {}
    }
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

    # Test case 9: Shortest path from src to dst in a graph with disconnected nodes
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1},
        'C': {'D': 2},
        'D': {'C': 2}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == []

    # Test case 10: Shortest path from src to dst in a large graph
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1, 'E': 3},
        'E': {'D': 3, 'F': 2},
        'F': {'E': 2, 'G': 4},
        'G': {'F': 4, 'H': 1},
        'H': {'G': 1, 'I': 3},
        'I': {'H': 3, 'J': 2},
        'J': {'I': 2}
    }
    src = 'A'
    dst = 'J'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J']
