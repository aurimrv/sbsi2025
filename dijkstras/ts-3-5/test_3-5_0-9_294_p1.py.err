import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras, WeightedGraph, Vertex

def test_dijkstras_basic():
    weighted_graph = WeightedGraph()
    
    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')
    v4 = Vertex('D')
    
    v1.add_adjacent(v2, 2)
    v1.add_adjacent(v3, 5)
    v2.add_adjacent(v3, 1)
    v2.add_adjacent(v4, 3)
    v3.add_adjacent(v4, 2)
    
    weighted_graph.add_vertex(v1)
    weighted_graph.add_vertex(v2)
    weighted_graph.add_vertex(v3)
    weighted_graph.add_vertex(v4)
    
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'C', 'D']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    
    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')
    
    v1.add_adjacent(v2, 2)
    v2.add_adjacent(v3, 1)
    
    weighted_graph.add_vertex(v1)
    weighted_graph.add_vertex(v2)
    weighted_graph.add_vertex(v3)
    
    assert dijkstras(weighted_graph, 'A', 'C') == []

def test_dijkstras_single_node():
    weighted_graph = WeightedGraph()
    v1 = Vertex('A')
    weighted_graph.add_vertex(v1)
    
    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

def test_dijkstras_same_weight():
    weighted_graph = WeightedGraph()
    
    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')
    
    v1.add_adjacent(v2, 2)
    v1.add_adjacent(v3, 2)
    v2.add_adjacent(v3, 2)
    
    weighted_graph.add_vertex(v1)
    weighted_graph.add_vertex(v2)
    weighted_graph.add_vertex(v3)
    
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'C']