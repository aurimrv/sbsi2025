import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    weighted_graph = {
        'A': {'B': 5, 'C': 8},
        'B': {'A': 5, 'C': 2, 'D': 6},
        'C': {'A': 8, 'B': 2, 'D': 7},
        'D': {'B': 6, 'C': 7}
    }
    src = 'A'
    dst = 'D'
    expected_path = ['A', 'B', 'D']

    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_dijkstras_multiple_paths():
    weighted_graph = {
        'A': {'B': 3, 'C': 8},
        'B': {'A': 3, 'C': 2, 'D': 6},
        'C': {'A': 8, 'B': 2, 'D': 7},
        'D': {'B': 6, 'C': 7}
    }
    src = 'A'
    dst = 'D'
    expected_path = ['A', 'B', 'D']

    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_dijkstras_no_path():
    weighted_graph = {
        'A': {'B': 3, 'C': 8},
        'B': {'A': 3, 'C': 2, 'D': 6},
        'C': {'A': 8, 'B': 2, 'D': 7},
        'D': {'B': 6, 'C': 7}
    }
    src = 'A'
    dst = 'E'  # No direct path from A to E
    expected_path = []

    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_dijkstras_same_source_destination():
    weighted_graph = {
        'A': {'B': 3, 'C': 8},
        'B': {'A': 3, 'C': 2, 'D': 6},
        'C': {'A': 8, 'B': 2, 'D': 7},
        'D': {'B': 6, 'C': 7}
    }
    src = 'A'
    dst = 'A'  # Source and destination are the same
    expected_path = ['A']

    assert dijkstras(weighted_graph, src, dst) == expected_path