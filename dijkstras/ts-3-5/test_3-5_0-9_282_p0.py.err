import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_shortest_path_src_to_dst_in_graph():
    weighted_graph = WeightedGraph()
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('A', 'C', 3)
    weighted_graph.add_edge('B', 'C', 1)
    weighted_graph.add_edge('B', 'D', 1)
    weighted_graph.add_edge('C', 'D', 3)

    src = 'A'
    dst = 'D'
    expected_path = ['A', 'B', 'D']

    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_shortest_path_same_src_dst():
    weighted_graph = WeightedGraph()
    weighted_graph.add_edge('A', 'B', 1)
    
    src = 'A'
    dst = 'A'
    expected_path = ['A']

    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_shortest_path_multiple_paths():
    weighted_graph = WeightedGraph()
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('A', 'C', 5)
    weighted_graph.add_edge('B', 'C', 2)
    weighted_graph.add_edge('B', 'D', 3)
    weighted_graph.add_edge('C', 'D', 1)

    src = 'A'
    dst = 'D'
    expected_path = ['A', 'B', 'D']

    assert dijkstras(weighted_graph, src, dst) == expected_path