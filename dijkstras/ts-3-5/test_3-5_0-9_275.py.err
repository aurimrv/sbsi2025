import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras
import pytest
@pytest.mark.timeout(5)
class TestDijkstras:

    def test_dijkstras_shortest_path(self):
        weighted_graph = WeightedGraph()  # Create your WeightedGraph object here
        weighted_graph.vertices = {0: Vertex(0), 1: Vertex(1), 2: Vertex(2), 3: Vertex(3)}

        weighted_graph.vertices[0].adjacent = {1: 2, 2: 4}
        weighted_graph.vertices[1].adjacent = {0: 2, 2: 1, 3: 7}
        weighted_graph.vertices[2].adjacent = {0: 4, 1: 1, 3: 3}
        weighted_graph.vertices[3].adjacent = {1: 7, 2: 3}

        src = 0
        dst = 3

        assert dijkstras(weighted_graph, src, dst) == [0, 2, 3]

    def test_dijkstras_shortest_path_same_vertex(self):
        weighted_graph = WeightedGraph()  # Create your WeightedGraph object here
        weighted_graph.vertices = {0: Vertex(0), 1: Vertex(1)}

        weighted_graph.vertices[0].adjacent = {1: 5}
        weighted_graph.vertices[1].adjacent = {0: 5}

        src = 0
        dst = 0

        assert dijkstras(weighted_graph, src, dst) == [0]

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()  # Create your WeightedGraph object here
        weighted_graph.vertices = {0: Vertex(0), 1: Vertex(1)}

        weighted_graph.vertices[0].adjacent = {1: 2}
        weighted_graph.vertices[1].adjacent = {}

        src = 0
        dst = 1

        assert dijkstras(weighted_graph, src, dst) == []

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

class Vertex:
    def __init__(self, key):
        self.key = key
        self.adjacent = {}

    def add_neighbor(self, neighbor, weight):
        self.adjacent[neighbor] = weight
