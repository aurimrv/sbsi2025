import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_basic():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 2)
    weighted_graph.add_edge('C', 'D', 3)
    
    path = dijkstras(weighted_graph, 'A', 'D')
    assert path == ['A', 'B', 'C', 'D']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('C', 'D', 3)
    
    path = dijkstras(weighted_graph, 'A', 'D')
    assert path == []

def test_dijkstras_same_src_dst():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 1)
    
    path = dijkstras(weighted_graph, 'A', 'A')
    assert path == ['A']

def test_dijkstras_large_graph():
    weighted_graph = WeightedGraph()
    vertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G']
    for vertex in vertices:
        weighted_graph.add_vertex(vertex)
    
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('A', 'C', 2)
    weighted_graph.add_edge('B', 'D', 3)
    weighted_graph.add_edge('C', 'D', 1)
    weighted_graph.add_edge('D', 'E', 2)
    weighted_graph.add_edge('E', 'F', 1)
    weighted_graph.add_edge('F', 'G', 3)
    
    path = dijkstras(weighted_graph, 'A', 'G')
    assert path == ['A', 'C', 'D', 'E', 'F', 'G']