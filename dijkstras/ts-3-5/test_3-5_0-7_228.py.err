import os
import sys
from functools import reduce
project_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_basic():
    # Test case to check basic functionality with a simple graph
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 2)
    result = dijkstras(weighted_graph, 'A', 'C')
    assert result == ['A', 'B', 'C']

def test_dijkstras_no_path():
    # Test case to check behavior when there is no path between source and destination
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('C', 'B', 2)
    result = dijkstras(weighted_graph, 'A', 'C')
    assert result == []

def test_dijkstras_same_source_dest():
    # Test case to check behavior when source and destination are the same
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    result = dijkstras(weighted_graph, 'A', 'A')
    assert result == ['A']

def test_dijkstras_multiple_paths():
    # Test case to check behavior with multiple possible paths
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('A', 'C', 2)
    weighted_graph.add_edge('B', 'D', 3)
    weighted_graph.add_edge('C', 'D', 1)
    result = dijkstras(weighted_graph, 'A', 'D')
    assert result == ['A', 'C', 'D']

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        self.vertices[vertex] = Vertex(vertex)

    def add_edge(self, src, dest, weight):
        self.vertices[src].adjacent[dest] = weight

class Vertex:
    def __init__(self, label):
        self.label = label
        self.adjacent = {}