import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_shortest_path():
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1}
    }
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    weighted_graph = {
        'A': {'B': 2, 'C': 1},
        'B': {'A': 2, 'C': 3},
        'C': {'A': 1, 'B': 3}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C']

def test_dijkstras_no_path():
    weighted_graph = {
        'A': {'B': 1},
        'B': {'C': 1},
        'C': {'D': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == []

    weighted_graph = {
        'A': {'B': 1},
        'C': {'D': 1}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_same_node():
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1}
    }
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

def test_dijkstras_invalid_nodes():
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1}
    }
    src = 'X'
    dst = 'Y'
    assert dijkstras(weighted_graph, src, dst) == []

    src = 'X'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == []

    src = 'A'
    dst = 'Y'
    assert dijkstras(weighted_graph, src, dst) == []