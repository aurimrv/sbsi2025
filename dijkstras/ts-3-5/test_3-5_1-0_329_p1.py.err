import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_shortest_path_case1(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2, 'D': 5},
            'C': {'A': 4, 'B': 2, 'D': 1},
            'D': {'B': 5, 'C': 1}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    def test_shortest_path_case2(self):
        weighted_graph = {
            'A': {'B': 3, 'C': 2},
            'B': {'A': 3, 'D': 1},
            'C': {'A': 2, 'D': 3},
            'D': {'B': 1, 'C': 3}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    def test_shortest_path_case3(self):
        weighted_graph = {
            'A': {'B': 2, 'C': 4},
            'B': {'A': 2, 'D': 3},
            'C': {'A': 4, 'D': 6},
            'D': {'B': 3, 'C': 6}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    def test_shortest_path_case4(self):
        weighted_graph = {
            'A': {'B': 2, 'C': 5},
            'B': {'A': 2, 'C': 2, 'D': 6},
            'C': {'A': 5, 'B': 2, 'D': 3},
            'D': {'B': 6, 'C': 3}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    def test_shortest_path_case5(self):
        weighted_graph = {
            'A': {'B': 5, 'C': 2},
            'B': {'A': 5, 'D': 4},
            'C': {'A': 2, 'D': 7},
            'D': {'B': 4, 'C': 7}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    def test_shortest_path_case6(self):
        weighted_graph = {
            'A': {'B': 3, 'C': 6},
            'B': {'A': 3, 'D': 2},
            'C': {'A': 6, 'D': 4},
            'D': {'B': 2, 'C': 4}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']