import os
import sys
from functools import reduce

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_basic():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    vertices = {
        'A': Vertex({'B': 1, 'C': 4}),
        'B': Vertex({'A': 1, 'C': 2, 'D': 5}),
        'C': Vertex({'A': 4, 'B': 2, 'D': 1}),
        'D': Vertex({'B': 5, 'C': 1})
    }

    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'D'

    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']
    assert dijkstras(weighted_graph, 'B', 'D') == ['B', 'C', 'D']

def test_dijkstras_no_path():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    vertices = {
        'A': Vertex({'B': 1, 'C': 4}),
        'B': Vertex({'A': 1, 'C': 2}),
        'C': Vertex({'A': 4, 'B': 2}),
        'D': Vertex({})
    }

    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'D'

    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_same_src_dst():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    vertices = {
        'A': Vertex({'B': 1, 'C': 4}),
        'B': Vertex({'A': 1, 'C': 2}),
        'C': Vertex({'A': 4, 'B': 2}),
        'D': Vertex({})
    }

    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'A'

    assert dijkstras(weighted_graph, src, dst) == ['A']