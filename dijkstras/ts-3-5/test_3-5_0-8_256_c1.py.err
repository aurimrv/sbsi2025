import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import WeightedGraph, dijkstras

import pytest

@pytest.fixture
def weighted_graph():
    graph = WeightedGraph()
    graph.add_vertex('A')
    graph.add_vertex('B')
    graph.add_vertex('C')
    graph.add_vertex('D')
    graph.add_vertex('E')
    graph.add_edge('A', 'B', 4)
    graph.add_edge('A', 'C', 1)
    graph.add_edge('C', 'B', 2)
    graph.add_edge('B', 'E', 4)
    graph.add_edge('C', 'D', 4)
    graph.add_edge('D', 'E', 4)
    return graph

def test_dijkstras_shortest_path(weighted_graph):
    src = 'A'
    dst = 'E'
    path = dijkstras(weighted_graph, src, dst)
    assert path == ['A', 'C', 'D', 'E']

def test_dijkstras_shortest_path_direct(weighted_graph):
    src = 'A'
    dst = 'B'
    path = dijkstras(weighted_graph, src, dst)
    assert path == ['A', 'B']

def test_dijkstras_shortest_path_same_vertex(weighted_graph):
    src = 'E'
    dst = 'E'
    path = dijkstras(weighted_graph, src, dst)
    assert path == ['E']

def test_dijkstras_shortest_path_no_path(weighted_graph):
    src = 'A'
    dst = 'D'
    path = dijkstras(weighted_graph, src, dst)
    assert path == []

def test_dijkstras_weights(weighted_graph):
    src = 'A'
    dst = 'E'
    path = dijkstras(weighted_graph, src, dst)
    assert path == ['A', 'C', 'D', 'E']