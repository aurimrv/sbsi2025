import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

# Test cases for the dijkstras function

def test_dijkstras_shortest_path():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    
    vertex_a.add_neighbor(vertex_b, 5)
    vertex_a.add_neighbor(vertex_c, 10)
    vertex_b.add_neighbor(vertex_c, 3)
    
    weighted_graph.add_vertex(vertex_a)
    weighted_graph.add_vertex(vertex_b)
    weighted_graph.add_vertex(vertex_c)
    
    src = 'A'
    dst = 'C'
    
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    
    vertex_a.add_neighbor(vertex_b, 5)
    
    weighted_graph.add_vertex(vertex_a)
    weighted_graph.add_vertex(vertex_b)
    weighted_graph.add_vertex(vertex_c)
    
    src = 'A'
    dst = 'C'
    
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_same_source_dest():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    
    vertex_a.add_neighbor(vertex_b, 3)
    
    weighted_graph.add_vertex(vertex_a)
    weighted_graph.add_vertex(vertex_b)
    
    src = 'A'
    dst = 'A'
    
    assert dijkstras(weighted_graph, src, dst) == ['A']

def test_dijkstras_graph_with_cycles():
    weighted_graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    
    vertex_a.add_neighbor(vertex_b, 5)
    vertex_b.add_neighbor(vertex_c, 3)
    vertex_c.add_neighbor(vertex_a, 2)
    
    weighted_graph.add_vertex(vertex_a)
    weighted_graph.add_vertex(vertex_b)
    weighted_graph.add_vertex(vertex_c)
    
    src = 'A'
    dst = 'C'
    
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']