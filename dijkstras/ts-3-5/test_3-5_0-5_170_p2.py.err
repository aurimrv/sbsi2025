import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_shortest_path_1(self):
        weighted_graph = WeightedGraph()
        a = Vertex('A')
        b = Vertex('B')
        c = Vertex('C')
        d = Vertex('D')
        a.add_edge(b, 1)
        a.add_edge(c, 4)
        b.add_edge(d, 2)
        c.add_edge(d, 3)
        weighted_graph.add_vertex(a)
        weighted_graph.add_vertex(b)
        weighted_graph.add_vertex(c)
        weighted_graph.add_vertex(d)
        assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'D']

    def test_dijkstras_shortest_path_2(self):
        weighted_graph = WeightedGraph()
        a = Vertex('A')
        b = Vertex('B')
        c = Vertex('C')
        d = Vertex('D')
        a.add_edge(b, 2)
        b.add_edge(c, 1)
        c.add_edge(d, 2)
        weighted_graph.add_vertex(a)
        weighted_graph.add_vertex(b)
        weighted_graph.add_vertex(c)
        weighted_graph.add_vertex(d)
        assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'C', 'D']

    def test_dijkstras_shortest_path_same_node(self):
        weighted_graph = WeightedGraph()
        a = Vertex('A')
        b = Vertex('B')
        c = Vertex('C')
        d = Vertex('D')
        a.add_edge(b, 1)
        a.add_edge(c, 2)
        b.add_edge(d, 3)
        c.add_edge(d, 1)
        weighted_graph.add_vertex(a)
        weighted_graph.add_vertex(b)
        weighted_graph.add_vertex(c)
        weighted_graph.add_vertex(d)
        assert dijkstras(weighted_graph, 'A', 'A') == ['A']

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        a = Vertex('A')
        b = Vertex('B')
        c = Vertex('C')
        d = Vertex('D')
        a.add_edge(b, 1)
        a.add_edge(c, 2)
        b.add_edge(d, 3)
        weighted_graph.add_vertex(a)
        weighted_graph.add_vertex(b)
        weighted_graph.add_vertex(c)
        weighted_graph.add_vertex(d)
        assert dijkstras(weighted_graph, 'A', 'E') == []

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        self.vertices[vertex.label] = vertex

class Vertex:
    def __init__(self, label):
        self.label = label
        self.adjacent = {}

    def add_edge(self, vertex, weight):
        self.adjacent[vertex.label] = weight