import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras
from weighted_graph import WeightedGraph

class TestDijkstrasAlgorithm:
    
    def test_shortest_path_exists(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        
        path = dijkstras(weighted_graph, 'A', 'C')
        assert path == ['A', 'B', 'C']

    def test_shortest_path_is_direct(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('X')
        weighted_graph.add_vertex('Y')
        weighted_graph.add_vertex('Z')
        weighted_graph.add_edge('X', 'Y', 5)
        weighted_graph.add_edge('Y', 'Z', 2)
        
        path = dijkstras(weighted_graph, 'X', 'Y')
        assert path == ['X', 'Y']

    def test_no_path_exists(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('P')
        weighted_graph.add_vertex('Q')
        weighted_graph.add_vertex('R')
        weighted_graph.add_edge('P', 'Q', 3)
        weighted_graph.add_edge('Q', 'R', 2)
        
        path = dijkstras(weighted_graph, 'R', 'P')
        assert path == []