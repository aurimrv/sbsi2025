import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:

    def test_dijkstras_basic_case(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('A', 'C', 3)

        src = 'A'
        dst = 'C'

        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')

        src = 'A'
        dst = 'C'

        assert dijkstras(weighted_graph, src, dst) == []

    def test_dijkstras_same_source_and_destination(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)

        src = 'A'
        dst = 'A'

        assert dijkstras(weighted_graph, src, dst) == ['A']

class WeightedGraph:

    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        self.vertices[vertex] = Vertex(vertex)

    def add_edge(self, src, dst, weight):
        self.vertices[src].adjacent[dst] = weight

class Vertex:

    def __init__(self, label):
        self.label = label
        self.adjacent = {}