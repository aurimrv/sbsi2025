[*] Start mutation process:
   - targets: dijkstras.py
   - tests: ts-3-5/test_3-5_1-0_327.py
[*] 2 tests passed:
   - test_3-5_1-0_327 [0.23815 s]
[*] Start mutants generation and execution:
   - [#   1] AOD dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     return path[::1]
--------------------------------------------------------------------------------
[0.21790 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98f6110>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#   2] AOR dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     return path[::+1]
--------------------------------------------------------------------------------
[0.20399 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9937910>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#   3] BCR dijkstras: 
--------------------------------------------------------------------------------
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
  20:         if min_dist_node == dst:
- 21:             break
+ 21:             continue
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
--------------------------------------------------------------------------------
[5.00668 s] timeout
   - [#   4] COI dijkstras: 
--------------------------------------------------------------------------------
  13:         prev[vertex] = None
  14:     
  15:     dist[src] = 0
  16:     
- 17:     while vertices:
+ 17:     while not vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
  20:         if min_dist_node == dst:
  21:             break
--------------------------------------------------------------------------------
[0.20348 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9976260>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#   5] COI dijkstras: 
--------------------------------------------------------------------------------
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
- 18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
+ 18:         min_dist_node = min(list(filter((lambda x: (x[0] not in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
  20:         if min_dist_node == dst:
  21:             break
  22:         
--------------------------------------------------------------------------------
[0.20376 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9a81240>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb9a81cc0>
src = 'A', dst = 'C'

>   ???
E   ValueError: min() arg is an empty sequence

dijkstras:18: ValueError
   - [#   6] COI dijkstras: 
--------------------------------------------------------------------------------
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
- 20:         if min_dist_node == dst:
+ 20:         if not (min_dist_node == dst):
  21:             break
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
--------------------------------------------------------------------------------
[0.21361 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98deb00>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#   7] COI dijkstras: 
--------------------------------------------------------------------------------
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
- 29:             if distance < dist[neighbor]:
+ 29:             if not (distance < dist[neighbor]):
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
--------------------------------------------------------------------------------
[0.21048 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9a18a60>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#   8] COI dijkstras: 
--------------------------------------------------------------------------------
  32:     
  33:     
  34:     path = []
  35:     current = dst
- 36:     while prev[current]:
+ 36:     while not (prev[current]):
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
--------------------------------------------------------------------------------
[0.21101 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9975f90>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#   9] OIL dijkstras: 
--------------------------------------------------------------------------------
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
- 14:     
+ 14:         break
  15:     dist[src] = 0
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
--------------------------------------------------------------------------------
[0.21137 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9a82140>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb9a83e50>
src = 'A', dst = 'C'

>   ???
E   KeyError: 'B'

dijkstras:29: KeyError
   - [#  10] OIL dijkstras: 
--------------------------------------------------------------------------------
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
- 32:     
+ 32:         break
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
--------------------------------------------------------------------------------
[0.21419 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case2

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9a82c20>

    def test_shortest_path_case2(self):
        # Test case with a more complex graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C'),
            'D': Vertex('D'),
            'E': Vertex('E')
        }
        graph.vertices['A'].adjacent = {'B': 6, 'D': 1}
        graph.vertices['B'].adjacent = {'D': 2, 'C': 2, 'E': 2}
        graph.vertices['C'].adjacent = {'E': 1}
        graph.vertices['D'].adjacent = {'E': 5}
    
        result = dijkstras(graph, 'A', 'E')
>       assert result == ['A', 'D', 'E']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:59: AssertionError
   - [#  11] OIL dijkstras: 
--------------------------------------------------------------------------------
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
- 32:     
+ 32:             break
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
--------------------------------------------------------------------------------
[0.21662 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9974670>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  12] OIL dijkstras: 
--------------------------------------------------------------------------------
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
- 39:     path.append(current)
- 40:     
+ 39:         break
+ 40:     path.append(current)
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.20996 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case2

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9937d90>

    def test_shortest_path_case2(self):
        # Test case with a more complex graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C'),
            'D': Vertex('D'),
            'E': Vertex('E')
        }
        graph.vertices['A'].adjacent = {'B': 6, 'D': 1}
        graph.vertices['B'].adjacent = {'D': 2, 'C': 2, 'E': 2}
        graph.vertices['C'].adjacent = {'E': 1}
        graph.vertices['D'].adjacent = {'E': 5}
    
        result = dijkstras(graph, 'A', 'E')
>       assert result == ['A', 'D', 'E']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:59: AssertionError
   - [#  13] RIL dijkstras: 
--------------------------------------------------------------------------------
   6:     dist = {}
   7:     prev = {}
   8:     
   9:     
- 10:     for vertex in weighted_graph.vertices:
+ 10:     for vertex in reversed(weighted_graph.vertices):
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
  14:     
--------------------------------------------------------------------------------
[0.18465 s] survived
   - [#  14] RIL dijkstras: 
--------------------------------------------------------------------------------
  21:             break
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
- 25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
+ 25:         for neighbor in reversed(weighted_graph.vertices[min_dist_node].adjacent):
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
  29:             if distance < dist[neighbor]:
--------------------------------------------------------------------------------
[0.17959 s] survived
   - [#  15] ROR dijkstras: 
--------------------------------------------------------------------------------
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
- 20:         if min_dist_node == dst:
+ 20:         if min_dist_node != dst:
  21:             break
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
--------------------------------------------------------------------------------
[0.20902 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9f6f610>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  16] ROR dijkstras: 
--------------------------------------------------------------------------------
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
- 29:             if distance < dist[neighbor]:
+ 29:             if distance > dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
--------------------------------------------------------------------------------
[0.21402 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98e1f30>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  17] ROR dijkstras: 
--------------------------------------------------------------------------------
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
- 29:             if distance < dist[neighbor]:
+ 29:             if distance <= dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
--------------------------------------------------------------------------------
[0.18509 s] survived
   - [#  18] SDL dijkstras: 
--------------------------------------------------------------------------------
   1: from functools import reduce
   2: 
   3: def dijkstras(weighted_graph, src, dst):
   4:     
-  5:     vertices = set()
+  5:     pass
   6:     dist = {}
   7:     prev = {}
   8:     
   9:     
--------------------------------------------------------------------------------
[0.21447 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98dee90>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb98dcd90>
src = 'A', dst = 'C'

>   ???
E   NameError: name 'vertices' is not defined

dijkstras:11: NameError
   - [#  19] SDL dijkstras: 
--------------------------------------------------------------------------------
   2: 
   3: def dijkstras(weighted_graph, src, dst):
   4:     
   5:     vertices = set()
-  6:     dist = {}
+  6:     pass
   7:     prev = {}
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
--------------------------------------------------------------------------------
[0.20845 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98e27d0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb98e17b0>
src = 'A', dst = 'C'

>   ???
E   NameError: name 'dist' is not defined

dijkstras:12: NameError
   - [#  20] SDL dijkstras: 
--------------------------------------------------------------------------------
   3: def dijkstras(weighted_graph, src, dst):
   4:     
   5:     vertices = set()
   6:     dist = {}
-  7:     prev = {}
+  7:     pass
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
--------------------------------------------------------------------------------
[0.21206 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98e3fa0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb98e0af0>
src = 'A', dst = 'C'

>   ???
E   NameError: name 'prev' is not defined

dijkstras:13: NameError
   - [#  21] SDL dijkstras: 
--------------------------------------------------------------------------------
   7:     prev = {}
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
- 11:         vertices.add(vertex)
+ 11:         pass
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
  14:     
  15:     dist[src] = 0
--------------------------------------------------------------------------------
[0.21421 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9a81240>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  22] SDL dijkstras: 
--------------------------------------------------------------------------------
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
- 12:         dist[vertex] = float('inf')
+ 12:         pass
  13:         prev[vertex] = None
  14:     
  15:     dist[src] = 0
  16:     
--------------------------------------------------------------------------------
[0.21123 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98172e0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb9817490>
src = 'A', dst = 'C'

>   ???
E   KeyError: 'B'

dijkstras:29: KeyError
   - [#  23] SDL dijkstras: 
--------------------------------------------------------------------------------
   9:     
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
- 13:         prev[vertex] = None
+ 13:         pass
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
--------------------------------------------------------------------------------
[0.22689 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9856440>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb9857400>
src = 'A', dst = 'C'

>   ???
E   KeyError: 'A'

dijkstras:36: KeyError
   - [#  24] SDL dijkstras: 
--------------------------------------------------------------------------------
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
  14:     
- 15:     dist[src] = 0
+ 15:     pass
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
--------------------------------------------------------------------------------
[0.17965 s] survived
   - [#  25] SDL dijkstras: 
--------------------------------------------------------------------------------
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
- 18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
+ 18:         pass
  19:         
  20:         if min_dist_node == dst:
  21:             break
  22:         
--------------------------------------------------------------------------------
[0.20693 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9950070>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb9950220>
src = 'A', dst = 'C'

>   ???
E   NameError: name 'min_dist_node' is not defined

dijkstras:20: NameError
   - [#  26] SDL dijkstras: 
--------------------------------------------------------------------------------
  19:         
  20:         if min_dist_node == dst:
  21:             break
  22:         
- 23:         vertices.remove(min_dist_node)
+ 23:         pass
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
--------------------------------------------------------------------------------
[5.00680 s] timeout
   - [#  27] SDL dijkstras: 
--------------------------------------------------------------------------------
  23:         vertices.remove(min_dist_node)
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
- 27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
+ 27:             pass
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
--------------------------------------------------------------------------------
[0.20922 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb988e7a0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb988e7d0>
src = 'A', dst = 'C'

>   ???
E   NameError: name 'distance' is not defined

dijkstras:29: NameError
   - [#  28] SDL dijkstras: 
--------------------------------------------------------------------------------
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
  29:             if distance < dist[neighbor]:
- 30:                 dist[neighbor] = distance
+ 30:                 pass
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
  34:     path = []
--------------------------------------------------------------------------------
[0.21623 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9857f40>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  29] SDL dijkstras: 
--------------------------------------------------------------------------------
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
- 31:                 prev[neighbor] = min_dist_node
+ 31:                 pass
  32:     
  33:     
  34:     path = []
  35:     current = dst
--------------------------------------------------------------------------------
[0.21391 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98dc070>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  30] SDL dijkstras: 
--------------------------------------------------------------------------------
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
- 34:     path = []
+ 34:     pass
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
--------------------------------------------------------------------------------
[0.21185 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98dd840>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb98dfb20>
src = 'A', dst = 'C'

>   ???
E   NameError: name 'path' is not defined

dijkstras:37: NameError
   - [#  31] SDL dijkstras: 
--------------------------------------------------------------------------------
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
  34:     path = []
- 35:     current = dst
+ 35:     pass
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
--------------------------------------------------------------------------------
[0.20880 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9856b00>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb9854400>
src = 'A', dst = 'C'

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

dijkstras:36: UnboundLocalError
   - [#  32] SDL dijkstras: 
--------------------------------------------------------------------------------
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
- 37:         path.append(current)
+ 37:         pass
  38:         current = prev[current]
  39:     path.append(current)
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.21599 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98161a0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  33] SDL dijkstras: 
--------------------------------------------------------------------------------
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
- 38:         current = prev[current]
+ 38:         pass
  39:     path.append(current)
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[5.00647 s] timeout
   - [#  34] SDL dijkstras: 
--------------------------------------------------------------------------------
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
- 39:     path.append(current)
+ 39:     pass
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.21678 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb9977dc0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  35] SDL dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     pass
--------------------------------------------------------------------------------
[0.20260 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98de080>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  36] SIR dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     return path[:]
--------------------------------------------------------------------------------
[0.20029 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98545b0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  37] ZIL dijkstras: 
--------------------------------------------------------------------------------
   7:     prev = {}
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
- 11:         vertices.add(vertex)
- 12:         dist[vertex] = float('inf')
- 13:         prev[vertex] = None
+ 11:         break
+ 12:     
+ 13:     
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
--------------------------------------------------------------------------------
[0.20107 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb988cee0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
>       result = dijkstras(graph, 'A', 'C')

ts-3-5/test_3-5_1-0_327.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_1-0_327.TestDijkstras.test_shortest_path_case1.<locals>.Graph object at 0x7f9fb988e650>
src = 'A', dst = 'C'

>   ???
E   KeyError: 'C'

dijkstras:36: KeyError
   - [#  38] ZIL dijkstras: 
--------------------------------------------------------------------------------
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
- 18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
- 19:         
- 20:         if min_dist_node == dst:
- 21:             break
- 22:         
- 23:         vertices.remove(min_dist_node)
- 24:         
- 25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
- 26:             
- 27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
- 28:             
- 29:             if distance < dist[neighbor]:
- 30:                 dist[neighbor] = distance
- 31:                 prev[neighbor] = min_dist_node
+ 18:         break
+ 19:     
+ 20:     
+ 21:     
+ 22:     
+ 23:     
+ 24:     
+ 25:     
+ 26:     
+ 27:     
+ 28:     
+ 29:     
+ 30:     
+ 31:     
  32:     
  33:     
  34:     path = []
  35:     current = dst
--------------------------------------------------------------------------------
[0.20837 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98e26b0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  39] ZIL dijkstras: 
--------------------------------------------------------------------------------
  23:         vertices.remove(min_dist_node)
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
- 27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
- 28:             
- 29:             if distance < dist[neighbor]:
- 30:                 dist[neighbor] = distance
- 31:                 prev[neighbor] = min_dist_node
+ 27:             break
+ 28:     
+ 29:     
+ 30:     
+ 31:     
  32:     
  33:     
  34:     path = []
  35:     current = dst
--------------------------------------------------------------------------------
[0.21052 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb98de1d0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
   - [#  40] ZIL dijkstras: 
--------------------------------------------------------------------------------
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
- 37:         path.append(current)
- 38:         current = prev[current]
+ 37:         break
+ 38:     
  39:     path.append(current)
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.20605 s] killed by ts-3-5/test_3-5_1-0_327.py::TestDijkstras::test_shortest_path_case1

self = <test_3-5_1-0_327.TestDijkstras object at 0x7f9fb99536d0>

    def test_shortest_path_case1(self):
        # Test case with a simple graph
        class Vertex:
            def __init__(self, value):
                self.value = value
                self.adjacent = {}
    
        class Graph:
            def __init__(self):
                self.vertices = {}
    
        graph = Graph()
        graph.vertices = {
            'A': Vertex('A'),
            'B': Vertex('B'),
            'C': Vertex('C')
        }
        graph.vertices['A'].adjacent = {'B': 3, 'C': 1}
        graph.vertices['B'].adjacent = {'C': 2}
    
        result = dijkstras(graph, 'A', 'C')
>       assert result == ['A', 'C']
E       AssertionError

ts-3-5/test_3-5_1-0_327.py:32: AssertionError
[*] Mutation score [23.95474 s]: 90.0%
   - all: 40
   - killed: 33 (82.5%)
   - survived: 4 (10.0%)
   - incompetent: 0 (0.0%)
   - timeout: 3 (7.5%)
