[*] Start mutation process:
   - targets: dijkstras.py
   - tests: ts-3-5/test_3-5_0-6_185.py
[*] 3 tests passed:
   - test_3-5_0-6_185 [0.23299 s]
[*] Start mutants generation and execution:
   - [#   1] AOD dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     return path[::1]
--------------------------------------------------------------------------------
[0.21711 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#   2] AOR dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     return path[::+1]
--------------------------------------------------------------------------------
[0.20726 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#   3] BCR dijkstras: 
--------------------------------------------------------------------------------
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
  20:         if min_dist_node == dst:
- 21:             break
+ 21:             continue
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
--------------------------------------------------------------------------------
[5.00673 s] timeout
   - [#   4] COI dijkstras: 
--------------------------------------------------------------------------------
  13:         prev[vertex] = None
  14:     
  15:     dist[src] = 0
  16:     
- 17:     while vertices:
+ 17:     while not vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
  20:         if min_dist_node == dst:
  21:             break
--------------------------------------------------------------------------------
[0.20273 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#   5] COI dijkstras: 
--------------------------------------------------------------------------------
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
- 18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
+ 18:         min_dist_node = min(list(filter((lambda x: (x[0] not in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
  20:         if min_dist_node == dst:
  21:             break
  22:         
--------------------------------------------------------------------------------
[0.20695 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e65025edea0>
src = 'A', dst = 'E'

>   ???
E   ValueError: min() arg is an empty sequence

dijkstras:18: ValueError
   - [#   6] COI dijkstras: 
--------------------------------------------------------------------------------
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
- 20:         if min_dist_node == dst:
+ 20:         if not (min_dist_node == dst):
  21:             break
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
--------------------------------------------------------------------------------
[0.20452 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#   7] COI dijkstras: 
--------------------------------------------------------------------------------
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
- 29:             if distance < dist[neighbor]:
+ 29:             if not (distance < dist[neighbor]):
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
--------------------------------------------------------------------------------
[0.20173 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#   8] COI dijkstras: 
--------------------------------------------------------------------------------
  32:     
  33:     
  34:     path = []
  35:     current = dst
- 36:     while prev[current]:
+ 36:     while not (prev[current]):
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
--------------------------------------------------------------------------------
[0.20504 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#   9] OIL dijkstras: 
--------------------------------------------------------------------------------
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
- 14:     
+ 14:         break
  15:     dist[src] = 0
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
--------------------------------------------------------------------------------
[0.20578 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e65025ed0c0>
src = 'A', dst = 'E'

>   ???
E   KeyError: 'B'

dijkstras:29: KeyError
   - [#  10] OIL dijkstras: 
--------------------------------------------------------------------------------
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
- 32:     
+ 32:         break
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
--------------------------------------------------------------------------------
[0.20440 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  11] OIL dijkstras: 
--------------------------------------------------------------------------------
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
- 32:     
+ 32:             break
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
--------------------------------------------------------------------------------
[0.20357 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  12] OIL dijkstras: 
--------------------------------------------------------------------------------
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
- 39:     path.append(current)
- 40:     
+ 39:         break
+ 40:     path.append(current)
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.20279 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  13] RIL dijkstras: 
--------------------------------------------------------------------------------
   6:     dist = {}
   7:     prev = {}
   8:     
   9:     
- 10:     for vertex in weighted_graph.vertices:
+ 10:     for vertex in reversed(weighted_graph.vertices):
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
  14:     
--------------------------------------------------------------------------------
[0.17775 s] survived
   - [#  14] RIL dijkstras: 
--------------------------------------------------------------------------------
  21:             break
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
- 25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
+ 25:         for neighbor in reversed(weighted_graph.vertices[min_dist_node].adjacent):
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
  29:             if distance < dist[neighbor]:
--------------------------------------------------------------------------------
[0.17560 s] survived
   - [#  15] ROR dijkstras: 
--------------------------------------------------------------------------------
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
- 20:         if min_dist_node == dst:
+ 20:         if min_dist_node != dst:
  21:             break
  22:         
  23:         vertices.remove(min_dist_node)
  24:         
--------------------------------------------------------------------------------
[0.20796 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  16] ROR dijkstras: 
--------------------------------------------------------------------------------
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
- 29:             if distance < dist[neighbor]:
+ 29:             if distance > dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
--------------------------------------------------------------------------------
[0.20678 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  17] ROR dijkstras: 
--------------------------------------------------------------------------------
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
- 29:             if distance < dist[neighbor]:
+ 29:             if distance <= dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
--------------------------------------------------------------------------------
[0.17605 s] survived
   - [#  18] SDL dijkstras: 
--------------------------------------------------------------------------------
   1: from functools import reduce
   2: 
   3: def dijkstras(weighted_graph, src, dst):
   4:     
-  5:     vertices = set()
+  5:     pass
   6:     dist = {}
   7:     prev = {}
   8:     
   9:     
--------------------------------------------------------------------------------
[0.20227 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e650245ab30>
src = 'A', dst = 'E'

>   ???
E   NameError: name 'vertices' is not defined

dijkstras:11: NameError
   - [#  19] SDL dijkstras: 
--------------------------------------------------------------------------------
   2: 
   3: def dijkstras(weighted_graph, src, dst):
   4:     
   5:     vertices = set()
-  6:     dist = {}
+  6:     pass
   7:     prev = {}
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
--------------------------------------------------------------------------------
[0.20048 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e6502547c70>
src = 'A', dst = 'E'

>   ???
E   NameError: name 'dist' is not defined

dijkstras:12: NameError
   - [#  20] SDL dijkstras: 
--------------------------------------------------------------------------------
   3: def dijkstras(weighted_graph, src, dst):
   4:     
   5:     vertices = set()
   6:     dist = {}
-  7:     prev = {}
+  7:     pass
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
--------------------------------------------------------------------------------
[0.20457 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e65025ef3d0>
src = 'A', dst = 'E'

>   ???
E   NameError: name 'prev' is not defined

dijkstras:13: NameError
   - [#  21] SDL dijkstras: 
--------------------------------------------------------------------------------
   7:     prev = {}
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
- 11:         vertices.add(vertex)
+ 11:         pass
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
  14:     
  15:     dist[src] = 0
--------------------------------------------------------------------------------
[0.20333 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  22] SDL dijkstras: 
--------------------------------------------------------------------------------
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
- 12:         dist[vertex] = float('inf')
+ 12:         pass
  13:         prev[vertex] = None
  14:     
  15:     dist[src] = 0
  16:     
--------------------------------------------------------------------------------
[0.21982 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e650231e0e0>
src = 'A', dst = 'E'

>   ???
E   KeyError: 'B'

dijkstras:29: KeyError
   - [#  23] SDL dijkstras: 
--------------------------------------------------------------------------------
   9:     
  10:     for vertex in weighted_graph.vertices:
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
- 13:         prev[vertex] = None
+ 13:         pass
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
--------------------------------------------------------------------------------
[0.21825 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e650231f430>
src = 'A', dst = 'E'

>   ???
E   KeyError: 'A'

dijkstras:36: KeyError
   - [#  24] SDL dijkstras: 
--------------------------------------------------------------------------------
  11:         vertices.add(vertex)
  12:         dist[vertex] = float('inf')
  13:         prev[vertex] = None
  14:     
- 15:     dist[src] = 0
+ 15:     pass
  16:     
  17:     while vertices:
  18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
  19:         
--------------------------------------------------------------------------------
[5.00586 s] timeout
   - [#  25] SDL dijkstras: 
--------------------------------------------------------------------------------
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
- 18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
+ 18:         pass
  19:         
  20:         if min_dist_node == dst:
  21:             break
  22:         
--------------------------------------------------------------------------------
[0.23500 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e650232f970>
src = 'A', dst = 'E'

>   ???
E   NameError: name 'min_dist_node' is not defined

dijkstras:20: NameError
   - [#  26] SDL dijkstras: 
--------------------------------------------------------------------------------
  19:         
  20:         if min_dist_node == dst:
  21:             break
  22:         
- 23:         vertices.remove(min_dist_node)
+ 23:         pass
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
--------------------------------------------------------------------------------
[5.00680 s] timeout
   - [#  27] SDL dijkstras: 
--------------------------------------------------------------------------------
  23:         vertices.remove(min_dist_node)
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
- 27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
+ 27:             pass
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
--------------------------------------------------------------------------------
[0.20621 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e650249bee0>
src = 'A', dst = 'E'

>   ???
E   NameError: name 'distance' is not defined

dijkstras:29: NameError
   - [#  28] SDL dijkstras: 
--------------------------------------------------------------------------------
  26:             
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
  29:             if distance < dist[neighbor]:
- 30:                 dist[neighbor] = distance
+ 30:                 pass
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
  34:     path = []
--------------------------------------------------------------------------------
[5.00641 s] timeout
   - [#  29] SDL dijkstras: 
--------------------------------------------------------------------------------
  27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
  28:             
  29:             if distance < dist[neighbor]:
  30:                 dist[neighbor] = distance
- 31:                 prev[neighbor] = min_dist_node
+ 31:                 pass
  32:     
  33:     
  34:     path = []
  35:     current = dst
--------------------------------------------------------------------------------
[0.20536 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  30] SDL dijkstras: 
--------------------------------------------------------------------------------
  30:                 dist[neighbor] = distance
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
- 34:     path = []
+ 34:     pass
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
--------------------------------------------------------------------------------
[0.20482 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e65025efa30>
src = 'A', dst = 'E'

>   ???
E   NameError: name 'path' is not defined

dijkstras:37: NameError
   - [#  31] SDL dijkstras: 
--------------------------------------------------------------------------------
  31:                 prev[neighbor] = min_dist_node
  32:     
  33:     
  34:     path = []
- 35:     current = dst
+ 35:     pass
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
--------------------------------------------------------------------------------
[0.20823 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e6502475ab0>
src = 'A', dst = 'E'

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

dijkstras:36: UnboundLocalError
   - [#  32] SDL dijkstras: 
--------------------------------------------------------------------------------
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
- 37:         path.append(current)
+ 37:         pass
  38:         current = prev[current]
  39:     path.append(current)
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.20307 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  33] SDL dijkstras: 
--------------------------------------------------------------------------------
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
- 38:         current = prev[current]
+ 38:         pass
  39:     path.append(current)
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[5.00664 s] timeout
   - [#  34] SDL dijkstras: 
--------------------------------------------------------------------------------
  35:     current = dst
  36:     while prev[current]:
  37:         path.append(current)
  38:         current = prev[current]
- 39:     path.append(current)
+ 39:     pass
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.22369 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  35] SDL dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     pass
--------------------------------------------------------------------------------
[0.21001 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  36] SIR dijkstras: 
--------------------------------------------------------------------------------
  37:         path.append(current)
  38:         current = prev[current]
  39:     path.append(current)
  40:     
- 41:     return path[::-1]
+ 41:     return path[:]
--------------------------------------------------------------------------------
[0.20626 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  37] ZIL dijkstras: 
--------------------------------------------------------------------------------
   7:     prev = {}
   8:     
   9:     
  10:     for vertex in weighted_graph.vertices:
- 11:         vertices.add(vertex)
- 12:         dist[vertex] = float('inf')
- 13:         prev[vertex] = None
+ 11:         break
+ 12:     
+ 13:     
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
--------------------------------------------------------------------------------
[0.20908 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']

ts-3-5/test_3-5_0-6_185.py:24: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

weighted_graph = <test_3-5_0-6_185.WeightedGraph object at 0x7e650231f2b0>
src = 'A', dst = 'E'

>   ???
E   KeyError: 'E'

dijkstras:36: KeyError
   - [#  38] ZIL dijkstras: 
--------------------------------------------------------------------------------
  14:     
  15:     dist[src] = 0
  16:     
  17:     while vertices:
- 18:         min_dist_node = min(list(filter((lambda x: (x[0] in vertices)), dist.items())), key=lambda x: (x[1]))[0]
- 19:         
- 20:         if min_dist_node == dst:
- 21:             break
- 22:         
- 23:         vertices.remove(min_dist_node)
- 24:         
- 25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
- 26:             
- 27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
- 28:             
- 29:             if distance < dist[neighbor]:
- 30:                 dist[neighbor] = distance
- 31:                 prev[neighbor] = min_dist_node
+ 18:         break
+ 19:     
+ 20:     
+ 21:     
+ 22:     
+ 23:     
+ 24:     
+ 25:     
+ 26:     
+ 27:     
+ 28:     
+ 29:     
+ 30:     
+ 31:     
  32:     
  33:     
  34:     path = []
  35:     current = dst
--------------------------------------------------------------------------------
[0.20327 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  39] ZIL dijkstras: 
--------------------------------------------------------------------------------
  23:         vertices.remove(min_dist_node)
  24:         
  25:         for neighbor in weighted_graph.vertices[min_dist_node].adjacent:
  26:             
- 27:             distance = weighted_graph.vertices[min_dist_node].adjacent[neighbor]
- 28:             
- 29:             if distance < dist[neighbor]:
- 30:                 dist[neighbor] = distance
- 31:                 prev[neighbor] = min_dist_node
+ 27:             break
+ 28:     
+ 29:     
+ 30:     
+ 31:     
  32:     
  33:     
  34:     path = []
  35:     current = dst
--------------------------------------------------------------------------------
[0.20827 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
   - [#  40] ZIL dijkstras: 
--------------------------------------------------------------------------------
  33:     
  34:     path = []
  35:     current = dst
  36:     while prev[current]:
- 37:         path.append(current)
- 38:         current = prev[current]
+ 37:         break
+ 38:     
  39:     path.append(current)
  40:     
  41:     return path[::-1]
--------------------------------------------------------------------------------
[0.19974 s] killed by ts-3-5/test_3-5_0-6_185.py::test_dijkstras_shortest_path

def test_dijkstras_shortest_path():
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_vertex('E')
    
        weighted_graph.add_edge('A', 'B', 4)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('B', 'C', 5)
        weighted_graph.add_edge('B', 'D', 10)
        weighted_graph.add_edge('C', 'E', 3)
        weighted_graph.add_edge('D', 'E', 7)
    
>       assert dijkstras(weighted_graph, 'A', 'E') == ['A', 'C', 'E']
E       AssertionError

ts-3-5/test_3-5_0-6_185.py:24: AssertionError
[*] Mutation score [33.44296 s]: 92.5%
   - all: 40
   - killed: 32 (80.0%)
   - survived: 3 (7.5%)
   - incompetent: 0 (0.0%)
   - timeout: 5 (12.5%)
