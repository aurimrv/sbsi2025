import pytest
import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class WeightedGraph:
    def __init__(self, vertices):
        self.vertices = vertices

class Vertex:
    def __init__(self, adjacent):
        self.adjacent = adjacent

def test_dijkstras_shortest_path():
    vertices = {
        'A': Vertex({'B': 1, 'C': 4}),
        'B': Vertex({'A': 1, 'C': 2, 'D': 5}),
        'C': Vertex({'A': 4, 'B': 2, 'D': 1}),
        'D': Vertex({'B': 5, 'C': 1})
    }
    weighted_graph = WeightedGraph(vertices)
    
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'C', 'D']

def test_dijkstras_shortest_path_unreachable():
    vertices = {
        'A': Vertex({'B': 1, 'C': 4}),
        'B': Vertex({'A': 1, 'C': 2, 'D': 5}),
        'C': Vertex({'A': 4, 'B': 2, 'D': 1}),
        'D': Vertex({'B': 5, 'C': 1})
    }
    weighted_graph = WeightedGraph(vertices)
    
    assert dijkstras(weighted_graph, 'A', 'E') == []

def test_dijkstras_shortest_path_single_vertex():
    vertices = {
        'A': Vertex({})
    }
    weighted_graph = WeightedGraph(vertices)
    
    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

def test_dijkstras_shortest_path_no_path():
    vertices = {
        'A': Vertex({'B': 1}),
        'B': Vertex({'A': 1}),
        'C': Vertex({'D': 1}),
        'D': Vertex({'C': 1})
    }
    weighted_graph = WeightedGraph(vertices)
    
    assert dijkstras(weighted_graph, 'A', 'C') == []