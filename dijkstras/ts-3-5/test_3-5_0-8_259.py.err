import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_shortest_path_simple(self):
        class WeightedGraph:
            def __init__(self, vertices):
                self.vertices = vertices

        class Vertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent

        vertices = {
            'A': Vertex({'B': 1, 'C': 4}),
            'B': Vertex({'A': 1, 'C': 2, 'D': 5}),
            'C': Vertex({'A': 4, 'B': 2, 'D': 1}),
            'D': Vertex({'B': 5, 'C': 1})
        }

        weighted_graph = WeightedGraph(vertices)
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    def test_shortest_path_no_path(self):
        class WeightedGraph:
            def __init__(self, vertices):
                self.vertices = vertices

        class Vertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent

        vertices = {
            'A': Vertex({'B': 1, 'C': 4}),
            'B': Vertex({'A': 1, 'C': 2}),
            'C': Vertex({'A': 4, 'B': 2})
        }

        weighted_graph = WeightedGraph(vertices)
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == []

    def test_shortest_path_same_source_dest(self):
        class WeightedGraph:
            def __init__(self, vertices):
                self.vertices = vertices

        class Vertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent

        vertices = {
            'A': Vertex({'B': 1, 'C': 4}),
            'B': Vertex({'A': 1, 'C': 2}),
            'C': Vertex({'A': 4, 'B': 2})
        }

        weighted_graph = WeightedGraph(vertices)
        src = 'A'
        dst = 'A'
        assert dijkstras(weighted_graph, src, dst) == ['A']

    def test_shortest_path_large_graph(self):
        class WeightedGraph:
            def __init__(self, vertices):
                self.vertices = vertices

        class Vertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent

        vertices = {
            'A': Vertex({'B': 1, 'C': 4}),
            'B': Vertex({'A': 1, 'C': 2, 'D': 5}),
            'C': Vertex({'A': 4, 'B': 2, 'D': 1}),
            'D': Vertex({'B': 5, 'C': 1}),
            'E': Vertex({'B': 3, 'C': 2, 'F': 4}),
            'F': Vertex({'E': 4, 'G': 2}),
            'G': Vertex({'F': 2, 'H': 3}),
            'H': Vertex({'G': 3})
        }

        weighted_graph = WeightedGraph(vertices)
        src = 'A'
        dst = 'H'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D', 'G', 'H']