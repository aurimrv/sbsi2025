import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path between two directly connected nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 5)
    assert dijkstras(weighted_graph, 'A', 'B') == ['A', 'B']

    # Test case 2: Shortest path between two nodes with intermediate nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 3)
    weighted_graph.add_edge('A', 'C', 2)
    weighted_graph.add_edge('C', 'D', 4)
    weighted_graph.add_edge('B', 'D', 1)
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'D']

    # Test case 3: Shortest path with negative edge weight
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 3)
    weighted_graph.add_edge('A', 'C', -2)
    weighted_graph.add_edge('B', 'C', 1)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'C']

    # Test case 4: Shortest path with multiple possible paths
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('A', 'C', 2)
    weighted_graph.add_edge('B', 'D', 3)
    weighted_graph.add_edge('C', 'D', 1)
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'C', 'D']

    # Test case 5: Shortest path with no path between nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 2)
    weighted_graph.add_edge('C', 'B', 3)
    assert dijkstras(weighted_graph, 'A', 'C') == []

    # Test case 6: Shortest path with self-loop
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_edge('A', 'A', 1)
    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

    # Add more test cases as needed