import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': {
            'adjacent': {'B': 1, 'C': 4}
        },
        'B': {
            'adjacent': {'A': 1, 'C': 2}
        },
        'C': {
            'adjacent': {'A': 4, 'B': 2}
        }
    }

    assert dijkstras(graph, 'A', 'B') == ['A', 'B']

def test_dijkstras_no_path():
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': {
            'adjacent': {'B': 1, 'C': 4}
        },
        'B': {
            'adjacent': {'A': 1, 'C': 2}
        },
        'C': {
            'adjacent': {'A': 4, 'B': 2}
        }
    }

    assert dijkstras(graph, 'B', 'C') == []

def test_dijkstras_same_node():
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': {
            'adjacent': {'B': 1, 'C': 4}
        },
        'B': {
            'adjacent': {'A': 1, 'C': 2}
        },
        'C': {
            'adjacent': {'A': 4, 'B': 2}
        }
    }

    assert dijkstras(graph, 'A', 'A') == ['A']

def test_dijkstras_unreachable():
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': {
            'adjacent': {'B': 1, 'C': 4}
        },
        'B': {
            'adjacent': {'A': 1, 'C': 2}
        },
        'C': {
            'adjacent': {'A': 4, 'B': 2}
        }
    }

    assert dijkstras(graph, 'A', 'D') == []
