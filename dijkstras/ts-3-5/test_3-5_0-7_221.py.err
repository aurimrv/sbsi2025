import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_simple_path():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    v1 = Vertex({'v2': 2, 'v3': 1})
    v2 = Vertex({'v3': 3})
    v3 = Vertex({})
    vertices = {'v1': v1, 'v2': v2, 'v3': v3}

    weighted_graph = WeightedGraph(vertices)
    src = 'v1'
    dst = 'v3'

    result = dijkstras(weighted_graph, src, dst)
    assert result == ['v1', 'v3']

def test_dijkstras_no_path():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    v1 = Vertex({'v2': 2})
    v2 = Vertex({'v1': 3})
    vertices = {'v1': v1, 'v2': v2}

    weighted_graph = WeightedGraph(vertices)
    src = 'v1'
    dst = 'v2'

    result = dijkstras(weighted_graph, src, dst)
    assert result == []

def test_dijkstras_same_src_dst():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    v1 = Vertex({})
    vertices = {'v1': v1}

    weighted_graph = WeightedGraph(vertices)
    src = 'v1'
    dst = 'v1'

    result = dijkstras(weighted_graph, src, dst)
    assert result == ['v1']

def test_dijkstras_complex_graph():
    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    v1 = Vertex({'v2': 2, 'v3': 1})
    v2 = Vertex({'v3': 3})
    v3 = Vertex({'v4': 1})
    v4 = Vertex({'v1': 1})
    vertices = {'v1': v1, 'v2': v2, 'v3': v3, 'v4': v4}

    weighted_graph = WeightedGraph(vertices)
    src = 'v1'
    dst = 'v4'

    result = dijkstras(weighted_graph, src, dst)
    assert result == ['v1', 'v3', 'v4']