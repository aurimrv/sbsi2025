import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_simple():
    class Vertex:
        def __init__(self):
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex(),
        'D': Vertex()
    }

    graph.vertices['A'].adjacent = {'B': 1, 'C': 2}
    graph.vertices['B'].adjacent = {'C': 3, 'D': 1}
    graph.vertices['C'].adjacent = {'D': 2}

    path = dijkstras(graph, 'A', 'D')
    assert path == ['A', 'B', 'D']

def test_dijkstras_no_path():
    class Vertex:
        def __init__(self):
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex()
    }

    graph.vertices['A'].adjacent = {'B': 1}
    graph.vertices['B'].adjacent = {'C': 2}
    
    path = dijkstras(graph, 'A', 'C')
    assert path == []

def test_dijkstras_same_source_and_destination():
    class Vertex:
        def __init__(self):
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex()
    }

    graph.vertices['A'].adjacent = {'B': 1}
    graph.vertices['B'].adjacent = {'C': 2}
    
    path = dijkstras(graph, 'A', 'A')
    assert path == ['A']

def test_dijkstras_unweighted():
    class Vertex:
        def __init__(self):
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex()
    }

    graph.vertices['A'].adjacent = {'B': 1}
    graph.vertices['B'].adjacent = {'C': 1}
    graph.vertices['C'].adjacent = {}

    path = dijkstras(graph, 'A', 'C')
    assert path == ['A', 'B', 'C']