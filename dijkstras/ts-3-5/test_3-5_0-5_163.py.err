import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    class Vertex:
        def __init__(self, value):
            self.value = value
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()

    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')

    v1.adjacent[v2] = 5
    v1.adjacent[v3] = 10
    v2.adjacent[v3] = 3

    graph.vertices = {'A': v1, 'B': v2, 'C': v3}

    assert dijkstras(graph, 'A', 'C') == ['A', 'B', 'C']

    v4 = Vertex('D')
    v2.adjacent[v4] = 2
    v4.adjacent[v3] = 1

    graph.vertices['D'] = v4

    assert dijkstras(graph, 'A', 'D') == ['A', 'B', 'D']

    assert dijkstras(graph, 'B', 'C') == ['B', 'C']

    assert dijkstras(graph, 'D', 'C') == ['D', 'C']

    assert dijkstras(graph, 'C', 'A') == ['C', 'B', 'A']

    assert dijkstras(graph, 'C', 'D') == ['C', 'D']

    assert dijkstras(graph, 'A', 'A') == ['A']

    assert dijkstras(graph, 'X', 'Y') == []  # Non-existent vertices

    assert dijkstras(graph, 'A', 'Z') == []  # Destination not reachable

    assert dijkstras(graph, 'Z', 'A') == []  # Source not reachable

    assert dijkstras(graph, 'Z', 'Z') == []  # Source and destination not reachable

    # Add more test cases as needed