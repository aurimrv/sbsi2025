import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_basic_shortest_path(self):
        class MockVertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent
            
        class MockWeightedGraph:
            vertices = {
                'A': MockVertex({'B': 1, 'C': 4}),
                'B': MockVertex({'A': 1, 'C': 2}),
                'C': MockVertex({'B': 2, 'D': 5}),
                'D': MockVertex({'C': 5})
            }
        
        path = dijkstras(MockWeightedGraph(), 'A', 'D')
        assert path == ['A', 'B', 'C', 'D']
    
    def test_shortest_path_loop(self):
        class MockVertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent
            
        class MockWeightedGraph:
            vertices = {
                'A': MockVertex({'B': 1, 'C': 4}),
                'B': MockVertex({'A': 1, 'C': 2}),
                'C': MockVertex({'B': 2, 'D': 5}),
                'D': MockVertex({'C': 5})
            }
        
        path = dijkstras(MockWeightedGraph(), 'A', 'A')
        assert path == ['A']
    
    def test_shortest_path_unreachable(self):
        class MockVertex:
            def __init__(self, adjacent):
                self.adjacent = adjacent
            
        class MockWeightedGraph:
            vertices = {
                'A': MockVertex({'B': 1}),
                'B': MockVertex({'A': 1}),
                'C': MockVertex({})
            }
        
        path = dijkstras(MockWeightedGraph(), 'A', 'C')
        assert path == []

# Run the test cases
pytest -v