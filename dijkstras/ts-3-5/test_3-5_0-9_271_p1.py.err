import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_empty_graph():
    weighted_graph = {"vertices": {}}
    src = "A"
    dst = "B"
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_single_node_graph():
    weighted_graph = {"vertices": {"A": {"adjacent": {}}}}
    src = "A"
    dst = "A"
    assert dijkstras(weighted_graph, src, dst) == ["A"]

def test_dijkstras_shortest_path():
    weighted_graph = {
        "vertices": {
            "A": {"adjacent": {"B": 1, "C": 2}},
            "B": {"adjacent": {"A": 1, "C": 3}},
            "C": {"adjacent": {"B": 3, "A": 2}}
        }
    }
    src = "A"
    dst = "C"
    assert dijkstras(weighted_graph, src, dst) == ["A", "C"]

def test_dijkstras_no_path():
    weighted_graph = {
        "vertices": {
            "A": {"adjacent": {"B": 1, "C": 2}},
            "B": {"adjacent": {"A": 1, "C": 3}},
            "C": {"adjacent": {"B": 3, "A": 2}}
        }
    }
    src = "C"
    dst = "A"
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_same_weight_path():
    weighted_graph = {
        "vertices": {
            "A": {"adjacent": {"B": 2}},
            "B": {"adjacent": {"A": 2}}
        }
    }
    src = "A"
    dst = "B"
    assert dijkstras(weighted_graph, src, dst) == ["A", "B"]