import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_shortest_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('A', 'C', 4)
    weighted_graph.add_edge('B', 'D', 2)
    weighted_graph.add_edge('C', 'D', 3)

    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'D']

def test_dijkstras_invalid_source_destination():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')

    assert dijkstras(weighted_graph, 'A', 'C') == []

def test_dijkstras_same_source_destination():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 2)

    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)

    assert dijkstras(weighted_graph, 'A', 'C') == []

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        if vertex not in self.vertices:
            self.vertices[vertex] = Vertex(vertex)

    def add_edge(self, src, dst, weight):
        if src in self.vertices and dst in self.vertices:
            self.vertices[src].adjacent[dst] = weight
            self.vertices[dst].adjacent[src] = weight

class Vertex:
    def __init__(self, vertex):
        self.vertex = vertex
        self.adjacent = {}