import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_shortest_path_1(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_edge(vertex_a, vertex_b, 1)
        weighted_graph.add_edge(vertex_b, vertex_c, 2)
        weighted_graph.add_edge(vertex_a, vertex_c, 4)
        
        src = vertex_a
        dst = vertex_c
        
        path = dijkstras(weighted_graph, src, dst)
        
        assert path == ['A', 'C']
    
    def test_shortest_path_2(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)
        weighted_graph.add_edge(vertex_a, vertex_b, 2)
        weighted_graph.add_edge(vertex_b, vertex_c, 1)
        weighted_graph.add_edge(vertex_c, vertex_d, 3)
        
        src = vertex_a
        dst = vertex_d
        
        path = dijkstras(weighted_graph, src, dst)
        
        assert path == ['A', 'B', 'C', 'D']

    def test_shortest_path_3(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)
        weighted_graph.add_edge(vertex_a, vertex_b, 3)
        weighted_graph.add_edge(vertex_b, vertex_d, 2)
        weighted_graph.add_edge(vertex_a, vertex_c, 5)
        weighted_graph.add_edge(vertex_c, vertex_d, 4)
        
        src = vertex_a
        dst = vertex_d
        
        path = dijkstras(weighted_graph, src, dst)
        
        assert path == ['A', 'B', 'D']

    def test_shortest_path_4(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)
        weighted_graph.add_edge(vertex_a, vertex_b, 1)
        weighted_graph.add_edge(vertex_b, vertex_d, 2)
        weighted_graph.add_edge(vertex_a, vertex_c, 5)
        weighted_graph.add_edge(vertex_c, vertex_d, 4)
        
        src = vertex_a
        dst = vertex_d
        
        path = dijkstras(weighted_graph, src, dst)
        
        assert path == ['A', 'B', 'D']

    def test_shortest_path_5(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_edge(vertex_a, vertex_b, 10)
        weighted_graph.add_edge(vertex_a, vertex_c, 3)
        weighted_graph.add_edge(vertex_b, vertex_c, 1)
        
        src = vertex_a
        dst = vertex_c
        
        path = dijkstras(weighted_graph, src, dst)
        
        assert path == ['A', 'C']

class WeightedGraph:
    def __init__(self):
        self.vertices = {}
    
    def add_vertex(self, vertex):
        self.vertices[vertex] = vertex
    
    def add_edge(self, from_vertex, to_vertex, weight):
        if from_vertex not in self.vertices or to_vertex not in self.vertices:
            raise ValueError("Vertices not in graph")
        self.vertices[from_vertex].add_adjacent(to_vertex, weight)
        self.vertices[to_vertex].add_adjacent(from_vertex, weight)

class Vertex:
    def __init__(self, label):
        self.label = label
        self.adjacent = {}
    
    def add_adjacent(self, vertex, weight):
        self.adjacent[vertex] = weight