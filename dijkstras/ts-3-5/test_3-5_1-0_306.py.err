import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_dijkstras_shortest_path_exists(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2, 'D': 5},
            'C': {'A': 4, 'B': 2, 'D': 1},
            'D': {'B': 5, 'C': 1}
        }
        src = 'A'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'C', 'D']

    def test_dijkstras_shortest_path_does_not_exist(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2},
            'C': {'A': 4, 'B': 2},
            'D': {}
        }
        src = 'A'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A']  # No path to destination

    def test_dijkstras_same_source_and_destination(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 4},
            'B': {'A': 1, 'C': 2},
            'C': {'A': 4, 'B': 2}
        }
        src = 'A'
        dst = 'A'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A']  # Same source and destination

    def test_dijkstras_large_weight_values(self):
        weighted_graph = {
            'A': {'B': 1000, 'C': 4000},
            'B': {'A': 1000, 'C': 2000, 'D': 5000},
            'C': {'A': 4000, 'B': 2000, 'D': 1000},
            'D': {'B': 5000, 'C': 1000}
        }
        src = 'A'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'C', 'D']

    def test_dijkstras_isolated_vertices(self):
        weighted_graph = {
            'A': {'B': 1},
            'B': {'A': 1},
            'C': {'D': 2},
            'D': {'C': 2}
        }
        src = 'A'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'B', 'D']

    def test_dijkstras_no_edges(self):
        weighted_graph = {
            'A': {},
            'B': {},
            'C': {},
            'D': {}
        }
        src = 'A'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A']  # No edges, only source vertex