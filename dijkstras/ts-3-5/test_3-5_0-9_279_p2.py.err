import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras
from dijkstras import WeightedGraph

class TestDijkstras:
    
    def test_shortest_path_returned_correctly(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('A', 'C', 4)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('B', 'D', 5)
        weighted_graph.add_edge('C', 'D', 1)
        
        src = 'A'
        dst = 'D'
        
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']
    
    def test_no_path_available(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        
        weighted_graph.add_edge('A', 'B', 3)
        
        src = 'A'
        dst = 'B'
        
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B']
    
    def test_same_source_and_destination(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        
        src = 'A'
        dst = 'A'
        
        assert dijkstras(weighted_graph, src, dst) == ['A']
    
    def test_unreachable_destination(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        
        src = 'A'
        dst = 'B'
        
        assert dijkstras(weighted_graph, src, dst) == []