import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:

    def test_shortest_path_case1(self):
        weighted_graph = WeightedGraph()
        src = 'A'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'B', 'D']

    def test_shortest_path_case2(self):
        weighted_graph = WeightedGraph()
        src = 'A'
        dst = 'C'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'C']

    def test_shortest_path_case3(self):
        weighted_graph = WeightedGraph()
        src = 'B'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['B', 'D']

    def test_shortest_path_case4(self):
        weighted_graph = WeightedGraph()
        src = 'C'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['C', 'D']

    def test_shortest_path_case5(self):
        weighted_graph = WeightedGraph()
        src = 'A'
        dst = 'E'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'E']

    def test_shortest_path_case6(self):
        weighted_graph = WeightedGraph()
        src = 'B'
        dst = 'E'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['B', 'E']

    def test_shortest_path_case7(self):
        weighted_graph = WeightedGraph()
        src = 'A'
        dst = 'F'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'E', 'F']

    def test_shortest_path_case8(self):
        weighted_graph = WeightedGraph()
        src = 'D'
        dst = 'F'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['D', 'E', 'F']