import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path between two directly connected nodes
    weighted_graph = {
        'A': {'B': 5},
        'B': {'A': 5}
    }
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    # Test case 2: Shortest path between nodes with multiple connections
    weighted_graph = {
        'A': {'B': 5, 'C': 10},
        'B': {'A': 5, 'C': 3},
        'C': {'A': 10, 'B': 3}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 3: Shortest path between nodes with different distances
    weighted_graph = {
        'A': {'B': 2, 'C': 5},
        'B': {'A': 2, 'C': 3},
        'C': {'A': 5, 'B': 3}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 4: Shortest path between nodes with loops
    weighted_graph = {
        'A': {'B': 2, 'C': 5},
        'B': {'A': 2, 'C': 3},
        'C': {'A': 5, 'B': 3}
    }
    src = 'B'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['B', 'A']

    # Test case 5: Shortest path between nodes with no direct connection
    weighted_graph = {
        'A': {'B': 2},
        'B': {'A': 2},
        'C': {'D': 3},
        'D': {'C': 3}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    # Test case 6: Shortest path between nodes with one-way connections
    weighted_graph = {
        'A': {'B': 2},
        'B': {'C': 3},
        'C': {}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 7: Shortest path between nodes with negative weights
    weighted_graph = {
        'A': {'B': -2},
        'B': {'C': -3},
        'C': {}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 8: Shortest path between nodes with same weights
    weighted_graph = {
        'A': {'B': 5},
        'B': {'C': 5},
        'C': {}
    }
    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

    # Test case 9: Shortest path between nodes with no path
    weighted_graph = {
        'A': {'B': 2},
        'B': {'C': 3},
        'C': {'A': 5}
    }
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == []

    # Test case 10: Shortest path between the same node
    weighted_graph = {
        'A': {'A': 0}
    }
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

    # Add more test cases as needed