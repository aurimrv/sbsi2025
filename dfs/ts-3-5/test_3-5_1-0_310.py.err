import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from depth_first_search import depth_first_search

@pytest.mark.parametrize('grid, start, target, expected', [
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (0, 0), 5, (1, 1)),  # Test case with a single 5x5 grid
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (0, 0), 1, (0, 0)),  # Test case with a single 3x3 grid
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (0, 2), 9, (2, 2)),  # Test case with target at the bottom right
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (1, 1), 2, (0, 1)),  # Test case with target in the middle
])
def test_depth_first_search(grid, start, target, expected):
    assert depth_first_search(grid, start, target) == expected

@pytest.mark.parametrize('grid, start, target, expected', [
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (0, 0), 0, None),  # Test case when target not found in the grid
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (1, 1), 9, None),  # Test case when target not reachable from start
    ([[1, 2, 3], [4, 5, 6], [7, 8, 9]], (2, 2), 9, (2, 2)),  # Test case with target at the last cell
])
def test_depth_first_search_edge_cases(grid, start, target, expected):
    assert depth_first_search(grid, start, target) == expected