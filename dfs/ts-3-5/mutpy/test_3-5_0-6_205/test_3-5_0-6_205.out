[*] Start mutation process:
   - targets: depth_first_search.py
   - tests: ts-3-5/test_3-5_0-6_205.py
[*] 1 tests passed:
   - test_3-5_0-6_205 [0.12899 s]
[*] Start mutants generation and execution:
   - [#   1] AOR depth_first_search: 
--------------------------------------------------------------------------------
  28:     
  29:     while stack:
  30:         current = stack.pop()
  31:         
- 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 32:         for coor in [(current[0], current[1] + 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
--------------------------------------------------------------------------------
[0.13654 s] survived
   - [#   2] AOR depth_first_search: 
--------------------------------------------------------------------------------
  28:     
  29:     while stack:
  30:         current = stack.pop()
  31:         
- 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 32:         for coor in [(current[0], current[1] - 1), (current[0] + 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
--------------------------------------------------------------------------------
[0.16120 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#   3] AOR depth_first_search: 
--------------------------------------------------------------------------------
  28:     
  29:     while stack:
  30:         current = stack.pop()
  31:         
- 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] - 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
--------------------------------------------------------------------------------
[0.11965 s] survived
   - [#   4] AOR depth_first_search: 
--------------------------------------------------------------------------------
  28:     
  29:     while stack:
  30:         current = stack.pop()
  31:         
- 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] - 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
--------------------------------------------------------------------------------
[0.15164 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#   5] AOR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] > width + 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.14963 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   IndexError: list index out of range

depth_first_search:35: IndexError
   - [#   6] AOR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height + 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.15281 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   IndexError: list index out of range

depth_first_search:35: IndexError
   - [#   7] BCR depth_first_search: 
--------------------------------------------------------------------------------
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
- 34:                 continue
+ 34:                 break
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
  38:             elif coor not in visited:
--------------------------------------------------------------------------------
[0.12189 s] survived
   - [#   8] COD depth_first_search: 
--------------------------------------------------------------------------------
   9:     Returns:
  10:         Coordinate of the target. Or None if cannot be found. 
  11:     '''
  12:     height = len(grid)
- 13:     if not height:
+ 13:     if height:
  14:         return None
  15:     width = len(grid[0])
  16:     
  17:     x_start = start[0]
--------------------------------------------------------------------------------
[0.15445 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
>       assert depth_first_search(grid, start, target) == (0, 0)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:14: AssertionError
   - [#   9] COD depth_first_search: 
--------------------------------------------------------------------------------
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
- 38:             elif coor not in visited:
+ 38:             elif coor in visited:
  39:                 stack.append(coor)
  40:                 visited.add(current)
  41:     return None
--------------------------------------------------------------------------------
[0.13730 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  10] COI depth_first_search: 
--------------------------------------------------------------------------------
   9:     Returns:
  10:         Coordinate of the target. Or None if cannot be found. 
  11:     '''
  12:     height = len(grid)
- 13:     if not height:
+ 13:     if not ((not height)):
  14:         return None
  15:     width = len(grid[0])
  16:     
  17:     x_start = start[0]
--------------------------------------------------------------------------------
[0.14315 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
>       assert depth_first_search(grid, start, target) == (0, 0)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:14: AssertionError
   - [#  11] COI depth_first_search: 
--------------------------------------------------------------------------------
  17:     x_start = start[0]
  18:     y_start = start[1]
  19:     
  20:     
- 21:     if grid[y_start][x_start] == target:
+ 21:     if not (grid[y_start][x_start] == target):
  22:         return (x_start, y_start)
  23:     
  24:     visited = set()
  25:     
--------------------------------------------------------------------------------
[0.14876 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:26: AssertionError
   - [#  12] COI depth_first_search: 
--------------------------------------------------------------------------------
  25:     
  26:     stack = [(x_start, y_start)]
  27:     visited.add((x_start, y_start))
  28:     
- 29:     while stack:
+ 29:     while not stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
--------------------------------------------------------------------------------
[0.14692 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  13] COI depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if not ((coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1)):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.14828 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   IndexError: list index out of range

depth_first_search:35: IndexError
   - [#  14] COI depth_first_search: 
--------------------------------------------------------------------------------
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
- 35:             if grid[coor[1]][coor[0]] == target:
+ 35:             if not (grid[coor[1]][coor[0]] == target):
  36:                 return coor
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
--------------------------------------------------------------------------------
[0.14767 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:26: AssertionError
   - [#  15] COI depth_first_search: 
--------------------------------------------------------------------------------
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
- 38:             elif coor not in visited:
+ 38:             elif not (coor not in visited):
  39:                 stack.append(coor)
  40:                 visited.add(current)
  41:     return None
--------------------------------------------------------------------------------
[0.14737 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  16] LCR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 and coor[0] > width - 1 and coor[1] < 0 and coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.14244 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   IndexError: list index out of range

depth_first_search:35: IndexError
   - [#  17] OIL depth_first_search: 
--------------------------------------------------------------------------------
  36:                 return coor
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
- 40:                 visited.add(current)
+ 40:                 visited.add(current)break
  41:     return None
--------------------------------------------------------------------------------
[0.15637 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  18] OIL depth_first_search: 
--------------------------------------------------------------------------------
  36:                 return coor
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
- 40:                 visited.add(current)
+ 40:                 visited.add(current)break
  41:     return None
--------------------------------------------------------------------------------
[0.15569 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  19] RIL depth_first_search: 
--------------------------------------------------------------------------------
  28:     
  29:     while stack:
  30:         current = stack.pop()
  31:         
- 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 32:         for coor in reversed([(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]):
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
--------------------------------------------------------------------------------
[0.12633 s] survived
   - [#  20] ROR depth_first_search: 
--------------------------------------------------------------------------------
  17:     x_start = start[0]
  18:     y_start = start[1]
  19:     
  20:     
- 21:     if grid[y_start][x_start] == target:
+ 21:     if grid[y_start][x_start] != target:
  22:         return (x_start, y_start)
  23:     
  24:     visited = set()
  25:     
--------------------------------------------------------------------------------
[0.16537 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:26: AssertionError
   - [#  21] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] > 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.17037 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  22] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] <= 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.14263 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  23] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] < width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.14857 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   IndexError: list index out of range

depth_first_search:35: IndexError
   - [#  24] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] >= width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.14537 s] survived
   - [#  25] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] > 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.15002 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  26] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] <= 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.12578 s] survived
   - [#  27] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] < height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.15120 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   IndexError: list index out of range

depth_first_search:35: IndexError
   - [#  28] ROR depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] >= height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
--------------------------------------------------------------------------------
[0.15397 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  29] ROR depth_first_search: 
--------------------------------------------------------------------------------
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
- 35:             if grid[coor[1]][coor[0]] == target:
+ 35:             if grid[coor[1]][coor[0]] != target:
  36:                 return coor
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
--------------------------------------------------------------------------------
[0.13921 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:26: AssertionError
   - [#  30] SDL depth_first_search: 
--------------------------------------------------------------------------------
   8:         target: the target value to find in the grid
   9:     Returns:
  10:         Coordinate of the target. Or None if cannot be found. 
  11:     '''
- 12:     height = len(grid)
+ 12:     pass
  13:     if not height:
  14:         return None
  15:     width = len(grid[0])
  16:     
--------------------------------------------------------------------------------
[0.15195 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
>       assert depth_first_search(grid, start, target) == (0, 0)

ts-3-5/test_3-5_0-6_205.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 1

>   ???
E   NameError: name 'height' is not defined

depth_first_search:13: NameError
   - [#  31] SDL depth_first_search: 
--------------------------------------------------------------------------------
  10:         Coordinate of the target. Or None if cannot be found. 
  11:     '''
  12:     height = len(grid)
  13:     if not height:
- 14:         return None
+ 14:         pass
  15:     width = len(grid[0])
  16:     
  17:     x_start = start[0]
  18:     y_start = start[1]
--------------------------------------------------------------------------------
[0.15126 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
        assert depth_first_search(grid, start, target) == (0, 2)
    
        # Test case 5: Empty grid
        grid = []
        start = (0, 0)
        target = 5
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [], start = (0, 0), target = 5

>   ???
E   IndexError: list index out of range

depth_first_search:15: IndexError
   - [#  32] SDL depth_first_search: 
--------------------------------------------------------------------------------
  11:     '''
  12:     height = len(grid)
  13:     if not height:
  14:         return None
- 15:     width = len(grid[0])
+ 15:     pass
  16:     
  17:     x_start = start[0]
  18:     y_start = start[1]
  19:     
--------------------------------------------------------------------------------
[0.15540 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   NameError: name 'width' is not defined

depth_first_search:33: NameError
   - [#  33] SDL depth_first_search: 
--------------------------------------------------------------------------------
  13:     if not height:
  14:         return None
  15:     width = len(grid[0])
  16:     
- 17:     x_start = start[0]
+ 17:     pass
  18:     y_start = start[1]
  19:     
  20:     
  21:     if grid[y_start][x_start] == target:
--------------------------------------------------------------------------------
[0.15037 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
>       assert depth_first_search(grid, start, target) == (0, 0)

ts-3-5/test_3-5_0-6_205.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 1

>   ???
E   NameError: name 'x_start' is not defined

depth_first_search:21: NameError
   - [#  34] SDL depth_first_search: 
--------------------------------------------------------------------------------
  14:         return None
  15:     width = len(grid[0])
  16:     
  17:     x_start = start[0]
- 18:     y_start = start[1]
+ 18:     pass
  19:     
  20:     
  21:     if grid[y_start][x_start] == target:
  22:         return (x_start, y_start)
--------------------------------------------------------------------------------
[0.15172 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
>       assert depth_first_search(grid, start, target) == (0, 0)

ts-3-5/test_3-5_0-6_205.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 1

>   ???
E   NameError: name 'y_start' is not defined

depth_first_search:21: NameError
   - [#  35] SDL depth_first_search: 
--------------------------------------------------------------------------------
  18:     y_start = start[1]
  19:     
  20:     
  21:     if grid[y_start][x_start] == target:
- 22:         return (x_start, y_start)
+ 22:         pass
  23:     
  24:     visited = set()
  25:     
  26:     stack = [(x_start, y_start)]
--------------------------------------------------------------------------------
[0.12512 s] survived
   - [#  36] SDL depth_first_search: 
--------------------------------------------------------------------------------
  20:     
  21:     if grid[y_start][x_start] == target:
  22:         return (x_start, y_start)
  23:     
- 24:     visited = set()
+ 24:     pass
  25:     
  26:     stack = [(x_start, y_start)]
  27:     visited.add((x_start, y_start))
  28:     
--------------------------------------------------------------------------------
[0.14912 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   NameError: name 'visited' is not defined

depth_first_search:27: NameError
   - [#  37] SDL depth_first_search: 
--------------------------------------------------------------------------------
  22:         return (x_start, y_start)
  23:     
  24:     visited = set()
  25:     
- 26:     stack = [(x_start, y_start)]
+ 26:     pass
  27:     visited.add((x_start, y_start))
  28:     
  29:     while stack:
  30:         current = stack.pop()
--------------------------------------------------------------------------------
[0.15219 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   NameError: name 'stack' is not defined

depth_first_search:29: NameError
   - [#  38] SDL depth_first_search: 
--------------------------------------------------------------------------------
  23:     
  24:     visited = set()
  25:     
  26:     stack = [(x_start, y_start)]
- 27:     visited.add((x_start, y_start))
+ 27:     pass
  28:     
  29:     while stack:
  30:         current = stack.pop()
  31:         
--------------------------------------------------------------------------------
[0.12449 s] survived
   - [#  39] SDL depth_first_search: 
--------------------------------------------------------------------------------
  26:     stack = [(x_start, y_start)]
  27:     visited.add((x_start, y_start))
  28:     
  29:     while stack:
- 30:         current = stack.pop()
+ 30:         pass
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
--------------------------------------------------------------------------------
[0.14999 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
>       assert depth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-6_205.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (2, 2), target = 10

>   ???
E   NameError: name 'current' is not defined

depth_first_search:32: NameError
   - [#  40] SDL depth_first_search: 
--------------------------------------------------------------------------------
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  34:                 continue
  35:             if grid[coor[1]][coor[0]] == target:
- 36:                 return coor
+ 36:                 pass
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
  40:                 visited.add(current)
--------------------------------------------------------------------------------
[0.15349 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  41] SDL depth_first_search: 
--------------------------------------------------------------------------------
  35:             if grid[coor[1]][coor[0]] == target:
  36:                 return coor
  37:             
  38:             elif coor not in visited:
- 39:                 stack.append(coor)
+ 39:                 pass
  40:                 visited.add(current)
  41:     return None
--------------------------------------------------------------------------------
[0.15608 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  42] SDL depth_first_search: 
--------------------------------------------------------------------------------
  36:                 return coor
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
- 40:                 visited.add(current)
+ 40:                 pass
  41:     return None
--------------------------------------------------------------------------------
[5.00633 s] timeout
   - [#  43] SDL depth_first_search: 
--------------------------------------------------------------------------------
  37:             
  38:             elif coor not in visited:
  39:                 stack.append(coor)
  40:                 visited.add(current)
- 41:     return None
+ 41:     pass
--------------------------------------------------------------------------------
[0.13281 s] survived
   - [#  44] ZIL depth_first_search: 
--------------------------------------------------------------------------------
  26:     stack = [(x_start, y_start)]
  27:     visited.add((x_start, y_start))
  28:     
  29:     while stack:
- 30:         current = stack.pop()
- 31:         
- 32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
- 34:                 continue
- 35:             if grid[coor[1]][coor[0]] == target:
- 36:                 return coor
- 37:             
- 38:             elif coor not in visited:
- 39:                 stack.append(coor)
- 40:                 visited.add(current)
+ 30:         break
+ 31:     
+ 32:     
+ 33:     
+ 34:     
+ 35:     
+ 36:     
+ 37:     
+ 38:     
+ 39:     
+ 40:     
  41:     return None
--------------------------------------------------------------------------------
[0.14977 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
   - [#  45] ZIL depth_first_search: 
--------------------------------------------------------------------------------
  29:     while stack:
  30:         current = stack.pop()
  31:         
  32:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 33:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
- 34:                 continue
- 35:             if grid[coor[1]][coor[0]] == target:
- 36:                 return coor
- 37:             
- 38:             elif coor not in visited:
- 39:                 stack.append(coor)
- 40:                 visited.add(current)
+ 33:             break
+ 34:     
+ 35:     
+ 36:     
+ 37:     
+ 38:     
+ 39:     
+ 40:     
  41:     return None
--------------------------------------------------------------------------------
[0.15287 s] killed by ts-3-5/test_3-5_0-6_205.py::test_depth_first_search

def test_depth_first_search():
        # Test case 1: Target found at start position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 1
        assert depth_first_search(grid, start, target) == (0, 0)
    
        # Test case 2: Target found at a different position
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
        assert depth_first_search(grid, start, target) == (1, 1)
    
        # Test case 3: Target not found in the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 2)
        target = 10
        assert depth_first_search(grid, start, target) is None
    
        # Test case 4: Target at the edge of the grid
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (2, 1)
        target = 7
>       assert depth_first_search(grid, start, target) == (0, 2)
E       AssertionError

ts-3-5/test_3-5_0-6_205.py:32: AssertionError
[*] Mutation score [12.92365 s]: 80.0%
   - all: 45
   - killed: 35 (77.8%)
   - survived: 9 (20.0%)
   - incompetent: 0 (0.0%)
   - timeout: 1 (2.2%)
