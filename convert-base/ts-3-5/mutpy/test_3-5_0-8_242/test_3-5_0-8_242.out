[*] Start mutation process:
   - targets: convert_base.py
   - tests: ts-3-5/test_3-5_0-8_242.py
[*] 17 tests passed:
   - test_3-5_0-8_242 [0.19779 s]
[*] Start mutants generation and execution:
   - [#   1] AOD convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
-  3:         return -1
+  3:         return 1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
--------------------------------------------------------------------------------
[0.22575 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10--1]

val = '10', base = -1

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#   2] AOD convert_base: 
--------------------------------------------------------------------------------
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
+  8:             return 1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
--------------------------------------------------------------------------------
[0.22011 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10-0]

val = '10', base = 0

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#   3] AOD convert_base: 
--------------------------------------------------------------------------------
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
- 16:         return -1
+ 16:         return 1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.23643 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[g-16]

val = 'g', base = 16

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#   4] AOR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
-  3:         return -1
+  3:         return +1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
--------------------------------------------------------------------------------
[0.22959 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10--1]

val = '10', base = -1

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#   5] AOR convert_base: 
--------------------------------------------------------------------------------
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
+  8:             return +1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
--------------------------------------------------------------------------------
[0.23746 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10-0]

val = '10', base = 0

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#   6] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val / (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.22200 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#   7] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val // (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.22174 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#   8] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val ** (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.20698 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#   9] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val * (base * ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.25054 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[a-16-10]

val = 'a', base = 16, expected = 10

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  10] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val * (base ** ((len(val) + i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.23908 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[101-2-5]

val = '101', base = 2, expected = 5

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  11] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val * (base ** ((len(val) - i) + 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.23271 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  12] AOR convert_base: 
--------------------------------------------------------------------------------
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
- 16:         return -1
+ 16:         return +1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.23564 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[g-16]

val = 'g', base = 16

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#  13] ASR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value -= digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.22296 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  14] COI convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if not ((base < 0 or (base > 10 and base != 16))):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.22637 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  15] COI convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if not ((digit_val < 0 or digit_val > base)):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.23358 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  16] COI convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if not ((len(char) != 1 or ord(char) > ord('f'))):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.21730 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  17] LCR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 and (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.21059 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10-11]

val = '10', base = 11

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#  18] LCR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base > 10 or base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.20618 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  19] LCR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val < 0 and digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.20462 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10-0]

val = '10', base = 0

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#  20] LCR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) != 1 and ord(char) > ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.21112 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[g-16]

val = 'g', base = 16

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1

ts-3-5/test_3-5_0-8_242.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = 'g'

>   ???
E   ValueError: invalid literal for int() with base 16: 'g'

convert_base:17: ValueError
   - [#  21] OIL convert_base: 
--------------------------------------------------------------------------------
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
- 11:     return value
- 12: 
+ 11:         break
+ 12:     return value
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
  16:         return -1
--------------------------------------------------------------------------------
[0.19414 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[101-2-5]

val = '101', base = 2, expected = 5

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  22] RIL convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
-  5:     for (i, digit) in enumerate(val):
+  5:     for (i, digit) in reversed(enumerate(val)):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
--------------------------------------------------------------------------------
[0.20049 s] incompetent

TypeError: convert_base:5: TypeError: 'enumerate' object is not reversible

   - [#  23] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base > 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.19882 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  24] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base <= 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.20328 s] survived
   - [#  25] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base < 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.22412 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  26] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base >= 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.20181 s] survived
   - [#  27] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base > 10 and base == 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.21947 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-16-16]

val = '10', base = 16, expected = 16

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  28] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val > 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.20609 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  29] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val <= 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.20628 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  30] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val < 0 or digit_val < base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.21216 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  31] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val < 0 or digit_val >= base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.17489 s] survived
   - [#  32] ROR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) == 1 or ord(char) > ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.20573 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  33] ROR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) != 1 or ord(char) < ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.20849 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  34] ROR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) != 1 or ord(char) >= ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.22536 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_digit_to_int[f-15]

char = 'f', expected = 15

    @pytest.mark.parametrize("char, expected", [
        ("0", 0),
        ("a", 10),
        ("f", 15),
    ])
    def test_convert_digit_to_int(char, expected):
>       assert convert_digit_to_int(char) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:27: AssertionError
   - [#  35] SDL convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
-  3:         return -1
+  3:         pass
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
--------------------------------------------------------------------------------
[0.21537 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10-11]

val = '10', base = 11

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#  36] SDL convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
-  4:     value = 0
+  4:     pass
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
--------------------------------------------------------------------------------
[0.19264 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected

ts-3-5/test_3-5_0-8_242.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

val = '10', base = 2

>   ???
E   UnboundLocalError: local variable 'value' referenced before assignment

convert_base:10: UnboundLocalError
   - [#  37] SDL convert_base: 
--------------------------------------------------------------------------------
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
-  6:         digit_val = convert_digit_to_int(digit)
+  6:         pass
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
--------------------------------------------------------------------------------
[0.20786 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected

ts-3-5/test_3-5_0-8_242.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

val = '10', base = 2

>   ???
E   NameError: name 'digit_val' is not defined

convert_base:7: NameError
   - [#  38] SDL convert_base: 
--------------------------------------------------------------------------------
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
+  8:             pass
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
--------------------------------------------------------------------------------
[0.21563 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[10-0]

val = '10', base = 0

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:38: AssertionError
   - [#  39] SDL convert_base: 
--------------------------------------------------------------------------------
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
- 11:     return value
+ 11:     pass
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
--------------------------------------------------------------------------------
[0.20516 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
   - [#  40] SDL convert_base: 
--------------------------------------------------------------------------------
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
- 16:         return -1
+ 16:         pass
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.22057 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base_invalid[g-16]

val = 'g', base = 16

    @pytest.mark.parametrize("val, base", [
        ("10", 0),  # negative base
        ("10", -1),  # negative base
        ("10", 11),  # invalid base
        ("10", 15),  # invalid base
        ("g", 16),  # invalid digit for base 16
        ("10a", 2),  # invalid digit for base 2
    ])
    def test_convert_base_invalid(val, base):
>       assert convert_base(val, base) == -1

ts-3-5/test_3-5_0-8_242.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = 'g'

>   ???
E   ValueError: invalid literal for int() with base 16: 'g'

convert_base:17: ValueError
   - [#  41] SDL convert_base: 
--------------------------------------------------------------------------------
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
  16:         return -1
- 17:     return int(char, 16)
+ 17:     pass
--------------------------------------------------------------------------------
[0.19367 s] incompetent

TypeError: convert_base:7: TypeError: '<' not supported between instances of 'NoneType' and 'int'

   - [#  42] ZIL convert_base: 
--------------------------------------------------------------------------------
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
-  6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
-  9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+  6:         break
+  7:     
+  8:     
+  9:     
+ 10:     
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.20791 s] killed by ts-3-5/test_3-5_0-8_242.py::test_convert_base[10-2-2]

val = '10', base = 2, expected = 2

    @pytest.mark.parametrize("val, base, expected", [
        ("10", 2, 2),
        ("10", 16, 16),
        ("a", 16, 10),
        ("101", 2, 5),
        ("10a", 16, 266),
    ])
    def test_convert_base(val, base, expected):
>       assert convert_base(val, base) == expected
E       AssertionError

ts-3-5/test_3-5_0-8_242.py:19: AssertionError
[*] Mutation score [9.94182 s]: 92.5%
   - all: 42
   - killed: 37 (88.1%)
   - survived: 3 (7.1%)
   - incompetent: 2 (4.8%)
   - timeout: 0 (0.0%)
