[*] Start mutation process:
   - targets: convert_base.py
   - tests: ./ALL-SMART
[*] 39 tests passed:
   - test_convert_base_WHOLE_SUITE [0.05739 s]
   - test_convert_base_MIO [0.04260 s]
   - test_convert_base_MOSA [0.04259 s]
   - test_convert_base_DYNAMOSA [0.05113 s]
[*] Start mutants generation and execution:
   - [#   1] AOD convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
-  3:         return -1
+  3:         return 1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
--------------------------------------------------------------------------------
[0.08149 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
        var_0 = module_0.convert_base(str_0, int_0)
>       assert var_0 == -1
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:9: AssertionError
   - [#   2] AOD convert_base: 
--------------------------------------------------------------------------------
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
+  8:             return 1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
--------------------------------------------------------------------------------
[0.08318 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
        var_0 = module_0.convert_base(str_0, bool_0)
>       assert var_0 == -1
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:18: AssertionError
   - [#   3] AOD convert_base: 
--------------------------------------------------------------------------------
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
- 16:         return -1
+ 16:         return 1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.08112 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = ')'

>   ???
E   ValueError: invalid literal for int() with base 16: ')'

convert_base:17: ValueError
   - [#   4] AOR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
-  3:         return -1
+  3:         return +1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
--------------------------------------------------------------------------------
[0.08112 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
        var_0 = module_0.convert_base(str_0, int_0)
>       assert var_0 == -1
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:9: AssertionError
   - [#   5] AOR convert_base: 
--------------------------------------------------------------------------------
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
+  8:             return +1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
--------------------------------------------------------------------------------
[0.08402 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
        var_0 = module_0.convert_base(str_0, bool_0)
>       assert var_0 == -1
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:18: AssertionError
   - [#   6] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val / (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.10238 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_8

def test_case_8():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
>       var_1 = module_0.convert_base(str_1, bool_0)

ALL-SMART/test_convert_base_MOSA.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

val = '0f', base = False

>   ???
E   ZeroDivisionError: division by zero

convert_base:10: ZeroDivisionError
   - [#   7] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val // (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.10100 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_8

def test_case_8():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
>       var_1 = module_0.convert_base(str_1, bool_0)

ALL-SMART/test_convert_base_MOSA.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

val = '0f', base = False

>   ???
E   ZeroDivisionError: integer division or modulo by zero

convert_base:10: ZeroDivisionError
   - [#   8] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val ** (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.07972 s] survived
   - [#   9] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val * (base * ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.08632 s] killed by ALL-SMART/test_convert_base_WHOLE_SUITE.py::test_case_2

def test_case_2():
        str_0 = '1'
        bool_0 = True
        var_0 = module_0.convert_base(str_0, bool_0)
>       assert var_0 == 1
E       AssertionError

ALL-SMART/test_convert_base_WHOLE_SUITE.py:36: AssertionError
   - [#  10] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val * (base ** ((len(val) + i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.10138 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_9

def test_case_9():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
        var_1 = module_0.convert_base(str_1, bool_0)
        assert var_1 == -1
        str_2 = 'U}BAZ2wt;P#'
        var_2 = module_0.convert_digit_to_int(str_2)
        assert var_2 == -1
        str_3 = '<u^|,H"&:l<\r'
        int_0 = -693
        int_1 = 16
        var_3 = module_0.convert_base(str_1, int_1)
>       assert var_3 == 15
E       AssertionError

ALL-SMART/test_convert_base_MOSA.py:101: AssertionError
   - [#  11] AOR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value += digit_val * (base ** ((len(val) - i) + 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.10208 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_9

def test_case_9():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
        var_1 = module_0.convert_base(str_1, bool_0)
        assert var_1 == -1
        str_2 = 'U}BAZ2wt;P#'
        var_2 = module_0.convert_digit_to_int(str_2)
        assert var_2 == -1
        str_3 = '<u^|,H"&:l<\r'
        int_0 = -693
        int_1 = 16
        var_3 = module_0.convert_base(str_1, int_1)
>       assert var_3 == 15
E       AssertionError

ALL-SMART/test_convert_base_MOSA.py:101: AssertionError
   - [#  12] AOR convert_base: 
--------------------------------------------------------------------------------
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
- 16:         return -1
+ 16:         return +1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.08430 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = ')'

>   ???
E   ValueError: invalid literal for int() with base 16: ')'

convert_base:17: ValueError
   - [#  13] ASR convert_base: 
--------------------------------------------------------------------------------
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+ 10:         value -= digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.08804 s] killed by ALL-SMART/test_convert_base_WHOLE_SUITE.py::test_case_2

def test_case_2():
        str_0 = '1'
        bool_0 = True
        var_0 = module_0.convert_base(str_0, bool_0)
>       assert var_0 == 1
E       AssertionError

ALL-SMART/test_convert_base_WHOLE_SUITE.py:36: AssertionError
   - [#  14] COI convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if not ((base < 0 or (base > 10 and base != 16))):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08034 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
>       var_0 = module_0.convert_base(str_0, int_0)

ALL-SMART/test_convert_base_MIO.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = '\n'

>   ???
E   ValueError: invalid literal for int() with base 16: '\n'

convert_base:17: ValueError
   - [#  15] COI convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if not ((digit_val < 0 or digit_val > base)):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.07675 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = ')'

>   ???
E   ValueError: invalid literal for int() with base 16: ')'

convert_base:17: ValueError
   - [#  16] COI convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if not ((len(char) != 1 or ord(char) > ord('f'))):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.07864 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = 'n'

>   ???
E   ValueError: invalid literal for int() with base 16: 'n'

convert_base:17: ValueError
   - [#  17] LCR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 and (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.07921 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
>       var_0 = module_0.convert_base(str_0, int_0)

ALL-SMART/test_convert_base_MIO.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = '\n'

>   ???
E   ValueError: invalid literal for int() with base 16: '\n'

convert_base:17: ValueError
   - [#  18] LCR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base > 10 or base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08049 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_4

def test_case_4():
        list_0 = []
        bool_0 = False
        var_0 = module_0.convert_base(list_0, bool_0)
>       assert var_0 == 0
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:28: AssertionError
   - [#  19] LCR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val < 0 and digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.07911 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = ')'

>   ???
E   ValueError: invalid literal for int() with base 16: ')'

convert_base:17: ValueError
   - [#  20] LCR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) != 1 and ord(char) > ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.08118 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = 'n'

>   ???
E   ValueError: invalid literal for int() with base 16: 'n'

convert_base:17: ValueError
   - [#  21] OIL convert_base: 
--------------------------------------------------------------------------------
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
- 11:     return value
- 12: 
+ 11:         break
+ 12:     return value
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
  16:         return -1
--------------------------------------------------------------------------------
[0.09962 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_8

def test_case_8():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
        var_1 = module_0.convert_base(str_1, bool_0)
>       assert var_1 == -1
E       AssertionError

ALL-SMART/test_convert_base_MOSA.py:66: AssertionError
   - [#  22] RIL convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
-  5:     for (i, digit) in enumerate(val):
+  5:     for (i, digit) in reversed(enumerate(val)):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
--------------------------------------------------------------------------------
[0.07916 s] incompetent

TypeError: convert_base:5: TypeError: 'enumerate' object is not reversible

   - [#  23] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base > 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08168 s] incompetent

TypeError: convert_base:5: TypeError: 'bool' object is not iterable

   - [#  24] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base <= 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08102 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_4

def test_case_4():
        list_0 = []
        bool_0 = False
        var_0 = module_0.convert_base(list_0, bool_0)
>       assert var_0 == 0
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:28: AssertionError
   - [#  25] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base < 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08028 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
>       var_0 = module_0.convert_base(str_0, int_0)

ALL-SMART/test_convert_base_MIO.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = '\n'

>   ???
E   ValueError: invalid literal for int() with base 16: '\n'

convert_base:17: ValueError
   - [#  26] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base >= 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08740 s] killed by ALL-SMART/test_convert_base_WHOLE_SUITE.py::test_case_8

def test_case_8():
        str_0 = 'D'
        str_1 = '8g'
        bool_0 = True
        var_0 = module_0.convert_base(str_1, bool_0)
        assert var_0 == -1
        int_0 = 10
        var_1 = module_0.convert_base(str_0, int_0)
        assert var_1 == -1
        str_2 = ''
        var_2 = module_0.convert_base(str_2, int_0)
>       assert var_2 == 0
E       AssertionError

ALL-SMART/test_convert_base_WHOLE_SUITE.py:86: AssertionError
   - [#  27] ROR convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
-  2:     if (base < 0 or (base > 10 and base != 16)):
+  2:     if (base < 0 or (base > 10 and base == 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
--------------------------------------------------------------------------------
[0.08034 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
>       var_0 = module_0.convert_base(str_0, int_0)

ALL-SMART/test_convert_base_MIO.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = '\n'

>   ???
E   ValueError: invalid literal for int() with base 16: '\n'

convert_base:17: ValueError
   - [#  28] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val > 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.08128 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = ')'

>   ???
E   ValueError: invalid literal for int() with base 16: ')'

convert_base:17: ValueError
   - [#  29] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val <= 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.10332 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_9

def test_case_9():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
        var_1 = module_0.convert_base(str_1, bool_0)
        assert var_1 == -1
        str_2 = 'U}BAZ2wt;P#'
        var_2 = module_0.convert_digit_to_int(str_2)
        assert var_2 == -1
        str_3 = '<u^|,H"&:l<\r'
        int_0 = -693
        int_1 = 16
        var_3 = module_0.convert_base(str_1, int_1)
>       assert var_3 == 15
E       AssertionError

ALL-SMART/test_convert_base_MOSA.py:101: AssertionError
   - [#  30] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val < 0 or digit_val < base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.08210 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_4

def test_case_4():
        list_0 = []
        bool_0 = False
        var_0 = module_0.convert_base(list_0, bool_0)
        assert var_0 == 0
        str_0 = '2`#cRIl_(/,\\37'
>       var_1 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = '`'

>   ???
E   ValueError: invalid literal for int() with base 16: '`'

convert_base:17: ValueError
   - [#  31] ROR convert_base: 
--------------------------------------------------------------------------------
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
+  7:         if (digit_val < 0 or digit_val >= base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
--------------------------------------------------------------------------------
[0.08820 s] killed by ALL-SMART/test_convert_base_WHOLE_SUITE.py::test_case_2

def test_case_2():
        str_0 = '1'
        bool_0 = True
        var_0 = module_0.convert_base(str_0, bool_0)
>       assert var_0 == 1
E       AssertionError

ALL-SMART/test_convert_base_WHOLE_SUITE.py:36: AssertionError
   - [#  32] ROR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) == 1 or ord(char) > ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.08650 s] incompetent

TypeError: convert_base:15: TypeError: ord() expected a character, but string of length 11 found

   - [#  33] ROR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) != 1 or ord(char) < ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.08092 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = 'n'

>   ???
E   ValueError: invalid literal for int() with base 16: 'n'

convert_base:17: ValueError
   - [#  34] ROR convert_base: 
--------------------------------------------------------------------------------
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
- 15:     if (len(char) != 1 or ord(char) > ord('f')):
+ 15:     if (len(char) != 1 or ord(char) >= ord('f')):
  16:         return -1
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.10144 s] killed by ALL-SMART/test_convert_base_MOSA.py::test_case_9

def test_case_9():
        str_0 = '\r-MqS\\2'
        var_0 = module_0.convert_digit_to_int(str_0)
        assert var_0 == -1
        str_1 = '0f'
        bool_0 = False
        var_1 = module_0.convert_base(str_1, bool_0)
        assert var_1 == -1
        str_2 = 'U}BAZ2wt;P#'
        var_2 = module_0.convert_digit_to_int(str_2)
        assert var_2 == -1
        str_3 = '<u^|,H"&:l<\r'
        int_0 = -693
        int_1 = 16
        var_3 = module_0.convert_base(str_1, int_1)
>       assert var_3 == 15
E       AssertionError

ALL-SMART/test_convert_base_MOSA.py:101: AssertionError
   - [#  35] SDL convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
-  3:         return -1
+  3:         pass
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
--------------------------------------------------------------------------------
[0.07954 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_0

def test_case_0():
        str_0 = '\n^4IE'
        int_0 = 4607
>       var_0 = module_0.convert_base(str_0, int_0)

ALL-SMART/test_convert_base_MIO.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = '\n'

>   ???
E   ValueError: invalid literal for int() with base 16: '\n'

convert_base:17: ValueError
   - [#  36] SDL convert_base: 
--------------------------------------------------------------------------------
   1: def convert_base(val: str, base: int):
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
-  4:     value = 0
+  4:     pass
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
--------------------------------------------------------------------------------
[0.08087 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_4

def test_case_4():
        list_0 = []
        bool_0 = False
>       var_0 = module_0.convert_base(list_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

val = [], base = False

>   ???
E   UnboundLocalError: local variable 'value' referenced before assignment

convert_base:11: UnboundLocalError
   - [#  37] SDL convert_base: 
--------------------------------------------------------------------------------
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
-  6:         digit_val = convert_digit_to_int(digit)
+  6:         pass
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
--------------------------------------------------------------------------------
[0.08129 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

val = 'n)TrOb^{;5@vuXfV=9^', base = True

>   ???
E   NameError: name 'digit_val' is not defined

convert_base:7: NameError
   - [#  38] SDL convert_base: 
--------------------------------------------------------------------------------
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
   6:         digit_val = convert_digit_to_int(digit)
   7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
+  8:             pass
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
  11:     return value
  12: 
--------------------------------------------------------------------------------
[0.08217 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = ')'

>   ???
E   ValueError: invalid literal for int() with base 16: ')'

convert_base:17: ValueError
   - [#  39] SDL convert_base: 
--------------------------------------------------------------------------------
   7:         if (digit_val < 0 or digit_val > base):
   8:             return -1
   9:         
  10:         value += digit_val * (base ** ((len(val) - i) - 1))
- 11:     return value
+ 11:     pass
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
--------------------------------------------------------------------------------
[0.09212 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_4

def test_case_4():
        list_0 = []
        bool_0 = False
        var_0 = module_0.convert_base(list_0, bool_0)
>       assert var_0 == 0
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:28: AssertionError
   - [#  40] SDL convert_base: 
--------------------------------------------------------------------------------
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
- 16:         return -1
+ 16:         pass
  17:     return int(char, 16)
--------------------------------------------------------------------------------
[0.09169 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
>       var_0 = module_0.convert_base(str_0, bool_0)

ALL-SMART/test_convert_base_MIO.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
convert_base:6: in convert_base
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

char = 'n'

>   ???
E   ValueError: invalid literal for int() with base 16: 'n'

convert_base:17: ValueError
   - [#  41] SDL convert_base: 
--------------------------------------------------------------------------------
  13: 
  14: def convert_digit_to_int(char: str):
  15:     if (len(char) != 1 or ord(char) > ord('f')):
  16:         return -1
- 17:     return int(char, 16)
+ 17:     pass
--------------------------------------------------------------------------------
[0.09218 s] incompetent

TypeError: convert_base:7: TypeError: '<' not supported between instances of 'NoneType' and 'int'

   - [#  42] ZIL convert_base: 
--------------------------------------------------------------------------------
   2:     if (base < 0 or (base > 10 and base != 16)):
   3:         return -1
   4:     value = 0
   5:     for (i, digit) in enumerate(val):
-  6:         digit_val = convert_digit_to_int(digit)
-  7:         if (digit_val < 0 or digit_val > base):
-  8:             return -1
-  9:         
- 10:         value += digit_val * (base ** ((len(val) - i) - 1))
+  6:         break
+  7:     
+  8:     
+  9:     
+ 10:     
  11:     return value
  12: 
  13: 
  14: def convert_digit_to_int(char: str):
--------------------------------------------------------------------------------
[0.08313 s] killed by ALL-SMART/test_convert_base_MIO.py::test_case_2

def test_case_2():
        str_0 = 'n)TrOb^{;5@vuXfV=9^'
        bool_0 = True
        var_0 = module_0.convert_base(str_0, bool_0)
>       assert var_0 == -1
E       AssertionError

ALL-SMART/test_convert_base_MIO.py:18: AssertionError
[*] Mutation score [4.47063 s]: 97.4%
   - all: 42
   - killed: 37 (88.1%)
   - survived: 1 (2.4%)
   - incompetent: 4 (9.5%)
   - timeout: 0 (0.0%)
