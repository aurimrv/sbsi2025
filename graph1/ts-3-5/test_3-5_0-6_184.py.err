import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

# Test cases for GraphNode class
class TestGraphNode:
    def test_add_adjacent(self):
        node1 = GraphNode(1)
        node2 = GraphNode(2)
        node1.add_adjacent(node2)
        assert node2 in node1.adjacent_list

    def test_remove_adjacent(self):
        node1 = GraphNode(1)
        node2 = GraphNode(2)
        node1.add_adjacent(node2)
        node1.remove_adjacent(node2)
        assert node2 not in node1.adjacent_list

# Test cases for Graph class
class TestGraph:
    def test_add_edge(self):
        g = Graph(3)
        g.add_edge(1, 2)
        assert g.graph[1] == [2]

    def test_has_cycle(self):
        g = Graph(3)
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        assert g.has_cycle() == False

    def test_topological_sort(self):
        g = Graph(3)
        g.add_edge(1, 2)
        g.add_edge(2, 3)
        assert g.topological_sort() == [1, 2, 3]

# Test cases for WeightedGraphNode class
class TestWeightedGraphNode:
    def test_add_adjacent(self):
        node1 = WeightedGraphNode(1)
        node2 = WeightedGraphNode(2)
        node1.add_adjacent(node2, 5)
        assert node2 in node1.adjacent
        assert node1.adjacent[node2] == 5

    def test_remove_adjacent(self):
        node1 = WeightedGraphNode(1)
        node2 = WeightedGraphNode(2)
        node1.add_adjacent(node2, 5)
        node1.remove_adjacent(node2)
        assert node2 not in node1.adjacent

# Test cases for WeightedGraph class
class TestWeightedGraph:
    def test_add_vertex(self):
        wg = WeightedGraph()
        wg.add_vertex(1)
        assert 1 in wg.vertices

    def test_add_edge(self):
        wg = WeightedGraph()
        wg.add_edge(1, 2, 5)
        assert 2 in wg.vertices[1].adjacent
        assert wg.vertices[1].adjacent[2] == 5

    def test_remove_edge(self):
        wg = WeightedGraph()
        wg.add_edge(1, 2, 5)
        wg.remove_edge(1, 2)
        assert 2 not in wg.vertices[1].adjacent