import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

# Tests for Graph Class
class TestGraph:
    
    def test_add_edge(self):
        graph = Graph(5)
        graph.add_edge(1, 2)
        assert 2 in graph.graph[1]
    
    def test_has_cycle(self):
        graph = Graph(4)
        graph.add_edge(0, 1)
        graph.add_edge(1, 2)
        graph.add_edge(2, 3)
        assert graph.has_cycle() == False
    
    def test_topological_sort(self):
        graph = Graph(5)
        graph.add_edge(0, 1)
        graph.add_edge(0, 2)
        graph.add_edge(1, 3)
        graph.add_edge(2, 3)
        assert graph.topological_sort() == [0, 1, 2, 3]

# Tests for WeightedGraph Class
class TestWeightedGraph:

    def test_add_edge(self):
        weightedGraph = WeightedGraph()
        weightedGraph.add_edge(1, 2, 5)
        assert weightedGraph.vertices[1].adjacent[2] == 5
    
    def test_remove_edge(self):
        weightedGraph = WeightedGraph()
        weightedGraph.add_edge(1, 2, 3)
        weightedGraph.remove_edge(1, 2)
        assert 2 not in weightedGraph.vertices[1].adjacent

    def test_add_vertex(self):
        weightedGraph = WeightedGraph()
        weightedGraph.add_vertex(1)
        assert 1 in weightedGraph.vertices

    def test_str_method(self):
        weightedGraph = WeightedGraph()
        weightedGraph.add_vertex(1)
        weightedGraph.add_vertex(2)
        weightedGraph.add_edge(1, 2, 3)
        assert str(weightedGraph) == "1 adjacent: [2], 2 adjacent: []"
