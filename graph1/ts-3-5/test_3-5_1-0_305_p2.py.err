import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import *

def test_graph_node_init():
    node = GraphNode(1)
    assert node.val == 1

def test_graph_node_add_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node3 = GraphNode(3)
    
    node1.add_adjacent(node2)
    assert node1.adjacent_list == {node2}
    
    node1.add_adjacent(node3)
    assert node1.adjacent_list == {node2, node3}
    
    node1.remove_adjacent(node2)
    assert node1.adjacent_list == {node3}

def test_graph_init():
    graph = Graph(3)
    assert graph.verticies == 3

def test_graph_add_edge():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(1, 3)
    assert graph.graph == {1: [2, 3], 2: [], 3: []}

def test_graph_has_cycle():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    assert graph.has_cycle() == False

    graph.add_edge(3, 1)
    assert graph.has_cycle() == True

def test_graph_topological_sort():
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 3)
    graph.add_edge(2, 3)
    sorted_order = graph.topological_sort()
    assert sorted_order == [0, 1, 2, 3]

def test_weighted_graph_node_init():
    node = WeightedGraphNode(1)
    assert node.val == 1

def test_weighted_graph_node_add_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    
    node1.add_adjacent(node2, 5)
    assert node1.adjacent == {node2: 5}
    
    node1.remove_adjacent(node2)
    assert node1.adjacent == {}

def test_weighted_graph_init():
    graph = WeightedGraph()
    assert graph.vertices == {}

def test_weighted_graph_add_edge():
    graph = WeightedGraph()
    graph.add_edge(1, 2, 10)
    assert graph.vertices == {1: WeightedGraphNode(1), 2: WeightedGraphNode(2)}
    assert graph.vertices[1].adjacent == {graph.vertices[2]: 10}

def test_weighted_graph_remove_edge():
    graph = WeightedGraph()
    graph.add_edge(1, 2, 10)
    graph.remove_edge(1, 2)
    assert graph.vertices[1].adjacent == {} 