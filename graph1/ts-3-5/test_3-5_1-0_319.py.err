import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph


def test_graphnode_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    assert len(node1.adjacent_list) == 1
    assert node2 in node1.adjacent_list


def test_graphnode_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    node1.remove_adjacent(node2)
    assert len(node1.adjacent_list) == 0


def test_graph_add_edge():
    graph = Graph(3)
    graph.add_edge(1, 2)
    assert graph.graph == {1: [2], 2: []}


def test_graph_has_cycle():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    assert graph.has_cycle() == False


def test_weightedgraphnode_add_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 5)
    assert len(node1.adjacent) == 1
    assert node2 in node1.adjacent and node1.adjacent[node2] == 5


def test_weightedgraphnode_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 5)
    node1.remove_adjacent(node2)
    assert len(node1.adjacent) == 0


def test_weightedgraph_add_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(1, 2, 3)
    assert w_graph.vertices[1].adjacent == {2: 3}