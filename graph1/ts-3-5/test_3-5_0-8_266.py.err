import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import *

# Test cases for GraphNode class
def test_GraphNode_init():
    node = GraphNode(1)
    assert node.val == 1

def test_GraphNode_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

def test_GraphNode_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

# Test cases for Graph class
def test_Graph_init():
    graph = Graph(5)
    assert graph.verticies == 5

def test_Graph_add_edge():
    graph = Graph(3)
    graph.add_edge(1, 2)
    assert graph.graph == {1: [2], 2: []}

def test_Graph_has_cycle():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    assert not graph.has_cycle()

def test_Graph_topological_sort():
    graph = Graph(5)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(2, 4)
    assert graph.topological_sort() == [1, 2, 4, 3]

# Test cases for WeightedGraphNode class
def test_WeightedGraphNode_init():
    node = WeightedGraphNode(1)
    assert node.val == 1

def test_WeightedGraphNode_add_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 5)
    assert node2 in node1.adjacent and node1.adjacent[node2] == 5

def test_WeightedGraphNode_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 5)
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent

# Test cases for WeightedGraph class
def test_WeightedGraph_add_vertex():
    wgraph = WeightedGraph()
    wgraph.add_vertex(1)
    assert 1 in wgraph.vertices

def test_WeightedGraph_add_edge():
    wgraph = WeightedGraph()
    wgraph.add_edge(1, 2, 3)
    assert 2 in wgraph.vertices[1].adjacent and wgraph.vertices[1].adjacent[2] == 3

def test_WeightedGraph_remove_edge():
    wgraph = WeightedGraph()
    wgraph.add_edge(1, 2, 3)
    wgraph.remove_edge(1, 2)
    assert 2 not in wgraph.vertices[1].adjacent