import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

def test_graph_node_init():
    node = GraphNode(1)
    assert node.val == 1

def test_graph_node_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph_init():
    g = Graph(5)
    assert g.verticies == 5
    assert g.graph == {}

def test_graph_add_edge():
    g = Graph(5)
    g.add_edge(1, 2)
    assert g.graph == {1: [2], 2: []}

    g.add_edge(2, 3)
    assert g.graph == {1: [2], 2: [3], 3: []}

def test_graph_has_cycle():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    g.add_edge(3, 1)

    assert g.has_cycle() == True

def test_graph_topological_sort():
    g = Graph(5)
    g.add_edge(0, 1)
    g.add_edge(0, 3)
    g.add_edge(1, 2)
    g.add_edge(3, 2)

    assert g.topological_sort() == [0, 3, 1, 2]

def test_weighted_graph_node_init():
    node = WeightedGraphNode(1)
    assert node.val == 1

def test_weighted_graph_node_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)

    node1.add_adjacent(node2, 5)
    assert node2 in node1.adjacent
    assert node1.adjacent[node2] == 5

    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent

def test_weighted_graph_init():
    wg = WeightedGraph()
    assert wg.vertices == {}

def test_weighted_graph_add_edge():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 10)
    assert wg.vertices == {1: WeightedGraphNode(1), 2: WeightedGraphNode(2)}

    wg.vertices[2].weights = {2: 10}
    assert wg.vertices == {1: WeightedGraphNode(1), 2: WeightedGraphNode(2, weights={2: 10})}

    wg.add_edge(2, 3, 15)
    assert wg.vertices == {1: WeightedGraphNode(1), 2: WeightedGraphNode(2, weights={2: 10, 3: 15}), 3: WeightedGraphNode(3)}

def test_weighted_graph_remove_edge():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 10)
    wg.add_edge(2, 3, 15)

    wg.remove_edge(1, 2)
    assert 2 not in wg.vertices[1].adjacent

    wg.remove_edge(2, 3)
    assert 3 not in wg.vertices[2].adjacent