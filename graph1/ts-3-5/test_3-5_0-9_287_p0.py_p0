import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

def test_graph_add_edge():
    g = Graph(5)
    g.add_edge(0, 1)
    assert 1 in g.graph[0]
    assert 0 not in g.graph[1]

def test_graph_has_cycle_no_cycle():
    g = Graph(3)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(0, 2)
    assert g.has_cycle() == False

def test_graph_has_cycle_cycle():
    g = Graph(3)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    assert g.has_cycle() == True

def test_graph_topological_sort():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 3)
    assert g.topological_sort() == [0, 2, 1, 3]

def test_weighted_graph_add_edge():
    wg = WeightedGraph()
    wg.add_edge('A', 'B', 5)
    assert wg.vertices['A'].adjacent['B'] == 5

def test_weighted_graph_remove_edge_not_exists():
    wg = WeightedGraph()
    wg.add_vertex('A')
    wg.remove_edge('A', 'B')
    assert 'B' not in wg.vertices['A'].adjacent

def test_weighted_graph_remove_edge_exists():
    wg = WeightedGraph()
    wg.add_edge('A', 'B', 5)
    wg.remove_edge('A', 'B')
    assert 'B' not in wg.vertices['A'].adjacent