import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

# Tests for GraphNode class
def test_graph_node_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

def test_graph_node_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

# Tests for Graph class
def test_graph_add_edge():
    g = Graph(3)
    g.add_edge(1, 2)
    assert g.graph[1] == [2]
    assert g.graph[2] == []

def test_graph_has_cycle():
    g = Graph(3)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    assert not g.has_cycle()

    g.add_edge(2, 0)
    assert g.has_cycle()

def test_graph_topological_sort():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(2, 3)
    result = g.topological_sort()
    assert result == [0, 1, 2, 3]

# Tests for WeightedGraphNode class
def test_weighted_graph_node_add_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 5)
    assert node2 in node1.adjacent
    assert node1.adjacent[node2] == 5

def test_weighted_graph_node_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 3)
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent

# Tests for WeightedGraph class
def test_weighted_graph_add_vertex():
    wg = WeightedGraph()
    wg.add_vertex(1)
    assert 1 in wg.vertices

def test_weighted_graph_add_edge():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 5)
    assert 1 in wg.vertices
    assert 2 in wg.vertices[1].adjacent
    assert wg.vertices[1].adjacent[2] == 5

def test_weighted_graph_remove_edge():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 3)
    wg.remove_edge(1, 2)
    assert 2 not in wg.vertices[1].adjacent