import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

@pytest.fixture
def sample_graph():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    g.add_edge(3, 0)
    return g

def test_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    assert not node1.adjacent_list
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

def test_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_add_edge(sample_graph):
    assert sample_graph.graph[0] == [1]
    assert sample_graph.graph[1] == [2]
    sample_graph.add_edge(1, 3)
    assert sample_graph.graph[1] == [2, 3]
    assert sample_graph.graph[3] == []

def test_has_cycle(sample_graph):
    assert not sample_graph.has_cycle()
    sample_graph.add_edge(3, 0)
    assert sample_graph.has_cycle()
    sample_graph.add_edge(0, 2)
    assert not sample_graph.has_cycle()

def test_topological_sort(sample_graph):
    assert sample_graph.topological_sort() == [0, 1, 2, 3]

def test_weighted_graph_add_edge():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 5)
    assert 2 in wg.vertices[1].adjacent
    assert wg.vertices[1].adjacent[2] == 5

def test_weighted_graph_remove_edge():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 5)
    assert 2 in wg.vertices[1].adjacent
    assert wg.vertices[1].adjacent[2] == 5
    wg.remove_edge(1, 2)
    assert 2 not in wg.vertices[1].adjacent