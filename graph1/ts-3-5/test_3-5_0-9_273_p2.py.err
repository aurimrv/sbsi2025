import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

@pytest.fixture
def simple_graph():
    g = Graph(3)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

def test_graph_node():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    assert node1.val == 1
    assert len(node1.adjacent_list) == 0
    
    node1.add_adjacent(node2)
    assert len(node1.adjacent_list) == 1
    assert node2 in node1.adjacent_list
    
    node1.remove_adjacent(node2)
    assert len(node1.adjacent_list) == 0

def test_graph_simple_add_edge(simple_graph):
    assert 2 in simple_graph.graph[1]
    assert 3 in simple_graph.graph[2]

def test_graph_too_many_vertices():
    g = Graph(2)
    g.add_edge(1, 2)
    with pytest.raises(IndexError):
        g.add_edge(2, 3)

def test_graph_has_cycle():
    g = Graph(3)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    g.add_edge(3, 1)
    assert g.has_cycle() == True

def test_graph_no_cycle(simple_graph):
    assert simple_graph.has_cycle() == False

def test_topological_sort(simple_graph):
    assert simple_graph.topological_sort() == [1, 2, 3]

def test_weighted_graph_operations():
    wg = WeightedGraph()
    wg.add_edge(1, 2, 5)
    wg.add_edge(2, 3, 3)
    
    assert len(wg.vertices) == 3
    assert wg.vertices[1].adjacent == {2: 5}
    assert wg.vertices[2].adjacent == {3: 3}
    
    wg.remove_edge(1, 2)
    assert 2 not in wg.vertices[1].adjacent
    
    wg.remove_edge(2, 3)
    assert 3 not in wg.vertices[2].adjacent