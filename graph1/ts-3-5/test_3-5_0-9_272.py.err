import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

# Tests for GraphNode class
def test_graph_node_init():
    node = GraphNode(1)
    assert node.val == 1
    assert len(node.adjacent_list) == 0

def test_graph_node_add_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

# Tests for Graph class
def test_graph_init():
    graph = Graph(5)
    assert graph.verticies == 5
    assert len(graph.graph) == 0

def test_graph_add_edge():
    graph = Graph(3)
    graph.add_edge(1, 2)
    assert graph.graph[1] == [2]
    assert graph.graph[2] == []

def test_graph_has_cycle():
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(3, 0)
    assert graph.has_cycle() == True

def test_graph_topological_sort():
    graph = Graph(5)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 3)
    graph.add_edge(2, 3)
    graph.add_edge(3, 4)
    assert graph.topological_sort() == [0, 2, 1, 3, 4]

# Tests for WeightedGraphNode class
def test_weighted_graph_node_init():
    node = WeightedGraphNode(1)
    assert node.val == 1
    assert len(node.adjacent) == 0

def test_weighted_graph_node_add_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, 5)
    assert node2 in node1.adjacent
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent

# Tests for WeightedGraph class
def test_weighted_graph_init():
    graph = WeightedGraph()
    assert len(graph.vertices) == 0

def test_weighted_graph_add_edge():
    graph = WeightedGraph()
    graph.add_edge(1, 2, 3)
    assert '1' in graph.vertices
    assert '2' in graph.vertices
    assert graph.vertices['1'].adjacent['2'] == 3

def test_weighted_graph_remove_edge():
    graph = WeightedGraph()
    graph.add_edge(1, 2, 3)
    graph.remove_edge(1, 2)
    assert '1' in graph.vertices
    assert '2' in graph.vertices
    assert '2' not in graph.vertices['1'].adjacent