import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

@pytest.fixture
def graph():
    g = Graph(3)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 2)
    return g

def test_graph_node_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

def test_graph_node_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph_add_edge(graph):
    graph.add_edge(2, 0)
    assert 0 in graph.graph[2]

def test_graph_has_cycle_true():
    g = Graph(3)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 0)
    assert g.has_cycle() == True

def test_graph_has_cycle_false():
    g = Graph(3)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    assert g.has_cycle() == False

def test_graph_topological_sort(graph):
    assert graph.topological_sort() == [0, 1, 2]

def test_weighted_graph_node_add_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    
    node1.add_adjacent(node2, weight=5)
    assert node2.val in node1.adjacent and node1.adjacent[node2.val] == 5

def test_weighted_graph_node_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    node1.add_adjacent(node2, weight=5)
    
    assert node2.val in node1.adjacent
    node1.remove_adjacent(node2)
    assert node2.val not in node1.adjacent

def test_weighted_graph_add_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(1, 2, 5)
    
    assert 1 in w_graph.vertices and 2 in w_graph.vertices

def test_weighted_graph_remove_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(1, 2, 5)
    w_graph.remove_edge(1, 2)
    
    assert 2 not in w_graph.vertices[1].adjacent