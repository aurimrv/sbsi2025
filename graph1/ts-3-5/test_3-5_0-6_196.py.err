import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

@pytest.fixture
def graph():
    return Graph(5)

def test_graph_add_edge(graph):
    graph.add_edge(0, 1)
    assert graph.graph == {0: [1], 1: []}
    graph.add_edge(0, 2)
    assert graph.graph == {0: [1, 2], 1: [], 2: []}

def test_graph_has_cycle(graph):
    graph.add_edge(0, 1)
    graph.add_edge(1, 2)
    graph.add_edge(2, 0)
    assert graph.has_cycle() == True

def test_graph_topological_sort(graph):
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 3)
    graph.add_edge(2, 3)
    assert graph.topological_sort() == [0, 1, 2, 3]

@pytest.fixture
def weighted_graph():
    return WeightedGraph()

def test_weighted_graph_add_edge(weighted_graph):
    weighted_graph.add_edge('A', 'B', 5)
    weighted_graph.add_edge('B', 'C', 10)
    weighted_graph.add_edge('A', 'C', 15)
    assert weighted_graph.vertices['A'].adjacent == {'B': 5, 'C': 15}
    assert weighted_graph.vertices['B'].adjacent == {'C': 10}

def test_weighted_graph_remove_edge(weighted_graph):
    weighted_graph.add_edge('A', 'B', 5)
    weighted_graph.add_edge('B', 'C', 10)
    weighted_graph.remove_edge('A', 'B')
    assert 'B' not in weighted_graph.vertices['A'].adjacent