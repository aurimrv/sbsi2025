import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph, GraphNode, WeightedGraphNode

def test_graphnode_initialization():
    node = GraphNode(1)
    assert node.val == 1

def test_graphnode_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

def test_graphnode_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph_add_edge():
    g = Graph(3)
    g.add_edge(1, 2)
    assert g.graph == {1: [2], 2: []}

def test_graph_has_cycle():
    g = Graph(3)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    g.add_edge(3, 1)
    assert g.has_cycle() == True

def test_topological_sort():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 3)
    result = g.topological_sort()
    assert result == [0, 1, 2, 3]

def test_weightedgraphnode_init():
    w_node = WeightedGraphNode('A')
    assert w_node.val == 'A'

def test_weightedgraphnode_add_remove_adjacent():
    w_node1 = WeightedGraphNode('A')
    w_node2 = WeightedGraphNode('B')
    w_node1.add_adjacent(w_node2, 5)
    assert w_node2 in w_node1.adjacent.keys()
    w_node1.remove_adjacent(w_node2)
    assert w_node2 not in w_node1.adjacent.keys()

def test_weightedgraph_add_vertex():
    w_graph = WeightedGraph()
    w_graph.add_vertex('A')
    assert 'A' in w_graph.vertices.keys()

def test_weightedgraph_add_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge('A', 'B', 2)
    assert w_graph.vertices['A'].adjacent['B'] == 2

def test_weightedgraph_remove_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge('A', 'B', 2)
    w_graph.remove_edge('A', 'B')
    assert 'B' not in w_graph.vertices['A'].adjacent.keys()