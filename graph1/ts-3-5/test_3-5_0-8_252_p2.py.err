
import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import *

def test_graph_node():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list
    
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph_add_edge():
    graph = Graph(3)
    graph.add_edge(0, 1)
    graph.add_edge(1, 2)
    
    assert graph.graph == {0: [1], 1: [2], 2: []}

def test_graph_has_cycle():
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(3, 0)
    
    assert graph.has_cycle() is True

def test_graph_topological_sort():
    graph = Graph(4)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 3)
    graph.add_edge(2, 3)
    
    assert graph.topological_sort() == [0, 2, 1, 3]

def test_weighted_graph_node():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    
    node1.add_adjacent(node2, 5)
    assert node2 in node1.adjacent and node1.adjacent[node2] == 5

    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent

def test_weighted_graph_add_edge():
    wgraph = WeightedGraph()
    wgraph.add_edge(0, 1, 10)
    wgraph.add_edge(1, 2, 15)
    
    assert len(wgraph.vertices) == 3 and wgraph.vertices[0].adjacent[1] == 10 and wgraph.vertices[1].adjacent[2] == 15

def test_weighted_graph_remove_edge():
    wgraph = WeightedGraph()
    wgraph.add_edge(0, 1, 10)
    wgraph.add_edge(1, 2, 15)
    
    wgraph.remove_edge(0, 1)
    assert 1 not in wgraph.vertices[0].adjacent