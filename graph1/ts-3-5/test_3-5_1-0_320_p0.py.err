import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, GraphNode, WeightedGraph, WeightedGraphNode

# Test cases for GraphNode class
def test_graph_node_add_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list
    
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

# Test cases for Graph class
def test_graph_add_edge():
    graph = Graph(3)
    graph.add_edge(1, 2)
    assert graph.graph == {1: [2], 2: []}

def test_graph_has_cycle():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    
    assert not graph.has_cycle()

    graph.add_edge(3, 1)  # introducing a cycle
    assert graph.has_cycle()

def test_graph_topological_sort():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    
    assert graph.topological_sort() == [1, 2, 3]

# Test cases for WeightedGraphNode class
def test_weighted_graph_node_add_remove_adjacent():
    w_node1 = WeightedGraphNode(1)
    w_node2 = WeightedGraphNode(2)
    
    w_node1.add_adjacent(w_node2, 5)
    assert w_node2 in w_node1.adjacent and w_node1.adjacent[w_node2] == 5
    
    w_node1.remove_adjacent(w_node2)
    assert w_node2 not in w_node1.adjacent

# Test cases for WeightedGraph class
def test_weighted_graph_add_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(1, 2, 5)
    assert w_graph.vertices == {1: WeightedGraphNode(1), 2: WeightedGraphNode(2)}
    assert w_graph.vertices[1].adjacent == {w_graph.vertices[2]: 5}

def test_weighted_graph_remove_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(1, 2, 5)
    
    w_graph.remove_edge(1, 2)
    assert w_graph.vertices[1].adjacent == {}