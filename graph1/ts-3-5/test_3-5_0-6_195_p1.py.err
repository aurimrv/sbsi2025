import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

@pytest.fixture
def setup_graph():
    g = Graph(5)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 3)
    g.add_edge(3, 4)
    return g

def test_graph_add_edge(setup_graph):
    assert setup_graph.graph == {0: [1, 2], 1: [3], 2: [3], 3: [4], 4: []}

def test_graph_has_cycle(setup_graph):
    assert setup_graph.has_cycle() == False

def test_graph_topological_sort(setup_graph):
    assert setup_graph.topological_sort() == [0, 2, 1, 3, 4]

@pytest.fixture
def setup_weighted_graph():
    wg = WeightedGraph()
    wg.add_edge('A', 'B', 3)
    wg.add_edge('A', 'C', 2)
    wg.add_edge('B', 'D', 5)
    wg.add_edge('C', 'D', 1)
    wg.add_edge('D', 'E', 4)
    return wg

def test_weighted_graph_add_edge(setup_weighted_graph):
    assert 'A' in setup_weighted_graph.vertices
    assert 'B' in setup_weighted_graph.vertices
    assert setup_weighted_graph.vertices['A'].adjacent['B'] == 3

def test_weighted_graph_remove_edge(setup_weighted_graph):
    setup_weighted_graph.remove_edge('A', 'B')
    assert 'B' not in setup_weighted_graph.vertices['A'].adjacent