import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import *

def test_GraphNode():
    node1 = GraphNode(1)
    
    assert node1.val == 1
    assert len(node1.adjacent_list) == 0
    
    node2 = GraphNode(2)
    node3 = GraphNode(3)
    
    node1.add_adjacent(node2)
    node1.add_adjacent(node3)
    
    assert len(node1.adjacent_list) == 2
    
    node1.remove_adjacent(node2)
    
    assert len(node1.adjacent_list) == 1
    assert node2 not in node1.adjacent_list

def test_Graph():
    graph = Graph(5)
    
    graph.add_edge(1, 2)
    graph.add_edge(1, 3)
    graph.add_edge(2, 4)
    
    assert len(graph.graph) == 4
    assert 3 in graph.graph
    assert 4 in graph.graph[2]
    
    assert not graph.has_cycle()
    
    graph.add_edge(4, 1)  # create cycle
    
    assert graph.has_cycle()

    topological_order = graph.topological_sort()
    
    assert topological_order == [1, 2, 4, 3]

def test_WeightedGraphNode():
    weighted_node = WeightedGraphNode("A")
    
    assert weighted_node.val == "A"
    assert len(weighted_node.adjacent) == 0
    
    weighted_node.add_adjacent("B", 5)
    weighted_node.add_adjacent("C", 3)
    
    assert len(weighted_node.adjacent) == 2
    assert weighted_node.adjacent["B"] == 5
    assert weighted_node.adjacent["C"] == 3
    
    weighted_node.remove_adjacent("B")
    
    assert len(weighted_node.adjacent) == 1
    assert "B" not in weighted_node.adjacent

def test_WeightedGraph():
    weighted_graph = WeightedGraph()
    
    weighted_graph.add_edge("A", "B", 4)
    weighted_graph.add_edge("A", "C", 8)
    weighted_graph.add_edge("B", "C", 2)
    
    assert "A" in weighted_graph.vertices
    assert "B" in weighted_graph.vertices
    assert "C" in weighted_graph.vertices
    
    assert weighted_graph.vertices["A"].adjacent["B"] == 4
    
    weighted_graph.remove_edge("A", "B")
    
    assert "B" not in weighted_graph.vertices["A"].adjacent