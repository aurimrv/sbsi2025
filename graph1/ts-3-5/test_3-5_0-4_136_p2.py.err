import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

@pytest.fixture
def graph():
    return Graph(5)

def test_add_edge(graph):
    graph.add_edge(1, 2)
    assert graph.graph == {1: [2], 2: []}

def test_has_cycle_empty_graph(graph):
    assert not graph.has_cycle()

def test_has_cycle_with_cycle(graph):
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(3, 1)
    assert graph.has_cycle()

def test_topological_sort(graph):
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(3, 4)
    assert graph.topological_sort() == [1, 2, 3, 4]

@pytest.fixture
def weighted_graph():
    return WeightedGraph()

def test_add_edge_weighted_graph(weighted_graph):
    weighted_graph.add_edge(1, 2, 5)
    assert weighted_graph.vertices[1].adjacent == {2: 5}

def test_remove_edge(weighted_graph):
    weighted_graph.add_edge(1, 2, 5)
    weighted_graph.remove_edge(1, 2)
    assert weighted_graph.vertices[1].adjacent == {}

def test_str_method(weighted_graph):
    weighted_graph.add_edge(1, 2, 5)
    weighted_graph.add_edge(2, 3, 10)
    assert str(weighted_graph) == "1 adjacent: [2], 2 adjacent: [3], 3 adjacent: []"