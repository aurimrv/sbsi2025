import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import Graph, WeightedGraph

def test_graph_node():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    # Test adding adjacent nodes
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list
    
    # Test removing adjacent nodes
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph():
    graph = Graph(3)
    
    # Test adding edges
    graph.add_edge(1, 2)
    assert 2 in graph.graph[1]
    
    # Test checking for cycle
    assert not graph.has_cycle()

def test_weighted_graph_node():
    weighted_node1 = WeightedGraphNode(1)
    weighted_node2 = WeightedGraphNode(2)
    
    # Test adding adjacent nodes with weight
    weighted_node1.add_adjacent(weighted_node2, 5)
    assert weighted_node2 in weighted_node1.adjacent and weighted_node1.adjacent[weighted_node2] == 5

    # Test removing adjacent nodes
    weighted_node1.remove_adjacent(weighted_node2)
    assert weighted_node2 not in weighted_node1.adjacent

def test_weighted_graph():
    weighted_graph = WeightedGraph()
    
    # Test adding vertices
    weighted_graph.add_vertex(1)
    weighted_graph.add_vertex(2)
    assert 1 in weighted_graph.vertices and 2 in weighted_graph.vertices
    
    # Test adding edges with weight
    weighted_graph.add_edge(1, 2, 3)
    assert 2 in weighted_graph.vertices[1].adjacent and weighted_graph.vertices[1].adjacent[2] == 3

    # Test removing edges
    weighted_graph.remove_edge(1, 2)
    assert 2 not in weighted_graph.vertices[1].adjacent