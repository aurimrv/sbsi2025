import os
import sys
import pytest
from collections import defaultdict, deque
from graph1 import Graph, WeightedGraph

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

@pytest.fixture
def empty_graph():
    return Graph(0)

@pytest.fixture
def sample_graph():
    graph = Graph(5)
    graph.add_edge(0, 1)
    graph.add_edge(0, 2)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    return graph

@pytest.fixture
def weighted_graph():
    return WeightedGraph()

def test_graph_add_edge(empty_graph):
    empty_graph.add_edge(0, 1)
    assert empty_graph.graph == {0: [1], 1: []}

def test_graph_has_cycle(sample_graph):
    assert sample_graph.has_cycle() is False

def test_graph_topological_sort(sample_graph):
    assert sample_graph.topological_sort() == [0, 1, 2, 3]

def test_weighted_graph_add_edge(weighted_graph):
    weighted_graph.add_edge('A', 'B', 7)
    weighted_graph.add_edge('B', 'C', 5)
    assert weighted_graph.vertices == {
        'A': WeightedGraphNode('A', adjacent=['B']),
        'B': WeightedGraphNode('B', adjacent=['C']),
        'C': WeightedGraphNode('C', adjacent=[])
    }