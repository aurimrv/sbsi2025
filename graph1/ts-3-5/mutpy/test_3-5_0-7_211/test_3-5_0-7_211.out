[*] Start mutation process:
   - targets: graph1.py
   - tests: ts-3-5/test_3-5_0-7_211.py
[*] 7 tests passed:
   - test_3-5_0-7_211 [0.19456 s]
[*] Start mutants generation and execution:
   - [#   1] AOD graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
-  61:             if visited[node] == -1:
+  61:             if visited[node] == 1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.21058 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#   2] AOD graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
-  65:             visited[node] = -1
+  65:             visited[node] = 1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.18767 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#   3] AOR graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
-  57:         visited = [0] * self.verticies
+  57:         visited = [0] / self.verticies
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.19394 s] incompetent

TypeError: graph1:57: TypeError: unsupported operand type(s) for /: 'list' and 'int'

   - [#   4] AOR graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
-  57:         visited = [0] * self.verticies
+  57:         visited = [0] // self.verticies
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.19513 s] incompetent

TypeError: graph1:57: TypeError: unsupported operand type(s) for //: 'list' and 'int'

   - [#   5] AOR graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
-  57:         visited = [0] * self.verticies
+  57:         visited = [0] ** self.verticies
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.19275 s] incompetent

TypeError: graph1:57: TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

   - [#   6] AOR graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
-  61:             if visited[node] == -1:
+  61:             if visited[node] == +1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.20183 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#   7] AOR graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
-  65:             visited[node] = -1
+  65:             visited[node] = +1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.18968 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#   8] AOR graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
+ 131:         return (str(self.val) - ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.18384 s] incompetent

TypeError: graph1:131: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   9] AOR graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
+ 131:         return (str(self.val) + ' adjacent: ') - str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.19550 s] incompetent

TypeError: graph1:131: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  10] CDI graph1: 
--------------------------------------------------------------------------------
    1: from collections import defaultdict, deque
    2: 
    3: class GraphNode:
    4:     
-   5:     def __init__(self, val):
-   6:         self.val = val
-   7:         self.adjacent_list = set()
-   8:     
+   5:     @classmethod
+   6:     def __init__(self, val):
+   7:         self.val = val
+   8:         self.adjacent_list = set()
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.17223 s] survived
   - [#  11] CDI graph1: 
--------------------------------------------------------------------------------
    5:     def __init__(self, val):
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
-   9:     def add_adjacent(self, node):
-  10:         self.adjacent_list.add(node)
-  11:     
+   9:     @classmethod
+  10:     def add_adjacent(self, node):
+  11:         self.adjacent_list.add(node)
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
   15: class Graph:
--------------------------------------------------------------------------------
[0.16996 s] survived
   - [#  12] CDI graph1: 
--------------------------------------------------------------------------------
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
-  12:     def remove_adjacent(self, node):
-  13:         self.adjacent_list.remove(node)
-  14: 
+  12:     @classmethod
+  13:     def remove_adjacent(self, node):
+  14:         self.adjacent_list.remove(node)
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
--------------------------------------------------------------------------------
[0.17576 s] survived
   - [#  13] CDI graph1: 
--------------------------------------------------------------------------------
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
-  20:     def __init__(self, verticies):
-  21:         self.graph = {}
-  22:         self.verticies = verticies
-  23:     
+  20:     @classmethod
+  21:     def __init__(self, verticies):
+  22:         self.graph = {}
+  23:         self.verticies = verticies
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
   27: 
--------------------------------------------------------------------------------
[0.16303 s] survived
   - [#  14] CDI graph1: 
--------------------------------------------------------------------------------
   20:     def __init__(self, verticies):
   21:         self.graph = {}
   22:         self.verticies = verticies
   23:     
-  24:     def add_edge(self, source, destination):
-  25:         '''
-  26:         Add an edge to the graph.
-  27: 
-  28:         Add an edge pointing from source vertex
-  29:         to destination vertex.
-  30: 
-  31:         Args:
-  32:             source: the source vertex
-  33:             destination: the destination vertex
-  34: 
-  35:         '''
-  36:         if len(self.graph) > self.verticies:
-  37:             raise IndexError('Too many verticies in graph.')
-  38:         
-  39:         if source in self.graph:
-  40:             self.graph[source].append(destination)
-  41:         else:
-  42:             self.graph[source] = [destination]
-  43:         
-  44:         if destination not in self.graph:
-  45:             self.graph[destination] = []
-  46:     
+  24:     @classmethod
+  25:     def add_edge(self, source, destination):
+  26:         '''
+  27:         Add an edge to the graph.
+  28: 
+  29:         Add an edge pointing from source vertex
+  30:         to destination vertex.
+  31: 
+  32:         Args:
+  33:             source: the source vertex
+  34:             destination: the destination vertex
+  35: 
+  36:         '''
+  37:         if len(self.graph) > self.verticies:
+  38:             raise IndexError('Too many verticies in graph.')
+  39:         
+  40:         if source in self.graph:
+  41:             self.graph[source].append(destination)
+  42:         else:
+  43:             self.graph[source] = [destination]
+  44:         
+  45:         if destination not in self.graph:
+  46:             self.graph[destination] = []
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
   50: 
--------------------------------------------------------------------------------
[0.20106 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.Graph'>, source = 0, destination = 1

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph1:37: AttributeError
   - [#  15] CDI graph1: 
--------------------------------------------------------------------------------
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
-  47:     def has_cycle(self):
-  48:         '''
-  49:         Detect if a graph has a cycle.
-  50: 
-  51:         Returns:
-  52:             True if the graph has a cycle and
-  53:             False if the graph is acyclic.
-  54: 
-  55:         '''
-  56:         
-  57:         visited = [0] * self.verticies
-  58:         
-  59:         def valid(node):
-  60:             
-  61:             if visited[node] == -1:
-  62:                 return False
-  63:             elif visited[node] == 1:
-  64:                 return True
-  65:             visited[node] = -1
-  66:             for neighbor in self.graph[node]:
-  67:                 if not (valid(neighbor)):
-  68:                     return False
-  69:             return True
-  70:         
-  71:         for node in range(self.verticies):
-  72:             
+  47:     @classmethod
+  48:     def has_cycle(self):
+  49:         '''
+  50:         Detect if a graph has a cycle.
+  51: 
+  52:         Returns:
+  53:             True if the graph has a cycle and
+  54:             False if the graph is acyclic.
+  55: 
+  56:         '''
+  57:         
+  58:         visited = [0] * self.verticies
+  59:         
+  60:         def valid(node):
+  61:             
+  62:             if visited[node] == -1:
+  63:                 return False
+  64:             elif visited[node] == 1:
+  65:                 return True
+  66:             visited[node] = -1
+  67:             for neighbor in self.graph[node]:
+  68:                 if not (valid(neighbor)):
+  69:                     return False
+  70:             return True
+  71:         
+  72:         for node in range(self.verticies):
   73:             
   74:             
-  75:             if not (visited[node]):
-  76:                 
-  77:                 if valid(node):
-  78:                     
-  79:                     visited = list(map((lambda x: (abs(x))), visited))
-  80:                 else:
-  81:                     
-  82:                     return True
-  83:         
-  84:         return False
-  85:     
+  75:             
+  76:             if not (visited[node]):
+  77:                 
+  78:                 if valid(node):
+  79:                     
+  80:                     visited = list(map((lambda x: (abs(x))), visited))
+  81:                 else:
+  82:                     
+  83:                     return True
+  84:         
+  85:         return False
   86:     def topological_sort(self):
   87:         """
   88:         Sort the graph topologically.
   89: 
--------------------------------------------------------------------------------
[0.19777 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.Graph'>

>   ???
E   AttributeError: type object 'Graph' has no attribute 'verticies'

graph1:58: AttributeError
   - [#  16] CDI graph1: 
--------------------------------------------------------------------------------
   82:                     return True
   83:         
   84:         return False
   85:     
-  86:     def topological_sort(self):
-  87:         """
-  88:         Sort the graph topologically.
-  89: 
-  90:         A topological sort lists nodes in such a way
-  91:         that every node 's' in 's' -> 'd' directed pairs
-  92:         is listed before 'd.'  This will not work in a 
-  93:         graph that contains cycles.
-  94: 
-  95:         The algorithm looks at every node, and does a
-  96:         dfs for each node adjacent to the node and then adds
-  97:         the originating node to a stack once all adjacent
-  98:         nodes have been searched.  In the end, the stack
-  99:         will be in order of a possible topological sort.
- 100: 
- 101:         Topological sorts are not necessarily unique.
- 102: 
- 103:         Returns:
- 104:             A list of vertices in a topological ordering.
- 105: 
- 106:         """
- 107:         visited = set()
- 108:         stack = deque()
- 109:         
- 110:         def dfs(vertex):
- 111:             visited.add(vertex)
- 112:             for j in self.graph[vertex]:
- 113:                 if j not in visited:
- 114:                     dfs(j)
- 115:             
- 116:             stack.appendleft(vertex)
- 117:         
- 118:         for (key, _) in self.graph.items():
- 119:             if key not in visited:
- 120:                 dfs(key)
- 121:         
- 122:         return list(stack)
- 123: 
+  86:     @classmethod
+  87:     def topological_sort(self):
+  88:         """
+  89:         Sort the graph topologically.
+  90: 
+  91:         A topological sort lists nodes in such a way
+  92:         that every node 's' in 's' -> 'd' directed pairs
+  93:         is listed before 'd.'  This will not work in a 
+  94:         graph that contains cycles.
+  95: 
+  96:         The algorithm looks at every node, and does a
+  97:         dfs for each node adjacent to the node and then adds
+  98:         the originating node to a stack once all adjacent
+  99:         nodes have been searched.  In the end, the stack
+ 100:         will be in order of a possible topological sort.
+ 101: 
+ 102:         Topological sorts are not necessarily unique.
+ 103: 
+ 104:         Returns:
+ 105:             A list of vertices in a topological ordering.
+ 106: 
+ 107:         """
+ 108:         visited = set()
+ 109:         stack = deque()
+ 110:         
+ 111:         def dfs(vertex):
+ 112:             visited.add(vertex)
+ 113:             for j in self.graph[vertex]:
+ 114:                 if j not in visited:
+ 115:                     dfs(j)
+ 116:             
+ 117:             stack.appendleft(vertex)
+ 118:         
+ 119:         for (key, _) in self.graph.items():
+ 120:             if key not in visited:
+ 121:                 dfs(key)
+ 122:         
+ 123:         return list(stack)
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
--------------------------------------------------------------------------------
[0.21738 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]

ts-3-5/test_3-5_0-7_211.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.Graph'>

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph1:119: AttributeError
   - [#  17] CDI graph1: 
--------------------------------------------------------------------------------
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
  125:     
- 126:     def __init__(self, val):
- 127:         self.val = val
- 128:         self.adjacent = {}
- 129:     
+ 126:     @classmethod
+ 127:     def __init__(self, val):
+ 128:         self.val = val
+ 129:         self.adjacent = {}
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
--------------------------------------------------------------------------------
[0.19477 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:52: AssertionError
   - [#  18] CDI graph1: 
--------------------------------------------------------------------------------
  126:     def __init__(self, val):
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
- 130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
- 132:     
+ 130:     @classmethod
+ 131:     def __str__(self):
+ 132:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.20981 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"

ts-3-5/test_3-5_0-7_211.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraphNode'>

>   ???
E   AttributeError: type object 'WeightedGraphNode' has no attribute 'val'

graph1:132: AttributeError
   - [#  19] CDI graph1: 
--------------------------------------------------------------------------------
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
- 133:     def add_adjacent(self, node, weight=0):
- 134:         self.adjacent[node] = weight
- 135:     
+ 133:     @classmethod
+ 134:     def add_adjacent(self, node, weight=0):
+ 135:         self.adjacent[node] = weight
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
--------------------------------------------------------------------------------
[0.20219 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraphNode'>, node = 'B', weight = 5

>   ???
E   AttributeError: type object 'WeightedGraphNode' has no attribute 'adjacent'

graph1:135: AttributeError
   - [#  20] CDI graph1: 
--------------------------------------------------------------------------------
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
- 136:     def remove_adjacent(self, node):
- 137:         del self.adjacent[node]
- 138: 
+ 136:     @classmethod
+ 137:     def remove_adjacent(self, node):
+ 138:         del self.adjacent[node]
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
--------------------------------------------------------------------------------
[0.20977 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:164: in remove_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraphNode'>, node = 'B'

>   ???
E   AttributeError: type object 'WeightedGraphNode' has no attribute 'adjacent'

graph1:138: AttributeError
   - [#  21] CDI graph1: 
--------------------------------------------------------------------------------
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
  140:     
- 141:     def __init__(self):
- 142:         self.vertices = {}
- 143:     
+ 141:     @classmethod
+ 142:     def __init__(self):
+ 143:         self.vertices = {}
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
--------------------------------------------------------------------------------
[0.17215 s] survived
   - [#  22] CDI graph1: 
--------------------------------------------------------------------------------
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
- 144:     def __str__(self):
- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])
- 146:     
+ 144:     @classmethod
+ 145:     def __str__(self):
+ 146:         return ', '.join([node.__str__() for node in self.vertices.values()])
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
--------------------------------------------------------------------------------
[0.20831 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"

ts-3-5/test_3-5_0-7_211.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:146: AttributeError
   - [#  23] CDI graph1: 
--------------------------------------------------------------------------------
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
- 147:     def add_vertex(self, val):
- 148:         vertex = WeightedGraphNode(val)
- 149:         self.vertices[val] = vertex
- 150:     
+ 147:     @classmethod
+ 148:     def add_vertex(self, val):
+ 149:         vertex = WeightedGraphNode(val)
+ 150:         self.vertices[val] = vertex
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.20951 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:153: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>, val = 'A'

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:150: AttributeError
   - [#  24] CDI graph1: 
--------------------------------------------------------------------------------
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
- 151:     def add_edge(self, src, dst, weight=0):
- 152:         if src not in self.vertices:
- 153:             self.add_vertex(src)
- 154:         if dst not in self.vertices:
- 155:             self.add_vertex(dst)
- 156:         self.vertices[src].add_adjacent(dst, weight)
- 157:     
+ 151:     @classmethod
+ 152:     def add_edge(self, src, dst, weight=0):
+ 153:         if src not in self.vertices:
+ 154:             self.add_vertex(src)
+ 155:         if dst not in self.vertices:
+ 156:             self.add_vertex(dst)
+ 157:         self.vertices[src].add_adjacent(dst, weight)
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.20397 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>, src = 'A', dst = 'B', weight = 5

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:153: AttributeError
   - [#  25] CDI graph1: 
--------------------------------------------------------------------------------
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
- 158:     def remove_edge(self, src, dst):
- 159:         if src not in self.vertices:
- 160:             return
- 161:         if dst not in self.vertices:
- 162:             return
- 163:         if dst in self.vertices[src].adjacent:
- 164:             self.vertices[src].remove_adjacent(dst)
+ 158:     @classmethod
+ 159:     def remove_edge(self, src, dst):
+ 160:         if src not in self.vertices:
+ 161:             return
+ 162:         if dst not in self.vertices:
+ 163:             return
+ 164:         if dst in self.vertices[src].adjacent:
+ 165:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.20153 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>, src = 'A', dst = 'B'

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:160: AttributeError
   - [#  26] COD graph1: 
--------------------------------------------------------------------------------
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
-  44:         if destination not in self.graph:
+  44:         if destination in self.graph:
   45:             self.graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
--------------------------------------------------------------------------------
[0.20592 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
        g.add_edge(0, 1)
>       assert g.graph == {0: [1], 1: []}
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:14: AssertionError
   - [#  27] COD graph1: 
--------------------------------------------------------------------------------
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
-  67:                 if not (valid(neighbor)):
+  67:                 if valid(neighbor):
   68:                     return False
   69:             return True
   70:         
   71:         for node in range(self.verticies):
--------------------------------------------------------------------------------
[0.20890 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  28] COD graph1: 
--------------------------------------------------------------------------------
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
-  75:             if not (visited[node]):
+  75:             if visited[node]:
   76:                 
   77:                 if valid(node):
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
--------------------------------------------------------------------------------
[0.19512 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  29] COD graph1: 
--------------------------------------------------------------------------------
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
- 113:                 if j not in visited:
+ 113:                 if j in visited:
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
--------------------------------------------------------------------------------
[0.21067 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  30] COD graph1: 
--------------------------------------------------------------------------------
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
- 119:             if key not in visited:
+ 119:             if key in visited:
  120:                 dfs(key)
  121:         
  122:         return list(stack)
  123: 
--------------------------------------------------------------------------------
[0.18800 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  31] COD graph1: 
--------------------------------------------------------------------------------
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
- 152:         if src not in self.vertices:
+ 152:         if src in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
--------------------------------------------------------------------------------
[0.22850 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd4704e1540>, src = 'A', dst = 'B'
weight = 5

>   ???
E   KeyError: 'A'

graph1:156: KeyError
   - [#  32] COD graph1: 
--------------------------------------------------------------------------------
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
- 154:         if dst not in self.vertices:
+ 154:         if dst in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
--------------------------------------------------------------------------------
[0.21730 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  33] COD graph1: 
--------------------------------------------------------------------------------
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
- 159:         if src not in self.vertices:
+ 159:         if src in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
--------------------------------------------------------------------------------
[0.20928 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  34] COD graph1: 
--------------------------------------------------------------------------------
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
- 161:         if dst not in self.vertices:
+ 161:         if dst in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.21207 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  35] COI graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
-  36:         if len(self.graph) > self.verticies:
+  36:         if not (len(self.graph) > self.verticies):
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.20037 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4706a2ce0>, source = 0, destination = 1

>   ???
E   IndexError: Too many verticies in graph.

graph1:37: IndexError
   - [#  36] COI graph1: 
--------------------------------------------------------------------------------
   35:         '''
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
-  39:         if source in self.graph:
+  39:         if not (source in self.graph):
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
--------------------------------------------------------------------------------
[0.20387 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd47071bd00>, source = 0, destination = 1

>   ???
E   KeyError: 0

graph1:40: KeyError
   - [#  37] COI graph1: 
--------------------------------------------------------------------------------
   35:         '''
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
-  39:         if source in self.graph:
+  39:         if source not in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
--------------------------------------------------------------------------------
[0.19593 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd470671780>, source = 0, destination = 1

>   ???
E   KeyError: 0

graph1:40: KeyError
   - [#  38] COI graph1: 
--------------------------------------------------------------------------------
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
-  44:         if destination not in self.graph:
+  44:         if not (destination not in self.graph):
   45:             self.graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
--------------------------------------------------------------------------------
[0.19893 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
        g.add_edge(0, 1)
>       assert g.graph == {0: [1], 1: []}
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:14: AssertionError
   - [#  39] COI graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
-  61:             if visited[node] == -1:
+  61:             if not (visited[node] == -1):
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.22285 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:20: AssertionError
   - [#  40] COI graph1: 
--------------------------------------------------------------------------------
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
   62:                 return False
-  63:             elif visited[node] == 1:
+  63:             elif not (visited[node] == 1):
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
--------------------------------------------------------------------------------
[0.18697 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  41] COI graph1: 
--------------------------------------------------------------------------------
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
-  67:                 if not (valid(neighbor)):
+  67:                 if not ((not (valid(neighbor)))):
   68:                     return False
   69:             return True
   70:         
   71:         for node in range(self.verticies):
--------------------------------------------------------------------------------
[0.20032 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  42] COI graph1: 
--------------------------------------------------------------------------------
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
-  75:             if not (visited[node]):
+  75:             if not ((not (visited[node]))):
   76:                 
   77:                 if valid(node):
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
--------------------------------------------------------------------------------
[0.20902 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  43] COI graph1: 
--------------------------------------------------------------------------------
   73:             
   74:             
   75:             if not (visited[node]):
   76:                 
-  77:                 if valid(node):
+  77:                 if not (valid(node)):
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
   80:                 else:
   81:                     
--------------------------------------------------------------------------------
[0.19493 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:20: AssertionError
   - [#  44] COI graph1: 
--------------------------------------------------------------------------------
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
- 113:                 if j not in visited:
+ 113:                 if not (j not in visited):
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
--------------------------------------------------------------------------------
[0.20856 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  45] COI graph1: 
--------------------------------------------------------------------------------
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
- 119:             if key not in visited:
+ 119:             if not (key not in visited):
  120:                 dfs(key)
  121:         
  122:         return list(stack)
  123: 
--------------------------------------------------------------------------------
[0.21155 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  46] COI graph1: 
--------------------------------------------------------------------------------
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
- 152:         if src not in self.vertices:
+ 152:         if not (src not in self.vertices):
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
--------------------------------------------------------------------------------
[0.20744 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd4705cdbd0>, src = 'A', dst = 'B'
weight = 5

>   ???
E   KeyError: 'A'

graph1:156: KeyError
   - [#  47] COI graph1: 
--------------------------------------------------------------------------------
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
- 154:         if dst not in self.vertices:
+ 154:         if not (dst not in self.vertices):
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
--------------------------------------------------------------------------------
[0.21086 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  48] COI graph1: 
--------------------------------------------------------------------------------
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
- 159:         if src not in self.vertices:
+ 159:         if not (src not in self.vertices):
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
--------------------------------------------------------------------------------
[0.21186 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  49] COI graph1: 
--------------------------------------------------------------------------------
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
- 161:         if dst not in self.vertices:
+ 161:         if not (dst not in self.vertices):
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.20293 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  50] COI graph1: 
--------------------------------------------------------------------------------
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
- 163:         if dst in self.vertices[src].adjacent:
+ 163:         if not (dst in self.vertices[src].adjacent):
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.20188 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  51] COI graph1: 
--------------------------------------------------------------------------------
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
- 163:         if dst in self.vertices[src].adjacent:
+ 163:         if dst not in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.20893 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [#  52] OIL graph1: 
--------------------------------------------------------------------------------
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
-  69:             return True
-  70:         
+  69:                 break
+  70:             return True
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
--------------------------------------------------------------------------------
[0.17292 s] survived
   - [#  53] OIL graph1: 
--------------------------------------------------------------------------------
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
   80:                 else:
   81:                     
-  82:                     return True
+  82:                     return Truebreak
   83:         
   84:         return False
   85:     
   86:     def topological_sort(self):
--------------------------------------------------------------------------------
[0.18287 s] survived
   - [#  54] OIL graph1: 
--------------------------------------------------------------------------------
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
- 115:             
+ 115:                 break
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
--------------------------------------------------------------------------------
[0.21126 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  55] OIL graph1: 
--------------------------------------------------------------------------------
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
- 121:         
+ 121:             break
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
  125:     
--------------------------------------------------------------------------------
[0.17989 s] survived
   - [#  56] RIL graph1: 
--------------------------------------------------------------------------------
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
-  66:             for neighbor in self.graph[node]:
+  66:             for neighbor in reversed(self.graph[node]):
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
--------------------------------------------------------------------------------
[0.18145 s] survived
   - [#  57] RIL graph1: 
--------------------------------------------------------------------------------
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
-  71:         for node in range(self.verticies):
+  71:         for node in reversed(range(self.verticies)):
   72:             
   73:             
   74:             
   75:             if not (visited[node]):
--------------------------------------------------------------------------------
[0.17632 s] survived
   - [#  58] RIL graph1: 
--------------------------------------------------------------------------------
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
- 112:             for j in self.graph[vertex]:
+ 112:             for j in reversed(self.graph[vertex]):
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
--------------------------------------------------------------------------------
[0.20867 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  59] RIL graph1: 
--------------------------------------------------------------------------------
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
- 118:         for (key, _) in self.graph.items():
+ 118:         for (key, _) in reversed(self.graph.items()):
  119:             if key not in visited:
  120:                 dfs(key)
  121:         
  122:         return list(stack)
--------------------------------------------------------------------------------
[0.20037 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [#  60] ROR graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
-  36:         if len(self.graph) > self.verticies:
+  36:         if len(self.graph) < self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.20120 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4705418d0>, source = 0, destination = 1

>   ???
E   IndexError: Too many verticies in graph.

graph1:37: IndexError
   - [#  61] ROR graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
-  36:         if len(self.graph) > self.verticies:
+  36:         if len(self.graph) >= self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.22084 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       g.add_edge(2, 0)

ts-3-5/test_3-5_0-7_211.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4707b1ba0>, source = 2, destination = 0

>   ???
E   IndexError: Too many verticies in graph.

graph1:37: IndexError
   - [#  62] ROR graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
-  61:             if visited[node] == -1:
+  61:             if visited[node] != -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.20775 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:20: AssertionError
   - [#  63] ROR graph1: 
--------------------------------------------------------------------------------
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
   62:                 return False
-  63:             elif visited[node] == 1:
+  63:             elif visited[node] != 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
--------------------------------------------------------------------------------
[0.20719 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  64] SDI graph1: 
--------------------------------------------------------------------------------
    1: from collections import defaultdict, deque
    2: 
    3: class GraphNode:
    4:     
-   5:     def __init__(self, val):
-   6:         self.val = val
-   7:         self.adjacent_list = set()
-   8:     
+   5:     @staticmethod
+   6:     def __init__(self, val):
+   7:         self.val = val
+   8:         self.adjacent_list = set()
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.18049 s] survived
   - [#  65] SDI graph1: 
--------------------------------------------------------------------------------
    5:     def __init__(self, val):
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
-   9:     def add_adjacent(self, node):
-  10:         self.adjacent_list.add(node)
-  11:     
+   9:     @staticmethod
+  10:     def add_adjacent(self, node):
+  11:         self.adjacent_list.add(node)
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
   15: class Graph:
--------------------------------------------------------------------------------
[0.18521 s] survived
   - [#  66] SDI graph1: 
--------------------------------------------------------------------------------
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
-  12:     def remove_adjacent(self, node):
-  13:         self.adjacent_list.remove(node)
-  14: 
+  12:     @staticmethod
+  13:     def remove_adjacent(self, node):
+  14:         self.adjacent_list.remove(node)
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
--------------------------------------------------------------------------------
[0.17850 s] survived
   - [#  67] SDI graph1: 
--------------------------------------------------------------------------------
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
-  20:     def __init__(self, verticies):
-  21:         self.graph = {}
-  22:         self.verticies = verticies
-  23:     
+  20:     @staticmethod
+  21:     def __init__(self, verticies):
+  22:         self.graph = {}
+  23:         self.verticies = verticies
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
   27: 
--------------------------------------------------------------------------------
[0.20424 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:12: TypeError: Graph.__init__() missing 1 required positional argument: 'verticies'

   - [#  68] SDI graph1: 
--------------------------------------------------------------------------------
   20:     def __init__(self, verticies):
   21:         self.graph = {}
   22:         self.verticies = verticies
   23:     
-  24:     def add_edge(self, source, destination):
-  25:         '''
-  26:         Add an edge to the graph.
-  27: 
-  28:         Add an edge pointing from source vertex
-  29:         to destination vertex.
-  30: 
-  31:         Args:
-  32:             source: the source vertex
-  33:             destination: the destination vertex
-  34: 
-  35:         '''
-  36:         if len(self.graph) > self.verticies:
-  37:             raise IndexError('Too many verticies in graph.')
-  38:         
-  39:         if source in self.graph:
-  40:             self.graph[source].append(destination)
-  41:         else:
-  42:             self.graph[source] = [destination]
-  43:         
-  44:         if destination not in self.graph:
-  45:             self.graph[destination] = []
-  46:     
+  24:     @staticmethod
+  25:     def add_edge(self, source, destination):
+  26:         '''
+  27:         Add an edge to the graph.
+  28: 
+  29:         Add an edge pointing from source vertex
+  30:         to destination vertex.
+  31: 
+  32:         Args:
+  33:             source: the source vertex
+  34:             destination: the destination vertex
+  35: 
+  36:         '''
+  37:         if len(self.graph) > self.verticies:
+  38:             raise IndexError('Too many verticies in graph.')
+  39:         
+  40:         if source in self.graph:
+  41:             self.graph[source].append(destination)
+  42:         else:
+  43:             self.graph[source] = [destination]
+  44:         
+  45:         if destination not in self.graph:
+  46:             self.graph[destination] = []
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
   50: 
--------------------------------------------------------------------------------
[0.22104 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:13: TypeError: Graph.add_edge() missing 1 required positional argument: 'destination'

   - [#  69] SDI graph1: 
--------------------------------------------------------------------------------
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
-  47:     def has_cycle(self):
-  48:         '''
-  49:         Detect if a graph has a cycle.
-  50: 
-  51:         Returns:
-  52:             True if the graph has a cycle and
-  53:             False if the graph is acyclic.
-  54: 
-  55:         '''
-  56:         
-  57:         visited = [0] * self.verticies
-  58:         
-  59:         def valid(node):
-  60:             
-  61:             if visited[node] == -1:
-  62:                 return False
-  63:             elif visited[node] == 1:
-  64:                 return True
-  65:             visited[node] = -1
-  66:             for neighbor in self.graph[node]:
-  67:                 if not (valid(neighbor)):
-  68:                     return False
-  69:             return True
-  70:         
-  71:         for node in range(self.verticies):
-  72:             
+  47:     @staticmethod
+  48:     def has_cycle(self):
+  49:         '''
+  50:         Detect if a graph has a cycle.
+  51: 
+  52:         Returns:
+  53:             True if the graph has a cycle and
+  54:             False if the graph is acyclic.
+  55: 
+  56:         '''
+  57:         
+  58:         visited = [0] * self.verticies
+  59:         
+  60:         def valid(node):
+  61:             
+  62:             if visited[node] == -1:
+  63:                 return False
+  64:             elif visited[node] == 1:
+  65:                 return True
+  66:             visited[node] = -1
+  67:             for neighbor in self.graph[node]:
+  68:                 if not (valid(neighbor)):
+  69:                     return False
+  70:             return True
+  71:         
+  72:         for node in range(self.verticies):
   73:             
   74:             
-  75:             if not (visited[node]):
-  76:                 
-  77:                 if valid(node):
-  78:                     
-  79:                     visited = list(map((lambda x: (abs(x))), visited))
-  80:                 else:
-  81:                     
-  82:                     return True
-  83:         
-  84:         return False
-  85:     
+  75:             
+  76:             if not (visited[node]):
+  77:                 
+  78:                 if valid(node):
+  79:                     
+  80:                     visited = list(map((lambda x: (abs(x))), visited))
+  81:                 else:
+  82:                     
+  83:                     return True
+  84:         
+  85:         return False
   86:     def topological_sort(self):
   87:         """
   88:         Sort the graph topologically.
   89: 
--------------------------------------------------------------------------------
[0.20818 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:20: TypeError: Graph.has_cycle() missing 1 required positional argument: 'self'

   - [#  70] SDI graph1: 
--------------------------------------------------------------------------------
   82:                     return True
   83:         
   84:         return False
   85:     
-  86:     def topological_sort(self):
-  87:         """
-  88:         Sort the graph topologically.
-  89: 
-  90:         A topological sort lists nodes in such a way
-  91:         that every node 's' in 's' -> 'd' directed pairs
-  92:         is listed before 'd.'  This will not work in a 
-  93:         graph that contains cycles.
-  94: 
-  95:         The algorithm looks at every node, and does a
-  96:         dfs for each node adjacent to the node and then adds
-  97:         the originating node to a stack once all adjacent
-  98:         nodes have been searched.  In the end, the stack
-  99:         will be in order of a possible topological sort.
- 100: 
- 101:         Topological sorts are not necessarily unique.
- 102: 
- 103:         Returns:
- 104:             A list of vertices in a topological ordering.
- 105: 
- 106:         """
- 107:         visited = set()
- 108:         stack = deque()
- 109:         
- 110:         def dfs(vertex):
- 111:             visited.add(vertex)
- 112:             for j in self.graph[vertex]:
- 113:                 if j not in visited:
- 114:                     dfs(j)
- 115:             
- 116:             stack.appendleft(vertex)
- 117:         
- 118:         for (key, _) in self.graph.items():
- 119:             if key not in visited:
- 120:                 dfs(key)
- 121:         
- 122:         return list(stack)
- 123: 
+  86:     @staticmethod
+  87:     def topological_sort(self):
+  88:         """
+  89:         Sort the graph topologically.
+  90: 
+  91:         A topological sort lists nodes in such a way
+  92:         that every node 's' in 's' -> 'd' directed pairs
+  93:         is listed before 'd.'  This will not work in a 
+  94:         graph that contains cycles.
+  95: 
+  96:         The algorithm looks at every node, and does a
+  97:         dfs for each node adjacent to the node and then adds
+  98:         the originating node to a stack once all adjacent
+  99:         nodes have been searched.  In the end, the stack
+ 100:         will be in order of a possible topological sort.
+ 101: 
+ 102:         Topological sorts are not necessarily unique.
+ 103: 
+ 104:         Returns:
+ 105:             A list of vertices in a topological ordering.
+ 106: 
+ 107:         """
+ 108:         visited = set()
+ 109:         stack = deque()
+ 110:         
+ 111:         def dfs(vertex):
+ 112:             visited.add(vertex)
+ 113:             for j in self.graph[vertex]:
+ 114:                 if j not in visited:
+ 115:                     dfs(j)
+ 116:             
+ 117:             stack.appendleft(vertex)
+ 118:         
+ 119:         for (key, _) in self.graph.items():
+ 120:             if key not in visited:
+ 121:                 dfs(key)
+ 122:         
+ 123:         return list(stack)
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
--------------------------------------------------------------------------------
[0.21017 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:35: TypeError: Graph.topological_sort() missing 1 required positional argument: 'self'

   - [#  71] SDI graph1: 
--------------------------------------------------------------------------------
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
  125:     
- 126:     def __init__(self, val):
- 127:         self.val = val
- 128:         self.adjacent = {}
- 129:     
+ 126:     @staticmethod
+ 127:     def __init__(self, val):
+ 128:         self.val = val
+ 129:         self.adjacent = {}
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
--------------------------------------------------------------------------------
[0.20470 s] incompetent

TypeError: graph1:148: TypeError: WeightedGraphNode.__init__() missing 1 required positional argument: 'val'

   - [#  72] SDI graph1: 
--------------------------------------------------------------------------------
  126:     def __init__(self, val):
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
- 130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
- 132:     
+ 130:     @staticmethod
+ 131:     def __str__(self):
+ 132:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.19741 s] incompetent

TypeError: graph1:145: TypeError: WeightedGraphNode.__str__() missing 1 required positional argument: 'self'

   - [#  73] SDI graph1: 
--------------------------------------------------------------------------------
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
- 133:     def add_adjacent(self, node, weight=0):
- 134:         self.adjacent[node] = weight
- 135:     
+ 133:     @staticmethod
+ 134:     def add_adjacent(self, node, weight=0):
+ 135:         self.adjacent[node] = weight
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
--------------------------------------------------------------------------------
[0.20997 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 'B', node = 5, weight = 0

>   ???
E   AttributeError: 'str' object has no attribute 'adjacent'

graph1:135: AttributeError
   - [#  74] SDI graph1: 
--------------------------------------------------------------------------------
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
- 136:     def remove_adjacent(self, node):
- 137:         del self.adjacent[node]
- 138: 
+ 136:     @staticmethod
+ 137:     def remove_adjacent(self, node):
+ 138:         del self.adjacent[node]
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
--------------------------------------------------------------------------------
[0.20641 s] incompetent

TypeError: graph1:164: TypeError: WeightedGraphNode.remove_adjacent() missing 1 required positional argument: 'node'

   - [#  75] SDI graph1: 
--------------------------------------------------------------------------------
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
  140:     
- 141:     def __init__(self):
- 142:         self.vertices = {}
- 143:     
+ 141:     @staticmethod
+ 142:     def __init__(self):
+ 143:         self.vertices = {}
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
--------------------------------------------------------------------------------
[0.20836 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:38: TypeError: WeightedGraph.__init__() missing 1 required positional argument: 'self'

   - [#  76] SDI graph1: 
--------------------------------------------------------------------------------
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
- 144:     def __str__(self):
- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])
- 146:     
+ 144:     @staticmethod
+ 145:     def __str__(self):
+ 146:         return ', '.join([node.__str__() for node in self.vertices.values()])
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
--------------------------------------------------------------------------------
[0.20427 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:52: TypeError: WeightedGraph.__str__() missing 1 required positional argument: 'self'

   - [#  77] SDI graph1: 
--------------------------------------------------------------------------------
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
- 147:     def add_vertex(self, val):
- 148:         vertex = WeightedGraphNode(val)
- 149:         self.vertices[val] = vertex
- 150:     
+ 147:     @staticmethod
+ 148:     def add_vertex(self, val):
+ 149:         vertex = WeightedGraphNode(val)
+ 150:         self.vertices[val] = vertex
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.20587 s] incompetent

TypeError: graph1:153: TypeError: WeightedGraph.add_vertex() missing 1 required positional argument: 'val'

   - [#  78] SDI graph1: 
--------------------------------------------------------------------------------
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
- 151:     def add_edge(self, src, dst, weight=0):
- 152:         if src not in self.vertices:
- 153:             self.add_vertex(src)
- 154:         if dst not in self.vertices:
- 155:             self.add_vertex(dst)
- 156:         self.vertices[src].add_adjacent(dst, weight)
- 157:     
+ 151:     @staticmethod
+ 152:     def add_edge(self, src, dst, weight=0):
+ 153:         if src not in self.vertices:
+ 154:             self.add_vertex(src)
+ 155:         if dst not in self.vertices:
+ 156:             self.add_vertex(dst)
+ 157:         self.vertices[src].add_adjacent(dst, weight)
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.20832 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 'A', src = 'B', dst = 5, weight = 0

>   ???
E   AttributeError: 'str' object has no attribute 'vertices'

graph1:153: AttributeError
   - [#  79] SDI graph1: 
--------------------------------------------------------------------------------
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
- 158:     def remove_edge(self, src, dst):
- 159:         if src not in self.vertices:
- 160:             return
- 161:         if dst not in self.vertices:
- 162:             return
- 163:         if dst in self.vertices[src].adjacent:
- 164:             self.vertices[src].remove_adjacent(dst)
+ 158:     @staticmethod
+ 159:     def remove_edge(self, src, dst):
+ 160:         if src not in self.vertices:
+ 161:             return
+ 162:         if dst not in self.vertices:
+ 163:             return
+ 164:         if dst in self.vertices[src].adjacent:
+ 165:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.20764 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:45: TypeError: WeightedGraph.remove_edge() missing 1 required positional argument: 'dst'

   - [#  80] SDL graph1: 
--------------------------------------------------------------------------------
    2: 
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
-   6:         self.val = val
+   6:         pass
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
--------------------------------------------------------------------------------
[0.18345 s] survived
   - [#  81] SDL graph1: 
--------------------------------------------------------------------------------
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
    6:         self.val = val
-   7:         self.adjacent_list = set()
+   7:         pass
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
--------------------------------------------------------------------------------
[0.18324 s] survived
   - [#  82] SDL graph1: 
--------------------------------------------------------------------------------
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
-  10:         self.adjacent_list.add(node)
+  10:         pass
   11:     
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
--------------------------------------------------------------------------------
[0.18485 s] survived
   - [#  83] SDL graph1: 
--------------------------------------------------------------------------------
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
-  13:         self.adjacent_list.remove(node)
+  13:         pass
   14: 
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
--------------------------------------------------------------------------------
[0.17341 s] survived
   - [#  84] SDL graph1: 
--------------------------------------------------------------------------------
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
   20:     def __init__(self, verticies):
-  21:         self.graph = {}
+  21:         pass
   22:         self.verticies = verticies
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
--------------------------------------------------------------------------------
[0.20349 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4709c1de0>, source = 0, destination = 1

>   ???
E   AttributeError: 'Graph' object has no attribute 'graph'

graph1:36: AttributeError
   - [#  85] SDL graph1: 
--------------------------------------------------------------------------------
   18:     '''
   19:     
   20:     def __init__(self, verticies):
   21:         self.graph = {}
-  22:         self.verticies = verticies
+  22:         pass
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
--------------------------------------------------------------------------------
[0.20468 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4703d24d0>, source = 0, destination = 1

>   ???
E   AttributeError: 'Graph' object has no attribute 'verticies'

graph1:36: AttributeError
   - [#  86] SDL graph1: 
--------------------------------------------------------------------------------
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
-  40:             self.graph[source].append(destination)
+  40:             pass
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
--------------------------------------------------------------------------------
[0.23533 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  87] SDL graph1: 
--------------------------------------------------------------------------------
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
-  42:             self.graph[source] = [destination]
+  42:             pass
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
--------------------------------------------------------------------------------
[0.19962 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
        g.add_edge(0, 1)
>       assert g.graph == {0: [1], 1: []}
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:14: AssertionError
   - [#  88] SDL graph1: 
--------------------------------------------------------------------------------
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
-  45:             self.graph[destination] = []
+  45:             pass
   46:     
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
--------------------------------------------------------------------------------
[0.19753 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
        g.add_edge(0, 1)
>       assert g.graph == {0: [1], 1: []}
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:14: AssertionError
   - [#  89] SDL graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
-  57:         visited = [0] * self.verticies
+  57:         pass
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.20130 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4707e2020>

>   ???
E   UnboundLocalError: local variable 'visited' referenced before assignment

graph1:75: UnboundLocalError
   - [#  90] SDL graph1: 
--------------------------------------------------------------------------------
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
-  62:                 return False
+  62:                 pass
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
--------------------------------------------------------------------------------
[0.21374 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#  91] SDL graph1: 
--------------------------------------------------------------------------------
   60:             
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
-  64:                 return True
+  64:                 pass
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
--------------------------------------------------------------------------------
[0.18413 s] survived
   - [#  92] SDL graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
-  65:             visited[node] = -1
+  65:             pass
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.20318 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
   - [#  93] SDL graph1: 
--------------------------------------------------------------------------------
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
-  68:                     return False
+  68:                     pass
   69:             return True
   70:         
   71:         for node in range(self.verticies):
   72:             
--------------------------------------------------------------------------------
[0.19958 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  94] SDL graph1: 
--------------------------------------------------------------------------------
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
-  69:             return True
+  69:             pass
   70:         
   71:         for node in range(self.verticies):
   72:             
   73:             
--------------------------------------------------------------------------------
[0.20840 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:20: AssertionError
   - [#  95] SDL graph1: 
--------------------------------------------------------------------------------
   75:             if not (visited[node]):
   76:                 
   77:                 if valid(node):
   78:                     
-  79:                     visited = list(map((lambda x: (abs(x))), visited))
+  79:                     pass
   80:                 else:
   81:                     
   82:                     return True
   83:         
--------------------------------------------------------------------------------
[0.17637 s] survived
   - [#  96] SDL graph1: 
--------------------------------------------------------------------------------
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
   80:                 else:
   81:                     
-  82:                     return True
+  82:                     pass
   83:         
   84:         return False
   85:     
   86:     def topological_sort(self):
--------------------------------------------------------------------------------
[0.20916 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [#  97] SDL graph1: 
--------------------------------------------------------------------------------
   80:                 else:
   81:                     
   82:                     return True
   83:         
-  84:         return False
+  84:         pass
   85:     
   86:     def topological_sort(self):
   87:         """
   88:         Sort the graph topologically.
--------------------------------------------------------------------------------
[0.18336 s] survived
   - [#  98] SDL graph1: 
--------------------------------------------------------------------------------
  103:         Returns:
  104:             A list of vertices in a topological ordering.
  105: 
  106:         """
- 107:         visited = set()
+ 107:         pass
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
--------------------------------------------------------------------------------
[0.20045 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]

ts-3-5/test_3-5_0-7_211.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4704e1d20>

>   ???
E   NameError: name 'visited' is not defined

graph1:119: NameError
   - [#  99] SDL graph1: 
--------------------------------------------------------------------------------
  104:             A list of vertices in a topological ordering.
  105: 
  106:         """
  107:         visited = set()
- 108:         stack = deque()
+ 108:         pass
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
--------------------------------------------------------------------------------
[0.22000 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]

ts-3-5/test_3-5_0-7_211.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 3

>   ???
E   NameError: name 'stack' is not defined

graph1:116: NameError
   - [# 100] SDL graph1: 
--------------------------------------------------------------------------------
  107:         visited = set()
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
- 111:             visited.add(vertex)
+ 111:             pass
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
--------------------------------------------------------------------------------
[0.19949 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [# 101] SDL graph1: 
--------------------------------------------------------------------------------
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
- 114:                     dfs(j)
+ 114:                     pass
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
--------------------------------------------------------------------------------
[0.19786 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [# 102] SDL graph1: 
--------------------------------------------------------------------------------
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
- 116:             stack.appendleft(vertex)
+ 116:             pass
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
--------------------------------------------------------------------------------
[0.19966 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [# 103] SDL graph1: 
--------------------------------------------------------------------------------
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
- 120:                 dfs(key)
+ 120:                 pass
  121:         
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
--------------------------------------------------------------------------------
[0.19647 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [# 104] SDL graph1: 
--------------------------------------------------------------------------------
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
  121:         
- 122:         return list(stack)
+ 122:         pass
  123: 
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
--------------------------------------------------------------------------------
[0.19918 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [# 105] SDL graph1: 
--------------------------------------------------------------------------------
  123: 
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
- 127:         self.val = val
+ 127:         pass
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
--------------------------------------------------------------------------------
[0.21901 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"

ts-3-5/test_3-5_0-7_211.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7dd470659870>

>   ???
E   AttributeError: 'WeightedGraphNode' object has no attribute 'val'

graph1:131: AttributeError
   - [# 106] SDL graph1: 
--------------------------------------------------------------------------------
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
- 128:         self.adjacent = {}
+ 128:         pass
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
--------------------------------------------------------------------------------
[0.19458 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7dd470465fc0>, node = 'B'
weight = 5

>   ???
E   AttributeError: 'WeightedGraphNode' object has no attribute 'adjacent'

graph1:134: AttributeError
   - [# 107] SDL graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
+ 131:         pass
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.21898 s] incompetent

TypeError: graph1:145: TypeError: sequence item 0: expected str instance, NoneType found

   - [# 108] SDL graph1: 
--------------------------------------------------------------------------------
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
- 134:         self.adjacent[node] = weight
+ 134:         pass
  135:     
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
--------------------------------------------------------------------------------
[0.20378 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       assert wg.vertices['A'].adjacent['B'] == 5
E       KeyError: 'B'

ts-3-5/test_3-5_0-7_211.py:40: KeyError
   - [# 109] SDL graph1: 
--------------------------------------------------------------------------------
  138: 
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
- 142:         self.vertices = {}
+ 142:         pass
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
--------------------------------------------------------------------------------
[0.19482 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470a64af0>, src = 'A', dst = 'B'
weight = 5

>   ???
E   AttributeError: 'WeightedGraph' object has no attribute 'vertices'

graph1:152: AttributeError
   - [# 110] SDL graph1: 
--------------------------------------------------------------------------------
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
  144:     def __str__(self):
- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])
+ 145:         pass
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
--------------------------------------------------------------------------------
[0.19545 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph1/ts-3-5/test_3-5_0-7_211.py:52: TypeError: __str__ returned non-string (type NoneType)

   - [# 111] SDL graph1: 
--------------------------------------------------------------------------------
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
- 148:         vertex = WeightedGraphNode(val)
+ 148:         pass
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
--------------------------------------------------------------------------------
[0.19449 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:153: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd47070cac0>, val = 'A'

>   ???
E   NameError: name 'vertex' is not defined

graph1:149: NameError
   - [# 112] SDL graph1: 
--------------------------------------------------------------------------------
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
- 149:         self.vertices[val] = vertex
+ 149:         pass
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
--------------------------------------------------------------------------------
[0.19258 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470652770>, src = 'A', dst = 'B'
weight = 5

>   ???
E   KeyError: 'A'

graph1:156: KeyError
   - [# 113] SDL graph1: 
--------------------------------------------------------------------------------
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
- 153:             self.add_vertex(src)
+ 153:             pass
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
--------------------------------------------------------------------------------
[0.19938 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470bdeaa0>, src = 'A', dst = 'B'
weight = 5

>   ???
E   KeyError: 'A'

graph1:156: KeyError
   - [# 114] SDL graph1: 
--------------------------------------------------------------------------------
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
- 155:             self.add_vertex(dst)
+ 155:             pass
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
--------------------------------------------------------------------------------
[0.18567 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [# 115] SDL graph1: 
--------------------------------------------------------------------------------
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
- 156:         self.vertices[src].add_adjacent(dst, weight)
+ 156:         pass
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
--------------------------------------------------------------------------------
[0.20702 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       assert wg.vertices['A'].adjacent['B'] == 5
E       KeyError: 'B'

ts-3-5/test_3-5_0-7_211.py:40: KeyError
   - [# 116] SDL graph1: 
--------------------------------------------------------------------------------
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
- 160:             return
+ 160:             pass
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.17436 s] survived
   - [# 117] SDL graph1: 
--------------------------------------------------------------------------------
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
- 162:             return
+ 162:             pass
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.17396 s] survived
   - [# 118] SDL graph1: 
--------------------------------------------------------------------------------
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
- 164:             self.vertices[src].remove_adjacent(dst)
+ 164:             pass
--------------------------------------------------------------------------------
[0.19638 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.remove_edge('A', 'B')
>       assert 'B' not in wg.vertices['A'].adjacent
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:46: AssertionError
   - [# 119] SVD graph1: 
--------------------------------------------------------------------------------
    2: 
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
-   6:         self.val = val
+   6:         val = val
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 120] SVD graph1: 
--------------------------------------------------------------------------------
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
    6:         self.val = val
-   7:         self.adjacent_list = set()
+   7:         adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 121] SVD graph1: 
--------------------------------------------------------------------------------
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
-  10:         self.adjacent_list.add(node)
+  10:         adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
--------------------------------------------------------------------------------
[0.18051 s] survived
   - [# 122] SVD graph1: 
--------------------------------------------------------------------------------
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
-  13:         self.adjacent_list.remove(node)
+  13:         adjacent_list.remove(node)
   14: 
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
--------------------------------------------------------------------------------
[0.17253 s] survived
   - [# 123] SVD graph1: 
--------------------------------------------------------------------------------
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
   20:     def __init__(self, verticies):
-  21:         self.graph = {}
+  21:         graph = {}
   22:         self.verticies = verticies
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 124] SVD graph1: 
--------------------------------------------------------------------------------
   18:     '''
   19:     
   20:     def __init__(self, verticies):
   21:         self.graph = {}
-  22:         self.verticies = verticies
+  22:         verticies = verticies
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 125] SVD graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
-  36:         if len(self.graph) > self.verticies:
+  36:         if len(graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.19312 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4709c2a40>, source = 0, destination = 1

>   ???
E   NameError: name 'graph' is not defined

graph1:36: NameError
   - [# 126] SVD graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
-  36:         if len(self.graph) > self.verticies:
+  36:         if len(self.graph) > verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.21134 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd470750040>, source = 0, destination = 1

>   ???
E   NameError: name 'verticies' is not defined

graph1:36: NameError
   - [# 127] SVD graph1: 
--------------------------------------------------------------------------------
   35:         '''
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
-  39:         if source in self.graph:
+  39:         if source in graph:
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
--------------------------------------------------------------------------------
[0.19064 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4704e6680>, source = 0, destination = 1

>   ???
E   NameError: name 'graph' is not defined

graph1:39: NameError
   - [# 128] SVD graph1: 
--------------------------------------------------------------------------------
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
-  40:             self.graph[source].append(destination)
+  40:             graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
--------------------------------------------------------------------------------
[0.19801 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
>       g.add_edge(1, 2)

ts-3-5/test_3-5_0-7_211.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4707e35b0>, source = 1, destination = 2

>   ???
E   NameError: name 'graph' is not defined

graph1:40: NameError
   - [# 129] SVD graph1: 
--------------------------------------------------------------------------------
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
-  42:             self.graph[source] = [destination]
+  42:             graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
--------------------------------------------------------------------------------
[0.19079 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4707e3610>, source = 0, destination = 1

>   ???
E   NameError: name 'graph' is not defined

graph1:42: NameError
   - [# 130] SVD graph1: 
--------------------------------------------------------------------------------
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
-  44:         if destination not in self.graph:
+  44:         if destination not in graph:
   45:             self.graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
--------------------------------------------------------------------------------
[0.19078 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd470507100>, source = 0, destination = 1

>   ???
E   NameError: name 'graph' is not defined

graph1:44: NameError
   - [# 131] SVD graph1: 
--------------------------------------------------------------------------------
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
-  45:             self.graph[destination] = []
+  45:             graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
--------------------------------------------------------------------------------
[0.21366 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_add_edge

def test_graph_add_edge():
        g = Graph(3)
>       g.add_edge(0, 1)

ts-3-5/test_3-5_0-7_211.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4709c3760>, source = 0, destination = 1

>   ???
E   NameError: name 'graph' is not defined

graph1:45: NameError
   - [# 132] SVD graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
-  57:         visited = [0] * self.verticies
+  57:         visited = [0] * verticies
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.19403 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4707175e0>

>   ???
E   NameError: name 'verticies' is not defined

graph1:57: NameError
   - [# 133] SVD graph1: 
--------------------------------------------------------------------------------
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
-  66:             for neighbor in self.graph[node]:
+  66:             for neighbor in graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
--------------------------------------------------------------------------------
[0.19929 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = 0

>   ???
E   NameError: name 'graph' is not defined

graph1:66: NameError
   - [# 134] SVD graph1: 
--------------------------------------------------------------------------------
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
-  71:         for node in range(self.verticies):
+  71:         for node in range(verticies):
   72:             
   73:             
   74:             
   75:             if not (visited[node]):
--------------------------------------------------------------------------------
[0.18627 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_no_cycle

def test_graph_has_cycle_no_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
>       assert not g.has_cycle()

ts-3-5/test_3-5_0-7_211.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd470716740>

>   ???
E   NameError: name 'verticies' is not defined

graph1:71: NameError
   - [# 135] SVD graph1: 
--------------------------------------------------------------------------------
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
- 112:             for j in self.graph[vertex]:
+ 112:             for j in graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
--------------------------------------------------------------------------------
[0.20098 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]

ts-3-5/test_3-5_0-7_211.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 0

>   ???
E   NameError: name 'graph' is not defined

graph1:112: NameError
   - [# 136] SVD graph1: 
--------------------------------------------------------------------------------
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
- 118:         for (key, _) in self.graph.items():
+ 118:         for (key, _) in graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
  121:         
  122:         return list(stack)
--------------------------------------------------------------------------------
[0.19865 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]

ts-3-5/test_3-5_0-7_211.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7dd4709c36a0>

>   ???
E   NameError: name 'graph' is not defined

graph1:118: NameError
   - [# 137] SVD graph1: 
--------------------------------------------------------------------------------
  123: 
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
- 127:         self.val = val
+ 127:         val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 138] SVD graph1: 
--------------------------------------------------------------------------------
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
- 128:         self.adjacent = {}
+ 128:         adjacent = {}
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 139] SVD graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
+ 131:         return (str(val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.21969 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"

ts-3-5/test_3-5_0-7_211.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7dd470655ed0>

>   ???
E   NameError: name 'val' is not defined

graph1:131: NameError
   - [# 140] SVD graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
+ 131:         return (str(self.val) + ' adjacent: ') + str([x for x in adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.19419 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"

ts-3-5/test_3-5_0-7_211.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7dd4706548e0>

>   ???
E   NameError: name 'adjacent' is not defined

graph1:131: NameError
   - [# 141] SVD graph1: 
--------------------------------------------------------------------------------
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
- 134:         self.adjacent[node] = weight
+ 134:         adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
--------------------------------------------------------------------------------
[0.18341 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7dd4709a0700>, node = 'B'
weight = 5

>   ???
E   NameError: name 'adjacent' is not defined

graph1:134: NameError
   - [# 142] SVD graph1: 
--------------------------------------------------------------------------------
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
- 137:         del self.adjacent[node]
+ 137:         del adjacent[node]
  138: 
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
--------------------------------------------------------------------------------
[0.19596 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:164: in remove_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7dd47063b1f0>, node = 'B'

>   ???
E   NameError: name 'adjacent' is not defined

graph1:137: NameError
   - [# 143] SVD graph1: 
--------------------------------------------------------------------------------
  138: 
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
- 142:         self.vertices = {}
+ 142:         vertices = {}
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 144] SVD graph1: 
--------------------------------------------------------------------------------
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
  144:     def __str__(self):
- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])
+ 145:         return ', '.join([node.__str__() for node in vertices.values()])
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
--------------------------------------------------------------------------------
[0.19407 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_str

def test_weighted_graph_str():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
        wg.add_edge('C', 'D', 10)
>       assert str(wg) == "A adjacent: ['B'], B adjacent: [], C adjacent: ['D'], D adjacent: []"

ts-3-5/test_3-5_0-7_211.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470bdc220>

>   ???
E   NameError: name 'vertices' is not defined

graph1:145: NameError
   - [# 145] SVD graph1: 
--------------------------------------------------------------------------------
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
- 149:         self.vertices[val] = vertex
+ 149:         vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
--------------------------------------------------------------------------------
[0.19106 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:153: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470585750>, val = 'A'

>   ???
E   NameError: name 'vertices' is not defined

graph1:149: NameError
   - [# 146] SVD graph1: 
--------------------------------------------------------------------------------
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
- 152:         if src not in self.vertices:
+ 152:         if src not in vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
--------------------------------------------------------------------------------
[0.20025 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd4704adb40>, src = 'A', dst = 'B'
weight = 5

>   ???
E   NameError: name 'vertices' is not defined

graph1:152: NameError
   - [# 147] SVD graph1: 
--------------------------------------------------------------------------------
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
- 153:             self.add_vertex(src)
+ 153:             add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
--------------------------------------------------------------------------------
[0.22803 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470bf3640>, src = 'A', dst = 'B'
weight = 5

>   ???
E   NameError: name 'add_vertex' is not defined

graph1:153: NameError
   - [# 148] SVD graph1: 
--------------------------------------------------------------------------------
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
- 154:         if dst not in self.vertices:
+ 154:         if dst not in vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
--------------------------------------------------------------------------------
[0.19765 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470804af0>, src = 'A', dst = 'B'
weight = 5

>   ???
E   NameError: name 'vertices' is not defined

graph1:154: NameError
   - [# 149] SVD graph1: 
--------------------------------------------------------------------------------
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
- 155:             self.add_vertex(dst)
+ 155:             add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
--------------------------------------------------------------------------------
[0.19189 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470a65090>, src = 'A', dst = 'B'
weight = 5

>   ???
E   NameError: name 'add_vertex' is not defined

graph1:155: NameError
   - [# 150] SVD graph1: 
--------------------------------------------------------------------------------
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
- 156:         self.vertices[src].add_adjacent(dst, weight)
+ 156:         vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
--------------------------------------------------------------------------------
[0.19483 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_add_edge

def test_weighted_graph_add_edge():
        wg = WeightedGraph()
>       wg.add_edge('A', 'B', 5)

ts-3-5/test_3-5_0-7_211.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470751a80>, src = 'A', dst = 'B'
weight = 5

>   ???
E   NameError: name 'vertices' is not defined

graph1:156: NameError
   - [# 151] SVD graph1: 
--------------------------------------------------------------------------------
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
- 159:         if src not in self.vertices:
+ 159:         if src not in vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
--------------------------------------------------------------------------------
[0.20189 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470806380>, src = 'A', dst = 'B'

>   ???
E   NameError: name 'vertices' is not defined

graph1:159: NameError
   - [# 152] SVD graph1: 
--------------------------------------------------------------------------------
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
- 161:         if dst not in self.vertices:
+ 161:         if dst not in vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.19695 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd470b1add0>, src = 'A', dst = 'B'

>   ???
E   NameError: name 'vertices' is not defined

graph1:161: NameError
   - [# 153] SVD graph1: 
--------------------------------------------------------------------------------
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
- 163:         if dst in self.vertices[src].adjacent:
+ 163:         if dst in vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.19986 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd47083b9d0>, src = 'A', dst = 'B'

>   ???
E   NameError: name 'vertices' is not defined

graph1:163: NameError
   - [# 154] SVD graph1: 
--------------------------------------------------------------------------------
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
- 164:             self.vertices[src].remove_adjacent(dst)
+ 164:             vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.19489 s] killed by ts-3-5/test_3-5_0-7_211.py::test_weighted_graph_remove_edge

def test_weighted_graph_remove_edge():
        wg = WeightedGraph()
        wg.add_edge('A', 'B', 5)
>       wg.remove_edge('A', 'B')

ts-3-5/test_3-5_0-7_211.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7dd4704ae290>, src = 'A', dst = 'B'

>   ???
E   NameError: name 'vertices' is not defined

graph1:164: NameError
   - [# 155] ZIL graph1: 
--------------------------------------------------------------------------------
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
-  67:                 if not (valid(neighbor)):
-  68:                     return False
+  67:                 break
+  68:             
   69:             return True
   70:         
   71:         for node in range(self.verticies):
   72:             
--------------------------------------------------------------------------------
[0.22176 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [# 156] ZIL graph1: 
--------------------------------------------------------------------------------
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
-  75:             if not (visited[node]):
-  76:                 
-  77:                 if valid(node):
-  78:                     
-  79:                     visited = list(map((lambda x: (abs(x))), visited))
-  80:                 else:
-  81:                     
-  82:                     return True
+  75:             break
+  76:         
+  77:         
+  78:         
+  79:         
+  80:         
+  81:         
+  82:         
   83:         
   84:         return False
   85:     
   86:     def topological_sort(self):
--------------------------------------------------------------------------------
[0.20224 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_has_cycle_with_cycle

def test_graph_has_cycle_with_cycle():
        g = Graph(3)
        g.add_edge(0, 1)
        g.add_edge(1, 2)
        g.add_edge(2, 0)
>       assert g.has_cycle()
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:27: AssertionError
   - [# 157] ZIL graph1: 
--------------------------------------------------------------------------------
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
- 113:                 if j not in visited:
- 114:                     dfs(j)
+ 113:                 break
+ 114:             
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
--------------------------------------------------------------------------------
[0.19785 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
   - [# 158] ZIL graph1: 
--------------------------------------------------------------------------------
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
- 119:             if key not in visited:
- 120:                 dfs(key)
+ 119:             break
+ 120:         
  121:         
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
--------------------------------------------------------------------------------
[0.20056 s] killed by ts-3-5/test_3-5_0-7_211.py::test_graph_topological_sort

def test_graph_topological_sort():
        g = Graph(4)
        g.add_edge(0, 1)
        g.add_edge(0, 2)
        g.add_edge(1, 3)
        g.add_edge(2, 3)
>       assert g.topological_sort() == [0, 2, 1, 3]
E       AssertionError

ts-3-5/test_3-5_0-7_211.py:35: AssertionError
[*] Mutation score [42.35694 s]: 82.0%
   - all: 158
   - killed: 109 (69.0%)
   - survived: 24 (15.2%)
   - incompetent: 25 (15.8%)
   - timeout: 0 (0.0%)
