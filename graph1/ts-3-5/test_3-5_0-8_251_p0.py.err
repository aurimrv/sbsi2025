import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

def test_graphnode_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    assert len(node1.adjacent_list) == 0
    node1.add_adjacent(node2)
    assert len(node1.adjacent_list) == 1
    assert node2 in node1.adjacent_list

def test_graphnode_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert len(node1.adjacent_list) == 1
    node1.remove_adjacent(node2)
    assert len(node1.adjacent_list) == 0

def test_graph_add_edge():
    graph = Graph(3)
    
    graph.add_edge(1, 2)
    assert 1 in graph.graph
    assert 2 in graph.graph[1]
    
    graph.add_edge(2, 3)
    assert 2 in graph.graph
    assert 3 in graph.graph[2]

def test_graph_has_cycle():
    graph = Graph(3)
    
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    assert not graph.has_cycle()
    
    graph.add_edge(3, 1)
    assert graph.has_cycle()

def test_graph_topological_sort():
    graph = Graph(5)
    
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(3, 4)
    graph.add_edge(4, 5)
    
    assert graph.topological_sort() == [1, 2, 3, 4, 5]

def test_weightedgraphnode_add_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    
    assert len(node1.adjacent) == 0
    node1.add_adjacent(node2, 5)
    assert len(node1.adjacent) == 1
    assert node2 in node1.adjacent
    assert node1.adjacent[node2] == 5

def test_weightedgraphnode_remove_adjacent():
    node1 = WeightedGraphNode(1)
    node2 = WeightedGraphNode(2)
    
    node1.add_adjacent(node2, 5)
    assert len(node1.adjacent) == 1
    node1.remove_adjacent(node2)
    assert len(node1.adjacent) == 0

def test_weightedgraph_add_edge():
    wgraph = WeightedGraph()
    
    wgraph.add_edge(1, 2, 3)
    assert 1 in wgraph.vertices
    assert 2 in wgraph.vertices[1].adjacent
    assert wgraph.vertices[1].adjacent[2] == 3

def test_weightedgraph_remove_edge():
    wgraph = WeightedGraph()
    
    wgraph.add_edge(1, 2, 3)
    assert 2 in wgraph.vertices[1].adjacent
    
    wgraph.remove_edge(1, 2)
    assert 2 not in wgraph.vertices[1].adjacent