import os
import sys
import pytest
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

@pytest.fixture
def graph_with_cycle():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    g.add_edge(3, 0)
    return g

@pytest.fixture
def graph_without_cycle():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

@pytest.fixture
def weighted_graph():
    g = WeightedGraph()
    g.add_edge('A', 'B', 5)
    g.add_edge('B', 'C', 10)
    g.add_edge('C', 'D', 15)
    g.add_edge('D', 'A', 20)
    return g

def test_graph_node():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph_add_edge():
    g = Graph(3)
    
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    assert g.graph == {0: [1, 2], 1: [], 2: []}

def test_graph_has_cycle(graph_with_cycle, graph_without_cycle):
    assert graph_with_cycle.has_cycle() == True
    assert graph_without_cycle.has_cycle() == False

def test_graph_topological_sort():
    g = Graph(4)
    g.add_edge(0, 1)
    g.add_edge(0, 2)
    g.add_edge(1, 3)
    g.add_edge(2, 3)
    
    result = g.topological_sort()
    assert result == [0, 1, 2, 3]

def test_weighted_graph_add_edge(weighted_graph):
    assert 'B' in weighted_graph.vertices['A'].adjacent
    assert weighted_graph.vertices['A'].adjacent['B'] == 5

    assert 'C' in weighted_graph.vertices['B'].adjacent
    assert weighted_graph.vertices['B'].adjacent['C'] == 10

def test_weighted_graph_remove_edge(weighted_graph):
    weighted_graph.remove_edge('A', 'B')
    assert 'B' not in weighted_graph.vertices['A'].adjacent

    weighted_graph.remove_edge('B', 'C')
    assert 'C' not in weighted_graph.vertices['B'].adjacent