import os
import sys
from collections import defaultdict, deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph1 import GraphNode, Graph, WeightedGraphNode, WeightedGraph

def test_graph_node_creation():
    node = GraphNode(5)
    assert node.val == 5
    assert len(node.adjacent_list) == 0

def test_graph_node_add_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    assert node2 in node1.adjacent_list

def test_graph_node_remove_adjacent():
    node1 = GraphNode(1)
    node2 = GraphNode(2)
    node1.add_adjacent(node2)
    node1.remove_adjacent(node2)
    assert node2 not in node1.adjacent_list

def test_graph_add_edge():
    graph = Graph(3)
    graph.add_edge(1, 2)
    assert 2 in graph.graph[1]

def test_graph_has_cycle_no_cycle():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    assert not graph.has_cycle()

def test_graph_has_cycle_with_cycle():
    graph = Graph(3)
    graph.add_edge(1, 2)
    graph.add_edge(2, 3)
    graph.add_edge(3, 1)
    assert graph.has_cycle()

def test_graph_topological_sort():
    graph = Graph(4)
    graph.add_edge(1, 2)
    graph.add_edge(1, 3)
    graph.add_edge(2, 4)
    graph.add_edge(3, 4)
    assert graph.topological_sort() == [1, 3, 2, 4]

def test_weighted_graph_node_creation():
    w_node = WeightedGraphNode(10)
    assert w_node.val == 10
    assert len(w_node.adjacent) == 0

def test_weighted_graph_node_add_adjacent():
    w_node1 = WeightedGraphNode(11)
    w_node2 = WeightedGraphNode(12)
    w_node1.add_adjacent(w_node2, 5)
    assert w_node2 in w_node1.adjacent
    assert w_node1.adjacent[w_node2] == 5

def test_weighted_graph_node_remove_adjacent():
    w_node1 = WeightedGraphNode(11)
    w_node2 = WeightedGraphNode(12)
    w_node1.add_adjacent(w_node2, 5)
    w_node1.remove_adjacent(w_node2)
    assert w_node2 not in w_node1.adjacent

def test_weighted_graph_add_vertex():
    w_graph = WeightedGraph()
    w_graph.add_vertex(20)
    assert 20 in w_graph.vertices

def test_weighted_graph_add_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(21, 22, 3)
    assert 22 in w_graph.vertices[21].adjacent
    assert w_graph.vertices[21].adjacent[22] == 3

def test_weighted_graph_remove_edge():
    w_graph = WeightedGraph()
    w_graph.add_edge(23, 24, 4)
    w_graph.remove_edge(23, 24)
    assert 24 not in w_graph.vertices[23].adjacent