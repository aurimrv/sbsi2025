# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import graph1 as module_0
import builtins as module_1


def test_case_0():
    weighted_graph_0 = module_0.WeightedGraph()
    graph_0 = module_0.Graph(weighted_graph_0)
    var_0 = graph_0.topological_sort()


@pytest.mark.xfail(strict=True)
def test_case_1():
    weighted_graph_0 = module_0.WeightedGraph()
    none_type_0 = None
    var_0 = weighted_graph_0.add_vertex(none_type_0)
    var_1 = weighted_graph_0.remove_edge(none_type_0, none_type_0)
    var_2 = weighted_graph_0.__str__()
    assert var_2 == "None adjacent: []"
    var_2.add_adjacent(none_type_0)


def test_case_2():
    weighted_graph_0 = module_0.WeightedGraph()
    none_type_0 = None
    graph_node_0 = module_0.GraphNode(none_type_0)
    graph_0 = module_0.Graph(weighted_graph_0)
    var_0 = weighted_graph_0.__str__()


@pytest.mark.xfail(strict=True)
def test_case_3():
    weighted_graph_0 = module_0.WeightedGraph()
    none_type_0 = None
    var_0 = weighted_graph_0.add_edge(weighted_graph_0, none_type_0, weighted_graph_0)
    assert len(weighted_graph_0.vertices) == 2
    graph_0 = module_0.Graph(weighted_graph_0)
    var_1 = graph_0.topological_sort()
    var_0.remove_adjacent(var_0)


def test_case_4():
    none_type_0 = None
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_edge(none_type_0, none_type_0, weighted_graph_0)
    var_1 = weighted_graph_0.add_edge(none_type_0, none_type_0, none_type_0)


def test_case_5():
    str_0 = "#?0-U8+r3r0YbzTNvJ"
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.remove_edge(str_0, str_0)
    var_1 = weighted_graph_0.__str__()
    bytes_0 = b"\xba\xc1\xce\xcd\xae&\xfamb\x13\x05\x93\xe4\xc0\x11`\x93H|\x9a"
    graph_0 = module_0.Graph(bytes_0)


def test_case_6():
    weighted_graph_0 = module_0.WeightedGraph()


@pytest.mark.xfail(strict=True)
def test_case_7():
    object_0 = module_1.object()
    graph_node_0 = module_0.GraphNode(object_0)
    var_0 = graph_node_0.add_adjacent(object_0)
    var_0.remove_edge(graph_node_0, graph_node_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    weighted_graph_0 = module_0.WeightedGraph()
    graph_0 = module_0.Graph(weighted_graph_0)
    var_0 = graph_0.topological_sort()
    bytes_0 = b"#\x07\xc7&\xd5\xa3A\xc4"
    graph_node_0 = module_0.GraphNode(bytes_0)
    graph_node_0.remove_adjacent(bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_vertex(weighted_graph_0)
    tuple_0 = (var_0, var_0, var_0)
    var_0.add_adjacent(tuple_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    weighted_graph_0 = module_0.WeightedGraph()
    none_type_0 = None
    var_0 = weighted_graph_0.remove_edge(weighted_graph_0, none_type_0)
    none_type_1 = None
    var_1 = weighted_graph_0.add_edge(weighted_graph_0, none_type_1, weighted_graph_0)
    assert len(weighted_graph_0.vertices) == 2
    graph_0 = module_0.Graph(weighted_graph_0)
    weighted_graph_1 = module_0.WeightedGraph()
    var_2 = var_0.__str__()
    var_3 = weighted_graph_0.remove_edge(weighted_graph_0, var_1)
    var_4 = weighted_graph_1.remove_edge(graph_0, weighted_graph_1)
    var_1.add_adjacent(weighted_graph_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    none_type_0 = None
    int_0 = -1673
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_edge(int_0, int_0, none_type_0)
    var_1 = weighted_graph_0.__str__()
    assert var_1 == "-1673 adjacent: [-1673]"
    var_0.add_adjacent(var_1)


@pytest.mark.xfail(strict=True)
def test_case_12():
    weighted_graph_0 = module_0.WeightedGraph()
    none_type_0 = None
    var_0 = weighted_graph_0.add_edge(weighted_graph_0, none_type_0, weighted_graph_0)
    assert len(weighted_graph_0.vertices) == 2
    graph_0 = module_0.Graph(weighted_graph_0)
    var_1 = graph_0.topological_sort()
    weighted_graph_1 = module_0.WeightedGraph()
    var_2 = weighted_graph_0.remove_edge(weighted_graph_0, graph_0)
    var_0.remove_adjacent(none_type_0)


def test_case_13():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    bool_1 = False
    var_0 = graph_0.add_edge(bool_1, bool_1)
    assert graph_0.graph == {False: [False]}
    var_1 = graph_0.has_cycle()
    assert var_1 is True


@pytest.mark.xfail(strict=True)
def test_case_14():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)
    none_type_0 = None
    var_0 = graph_0.add_edge(none_type_0, graph_0)
    assert len(graph_0.graph) == 2
    bytes_0 = b"\xba\xc1\xce\xcd\xae&\xfamb\x13\x05\x93\xe4\xc0\x11`\x93H|\x9a"
    weighted_graph_0 = module_0.WeightedGraph()
    var_0.remove_edge(bytes_0, graph_0)


def test_case_15():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)
    none_type_0 = None
    var_0 = graph_0.add_edge(none_type_0, graph_0)
    assert len(graph_0.graph) == 2
    bool_1 = False
    with pytest.raises(IndexError):
        graph_0.add_edge(graph_0, bool_1)


@pytest.mark.xfail(strict=True)
def test_case_16():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    none_type_0 = None
    weighted_graph_node_0 = module_0.WeightedGraphNode(bool_0)
    bool_1 = False
    var_0 = graph_0.add_edge(none_type_0, bool_1)
    assert graph_0.graph == {None: [False], False: []}
    var_1 = graph_0.has_cycle()
    assert var_1 is False
    var_2 = weighted_graph_node_0.__str__()
    assert var_2 == "True adjacent: []"
    var_3 = var_2.__str__()
    assert var_3 == "True adjacent: []"
    var_0.remove_adjacent(var_1)


@pytest.mark.xfail(strict=True)
def test_case_17():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.add_edge(bool_0, bool_0)
    assert graph_0.graph == {True: [True]}
    var_1 = graph_0.topological_sort()
    graph_0.has_cycle()


@pytest.mark.xfail(strict=True)
def test_case_18():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    weighted_graph_node_0 = module_0.WeightedGraphNode(graph_0)
    none_type_0 = None
    var_0 = graph_0.add_edge(none_type_0, graph_0)
    assert len(graph_0.graph) == 2
    var_1 = graph_0.topological_sort()
    graph_0.has_cycle()


@pytest.mark.xfail(strict=True)
def test_case_19():
    int_0 = 2256
    graph_0 = module_0.Graph(int_0)
    graph_0.has_cycle()


@pytest.mark.xfail(strict=True)
def test_case_20():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    graph_1 = module_0.Graph(bool_0)
    none_type_0 = None
    weighted_graph_node_0 = module_0.WeightedGraphNode(graph_0)
    var_0 = graph_0.add_edge(none_type_0, none_type_0)
    assert graph_0.graph == {None: [None]}
    none_type_1 = None
    var_1 = graph_0.add_edge(none_type_1, none_type_1)
    assert graph_0.graph == {None: [None, None]}
    var_1.topological_sort()
