[34m[*][0m Start mutation process:
[36m   -[0m targets: graph1.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 18 tests passed:
[36m   -[0m test_graph1 [0.17230 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOD graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
[34m-  61:             if visited[node] == -1:[0m
[32m+  61:             if visited[node] == 1:[0m
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.13877 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [#   2] AOD graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
[34m-  65:             visited[node] = -1[0m
[32m+  65:             visited[node] = 1[0m
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.10790 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#   3] AOR graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
[34m-  57:         visited = [0] * self.verticies[0m
[32m+  57:         visited = [0] / self.verticies[0m
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.13319 s] [36mincompetent[0m

TypeError: graph1:57: TypeError: unsupported operand type(s) for /: 'list' and 'int'

[36m   -[0m [#   4] AOR graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
[34m-  57:         visited = [0] * self.verticies[0m
[32m+  57:         visited = [0] // self.verticies[0m
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.13143 s] [36mincompetent[0m

TypeError: graph1:57: TypeError: unsupported operand type(s) for //: 'list' and 'int'

[36m   -[0m [#   5] AOR graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
[34m-  57:         visited = [0] * self.verticies[0m
[32m+  57:         visited = [0] ** self.verticies[0m
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.13074 s] [36mincompetent[0m

TypeError: graph1:57: TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

[36m   -[0m [#   6] AOR graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
[34m-  61:             if visited[node] == -1:[0m
[32m+  61:             if visited[node] == +1:[0m
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.13717 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [#   7] AOR graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
[34m-  65:             visited[node] = -1[0m
[32m+  65:             visited[node] = +1[0m
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.16114 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#   8] AOR graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         return (str(self.val) - ' adjacent: ') + str([x for x in self.adjacent])[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.13276 s] [36mincompetent[0m

TypeError: graph1:131: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   9] AOR graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         return (str(self.val) + ' adjacent: ') - str([x for x in self.adjacent])[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.14576 s] [36mincompetent[0m

TypeError: graph1:131: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#  10] CDI graph1: 
--------------------------------------------------------------------------------
    1: from collections import defaultdict, deque
    2: 
    3: class GraphNode:
    4:     
[34m-   5:     def __init__(self, val):[0m
[34m-   6:         self.val = val[0m
[34m-   7:         self.adjacent_list = set()[0m
[34m-   8:     [0m
[32m+   5:     @classmethod[0m
[32m+   6:     def __init__(self, val):[0m
[32m+   7:         self.val = val[0m
[32m+   8:         self.adjacent_list = set()[0m
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.11008 s] [32mkilled[0m by 0-ts/test_graph1.py::test_basic_graph_bfs

def test_basic_graph_bfs():
        head = make_graph()
    
>       assert breadth_first_search_graph(head, 3).val == 3
E       AttributeError: 'NoneType' object has no attribute 'val'

0-ts/test_graph1.py:172: AttributeError
[36m   -[0m [#  11] CDI graph1: 
--------------------------------------------------------------------------------
    5:     def __init__(self, val):
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
[34m-   9:     def add_adjacent(self, node):[0m
[34m-  10:         self.adjacent_list.add(node)[0m
[34m-  11:     [0m
[32m+   9:     @classmethod[0m
[32m+  10:     def add_adjacent(self, node):[0m
[32m+  11:         self.adjacent_list.add(node)[0m
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
   15: class Graph:
--------------------------------------------------------------------------------
[0.13674 s] [32mkilled[0m by 0-ts/test_graph1.py::test_insert

def test_insert():
        node = GraphNode(1)
    
        two = GraphNode(2)
        three = GraphNode(3)
>       node.add_adjacent(two)

0-ts/test_graph1.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.GraphNode'>
node = <graph1.GraphNode object at 0x7fdde9db1f90>

>   ???
E   AttributeError: type object 'GraphNode' has no attribute 'adjacent_list'

graph1:11: AttributeError
[36m   -[0m [#  12] CDI graph1: 
--------------------------------------------------------------------------------
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
[34m-  12:     def remove_adjacent(self, node):[0m
[34m-  13:         self.adjacent_list.remove(node)[0m
[34m-  14: [0m
[32m+  12:     @classmethod[0m
[32m+  13:     def remove_adjacent(self, node):[0m
[32m+  14:         self.adjacent_list.remove(node)[0m
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
--------------------------------------------------------------------------------
[0.13980 s] [32mkilled[0m by 0-ts/test_graph1.py::test_delete

def test_delete():
        node = GraphNode(1)
        two = GraphNode(2)
        node.add_adjacent(two)
    
>       node.remove_adjacent(two)

0-ts/test_graph1.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.GraphNode'>
node = <graph1.GraphNode object at 0x7fdde9e8d630>

>   ???
E   AttributeError: type object 'GraphNode' has no attribute 'adjacent_list'

graph1:14: AttributeError
[36m   -[0m [#  13] CDI graph1: 
--------------------------------------------------------------------------------
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
[34m-  20:     def __init__(self, verticies):[0m
[34m-  21:         self.graph = {}[0m
[34m-  22:         self.verticies = verticies[0m
[34m-  23:     [0m
[32m+  20:     @classmethod[0m
[32m+  21:     def __init__(self, verticies):[0m
[32m+  22:         self.graph = {}[0m
[32m+  23:         self.verticies = verticies[0m
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
   27: 
--------------------------------------------------------------------------------
[0.09439 s] [31msurvived[0m
[36m   -[0m [#  14] CDI graph1: 
--------------------------------------------------------------------------------
   20:     def __init__(self, verticies):
   21:         self.graph = {}
   22:         self.verticies = verticies
   23:     
[34m-  24:     def add_edge(self, source, destination):[0m
[34m-  25:         '''[0m
[34m-  26:         Add an edge to the graph.[0m
[34m-  27: [0m
[34m-  28:         Add an edge pointing from source vertex[0m
[34m-  29:         to destination vertex.[0m
[34m-  30: [0m
[34m-  31:         Args:[0m
[34m-  32:             source: the source vertex[0m
[34m-  33:             destination: the destination vertex[0m
[34m-  34: [0m
[34m-  35:         '''[0m
[34m-  36:         if len(self.graph) > self.verticies:[0m
[34m-  37:             raise IndexError('Too many verticies in graph.')[0m
[34m-  38:         [0m
[34m-  39:         if source in self.graph:[0m
[34m-  40:             self.graph[source].append(destination)[0m
[34m-  41:         else:[0m
[34m-  42:             self.graph[source] = [destination][0m
[34m-  43:         [0m
[34m-  44:         if destination not in self.graph:[0m
[34m-  45:             self.graph[destination] = [][0m
[34m-  46:     [0m
[32m+  24:     @classmethod[0m
[32m+  25:     def add_edge(self, source, destination):[0m
[32m+  26:         '''[0m
[32m+  27:         Add an edge to the graph.[0m
[32m+  28: [0m
[32m+  29:         Add an edge pointing from source vertex[0m
[32m+  30:         to destination vertex.[0m
[32m+  31: [0m
[32m+  32:         Args:[0m
[32m+  33:             source: the source vertex[0m
[32m+  34:             destination: the destination vertex[0m
[32m+  35: [0m
[32m+  36:         '''[0m
[32m+  37:         if len(self.graph) > self.verticies:[0m
[32m+  38:             raise IndexError('Too many verticies in graph.')[0m
[32m+  39:         [0m
[32m+  40:         if source in self.graph:[0m
[32m+  41:             self.graph[source].append(destination)[0m
[32m+  42:         else:[0m
[32m+  43:             self.graph[source] = [destination][0m
[32m+  44:         [0m
[32m+  45:         if destination not in self.graph:[0m
[32m+  46:             self.graph[destination] = [][0m
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
   50: 
--------------------------------------------------------------------------------
[0.13104 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.Graph'>, source = 'Tampa', destination = 'Colorado'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph1:37: AttributeError
[36m   -[0m [#  15] CDI graph1: 
--------------------------------------------------------------------------------
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
[34m-  47:     def has_cycle(self):[0m
[34m-  48:         '''[0m
[34m-  49:         Detect if a graph has a cycle.[0m
[34m-  50: [0m
[34m-  51:         Returns:[0m
[34m-  52:             True if the graph has a cycle and[0m
[34m-  53:             False if the graph is acyclic.[0m
[34m-  54: [0m
[34m-  55:         '''[0m
[34m-  56:         [0m
[34m-  57:         visited = [0] * self.verticies[0m
[34m-  58:         [0m
[34m-  59:         def valid(node):[0m
[34m-  60:             [0m
[34m-  61:             if visited[node] == -1:[0m
[34m-  62:                 return False[0m
[34m-  63:             elif visited[node] == 1:[0m
[34m-  64:                 return True[0m
[34m-  65:             visited[node] = -1[0m
[34m-  66:             for neighbor in self.graph[node]:[0m
[34m-  67:                 if not (valid(neighbor)):[0m
[34m-  68:                     return False[0m
[34m-  69:             return True[0m
[34m-  70:         [0m
[34m-  71:         for node in range(self.verticies):[0m
[34m-  72:             [0m
[32m+  47:     @classmethod[0m
[32m+  48:     def has_cycle(self):[0m
[32m+  49:         '''[0m
[32m+  50:         Detect if a graph has a cycle.[0m
[32m+  51: [0m
[32m+  52:         Returns:[0m
[32m+  53:             True if the graph has a cycle and[0m
[32m+  54:             False if the graph is acyclic.[0m
[32m+  55: [0m
[32m+  56:         '''[0m
[32m+  57:         [0m
[32m+  58:         visited = [0] * self.verticies[0m
[32m+  59:         [0m
[32m+  60:         def valid(node):[0m
[32m+  61:             [0m
[32m+  62:             if visited[node] == -1:[0m
[32m+  63:                 return False[0m
[32m+  64:             elif visited[node] == 1:[0m
[32m+  65:                 return True[0m
[32m+  66:             visited[node] = -1[0m
[32m+  67:             for neighbor in self.graph[node]:[0m
[32m+  68:                 if not (valid(neighbor)):[0m
[32m+  69:                     return False[0m
[32m+  70:             return True[0m
[32m+  71:         [0m
[32m+  72:         for node in range(self.verticies):[0m
   73:             
   74:             
[34m-  75:             if not (visited[node]):[0m
[34m-  76:                 [0m
[34m-  77:                 if valid(node):[0m
[34m-  78:                     [0m
[34m-  79:                     visited = list(map((lambda x: (abs(x))), visited))[0m
[34m-  80:                 else:[0m
[34m-  81:                     [0m
[34m-  82:                     return True[0m
[34m-  83:         [0m
[34m-  84:         return False[0m
[34m-  85:     [0m
[32m+  75:             [0m
[32m+  76:             if not (visited[node]):[0m
[32m+  77:                 [0m
[32m+  78:                 if valid(node):[0m
[32m+  79:                     [0m
[32m+  80:                     visited = list(map((lambda x: (abs(x))), visited))[0m
[32m+  81:                 else:[0m
[32m+  82:                     [0m
[32m+  83:                     return True[0m
[32m+  84:         [0m
[32m+  85:         return False[0m
   86:     def topological_sort(self):
   87:         """
   88:         Sort the graph topologically.
   89: 
--------------------------------------------------------------------------------
[0.16475 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.Graph'>

>   ???
E   AttributeError: type object 'Graph' has no attribute 'verticies'

graph1:58: AttributeError
[36m   -[0m [#  16] CDI graph1: 
--------------------------------------------------------------------------------
   82:                     return True
   83:         
   84:         return False
   85:     
[34m-  86:     def topological_sort(self):[0m
[34m-  87:         """[0m
[34m-  88:         Sort the graph topologically.[0m
[34m-  89: [0m
[34m-  90:         A topological sort lists nodes in such a way[0m
[34m-  91:         that every node 's' in 's' -> 'd' directed pairs[0m
[34m-  92:         is listed before 'd.'  This will not work in a [0m
[34m-  93:         graph that contains cycles.[0m
[34m-  94: [0m
[34m-  95:         The algorithm looks at every node, and does a[0m
[34m-  96:         dfs for each node adjacent to the node and then adds[0m
[34m-  97:         the originating node to a stack once all adjacent[0m
[34m-  98:         nodes have been searched.  In the end, the stack[0m
[34m-  99:         will be in order of a possible topological sort.[0m
[34m- 100: [0m
[34m- 101:         Topological sorts are not necessarily unique.[0m
[34m- 102: [0m
[34m- 103:         Returns:[0m
[34m- 104:             A list of vertices in a topological ordering.[0m
[34m- 105: [0m
[34m- 106:         """[0m
[34m- 107:         visited = set()[0m
[34m- 108:         stack = deque()[0m
[34m- 109:         [0m
[34m- 110:         def dfs(vertex):[0m
[34m- 111:             visited.add(vertex)[0m
[34m- 112:             for j in self.graph[vertex]:[0m
[34m- 113:                 if j not in visited:[0m
[34m- 114:                     dfs(j)[0m
[34m- 115:             [0m
[34m- 116:             stack.appendleft(vertex)[0m
[34m- 117:         [0m
[34m- 118:         for (key, _) in self.graph.items():[0m
[34m- 119:             if key not in visited:[0m
[34m- 120:                 dfs(key)[0m
[34m- 121:         [0m
[34m- 122:         return list(stack)[0m
[34m- 123: [0m
[32m+  86:     @classmethod[0m
[32m+  87:     def topological_sort(self):[0m
[32m+  88:         """[0m
[32m+  89:         Sort the graph topologically.[0m
[32m+  90: [0m
[32m+  91:         A topological sort lists nodes in such a way[0m
[32m+  92:         that every node 's' in 's' -> 'd' directed pairs[0m
[32m+  93:         is listed before 'd.'  This will not work in a [0m
[32m+  94:         graph that contains cycles.[0m
[32m+  95: [0m
[32m+  96:         The algorithm looks at every node, and does a[0m
[32m+  97:         dfs for each node adjacent to the node and then adds[0m
[32m+  98:         the originating node to a stack once all adjacent[0m
[32m+  99:         nodes have been searched.  In the end, the stack[0m
[32m+ 100:         will be in order of a possible topological sort.[0m
[32m+ 101: [0m
[32m+ 102:         Topological sorts are not necessarily unique.[0m
[32m+ 103: [0m
[32m+ 104:         Returns:[0m
[32m+ 105:             A list of vertices in a topological ordering.[0m
[32m+ 106: [0m
[32m+ 107:         """[0m
[32m+ 108:         visited = set()[0m
[32m+ 109:         stack = deque()[0m
[32m+ 110:         [0m
[32m+ 111:         def dfs(vertex):[0m
[32m+ 112:             visited.add(vertex)[0m
[32m+ 113:             for j in self.graph[vertex]:[0m
[32m+ 114:                 if j not in visited:[0m
[32m+ 115:                     dfs(j)[0m
[32m+ 116:             [0m
[32m+ 117:             stack.appendleft(vertex)[0m
[32m+ 118:         [0m
[32m+ 119:         for (key, _) in self.graph.items():[0m
[32m+ 120:             if key not in visited:[0m
[32m+ 121:                 dfs(key)[0m
[32m+ 122:         [0m
[32m+ 123:         return list(stack)[0m
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
--------------------------------------------------------------------------------
[0.13377 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.Graph'>

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph1:119: AttributeError
[36m   -[0m [#  17] CDI graph1: 
--------------------------------------------------------------------------------
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
  125:     
[34m- 126:     def __init__(self, val):[0m
[34m- 127:         self.val = val[0m
[34m- 128:         self.adjacent = {}[0m
[34m- 129:     [0m
[32m+ 126:     @classmethod[0m
[32m+ 127:     def __init__(self, val):[0m
[32m+ 128:         self.val = val[0m
[32m+ 129:         self.adjacent = {}[0m
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
--------------------------------------------------------------------------------
[0.13392 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert {'b':1,'c':3} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:225: AssertionError
[36m   -[0m [#  18] CDI graph1: 
--------------------------------------------------------------------------------
  126:     def __init__(self, val):
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
[34m- 130:     def __str__(self):[0m
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[34m- 132:     [0m
[32m+ 130:     @classmethod[0m
[32m+ 131:     def __str__(self):[0m
[32m+ 132:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.14370 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()

0-ts/test_graph1.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraphNode'>

>   ???
E   AttributeError: type object 'WeightedGraphNode' has no attribute 'val'

graph1:132: AttributeError
[36m   -[0m [#  19] CDI graph1: 
--------------------------------------------------------------------------------
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
[34m- 133:     def add_adjacent(self, node, weight=0):[0m
[34m- 134:         self.adjacent[node] = weight[0m
[34m- 135:     [0m
[32m+ 133:     @classmethod[0m
[32m+ 134:     def add_adjacent(self, node, weight=0):[0m
[32m+ 135:         self.adjacent[node] = weight[0m
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
--------------------------------------------------------------------------------
[0.13225 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraphNode'>, node = 'b', weight = 1

>   ???
E   AttributeError: type object 'WeightedGraphNode' has no attribute 'adjacent'

graph1:135: AttributeError
[36m   -[0m [#  20] CDI graph1: 
--------------------------------------------------------------------------------
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
[34m- 136:     def remove_adjacent(self, node):[0m
[34m- 137:         del self.adjacent[node][0m
[34m- 138: [0m
[32m+ 136:     @classmethod[0m
[32m+ 137:     def remove_adjacent(self, node):[0m
[32m+ 138:         del self.adjacent[node][0m
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
--------------------------------------------------------------------------------
[0.13512 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:164: in remove_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraphNode'>, node = 'b'

>   ???
E   AttributeError: type object 'WeightedGraphNode' has no attribute 'adjacent'

graph1:138: AttributeError
[36m   -[0m [#  21] CDI graph1: 
--------------------------------------------------------------------------------
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
  140:     
[34m- 141:     def __init__(self):[0m
[34m- 142:         self.vertices = {}[0m
[34m- 143:     [0m
[32m+ 141:     @classmethod[0m
[32m+ 142:     def __init__(self):[0m
[32m+ 143:         self.vertices = {}[0m
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
--------------------------------------------------------------------------------
[0.12302 s] [31msurvived[0m
[36m   -[0m [#  22] CDI graph1: 
--------------------------------------------------------------------------------
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
[34m- 144:     def __str__(self):[0m
[34m- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
[34m- 146:     [0m
[32m+ 144:     @classmethod[0m
[32m+ 145:     def __str__(self):[0m
[32m+ 146:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
--------------------------------------------------------------------------------
[0.14669 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()

0-ts/test_graph1.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:146: AttributeError
[36m   -[0m [#  23] CDI graph1: 
--------------------------------------------------------------------------------
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
[34m- 147:     def add_vertex(self, val):[0m
[34m- 148:         vertex = WeightedGraphNode(val)[0m
[34m- 149:         self.vertices[val] = vertex[0m
[34m- 150:     [0m
[32m+ 147:     @classmethod[0m
[32m+ 148:     def add_vertex(self, val):[0m
[32m+ 149:         vertex = WeightedGraphNode(val)[0m
[32m+ 150:         self.vertices[val] = vertex[0m
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.10931 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_vertex

def test_add_vertex():
    
        graph = WeightedGraph()
    
>       graph.add_vertex('a')

0-ts/test_graph1.py:211: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>, val = 'a'

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:150: AttributeError
[36m   -[0m [#  24] CDI graph1: 
--------------------------------------------------------------------------------
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
[34m- 151:     def add_edge(self, src, dst, weight=0):[0m
[34m- 152:         if src not in self.vertices:[0m
[34m- 153:             self.add_vertex(src)[0m
[34m- 154:         if dst not in self.vertices:[0m
[34m- 155:             self.add_vertex(dst)[0m
[34m- 156:         self.vertices[src].add_adjacent(dst, weight)[0m
[34m- 157:     [0m
[32m+ 151:     @classmethod[0m
[32m+ 152:     def add_edge(self, src, dst, weight=0):[0m
[32m+ 153:         if src not in self.vertices:[0m
[32m+ 154:             self.add_vertex(src)[0m
[32m+ 155:         if dst not in self.vertices:[0m
[32m+ 156:             self.add_vertex(dst)[0m
[32m+ 157:         self.vertices[src].add_adjacent(dst, weight)[0m
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.12290 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>, src = 'a', dst = 'b', weight = 1

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:153: AttributeError
[36m   -[0m [#  25] CDI graph1: 
--------------------------------------------------------------------------------
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
[34m- 158:     def remove_edge(self, src, dst):[0m
[34m- 159:         if src not in self.vertices:[0m
[34m- 160:             return[0m
[34m- 161:         if dst not in self.vertices:[0m
[34m- 162:             return[0m
[34m- 163:         if dst in self.vertices[src].adjacent:[0m
[34m- 164:             self.vertices[src].remove_adjacent(dst)[0m
[32m+ 158:     @classmethod[0m
[32m+ 159:     def remove_edge(self, src, dst):[0m
[32m+ 160:         if src not in self.vertices:[0m
[32m+ 161:             return[0m
[32m+ 162:         if dst not in self.vertices:[0m
[32m+ 163:             return[0m
[32m+ 164:         if dst in self.vertices[src].adjacent:[0m
[32m+ 165:             self.vertices[src].remove_adjacent(dst)[0m
--------------------------------------------------------------------------------
[0.14138 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph1.WeightedGraph'>, src = 'a', dst = 'b'

>   ???
E   AttributeError: type object 'WeightedGraph' has no attribute 'vertices'

graph1:160: AttributeError
[36m   -[0m [#  26] COD graph1: 
--------------------------------------------------------------------------------
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
[34m-  44:         if destination not in self.graph:[0m
[32m+  44:         if destination in self.graph:[0m
   45:             self.graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
--------------------------------------------------------------------------------
[0.12629 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 'Anchorage'

>   ???
E   KeyError: 'Anchorage'

graph1:112: KeyError
[36m   -[0m [#  27] COD graph1: 
--------------------------------------------------------------------------------
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
[34m-  67:                 if not (valid(neighbor)):[0m
[32m+  67:                 if valid(neighbor):[0m
   68:                     return False
   69:             return True
   70:         
   71:         for node in range(self.verticies):
--------------------------------------------------------------------------------
[0.13778 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycle_with_discrete_forest

def test_cycle_with_discrete_forest():
    
        graph = Graph(6)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(3,4)
        graph.add_edge(4,5)
        graph.add_edge(5,3)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:69: AssertionError
[36m   -[0m [#  28] COD graph1: 
--------------------------------------------------------------------------------
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
[34m-  75:             if not (visited[node]):[0m
[32m+  75:             if visited[node]:[0m
   76:                 
   77:                 if valid(node):
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
--------------------------------------------------------------------------------
[0.13390 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#  29] COD graph1: 
--------------------------------------------------------------------------------
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
[34m- 113:                 if j not in visited:[0m
[32m+ 113:                 if j in visited:[0m
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
--------------------------------------------------------------------------------
[0.13269 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [#  30] COD graph1: 
--------------------------------------------------------------------------------
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
[34m- 119:             if key not in visited:[0m
[32m+ 119:             if key in visited:[0m
  120:                 dfs(key)
  121:         
  122:         return list(stack)
  123: 
--------------------------------------------------------------------------------
[0.13854 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [#  31] COD graph1: 
--------------------------------------------------------------------------------
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
[34m- 152:         if src not in self.vertices:[0m
[32m+ 152:         if src in self.vertices:[0m
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
--------------------------------------------------------------------------------
[0.13821 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9d9caf0>, src = 'a', dst = 'b'
weight = 1

>   ???
E   KeyError: 'a'

graph1:156: KeyError
[36m   -[0m [#  32] COD graph1: 
--------------------------------------------------------------------------------
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
[34m- 154:         if dst not in self.vertices:[0m
[32m+ 154:         if dst in self.vertices:[0m
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
--------------------------------------------------------------------------------
[0.14328 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [#  33] COD graph1: 
--------------------------------------------------------------------------------
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
[34m- 159:         if src not in self.vertices:[0m
[32m+ 159:         if src in self.vertices:[0m
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
--------------------------------------------------------------------------------
[0.11619 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
>       graph.remove_edge('c','a')

0-ts/test_graph1.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9fa5300>, src = 'c', dst = 'a'

>   ???
E   KeyError: 'c'

graph1:163: KeyError
[36m   -[0m [#  34] COD graph1: 
--------------------------------------------------------------------------------
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
[34m- 161:         if dst not in self.vertices:[0m
[32m+ 161:         if dst in self.vertices:[0m
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.14593 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [#  35] COI graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
[34m-  36:         if len(self.graph) > self.verticies:[0m
[32m+  36:         if not (len(self.graph) > self.verticies):[0m
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.12397 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9d6a2f0>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   IndexError: Too many verticies in graph.

graph1:37: IndexError
[36m   -[0m [#  36] COI graph1: 
--------------------------------------------------------------------------------
   35:         '''
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
[34m-  39:         if source in self.graph:[0m
[32m+  39:         if not (source in self.graph):[0m
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
--------------------------------------------------------------------------------
[0.12162 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9d6b970>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   KeyError: 'Tampa'

graph1:40: KeyError
[36m   -[0m [#  37] COI graph1: 
--------------------------------------------------------------------------------
   35:         '''
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
[34m-  39:         if source in self.graph:[0m
[32m+  39:         if source not in self.graph:[0m
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
--------------------------------------------------------------------------------
[0.16370 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9d6afe0>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   KeyError: 'Tampa'

graph1:40: KeyError
[36m   -[0m [#  38] COI graph1: 
--------------------------------------------------------------------------------
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
[34m-  44:         if destination not in self.graph:[0m
[32m+  44:         if not (destination not in self.graph):[0m
   45:             self.graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
--------------------------------------------------------------------------------
[0.13398 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 'Anchorage'

>   ???
E   KeyError: 'Anchorage'

graph1:112: KeyError
[36m   -[0m [#  39] COI graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
[34m-  61:             if visited[node] == -1:[0m
[32m+  61:             if not (visited[node] == -1):[0m
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.12841 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_false

def test_cycles_false():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
    
>       assert graph.has_cycle() == False
E       AssertionError

0-ts/test_graph1.py:80: AssertionError
[36m   -[0m [#  40] COI graph1: 
--------------------------------------------------------------------------------
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
   62:                 return False
[34m-  63:             elif visited[node] == 1:[0m
[32m+  63:             elif not (visited[node] == 1):[0m
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
--------------------------------------------------------------------------------
[0.13023 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#  41] COI graph1: 
--------------------------------------------------------------------------------
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
[34m-  67:                 if not (valid(neighbor)):[0m
[32m+  67:                 if not ((not (valid(neighbor)))):[0m
   68:                     return False
   69:             return True
   70:         
   71:         for node in range(self.verticies):
--------------------------------------------------------------------------------
[0.13459 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycle_with_discrete_forest

def test_cycle_with_discrete_forest():
    
        graph = Graph(6)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(3,4)
        graph.add_edge(4,5)
        graph.add_edge(5,3)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:69: AssertionError
[36m   -[0m [#  42] COI graph1: 
--------------------------------------------------------------------------------
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
[34m-  75:             if not (visited[node]):[0m
[32m+  75:             if not ((not (visited[node]))):[0m
   76:                 
   77:                 if valid(node):
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
--------------------------------------------------------------------------------
[0.13418 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#  43] COI graph1: 
--------------------------------------------------------------------------------
   73:             
   74:             
   75:             if not (visited[node]):
   76:                 
[34m-  77:                 if valid(node):[0m
[32m+  77:                 if not (valid(node)):[0m
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
   80:                 else:
   81:                     
--------------------------------------------------------------------------------
[0.13292 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#  44] COI graph1: 
--------------------------------------------------------------------------------
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
[34m- 113:                 if j not in visited:[0m
[32m+ 113:                 if not (j not in visited):[0m
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
--------------------------------------------------------------------------------
[0.13154 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [#  45] COI graph1: 
--------------------------------------------------------------------------------
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
[34m- 119:             if key not in visited:[0m
[32m+ 119:             if not (key not in visited):[0m
  120:                 dfs(key)
  121:         
  122:         return list(stack)
  123: 
--------------------------------------------------------------------------------
[0.16498 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [#  46] COI graph1: 
--------------------------------------------------------------------------------
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
[34m- 152:         if src not in self.vertices:[0m
[32m+ 152:         if not (src not in self.vertices):[0m
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
--------------------------------------------------------------------------------
[0.13878 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9d845b0>, src = 'a', dst = 'b'
weight = 1

>   ???
E   KeyError: 'a'

graph1:156: KeyError
[36m   -[0m [#  47] COI graph1: 
--------------------------------------------------------------------------------
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
[34m- 154:         if dst not in self.vertices:[0m
[32m+ 154:         if not (dst not in self.vertices):[0m
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
--------------------------------------------------------------------------------
[0.11282 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [#  48] COI graph1: 
--------------------------------------------------------------------------------
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
[34m- 159:         if src not in self.vertices:[0m
[32m+ 159:         if not (src not in self.vertices):[0m
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
--------------------------------------------------------------------------------
[0.14176 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
>       graph.remove_edge('c','a')

0-ts/test_graph1.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9fa6260>, src = 'c', dst = 'a'

>   ???
E   KeyError: 'c'

graph1:163: KeyError
[36m   -[0m [#  49] COI graph1: 
--------------------------------------------------------------------------------
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
[34m- 161:         if dst not in self.vertices:[0m
[32m+ 161:         if not (dst not in self.vertices):[0m
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.13444 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [#  50] COI graph1: 
--------------------------------------------------------------------------------
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
[34m- 163:         if dst in self.vertices[src].adjacent:[0m
[32m+ 163:         if not (dst in self.vertices[src].adjacent):[0m
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.14094 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [#  51] COI graph1: 
--------------------------------------------------------------------------------
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
[34m- 163:         if dst in self.vertices[src].adjacent:[0m
[32m+ 163:         if dst not in self.vertices[src].adjacent:[0m
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.11208 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [#  52] CRP graph1: 
--------------------------------------------------------------------------------
   33:             destination: the destination vertex
   34: 
   35:         '''
   36:         if len(self.graph) > self.verticies:
[34m-  37:             raise IndexError('Too many verticies in graph.')[0m
[32m+  37:             raise IndexError('mutpy')[0m
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
--------------------------------------------------------------------------------
[0.10810 s] [31msurvived[0m
[36m   -[0m [#  53] CRP graph1: 
--------------------------------------------------------------------------------
   33:             destination: the destination vertex
   34: 
   35:         '''
   36:         if len(self.graph) > self.verticies:
[34m-  37:             raise IndexError('Too many verticies in graph.')[0m
[32m+  37:             raise IndexError('')[0m
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
--------------------------------------------------------------------------------
[0.15308 s] [31msurvived[0m
[36m   -[0m [#  54] CRP graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
[34m-  57:         visited = [0] * self.verticies[0m
[32m+  57:         visited = [1] * self.verticies[0m
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.12544 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#  55] CRP graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
[34m-  61:             if visited[node] == -1:[0m
[32m+  61:             if visited[node] == -2:[0m
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.14155 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [#  56] CRP graph1: 
--------------------------------------------------------------------------------
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
   62:                 return False
[34m-  63:             elif visited[node] == 1:[0m
[32m+  63:             elif visited[node] == 2:[0m
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
--------------------------------------------------------------------------------
[0.11827 s] [31msurvived[0m
[36m   -[0m [#  57] CRP graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
[34m-  65:             visited[node] = -1[0m
[32m+  65:             visited[node] = -2[0m
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.13186 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [#  58] CRP graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         return (str(self.val) + 'mutpy') + str([x for x in self.adjacent])[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.14659 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()
E       AssertionError

0-ts/test_graph1.py:250: AssertionError
[36m   -[0m [#  59] CRP graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         return (str(self.val) + '') + str([x for x in self.adjacent])[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.14142 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()
E       AssertionError

0-ts/test_graph1.py:250: AssertionError
[36m   -[0m [#  60] CRP graph1: 
--------------------------------------------------------------------------------
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
[34m- 133:     def add_adjacent(self, node, weight=0):[0m
[32m+ 133:     def add_adjacent(self, node, weight=1):[0m
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
--------------------------------------------------------------------------------
[0.11311 s] [31msurvived[0m
[36m   -[0m [#  61] CRP graph1: 
--------------------------------------------------------------------------------
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
  144:     def __str__(self):
[34m- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
[32m+ 145:         return 'mutpy'.join([node.__str__() for node in self.vertices.values()])[0m
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
--------------------------------------------------------------------------------
[0.16739 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()
E       AssertionError

0-ts/test_graph1.py:250: AssertionError
[36m   -[0m [#  62] CRP graph1: 
--------------------------------------------------------------------------------
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
  144:     def __str__(self):
[34m- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
[32m+ 145:         return ''.join([node.__str__() for node in self.vertices.values()])[0m
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
--------------------------------------------------------------------------------
[0.13438 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()
E       AssertionError

0-ts/test_graph1.py:250: AssertionError
[36m   -[0m [#  63] CRP graph1: 
--------------------------------------------------------------------------------
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
[34m- 151:     def add_edge(self, src, dst, weight=0):[0m
[32m+ 151:     def add_edge(self, src, dst, weight=1):[0m
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
--------------------------------------------------------------------------------
[0.12213 s] [31msurvived[0m
[36m   -[0m [#  64] OIL graph1: 
--------------------------------------------------------------------------------
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
[34m-  69:             return True[0m
[34m-  70:         [0m
[32m+  69:                 break[0m
[32m+  70:             return True[0m
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
--------------------------------------------------------------------------------
[0.13533 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true_complex_graph

def test_cycles_true_complex_graph():
    
        graph = Graph(7)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(3,2)
        graph.add_edge(4,3)
        graph.add_edge(4,6)
        graph.add_edge(5,3)
        graph.add_edge(5,4)
        graph.add_edge(6,5)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:46: AssertionError
[36m   -[0m [#  65] OIL graph1: 
--------------------------------------------------------------------------------
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
   80:                 else:
   81:                     
[34m-  82:                     return True[0m
[32m+  82:                     return Truebreak[0m
   83:         
   84:         return False
   85:     
   86:     def topological_sort(self):
--------------------------------------------------------------------------------
[0.13522 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true_complex_graph

def test_cycles_true_complex_graph():
    
        graph = Graph(7)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(3,2)
        graph.add_edge(4,3)
        graph.add_edge(4,6)
        graph.add_edge(5,3)
        graph.add_edge(5,4)
        graph.add_edge(6,5)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:46: AssertionError
[36m   -[0m [#  66] OIL graph1: 
--------------------------------------------------------------------------------
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
[34m- 115:             [0m
[32m+ 115:                 break[0m
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
--------------------------------------------------------------------------------
[0.11890 s] [32mkilled[0m by 0-ts/test_graph1.py::test_topological_sort

def test_topological_sort():
        graph = Graph(6)
        graph.add_edge(5, 2)
        graph.add_edge(5, 0)
    
        graph.add_edge(4, 0)
        graph.add_edge(4, 1)
    
        graph.add_edge(2, 3)
    
        graph.add_edge(3, 1)
    
>       assert graph.topological_sort() == [4, 5, 0, 2, 3, 1]
E       AssertionError

0-ts/test_graph1.py:199: AssertionError
[36m   -[0m [#  67] OIL graph1: 
--------------------------------------------------------------------------------
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
[34m- 121:         [0m
[32m+ 121:             break[0m
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
  125:     
--------------------------------------------------------------------------------
[0.14289 s] [32mkilled[0m by 0-ts/test_graph1.py::test_topological_sort

def test_topological_sort():
        graph = Graph(6)
        graph.add_edge(5, 2)
        graph.add_edge(5, 0)
    
        graph.add_edge(4, 0)
        graph.add_edge(4, 1)
    
        graph.add_edge(2, 3)
    
        graph.add_edge(3, 1)
    
>       assert graph.topological_sort() == [4, 5, 0, 2, 3, 1]
E       AssertionError

0-ts/test_graph1.py:199: AssertionError
[36m   -[0m [#  68] RIL graph1: 
--------------------------------------------------------------------------------
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
[34m-  66:             for neighbor in self.graph[node]:[0m
[32m+  66:             for neighbor in reversed(self.graph[node]):[0m
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
--------------------------------------------------------------------------------
[0.15587 s] [31msurvived[0m
[36m   -[0m [#  69] RIL graph1: 
--------------------------------------------------------------------------------
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
[34m-  71:         for node in range(self.verticies):[0m
[32m+  71:         for node in reversed(range(self.verticies)):[0m
   72:             
   73:             
   74:             
   75:             if not (visited[node]):
--------------------------------------------------------------------------------
[0.11185 s] [31msurvived[0m
[36m   -[0m [#  70] RIL graph1: 
--------------------------------------------------------------------------------
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
[34m- 112:             for j in self.graph[vertex]:[0m
[32m+ 112:             for j in reversed(self.graph[vertex]):[0m
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
--------------------------------------------------------------------------------
[0.13852 s] [32mkilled[0m by 0-ts/test_graph1.py::test_topological_sort

def test_topological_sort():
        graph = Graph(6)
        graph.add_edge(5, 2)
        graph.add_edge(5, 0)
    
        graph.add_edge(4, 0)
        graph.add_edge(4, 1)
    
        graph.add_edge(2, 3)
    
        graph.add_edge(3, 1)
    
>       assert graph.topological_sort() == [4, 5, 0, 2, 3, 1]
E       AssertionError

0-ts/test_graph1.py:199: AssertionError
[36m   -[0m [#  71] RIL graph1: 
--------------------------------------------------------------------------------
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
[34m- 118:         for (key, _) in self.graph.items():[0m
[32m+ 118:         for (key, _) in reversed(self.graph.items()):[0m
  119:             if key not in visited:
  120:                 dfs(key)
  121:         
  122:         return list(stack)
--------------------------------------------------------------------------------
[0.14437 s] [32mkilled[0m by 0-ts/test_graph1.py::test_topological_sort

def test_topological_sort():
        graph = Graph(6)
        graph.add_edge(5, 2)
        graph.add_edge(5, 0)
    
        graph.add_edge(4, 0)
        graph.add_edge(4, 1)
    
        graph.add_edge(2, 3)
    
        graph.add_edge(3, 1)
    
>       assert graph.topological_sort() == [4, 5, 0, 2, 3, 1]
E       AssertionError

0-ts/test_graph1.py:199: AssertionError
[36m   -[0m [#  72] ROR graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
[34m-  36:         if len(self.graph) > self.verticies:[0m
[32m+  36:         if len(self.graph) < self.verticies:[0m
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.11138 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9fc3460>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   IndexError: Too many verticies in graph.

graph1:37: IndexError
[36m   -[0m [#  73] ROR graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
[34m-  36:         if len(self.graph) > self.verticies:[0m
[32m+  36:         if len(self.graph) >= self.verticies:[0m
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.12643 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
>       graph.add_edge('Seattle','Anchorage')

0-ts/test_graph1.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9fc2110>, source = 'Seattle'
destination = 'Anchorage'

>   ???
E   IndexError: Too many verticies in graph.

graph1:37: IndexError
[36m   -[0m [#  74] ROR graph1: 
--------------------------------------------------------------------------------
   57:         visited = [0] * self.verticies
   58:         
   59:         def valid(node):
   60:             
[34m-  61:             if visited[node] == -1:[0m
[32m+  61:             if visited[node] != -1:[0m
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
--------------------------------------------------------------------------------
[0.12891 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_false

def test_cycles_false():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
    
>       assert graph.has_cycle() == False
E       AssertionError

0-ts/test_graph1.py:80: AssertionError
[36m   -[0m [#  75] ROR graph1: 
--------------------------------------------------------------------------------
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
   62:                 return False
[34m-  63:             elif visited[node] == 1:[0m
[32m+  63:             elif visited[node] != 1:[0m
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
--------------------------------------------------------------------------------
[0.16273 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [#  76] SDI graph1: 
--------------------------------------------------------------------------------
    1: from collections import defaultdict, deque
    2: 
    3: class GraphNode:
    4:     
[34m-   5:     def __init__(self, val):[0m
[34m-   6:         self.val = val[0m
[34m-   7:         self.adjacent_list = set()[0m
[34m-   8:     [0m
[32m+   5:     @staticmethod[0m
[32m+   6:     def __init__(self, val):[0m
[32m+   7:         self.val = val[0m
[32m+   8:         self.adjacent_list = set()[0m
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.13593 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:93: TypeError: GraphNode.__init__() missing 1 required positional argument: 'val'

[36m   -[0m [#  77] SDI graph1: 
--------------------------------------------------------------------------------
    5:     def __init__(self, val):
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
[34m-   9:     def add_adjacent(self, node):[0m
[34m-  10:         self.adjacent_list.add(node)[0m
[34m-  11:     [0m
[32m+   9:     @staticmethod[0m
[32m+  10:     def add_adjacent(self, node):[0m
[32m+  11:         self.adjacent_list.add(node)[0m
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
   15: class Graph:
--------------------------------------------------------------------------------
[0.13729 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:101: TypeError: GraphNode.add_adjacent() missing 1 required positional argument: 'node'

[36m   -[0m [#  78] SDI graph1: 
--------------------------------------------------------------------------------
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
[34m-  12:     def remove_adjacent(self, node):[0m
[34m-  13:         self.adjacent_list.remove(node)[0m
[34m-  14: [0m
[32m+  12:     @staticmethod[0m
[32m+  13:     def remove_adjacent(self, node):[0m
[32m+  14:         self.adjacent_list.remove(node)[0m
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
--------------------------------------------------------------------------------
[0.13092 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:116: TypeError: GraphNode.remove_adjacent() missing 1 required positional argument: 'node'

[36m   -[0m [#  79] SDI graph1: 
--------------------------------------------------------------------------------
   16:     '''
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
[34m-  20:     def __init__(self, verticies):[0m
[34m-  21:         self.graph = {}[0m
[34m-  22:         self.verticies = verticies[0m
[34m-  23:     [0m
[32m+  20:     @staticmethod[0m
[32m+  21:     def __init__(self, verticies):[0m
[32m+  22:         self.graph = {}[0m
[32m+  23:         self.verticies = verticies[0m
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
   27: 
--------------------------------------------------------------------------------
[0.10373 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:11: TypeError: Graph.__init__() missing 1 required positional argument: 'verticies'

[36m   -[0m [#  80] SDI graph1: 
--------------------------------------------------------------------------------
   20:     def __init__(self, verticies):
   21:         self.graph = {}
   22:         self.verticies = verticies
   23:     
[34m-  24:     def add_edge(self, source, destination):[0m
[34m-  25:         '''[0m
[34m-  26:         Add an edge to the graph.[0m
[34m-  27: [0m
[34m-  28:         Add an edge pointing from source vertex[0m
[34m-  29:         to destination vertex.[0m
[34m-  30: [0m
[34m-  31:         Args:[0m
[34m-  32:             source: the source vertex[0m
[34m-  33:             destination: the destination vertex[0m
[34m-  34: [0m
[34m-  35:         '''[0m
[34m-  36:         if len(self.graph) > self.verticies:[0m
[34m-  37:             raise IndexError('Too many verticies in graph.')[0m
[34m-  38:         [0m
[34m-  39:         if source in self.graph:[0m
[34m-  40:             self.graph[source].append(destination)[0m
[34m-  41:         else:[0m
[34m-  42:             self.graph[source] = [destination][0m
[34m-  43:         [0m
[34m-  44:         if destination not in self.graph:[0m
[34m-  45:             self.graph[destination] = [][0m
[34m-  46:     [0m
[32m+  24:     @staticmethod[0m
[32m+  25:     def add_edge(self, source, destination):[0m
[32m+  26:         '''[0m
[32m+  27:         Add an edge to the graph.[0m
[32m+  28: [0m
[32m+  29:         Add an edge pointing from source vertex[0m
[32m+  30:         to destination vertex.[0m
[32m+  31: [0m
[32m+  32:         Args:[0m
[32m+  33:             source: the source vertex[0m
[32m+  34:             destination: the destination vertex[0m
[32m+  35: [0m
[32m+  36:         '''[0m
[32m+  37:         if len(self.graph) > self.verticies:[0m
[32m+  38:             raise IndexError('Too many verticies in graph.')[0m
[32m+  39:         [0m
[32m+  40:         if source in self.graph:[0m
[32m+  41:             self.graph[source].append(destination)[0m
[32m+  42:         else:[0m
[32m+  43:             self.graph[source] = [destination][0m
[32m+  44:         [0m
[32m+  45:         if destination not in self.graph:[0m
[32m+  46:             self.graph[destination] = [][0m
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
   50: 
--------------------------------------------------------------------------------
[0.13387 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:13: TypeError: Graph.add_edge() missing 1 required positional argument: 'destination'

[36m   -[0m [#  81] SDI graph1: 
--------------------------------------------------------------------------------
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
[34m-  47:     def has_cycle(self):[0m
[34m-  48:         '''[0m
[34m-  49:         Detect if a graph has a cycle.[0m
[34m-  50: [0m
[34m-  51:         Returns:[0m
[34m-  52:             True if the graph has a cycle and[0m
[34m-  53:             False if the graph is acyclic.[0m
[34m-  54: [0m
[34m-  55:         '''[0m
[34m-  56:         [0m
[34m-  57:         visited = [0] * self.verticies[0m
[34m-  58:         [0m
[34m-  59:         def valid(node):[0m
[34m-  60:             [0m
[34m-  61:             if visited[node] == -1:[0m
[34m-  62:                 return False[0m
[34m-  63:             elif visited[node] == 1:[0m
[34m-  64:                 return True[0m
[34m-  65:             visited[node] = -1[0m
[34m-  66:             for neighbor in self.graph[node]:[0m
[34m-  67:                 if not (valid(neighbor)):[0m
[34m-  68:                     return False[0m
[34m-  69:             return True[0m
[34m-  70:         [0m
[34m-  71:         for node in range(self.verticies):[0m
[34m-  72:             [0m
[32m+  47:     @staticmethod[0m
[32m+  48:     def has_cycle(self):[0m
[32m+  49:         '''[0m
[32m+  50:         Detect if a graph has a cycle.[0m
[32m+  51: [0m
[32m+  52:         Returns:[0m
[32m+  53:             True if the graph has a cycle and[0m
[32m+  54:             False if the graph is acyclic.[0m
[32m+  55: [0m
[32m+  56:         '''[0m
[32m+  57:         [0m
[32m+  58:         visited = [0] * self.verticies[0m
[32m+  59:         [0m
[32m+  60:         def valid(node):[0m
[32m+  61:             [0m
[32m+  62:             if visited[node] == -1:[0m
[32m+  63:                 return False[0m
[32m+  64:             elif visited[node] == 1:[0m
[32m+  65:                 return True[0m
[32m+  66:             visited[node] = -1[0m
[32m+  67:             for neighbor in self.graph[node]:[0m
[32m+  68:                 if not (valid(neighbor)):[0m
[32m+  69:                     return False[0m
[32m+  70:             return True[0m
[32m+  71:         [0m
[32m+  72:         for node in range(self.verticies):[0m
   73:             
   74:             
[34m-  75:             if not (visited[node]):[0m
[34m-  76:                 [0m
[34m-  77:                 if valid(node):[0m
[34m-  78:                     [0m
[34m-  79:                     visited = list(map((lambda x: (abs(x))), visited))[0m
[34m-  80:                 else:[0m
[34m-  81:                     [0m
[34m-  82:                     return True[0m
[34m-  83:         [0m
[34m-  84:         return False[0m
[34m-  85:     [0m
[32m+  75:             [0m
[32m+  76:             if not (visited[node]):[0m
[32m+  77:                 [0m
[32m+  78:                 if valid(node):[0m
[32m+  79:                     [0m
[32m+  80:                     visited = list(map((lambda x: (abs(x))), visited))[0m
[32m+  81:                 else:[0m
[32m+  82:                     [0m
[32m+  83:                     return True[0m
[32m+  84:         [0m
[32m+  85:         return False[0m
   86:     def topological_sort(self):
   87:         """
   88:         Sort the graph topologically.
   89: 
--------------------------------------------------------------------------------
[0.10876 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:30: TypeError: Graph.has_cycle() missing 1 required positional argument: 'self'

[36m   -[0m [#  82] SDI graph1: 
--------------------------------------------------------------------------------
   82:                     return True
   83:         
   84:         return False
   85:     
[34m-  86:     def topological_sort(self):[0m
[34m-  87:         """[0m
[34m-  88:         Sort the graph topologically.[0m
[34m-  89: [0m
[34m-  90:         A topological sort lists nodes in such a way[0m
[34m-  91:         that every node 's' in 's' -> 'd' directed pairs[0m
[34m-  92:         is listed before 'd.'  This will not work in a [0m
[34m-  93:         graph that contains cycles.[0m
[34m-  94: [0m
[34m-  95:         The algorithm looks at every node, and does a[0m
[34m-  96:         dfs for each node adjacent to the node and then adds[0m
[34m-  97:         the originating node to a stack once all adjacent[0m
[34m-  98:         nodes have been searched.  In the end, the stack[0m
[34m-  99:         will be in order of a possible topological sort.[0m
[34m- 100: [0m
[34m- 101:         Topological sorts are not necessarily unique.[0m
[34m- 102: [0m
[34m- 103:         Returns:[0m
[34m- 104:             A list of vertices in a topological ordering.[0m
[34m- 105: [0m
[34m- 106:         """[0m
[34m- 107:         visited = set()[0m
[34m- 108:         stack = deque()[0m
[34m- 109:         [0m
[34m- 110:         def dfs(vertex):[0m
[34m- 111:             visited.add(vertex)[0m
[34m- 112:             for j in self.graph[vertex]:[0m
[34m- 113:                 if j not in visited:[0m
[34m- 114:                     dfs(j)[0m
[34m- 115:             [0m
[34m- 116:             stack.appendleft(vertex)[0m
[34m- 117:         [0m
[34m- 118:         for (key, _) in self.graph.items():[0m
[34m- 119:             if key not in visited:[0m
[34m- 120:                 dfs(key)[0m
[34m- 121:         [0m
[34m- 122:         return list(stack)[0m
[34m- 123: [0m
[32m+  86:     @staticmethod[0m
[32m+  87:     def topological_sort(self):[0m
[32m+  88:         """[0m
[32m+  89:         Sort the graph topologically.[0m
[32m+  90: [0m
[32m+  91:         A topological sort lists nodes in such a way[0m
[32m+  92:         that every node 's' in 's' -> 'd' directed pairs[0m
[32m+  93:         is listed before 'd.'  This will not work in a [0m
[32m+  94:         graph that contains cycles.[0m
[32m+  95: [0m
[32m+  96:         The algorithm looks at every node, and does a[0m
[32m+  97:         dfs for each node adjacent to the node and then adds[0m
[32m+  98:         the originating node to a stack once all adjacent[0m
[32m+  99:         nodes have been searched.  In the end, the stack[0m
[32m+ 100:         will be in order of a possible topological sort.[0m
[32m+ 101: [0m
[32m+ 102:         Topological sorts are not necessarily unique.[0m
[32m+ 103: [0m
[32m+ 104:         Returns:[0m
[32m+ 105:             A list of vertices in a topological ordering.[0m
[32m+ 106: [0m
[32m+ 107:         """[0m
[32m+ 108:         visited = set()[0m
[32m+ 109:         stack = deque()[0m
[32m+ 110:         [0m
[32m+ 111:         def dfs(vertex):[0m
[32m+ 112:             visited.add(vertex)[0m
[32m+ 113:             for j in self.graph[vertex]:[0m
[32m+ 114:                 if j not in visited:[0m
[32m+ 115:                     dfs(j)[0m
[32m+ 116:             [0m
[32m+ 117:             stack.appendleft(vertex)[0m
[32m+ 118:         [0m
[32m+ 119:         for (key, _) in self.graph.items():[0m
[32m+ 120:             if key not in visited:[0m
[32m+ 121:                 dfs(key)[0m
[32m+ 122:         [0m
[32m+ 123:         return list(stack)[0m
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
--------------------------------------------------------------------------------
[0.15463 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:18: TypeError: Graph.topological_sort() missing 1 required positional argument: 'self'

[36m   -[0m [#  83] SDI graph1: 
--------------------------------------------------------------------------------
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
  125:     
[34m- 126:     def __init__(self, val):[0m
[34m- 127:         self.val = val[0m
[34m- 128:         self.adjacent = {}[0m
[34m- 129:     [0m
[32m+ 126:     @staticmethod[0m
[32m+ 127:     def __init__(self, val):[0m
[32m+ 128:         self.val = val[0m
[32m+ 129:         self.adjacent = {}[0m
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
--------------------------------------------------------------------------------
[0.13857 s] [36mincompetent[0m

TypeError: graph1:148: TypeError: WeightedGraphNode.__init__() missing 1 required positional argument: 'val'

[36m   -[0m [#  84] SDI graph1: 
--------------------------------------------------------------------------------
  126:     def __init__(self, val):
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
[34m- 130:     def __str__(self):[0m
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[34m- 132:     [0m
[32m+ 130:     @staticmethod[0m
[32m+ 131:     def __str__(self):[0m
[32m+ 132:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
--------------------------------------------------------------------------------
[0.11894 s] [36mincompetent[0m

TypeError: graph1:145: TypeError: WeightedGraphNode.__str__() missing 1 required positional argument: 'self'

[36m   -[0m [#  85] SDI graph1: 
--------------------------------------------------------------------------------
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
[34m- 133:     def add_adjacent(self, node, weight=0):[0m
[34m- 134:         self.adjacent[node] = weight[0m
[34m- 135:     [0m
[32m+ 133:     @staticmethod[0m
[32m+ 134:     def add_adjacent(self, node, weight=0):[0m
[32m+ 135:         self.adjacent[node] = weight[0m
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
--------------------------------------------------------------------------------
[0.11229 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 'b', node = 1, weight = 0

>   ???
E   AttributeError: 'str' object has no attribute 'adjacent'

graph1:135: AttributeError
[36m   -[0m [#  86] SDI graph1: 
--------------------------------------------------------------------------------
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
[34m- 136:     def remove_adjacent(self, node):[0m
[34m- 137:         del self.adjacent[node][0m
[34m- 138: [0m
[32m+ 136:     @staticmethod[0m
[32m+ 137:     def remove_adjacent(self, node):[0m
[32m+ 138:         del self.adjacent[node][0m
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
--------------------------------------------------------------------------------
[0.14283 s] [36mincompetent[0m

TypeError: graph1:164: TypeError: WeightedGraphNode.remove_adjacent() missing 1 required positional argument: 'node'

[36m   -[0m [#  87] SDI graph1: 
--------------------------------------------------------------------------------
  137:         del self.adjacent[node]
  138: 
  139: class WeightedGraph:
  140:     
[34m- 141:     def __init__(self):[0m
[34m- 142:         self.vertices = {}[0m
[34m- 143:     [0m
[32m+ 141:     @staticmethod[0m
[32m+ 142:     def __init__(self):[0m
[32m+ 143:         self.vertices = {}[0m
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
--------------------------------------------------------------------------------
[0.11493 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:209: TypeError: WeightedGraph.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [#  88] SDI graph1: 
--------------------------------------------------------------------------------
  140:     
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
[34m- 144:     def __str__(self):[0m
[34m- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
[34m- 146:     [0m
[32m+ 144:     @staticmethod[0m
[32m+ 145:     def __str__(self):[0m
[32m+ 146:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
--------------------------------------------------------------------------------
[0.14360 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:250: TypeError: WeightedGraph.__str__() missing 1 required positional argument: 'self'

[36m   -[0m [#  89] SDI graph1: 
--------------------------------------------------------------------------------
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
[34m- 147:     def add_vertex(self, val):[0m
[34m- 148:         vertex = WeightedGraphNode(val)[0m
[34m- 149:         self.vertices[val] = vertex[0m
[34m- 150:     [0m
[32m+ 147:     @staticmethod[0m
[32m+ 148:     def add_vertex(self, val):[0m
[32m+ 149:         vertex = WeightedGraphNode(val)[0m
[32m+ 150:         self.vertices[val] = vertex[0m
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.13703 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:211: TypeError: WeightedGraph.add_vertex() missing 1 required positional argument: 'val'

[36m   -[0m [#  90] SDI graph1: 
--------------------------------------------------------------------------------
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
[34m- 151:     def add_edge(self, src, dst, weight=0):[0m
[34m- 152:         if src not in self.vertices:[0m
[34m- 153:             self.add_vertex(src)[0m
[34m- 154:         if dst not in self.vertices:[0m
[34m- 155:             self.add_vertex(dst)[0m
[34m- 156:         self.vertices[src].add_adjacent(dst, weight)[0m
[34m- 157:     [0m
[32m+ 151:     @staticmethod[0m
[32m+ 152:     def add_edge(self, src, dst, weight=0):[0m
[32m+ 153:         if src not in self.vertices:[0m
[32m+ 154:             self.add_vertex(src)[0m
[32m+ 155:         if dst not in self.vertices:[0m
[32m+ 156:             self.add_vertex(dst)[0m
[32m+ 157:         self.vertices[src].add_adjacent(dst, weight)[0m
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
--------------------------------------------------------------------------------
[0.17095 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = 'a', src = 'b', dst = 1, weight = 0

>   ???
E   AttributeError: 'str' object has no attribute 'vertices'

graph1:153: AttributeError
[36m   -[0m [#  91] SDI graph1: 
--------------------------------------------------------------------------------
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
[34m- 158:     def remove_edge(self, src, dst):[0m
[34m- 159:         if src not in self.vertices:[0m
[34m- 160:             return[0m
[34m- 161:         if dst not in self.vertices:[0m
[34m- 162:             return[0m
[34m- 163:         if dst in self.vertices[src].adjacent:[0m
[34m- 164:             self.vertices[src].remove_adjacent(dst)[0m
[32m+ 158:     @staticmethod[0m
[32m+ 159:     def remove_edge(self, src, dst):[0m
[32m+ 160:         if src not in self.vertices:[0m
[32m+ 161:             return[0m
[32m+ 162:         if dst not in self.vertices:[0m
[32m+ 163:             return[0m
[32m+ 164:         if dst in self.vertices[src].adjacent:[0m
[32m+ 165:             self.vertices[src].remove_adjacent(dst)[0m
--------------------------------------------------------------------------------
[0.11407 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/graph1/0-ts/test_graph1.py:235: TypeError: WeightedGraph.remove_edge() missing 1 required positional argument: 'dst'

[36m   -[0m [#  92] SDL graph1: 
--------------------------------------------------------------------------------
    2: 
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
[34m-   6:         self.val = val[0m
[32m+   6:         pass[0m
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
--------------------------------------------------------------------------------
[0.13030 s] [32mkilled[0m by 0-ts/test_graph1.py::test_graph_node

def test_graph_node():
>       assert GraphNode(4).val == 4
E       AttributeError: 'GraphNode' object has no attribute 'val'

0-ts/test_graph1.py:93: AttributeError
[36m   -[0m [#  93] SDL graph1: 
--------------------------------------------------------------------------------
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
    6:         self.val = val
[34m-   7:         self.adjacent_list = set()[0m
[32m+   7:         pass[0m
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
--------------------------------------------------------------------------------
[0.13682 s] [32mkilled[0m by 0-ts/test_graph1.py::test_insert

def test_insert():
        node = GraphNode(1)
    
        two = GraphNode(2)
        three = GraphNode(3)
>       node.add_adjacent(two)

0-ts/test_graph1.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.GraphNode object at 0x7fdde9d68c10>
node = <graph1.GraphNode object at 0x7fdde9d6b970>

>   ???
E   AttributeError: 'GraphNode' object has no attribute 'adjacent_list'

graph1:10: AttributeError
[36m   -[0m [#  94] SDL graph1: 
--------------------------------------------------------------------------------
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
[34m-  10:         self.adjacent_list.add(node)[0m
[32m+  10:         pass[0m
   11:     
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
--------------------------------------------------------------------------------
[0.12088 s] [32mkilled[0m by 0-ts/test_graph1.py::test_insert

def test_insert():
        node = GraphNode(1)
    
        two = GraphNode(2)
        three = GraphNode(3)
        node.add_adjacent(two)
    
>       assert two in node.adjacent_list
E       AssertionError

0-ts/test_graph1.py:103: AssertionError
[36m   -[0m [#  95] SDL graph1: 
--------------------------------------------------------------------------------
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
[34m-  13:         self.adjacent_list.remove(node)[0m
[32m+  13:         pass[0m
   14: 
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
--------------------------------------------------------------------------------
[0.13167 s] [32mkilled[0m by 0-ts/test_graph1.py::test_delete

def test_delete():
        node = GraphNode(1)
        two = GraphNode(2)
        node.add_adjacent(two)
    
        node.remove_adjacent(two)
    
>       assert two not in node.adjacent_list
E       AssertionError

0-ts/test_graph1.py:118: AssertionError
[36m   -[0m [#  96] SDL graph1: 
--------------------------------------------------------------------------------
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
   20:     def __init__(self, verticies):
[34m-  21:         self.graph = {}[0m
[32m+  21:         pass[0m
   22:         self.verticies = verticies
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
--------------------------------------------------------------------------------
[0.10314 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fddea1445b0>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   AttributeError: 'Graph' object has no attribute 'graph'

graph1:36: AttributeError
[36m   -[0m [#  97] SDL graph1: 
--------------------------------------------------------------------------------
   18:     '''
   19:     
   20:     def __init__(self, verticies):
   21:         self.graph = {}
[34m-  22:         self.verticies = verticies[0m
[32m+  22:         pass[0m
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
--------------------------------------------------------------------------------
[0.10302 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9ee0dc0>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   AttributeError: 'Graph' object has no attribute 'verticies'

graph1:36: AttributeError
[36m   -[0m [#  98] SDL graph1: 
--------------------------------------------------------------------------------
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
[34m-  40:             self.graph[source].append(destination)[0m
[32m+  40:             pass[0m
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
--------------------------------------------------------------------------------
[0.16093 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [#  99] SDL graph1: 
--------------------------------------------------------------------------------
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
[34m-  42:             self.graph[source] = [destination][0m
[32m+  42:             pass[0m
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
--------------------------------------------------------------------------------
[0.11031 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 100] SDL graph1: 
--------------------------------------------------------------------------------
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
[34m-  45:             self.graph[destination] = [][0m
[32m+  45:             pass[0m
   46:     
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
--------------------------------------------------------------------------------
[0.13714 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 'Anchorage'

>   ???
E   KeyError: 'Anchorage'

graph1:112: KeyError
[36m   -[0m [# 101] SDL graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
[34m-  57:         visited = [0] * self.verticies[0m
[32m+  57:         pass[0m
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.13403 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9e96dd0>

>   ???
E   UnboundLocalError: local variable 'visited' referenced before assignment

graph1:75: UnboundLocalError
[36m   -[0m [# 102] SDL graph1: 
--------------------------------------------------------------------------------
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
[34m-  62:                 return False[0m
[32m+  62:                 pass[0m
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
--------------------------------------------------------------------------------
[0.14104 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [# 103] SDL graph1: 
--------------------------------------------------------------------------------
   60:             
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
[34m-  64:                 return True[0m
[32m+  64:                 pass[0m
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
--------------------------------------------------------------------------------
[0.10686 s] [31msurvived[0m
[36m   -[0m [# 104] SDL graph1: 
--------------------------------------------------------------------------------
   61:             if visited[node] == -1:
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
[34m-  65:             visited[node] = -1[0m
[32m+  65:             pass[0m
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
--------------------------------------------------------------------------------
[0.11216 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
graph1:67: in valid
    ???
E   RecursionError: maximum recursion depth exceeded in comparison
!!! Recursion detected (same locals & position)
[36m   -[0m [# 105] SDL graph1: 
--------------------------------------------------------------------------------
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
[34m-  68:                     return False[0m
[32m+  68:                     pass[0m
   69:             return True
   70:         
   71:         for node in range(self.verticies):
   72:             
--------------------------------------------------------------------------------
[0.16173 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [# 106] SDL graph1: 
--------------------------------------------------------------------------------
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
   67:                 if not (valid(neighbor)):
   68:                     return False
[34m-  69:             return True[0m
[32m+  69:             pass[0m
   70:         
   71:         for node in range(self.verticies):
   72:             
   73:             
--------------------------------------------------------------------------------
[0.13466 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_false

def test_cycles_false():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
    
>       assert graph.has_cycle() == False
E       AssertionError

0-ts/test_graph1.py:80: AssertionError
[36m   -[0m [# 107] SDL graph1: 
--------------------------------------------------------------------------------
   75:             if not (visited[node]):
   76:                 
   77:                 if valid(node):
   78:                     
[34m-  79:                     visited = list(map((lambda x: (abs(x))), visited))[0m
[32m+  79:                     pass[0m
   80:                 else:
   81:                     
   82:                     return True
   83:         
--------------------------------------------------------------------------------
[0.09277 s] [31msurvived[0m
[36m   -[0m [# 108] SDL graph1: 
--------------------------------------------------------------------------------
   78:                     
   79:                     visited = list(map((lambda x: (abs(x))), visited))
   80:                 else:
   81:                     
[34m-  82:                     return True[0m
[32m+  82:                     pass[0m
   83:         
   84:         return False
   85:     
   86:     def topological_sort(self):
--------------------------------------------------------------------------------
[0.10804 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [# 109] SDL graph1: 
--------------------------------------------------------------------------------
   80:                 else:
   81:                     
   82:                     return True
   83:         
[34m-  84:         return False[0m
[32m+  84:         pass[0m
   85:     
   86:     def topological_sort(self):
   87:         """
   88:         Sort the graph topologically.
--------------------------------------------------------------------------------
[0.11805 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_false

def test_cycles_false():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
    
>       assert graph.has_cycle() == False
E       AssertionError

0-ts/test_graph1.py:80: AssertionError
[36m   -[0m [# 110] SDL graph1: 
--------------------------------------------------------------------------------
  103:         Returns:
  104:             A list of vertices in a topological ordering.
  105: 
  106:         """
[34m- 107:         visited = set()[0m
[32m+ 107:         pass[0m
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
--------------------------------------------------------------------------------
[0.11605 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9d6aa70>

>   ???
E   NameError: name 'visited' is not defined

graph1:119: NameError
[36m   -[0m [# 111] SDL graph1: 
--------------------------------------------------------------------------------
  104:             A list of vertices in a topological ordering.
  105: 
  106:         """
  107:         visited = set()
[34m- 108:         stack = deque()[0m
[32m+ 108:         pass[0m
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
--------------------------------------------------------------------------------
[0.12977 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
graph1:114: in dfs
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 'Anchorage'

>   ???
E   NameError: name 'stack' is not defined

graph1:116: NameError
[36m   -[0m [# 112] SDL graph1: 
--------------------------------------------------------------------------------
  107:         visited = set()
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
[34m- 111:             visited.add(vertex)[0m
[32m+ 111:             pass[0m
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
--------------------------------------------------------------------------------
[0.10571 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 113] SDL graph1: 
--------------------------------------------------------------------------------
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
[34m- 114:                     dfs(j)[0m
[32m+ 114:                     pass[0m
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
--------------------------------------------------------------------------------
[0.13887 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 114] SDL graph1: 
--------------------------------------------------------------------------------
  112:             for j in self.graph[vertex]:
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
[34m- 116:             stack.appendleft(vertex)[0m
[32m+ 116:             pass[0m
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
--------------------------------------------------------------------------------
[0.10788 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 115] SDL graph1: 
--------------------------------------------------------------------------------
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
[34m- 120:                 dfs(key)[0m
[32m+ 120:                 pass[0m
  121:         
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
--------------------------------------------------------------------------------
[0.12624 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 116] SDL graph1: 
--------------------------------------------------------------------------------
  118:         for (key, _) in self.graph.items():
  119:             if key not in visited:
  120:                 dfs(key)
  121:         
[34m- 122:         return list(stack)[0m
[32m+ 122:         pass[0m
  123: 
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
--------------------------------------------------------------------------------
[0.13155 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 117] SDL graph1: 
--------------------------------------------------------------------------------
  123: 
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
[34m- 127:         self.val = val[0m
[32m+ 127:         pass[0m
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
--------------------------------------------------------------------------------
[0.14645 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()

0-ts/test_graph1.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7fdde9d6a830>

>   ???
E   AttributeError: 'WeightedGraphNode' object has no attribute 'val'

graph1:131: AttributeError
[36m   -[0m [# 118] SDL graph1: 
--------------------------------------------------------------------------------
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
[34m- 128:         self.adjacent = {}[0m
[32m+ 128:         pass[0m
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
--------------------------------------------------------------------------------
[0.14061 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7fdde9dfc190>, node = 'b'
weight = 1

>   ???
E   AttributeError: 'WeightedGraphNode' object has no attribute 'adjacent'

graph1:134: AttributeError
[36m   -[0m [# 119] SDL graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         pass[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.13570 s] [36mincompetent[0m

TypeError: graph1:145: TypeError: sequence item 0: expected str instance, NoneType found

[36m   -[0m [# 120] SDL graph1: 
--------------------------------------------------------------------------------
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
[34m- 134:         self.adjacent[node] = weight[0m
[32m+ 134:         pass[0m
  135:     
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
--------------------------------------------------------------------------------
[0.13570 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert {'b':1,'c':3} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:225: AssertionError
[36m   -[0m [# 121] SDL graph1: 
--------------------------------------------------------------------------------
  138: 
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
[34m- 142:         self.vertices = {}[0m
[32m+ 142:         pass[0m
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
--------------------------------------------------------------------------------
[0.14296 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_vertex

def test_add_vertex():
    
        graph = WeightedGraph()
    
>       graph.add_vertex('a')

0-ts/test_graph1.py:211: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9a739a0>, val = 'a'

>   ???
E   AttributeError: 'WeightedGraph' object has no attribute 'vertices'

graph1:149: AttributeError
[36m   -[0m [# 122] SDL graph1: 
--------------------------------------------------------------------------------
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
  144:     def __str__(self):
[34m- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
[32m+ 145:         pass[0m
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
--------------------------------------------------------------------------------
[0.12531 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()
E       AssertionError

0-ts/test_graph1.py:250: AssertionError
[36m   -[0m [# 123] SDL graph1: 
--------------------------------------------------------------------------------
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
[34m- 148:         vertex = WeightedGraphNode(val)[0m
[32m+ 148:         pass[0m
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
--------------------------------------------------------------------------------
[0.11153 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_vertex

def test_add_vertex():
    
        graph = WeightedGraph()
    
>       graph.add_vertex('a')

0-ts/test_graph1.py:211: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9fc2e60>, val = 'a'

>   ???
E   NameError: name 'vertex' is not defined

graph1:149: NameError
[36m   -[0m [# 124] SDL graph1: 
--------------------------------------------------------------------------------
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
[34m- 149:         self.vertices[val] = vertex[0m
[32m+ 149:         pass[0m
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
--------------------------------------------------------------------------------
[0.11283 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_vertex

def test_add_vertex():
    
        graph = WeightedGraph()
    
        graph.add_vertex('a')
        graph.add_vertex('b')
        graph.add_vertex('c')
    
>       assert ['a','b','c'] == list(graph.vertices.keys())
E       AssertionError

0-ts/test_graph1.py:215: AssertionError
[36m   -[0m [# 125] SDL graph1: 
--------------------------------------------------------------------------------
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
[34m- 153:             self.add_vertex(src)[0m
[32m+ 153:             pass[0m
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
--------------------------------------------------------------------------------
[0.11163 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9edb910>, src = 'a', dst = 'b'
weight = 1

>   ???
E   KeyError: 'a'

graph1:156: KeyError
[36m   -[0m [# 126] SDL graph1: 
--------------------------------------------------------------------------------
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
[34m- 155:             self.add_vertex(dst)[0m
[32m+ 155:             pass[0m
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
--------------------------------------------------------------------------------
[0.11554 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [# 127] SDL graph1: 
--------------------------------------------------------------------------------
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
[34m- 156:         self.vertices[src].add_adjacent(dst, weight)[0m
[32m+ 156:         pass[0m
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
--------------------------------------------------------------------------------
[0.11448 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert {'b':1,'c':3} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:225: AssertionError
[36m   -[0m [# 128] SDL graph1: 
--------------------------------------------------------------------------------
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
[34m- 160:             return[0m
[32m+ 160:             pass[0m
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.14399 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
>       graph.remove_edge('c','a')

0-ts/test_graph1.py:239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9f7a200>, src = 'c', dst = 'a'

>   ???
E   KeyError: 'c'

graph1:163: KeyError
[36m   -[0m [# 129] SDL graph1: 
--------------------------------------------------------------------------------
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
[34m- 162:             return[0m
[32m+ 162:             pass[0m
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.15472 s] [31msurvived[0m
[36m   -[0m [# 130] SDL graph1: 
--------------------------------------------------------------------------------
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
[34m- 164:             self.vertices[src].remove_adjacent(dst)[0m
[32m+ 164:             pass[0m
--------------------------------------------------------------------------------
[0.13487 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
        graph.remove_edge('a','b')
    
        graph.remove_edge('a','c')
    
        graph.remove_edge('c','a')
    
>       assert {} == graph.vertices['a'].adjacent
E       AssertionError

0-ts/test_graph1.py:241: AssertionError
[36m   -[0m [# 131] SVD graph1: 
--------------------------------------------------------------------------------
    2: 
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
[34m-   6:         self.val = val[0m
[32m+   6:         val = val[0m
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 132] SVD graph1: 
--------------------------------------------------------------------------------
    3: class GraphNode:
    4:     
    5:     def __init__(self, val):
    6:         self.val = val
[34m-   7:         self.adjacent_list = set()[0m
[32m+   7:         adjacent_list = set()[0m
    8:     
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 133] SVD graph1: 
--------------------------------------------------------------------------------
    6:         self.val = val
    7:         self.adjacent_list = set()
    8:     
    9:     def add_adjacent(self, node):
[34m-  10:         self.adjacent_list.add(node)[0m
[32m+  10:         adjacent_list.add(node)[0m
   11:     
   12:     def remove_adjacent(self, node):
   13:         self.adjacent_list.remove(node)
   14: 
--------------------------------------------------------------------------------
[0.14002 s] [32mkilled[0m by 0-ts/test_graph1.py::test_insert

def test_insert():
        node = GraphNode(1)
    
        two = GraphNode(2)
        three = GraphNode(3)
>       node.add_adjacent(two)

0-ts/test_graph1.py:101: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.GraphNode object at 0x7fddea223fd0>
node = <graph1.GraphNode object at 0x7fddea2228c0>

>   ???
E   NameError: name 'adjacent_list' is not defined

graph1:10: NameError
[36m   -[0m [# 134] SVD graph1: 
--------------------------------------------------------------------------------
    9:     def add_adjacent(self, node):
   10:         self.adjacent_list.add(node)
   11:     
   12:     def remove_adjacent(self, node):
[34m-  13:         self.adjacent_list.remove(node)[0m
[32m+  13:         adjacent_list.remove(node)[0m
   14: 
   15: class Graph:
   16:     '''
   17:     A directed graph represented with an adjacency list.
--------------------------------------------------------------------------------
[0.11810 s] [32mkilled[0m by 0-ts/test_graph1.py::test_delete

def test_delete():
        node = GraphNode(1)
        two = GraphNode(2)
        node.add_adjacent(two)
    
>       node.remove_adjacent(two)

0-ts/test_graph1.py:116: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.GraphNode object at 0x7fdde9ca4f10>
node = <graph1.GraphNode object at 0x7fdde9ca5060>

>   ???
E   NameError: name 'adjacent_list' is not defined

graph1:13: NameError
[36m   -[0m [# 135] SVD graph1: 
--------------------------------------------------------------------------------
   17:     A directed graph represented with an adjacency list.
   18:     '''
   19:     
   20:     def __init__(self, verticies):
[34m-  21:         self.graph = {}[0m
[32m+  21:         graph = {}[0m
   22:         self.verticies = verticies
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 136] SVD graph1: 
--------------------------------------------------------------------------------
   18:     '''
   19:     
   20:     def __init__(self, verticies):
   21:         self.graph = {}
[34m-  22:         self.verticies = verticies[0m
[32m+  22:         verticies = verticies[0m
   23:     
   24:     def add_edge(self, source, destination):
   25:         '''
   26:         Add an edge to the graph.
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 137] SVD graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
[34m-  36:         if len(self.graph) > self.verticies:[0m
[32m+  36:         if len(graph) > self.verticies:[0m
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.16736 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9dc8fd0>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   NameError: name 'graph' is not defined

graph1:36: NameError
[36m   -[0m [# 138] SVD graph1: 
--------------------------------------------------------------------------------
   32:             source: the source vertex
   33:             destination: the destination vertex
   34: 
   35:         '''
[34m-  36:         if len(self.graph) > self.verticies:[0m
[32m+  36:         if len(self.graph) > verticies:[0m
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
--------------------------------------------------------------------------------
[0.13259 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9cc3010>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   NameError: name 'verticies' is not defined

graph1:36: NameError
[36m   -[0m [# 139] SVD graph1: 
--------------------------------------------------------------------------------
   35:         '''
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
[34m-  39:         if source in self.graph:[0m
[32m+  39:         if source in graph:[0m
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
--------------------------------------------------------------------------------
[0.12366 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fddea0e9750>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   NameError: name 'graph' is not defined

graph1:39: NameError
[36m   -[0m [# 140] SVD graph1: 
--------------------------------------------------------------------------------
   36:         if len(self.graph) > self.verticies:
   37:             raise IndexError('Too many verticies in graph.')
   38:         
   39:         if source in self.graph:
[34m-  40:             self.graph[source].append(destination)[0m
[32m+  40:             graph[source].append(destination)[0m
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
--------------------------------------------------------------------------------
[0.11784 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
>       graph.add_edge('Colorado','Las Vegas')

0-ts/test_graph1.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9e13070>, source = 'Colorado'
destination = 'Las Vegas'

>   ???
E   NameError: name 'graph' is not defined

graph1:40: NameError
[36m   -[0m [# 141] SVD graph1: 
--------------------------------------------------------------------------------
   38:         
   39:         if source in self.graph:
   40:             self.graph[source].append(destination)
   41:         else:
[34m-  42:             self.graph[source] = [destination][0m
[32m+  42:             graph[source] = [destination][0m
   43:         
   44:         if destination not in self.graph:
   45:             self.graph[destination] = []
   46:     
--------------------------------------------------------------------------------
[0.13088 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9cc2b30>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   NameError: name 'graph' is not defined

graph1:42: NameError
[36m   -[0m [# 142] SVD graph1: 
--------------------------------------------------------------------------------
   40:             self.graph[source].append(destination)
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
[34m-  44:         if destination not in self.graph:[0m
[32m+  44:         if destination not in graph:[0m
   45:             self.graph[destination] = []
   46:     
   47:     def has_cycle(self):
   48:         '''
--------------------------------------------------------------------------------
[0.12981 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9d43040>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   NameError: name 'graph' is not defined

graph1:44: NameError
[36m   -[0m [# 143] SVD graph1: 
--------------------------------------------------------------------------------
   41:         else:
   42:             self.graph[source] = [destination]
   43:         
   44:         if destination not in self.graph:
[34m-  45:             self.graph[destination] = [][0m
[32m+  45:             graph[destination] = [][0m
   46:     
   47:     def has_cycle(self):
   48:         '''
   49:         Detect if a graph has a cycle.
--------------------------------------------------------------------------------
[0.11089 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
>       graph.add_edge('Tampa','Colorado')

0-ts/test_graph1.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9e43310>, source = 'Tampa'
destination = 'Colorado'

>   ???
E   NameError: name 'graph' is not defined

graph1:45: NameError
[36m   -[0m [# 144] SVD graph1: 
--------------------------------------------------------------------------------
   53:             False if the graph is acyclic.
   54: 
   55:         '''
   56:         
[34m-  57:         visited = [0] * self.verticies[0m
[32m+  57:         visited = [0] * verticies[0m
   58:         
   59:         def valid(node):
   60:             
   61:             if visited[node] == -1:
--------------------------------------------------------------------------------
[0.12605 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9d4ac50>

>   ???
E   NameError: name 'verticies' is not defined

graph1:57: NameError
[36m   -[0m [# 145] SVD graph1: 
--------------------------------------------------------------------------------
   62:                 return False
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
[34m-  66:             for neighbor in self.graph[node]:[0m
[32m+  66:             for neighbor in graph[node]:[0m
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
--------------------------------------------------------------------------------
[0.17170 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:77: in has_cycle
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = 0

>   ???
E   NameError: name 'graph' is not defined

graph1:66: NameError
[36m   -[0m [# 146] SVD graph1: 
--------------------------------------------------------------------------------
   67:                 if not (valid(neighbor)):
   68:                     return False
   69:             return True
   70:         
[34m-  71:         for node in range(self.verticies):[0m
[32m+  71:         for node in range(verticies):[0m
   72:             
   73:             
   74:             
   75:             if not (visited[node]):
--------------------------------------------------------------------------------
[0.11434 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True

0-ts/test_graph1.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9fc1630>

>   ???
E   NameError: name 'verticies' is not defined

graph1:71: NameError
[36m   -[0m [# 147] SVD graph1: 
--------------------------------------------------------------------------------
  108:         stack = deque()
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
[34m- 112:             for j in self.graph[vertex]:[0m
[32m+ 112:             for j in graph[vertex]:[0m
  113:                 if j not in visited:
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
--------------------------------------------------------------------------------
[0.13107 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:120: in topological_sort
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

vertex = 'Tampa'

>   ???
E   NameError: name 'graph' is not defined

graph1:112: NameError
[36m   -[0m [# 148] SVD graph1: 
--------------------------------------------------------------------------------
  114:                     dfs(j)
  115:             
  116:             stack.appendleft(vertex)
  117:         
[34m- 118:         for (key, _) in self.graph.items():[0m
[32m+ 118:         for (key, _) in graph.items():[0m
  119:             if key not in visited:
  120:                 dfs(key)
  121:         
  122:         return list(stack)
--------------------------------------------------------------------------------
[0.13565 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']

0-ts/test_graph1.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.Graph object at 0x7fdde9fa4fa0>

>   ???
E   NameError: name 'graph' is not defined

graph1:118: NameError
[36m   -[0m [# 149] SVD graph1: 
--------------------------------------------------------------------------------
  123: 
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
[34m- 127:         self.val = val[0m
[32m+ 127:         val = val[0m
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 150] SVD graph1: 
--------------------------------------------------------------------------------
  124: class WeightedGraphNode:
  125:     
  126:     def __init__(self, val):
  127:         self.val = val
[34m- 128:         self.adjacent = {}[0m
[32m+ 128:         adjacent = {}[0m
  129:     
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 151] SVD graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         return (str(val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.11768 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()

0-ts/test_graph1.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7fdde9e41180>

>   ???
E   NameError: name 'val' is not defined

graph1:131: NameError
[36m   -[0m [# 152] SVD graph1: 
--------------------------------------------------------------------------------
  127:         self.val = val
  128:         self.adjacent = {}
  129:     
  130:     def __str__(self):
[34m- 131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])[0m
[32m+ 131:         return (str(self.val) + ' adjacent: ') + str([x for x in adjacent])[0m
  132:     
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
--------------------------------------------------------------------------------
[0.11596 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()

0-ts/test_graph1.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:145: in __str__
    ???
graph1:145: in <listcomp>
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7fdde9dc9690>

>   ???
E   NameError: name 'adjacent' is not defined

graph1:131: NameError
[36m   -[0m [# 153] SVD graph1: 
--------------------------------------------------------------------------------
  130:     def __str__(self):
  131:         return (str(self.val) + ' adjacent: ') + str([x for x in self.adjacent])
  132:     
  133:     def add_adjacent(self, node, weight=0):
[34m- 134:         self.adjacent[node] = weight[0m
[32m+ 134:         adjacent[node] = weight[0m
  135:     
  136:     def remove_adjacent(self, node):
  137:         del self.adjacent[node]
  138: 
--------------------------------------------------------------------------------
[0.15105 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:156: in add_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7fdde9e0ac20>, node = 'b'
weight = 1

>   ???
E   NameError: name 'adjacent' is not defined

graph1:134: NameError
[36m   -[0m [# 154] SVD graph1: 
--------------------------------------------------------------------------------
  133:     def add_adjacent(self, node, weight=0):
  134:         self.adjacent[node] = weight
  135:     
  136:     def remove_adjacent(self, node):
[34m- 137:         del self.adjacent[node][0m
[32m+ 137:         del adjacent[node][0m
  138: 
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
--------------------------------------------------------------------------------
[0.11502 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
graph1:164: in remove_edge
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraphNode object at 0x7fdde9cdbfa0>, node = 'b'

>   ???
E   NameError: name 'adjacent' is not defined

graph1:137: NameError
[36m   -[0m [# 155] SVD graph1: 
--------------------------------------------------------------------------------
  138: 
  139: class WeightedGraph:
  140:     
  141:     def __init__(self):
[34m- 142:         self.vertices = {}[0m
[32m+ 142:         vertices = {}[0m
  143:     
  144:     def __str__(self):
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 156] SVD graph1: 
--------------------------------------------------------------------------------
  141:     def __init__(self):
  142:         self.vertices = {}
  143:     
  144:     def __str__(self):
[34m- 145:         return ', '.join([node.__str__() for node in self.vertices.values()])[0m
[32m+ 145:         return ', '.join([node.__str__() for node in vertices.values()])[0m
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
--------------------------------------------------------------------------------
[0.14373 s] [32mkilled[0m by 0-ts/test_graph1.py::test_print_graph

def test_print_graph():
        graph = WeightedGraph()
    
        graph.add_edge('a','b',1)
        graph.add_edge('a','c',3)
        graph.add_edge('b','c',2)
    
>       assert "a adjacent: ['b', 'c'], b adjacent: ['c'], c adjacent: []" == graph.__str__()

0-ts/test_graph1.py:250: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9e13a00>

>   ???
E   NameError: name 'vertices' is not defined

graph1:145: NameError
[36m   -[0m [# 157] SVD graph1: 
--------------------------------------------------------------------------------
  145:         return ', '.join([node.__str__() for node in self.vertices.values()])
  146:     
  147:     def add_vertex(self, val):
  148:         vertex = WeightedGraphNode(val)
[34m- 149:         self.vertices[val] = vertex[0m
[32m+ 149:         vertices[val] = vertex[0m
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
--------------------------------------------------------------------------------
[0.12958 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_vertex

def test_add_vertex():
    
        graph = WeightedGraph()
    
>       graph.add_vertex('a')

0-ts/test_graph1.py:211: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fddea6607f0>, val = 'a'

>   ???
E   NameError: name 'vertices' is not defined

graph1:149: NameError
[36m   -[0m [# 158] SVD graph1: 
--------------------------------------------------------------------------------
  148:         vertex = WeightedGraphNode(val)
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
[34m- 152:         if src not in self.vertices:[0m
[32m+ 152:         if src not in vertices:[0m
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
--------------------------------------------------------------------------------
[0.14090 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fddea04a740>, src = 'a', dst = 'b'
weight = 1

>   ???
E   NameError: name 'vertices' is not defined

graph1:152: NameError
[36m   -[0m [# 159] SVD graph1: 
--------------------------------------------------------------------------------
  149:         self.vertices[val] = vertex
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
[34m- 153:             self.add_vertex(src)[0m
[32m+ 153:             add_vertex(src)[0m
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
--------------------------------------------------------------------------------
[0.11293 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fddea0ef6d0>, src = 'a', dst = 'b'
weight = 1

>   ???
E   NameError: name 'add_vertex' is not defined

graph1:153: NameError
[36m   -[0m [# 160] SVD graph1: 
--------------------------------------------------------------------------------
  150:     
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
[34m- 154:         if dst not in self.vertices:[0m
[32m+ 154:         if dst not in vertices:[0m
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
--------------------------------------------------------------------------------
[0.13176 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9e07bb0>, src = 'a', dst = 'b'
weight = 1

>   ???
E   NameError: name 'vertices' is not defined

graph1:154: NameError
[36m   -[0m [# 161] SVD graph1: 
--------------------------------------------------------------------------------
  151:     def add_edge(self, src, dst, weight=0):
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
[34m- 155:             self.add_vertex(dst)[0m
[32m+ 155:             add_vertex(dst)[0m
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
--------------------------------------------------------------------------------
[0.16560 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9ed0430>, src = 'a', dst = 'b'
weight = 1

>   ???
E   NameError: name 'add_vertex' is not defined

graph1:155: NameError
[36m   -[0m [# 162] SVD graph1: 
--------------------------------------------------------------------------------
  152:         if src not in self.vertices:
  153:             self.add_vertex(src)
  154:         if dst not in self.vertices:
  155:             self.add_vertex(dst)
[34m- 156:         self.vertices[src].add_adjacent(dst, weight)[0m
[32m+ 156:         vertices[src].add_adjacent(dst, weight)[0m
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
--------------------------------------------------------------------------------
[0.13982 s] [32mkilled[0m by 0-ts/test_graph1.py::test_add_edge

def test_add_edge():
    
        graph = WeightedGraph()
    
>       graph.add_edge('a','b',1)

0-ts/test_graph1.py:221: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9f2a8f0>, src = 'a', dst = 'b'
weight = 1

>   ???
E   NameError: name 'vertices' is not defined

graph1:156: NameError
[36m   -[0m [# 163] SVD graph1: 
--------------------------------------------------------------------------------
  155:             self.add_vertex(dst)
  156:         self.vertices[src].add_adjacent(dst, weight)
  157:     
  158:     def remove_edge(self, src, dst):
[34m- 159:         if src not in self.vertices:[0m
[32m+ 159:         if src not in vertices:[0m
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
--------------------------------------------------------------------------------
[0.14418 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9e12fe0>, src = 'a', dst = 'b'

>   ???
E   NameError: name 'vertices' is not defined

graph1:159: NameError
[36m   -[0m [# 164] SVD graph1: 
--------------------------------------------------------------------------------
  157:     
  158:     def remove_edge(self, src, dst):
  159:         if src not in self.vertices:
  160:             return
[34m- 161:         if dst not in self.vertices:[0m
[32m+ 161:         if dst not in vertices:[0m
  162:             return
  163:         if dst in self.vertices[src].adjacent:
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.14541 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9f53640>, src = 'a', dst = 'b'

>   ???
E   NameError: name 'vertices' is not defined

graph1:161: NameError
[36m   -[0m [# 165] SVD graph1: 
--------------------------------------------------------------------------------
  159:         if src not in self.vertices:
  160:             return
  161:         if dst not in self.vertices:
  162:             return
[34m- 163:         if dst in self.vertices[src].adjacent:[0m
[32m+ 163:         if dst in vertices[src].adjacent:[0m
  164:             self.vertices[src].remove_adjacent(dst)
--------------------------------------------------------------------------------
[0.14402 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9fa6ad0>, src = 'a', dst = 'b'

>   ???
E   NameError: name 'vertices' is not defined

graph1:163: NameError
[36m   -[0m [# 166] SVD graph1: 
--------------------------------------------------------------------------------
  160:             return
  161:         if dst not in self.vertices:
  162:             return
  163:         if dst in self.vertices[src].adjacent:
[34m- 164:             self.vertices[src].remove_adjacent(dst)[0m
[32m+ 164:             vertices[src].remove_adjacent(dst)[0m
--------------------------------------------------------------------------------
[0.11644 s] [32mkilled[0m by 0-ts/test_graph1.py::test_remove_adjacent

def test_remove_adjacent():
    
        graph = WeightedGraph()
    
        graph.add_edge('a','b',2)
    
>       graph.remove_edge('a','b')

0-ts/test_graph1.py:235: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph1.WeightedGraph object at 0x7fdde9d69840>, src = 'a', dst = 'b'

>   ???
E   NameError: name 'vertices' is not defined

graph1:164: NameError
[36m   -[0m [# 167] ZIL graph1: 
--------------------------------------------------------------------------------
   63:             elif visited[node] == 1:
   64:                 return True
   65:             visited[node] = -1
   66:             for neighbor in self.graph[node]:
[34m-  67:                 if not (valid(neighbor)):[0m
[34m-  68:                     return False[0m
[32m+  67:                 break[0m
[32m+  68:             [0m
   69:             return True
   70:         
   71:         for node in range(self.verticies):
   72:             
--------------------------------------------------------------------------------
[0.13478 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [# 168] ZIL graph1: 
--------------------------------------------------------------------------------
   71:         for node in range(self.verticies):
   72:             
   73:             
   74:             
[34m-  75:             if not (visited[node]):[0m
[34m-  76:                 [0m
[34m-  77:                 if valid(node):[0m
[34m-  78:                     [0m
[34m-  79:                     visited = list(map((lambda x: (abs(x))), visited))[0m
[34m-  80:                 else:[0m
[34m-  81:                     [0m
[34m-  82:                     return True[0m
[32m+  75:             break[0m
[32m+  76:         [0m
[32m+  77:         [0m
[32m+  78:         [0m
[32m+  79:         [0m
[32m+  80:         [0m
[32m+  81:         [0m
[32m+  82:         [0m
   83:         
   84:         return False
   85:     
   86:     def topological_sort(self):
--------------------------------------------------------------------------------
[0.13492 s] [32mkilled[0m by 0-ts/test_graph1.py::test_cycles_true

def test_cycles_true():
    
        graph = Graph(4)
    
        graph.add_edge(0,1)
        graph.add_edge(1,2)
        graph.add_edge(2,3)
        graph.add_edge(3,0)
    
>       assert graph.has_cycle() == True
E       AssertionError

0-ts/test_graph1.py:30: AssertionError
[36m   -[0m [# 169] ZIL graph1: 
--------------------------------------------------------------------------------
  109:         
  110:         def dfs(vertex):
  111:             visited.add(vertex)
  112:             for j in self.graph[vertex]:
[34m- 113:                 if j not in visited:[0m
[34m- 114:                     dfs(j)[0m
[32m+ 113:                 break[0m
[32m+ 114:             [0m
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
--------------------------------------------------------------------------------
[0.14202 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[36m   -[0m [# 170] ZIL graph1: 
--------------------------------------------------------------------------------
  115:             
  116:             stack.appendleft(vertex)
  117:         
  118:         for (key, _) in self.graph.items():
[34m- 119:             if key not in visited:[0m
[34m- 120:                 dfs(key)[0m
[32m+ 119:             break[0m
[32m+ 120:         [0m
  121:         
  122:         return list(stack)
  123: 
  124: class WeightedGraphNode:
--------------------------------------------------------------------------------
[0.11796 s] [32mkilled[0m by 0-ts/test_graph1.py::test_non_int

def test_non_int():
    
        graph = Graph(4)
    
        graph.add_edge('Tampa','Colorado')
        graph.add_edge('Colorado','Las Vegas')
        graph.add_edge('Las Vegas', 'Seattle')
        graph.add_edge('Seattle','Anchorage')
    
>       assert graph.topological_sort() == ['Tampa', 'Colorado', 'Las Vegas', 'Seattle', 'Anchorage']
E       AssertionError

0-ts/test_graph1.py:18: AssertionError
[34m[*][0m Mutation score [34.34075 s]: [1m[34m91.6%[0m
[36m   -[0m all: 170
[36m   -[0m killed: 131 (77.1%)
[36m   -[0m survived: 12 (7.1%)
[36m   -[0m incompetent: 27 (15.9%)
[36m   -[0m timeout: 0 (0.0%)
