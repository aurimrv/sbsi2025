/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:25: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert ll.data is 5 and ll.next is None
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:31: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert ll.head.data is 5
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:37: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert ll.head.data is 5
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:47: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[1]._length is 1
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:52: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2]._length is 5
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:57: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[0]._length is 0
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:72: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert ll.head.data is 4
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:78: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert returned is 5
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:111: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[0].size() is 0
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:116: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].size() is 5
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:141: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert ll.size() is 6
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:146: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].search(2).data is 2
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:157: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].size() is 4
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:163: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].size() is 4
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:169: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].size() is 4
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:175: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].size() is 5
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:181: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[0].size() is 0
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:187: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[1].size() is 0
/home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:193: SyntaxWarning: "is" with a literal. Did you mean "=="?
  assert test_lists[2].size() is 4
[34m[*][0m Start mutation process:
[36m   -[0m targets: linked_list2.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 30 tests passed:
[36m   -[0m test_linked_list2 [0.20470 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOD linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:2] + ')'[0m
--------------------------------------------------------------------------------
[0.15092 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b060745e0>, <linked_list2.LinkedList object at 0x7f6b06074760>, <linked_list2.LinkedList object at 0x7f6b06074fa0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#   2] AOR linked_list2: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
[34m- 85:             display += str(curr.data) + ', '[0m
[32m+ 85:             display += str(curr.data) - ', '[0m
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.14262 s] [36mincompetent[0m

TypeError: linked_list2:85: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   3] AOR linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:+2] + ')'[0m
--------------------------------------------------------------------------------
[0.12089 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b060e0850>, <linked_list2.LinkedList object at 0x7f6b060e02b0>, <linked_list2.LinkedList object at 0x7f6b060e0ac0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#   4] AOR linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:-2] - ')'[0m
--------------------------------------------------------------------------------
[0.12411 s] [36mincompetent[0m

TypeError: linked_list2:87: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   5] ASR linked_list2: 
--------------------------------------------------------------------------------
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
[34m- 45:         self._length += 1[0m
[32m+ 45:         self._length -= 1[0m
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
--------------------------------------------------------------------------------
[0.13497 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_size_one

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b9120>, <linked_list2.LinkedList object at 0x7f6b061b8940>, <linked_list2.LinkedList object at 0x7f6b061bbaf0>)

    def test_size_one(test_lists):
        """Test ll of one has length of one."""
>       assert test_lists[1]._length is 1
E       AssertionError

0-ts/test_linked_list2.py:47: AssertionError
[36m   -[0m [#   6] ASR linked_list2: 
--------------------------------------------------------------------------------
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
[34m- 53:         self._length -= 1[0m
[32m+ 53:         self._length += 1[0m
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[0.14165 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_decreases_length

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b8070>, <linked_list2.LinkedList object at 0x7f6b061ba560>, <linked_list2.LinkedList object at 0x7f6b061bab00>)

    def test_pop_decreases_length(test_lists):
        """Test pop decreases length."""
        ll = test_lists[2]
        length = ll._length
        ll.pop()
>       assert ll._length is length - 1
E       AssertionError

0-ts/test_linked_list2.py:86: AssertionError
[36m   -[0m [#   7] ASR linked_list2: 
--------------------------------------------------------------------------------
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
[34m- 73:             self._length -= 1[0m
[32m+ 73:             self._length += 1[0m
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
--------------------------------------------------------------------------------
[0.13333 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list_one_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b06116980>, <linked_list2.LinkedList object at 0x7f6b06115f90>, <linked_list2.LinkedList object at 0x7f6b06116050>)

    def test_remove_on_list_one_list(test_lists):
        """Test remove from list of 1."""
        test_lists[1].remove(5)
>       assert test_lists[1].size() is 0
E       AssertionError

0-ts/test_linked_list2.py:187: AssertionError
[36m   -[0m [#   8] ASR linked_list2: 
--------------------------------------------------------------------------------
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
[34m- 77:                 self._length -= 1[0m
[32m+ 77:                 self._length += 1[0m
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[0.14827 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b061bab30>, <linked_list2.LinkedList object at 0x7f6b061b9570>, <linked_list2.LinkedList object at 0x7f6b061ba6e0>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#   9] ASR linked_list2: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
[34m- 85:             display += str(curr.data) + ', '[0m
[32m+ 85:             display -= str(curr.data) + ', '[0m
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.12609 s] [36mincompetent[0m

TypeError: linked_list2:85: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

[36m   -[0m [#  10] CDI linked_list2: 
--------------------------------------------------------------------------------
   6: 
   7:     Data attribute for data storage and Next for pointer to next node.
   8:     '''
   9:     
[34m- 10:     def __init__(self, data, next_node=None):[0m
[34m- 11:         '''Attribute data and next_node.'''[0m
[34m- 12:         self.data = data[0m
[34m- 13:         self.next = next_node[0m
[34m- 14: [0m
[32m+ 10:     @classmethod[0m
[32m+ 11:     def __init__(self, data, next_node=None):[0m
[32m+ 12:         '''Attribute data and next_node.'''[0m
[32m+ 13:         self.data = data[0m
[32m+ 14:         self.next = next_node[0m
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
  18: 
--------------------------------------------------------------------------------
[0.14009 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b0605e140>, <linked_list2.LinkedList object at 0x7f6b0605e530>, <linked_list2.LinkedList object at 0x7f6b0605d0c0>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
        ll.pop()
>       assert ll.head.data is 4
E       AssertionError

0-ts/test_linked_list2.py:72: AssertionError
[36m   -[0m [#  11] CDI linked_list2: 
--------------------------------------------------------------------------------
  26:     display() - will return a unicode string representing the list as
  27:     if it were a Python tuple literal: "(12, \'sam\', 37, \'tango\')"
  28:     '''
  29:     
[34m- 30:     def __init__(self, data=None):[0m
[34m- 31:         '''Linked list initialized with head.'''[0m
[34m- 32:         self._length = 0[0m
[34m- 33:         self.head = None[0m
[34m- 34:         try:[0m
[34m- 35:             for val in data:[0m
[34m- 36:                 self.push(val)[0m
[34m- 37:         except TypeError:[0m
[34m- 38:             if data:[0m
[34m- 39:                 self.push(data)[0m
[34m- 40:     [0m
[32m+ 30:     @classmethod[0m
[32m+ 31:     def __init__(self, data=None):[0m
[32m+ 32:         '''Linked list initialized with head.'''[0m
[32m+ 33:         self._length = 0[0m
[32m+ 34:         self.head = None[0m
[32m+ 35:         try:[0m
[32m+ 36:             for val in data:[0m
[32m+ 37:                 self.push(val)[0m
[32m+ 38:         except TypeError:[0m
[32m+ 39:             if data:[0m
[32m+ 40:                 self.push(data)[0m
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
--------------------------------------------------------------------------------
[0.13340 s] [36mincompetent[0m

TypeError: linked_list2:40: TypeError: LinkedList.push() missing 1 required positional argument: 'val'

[36m   -[0m [#  12] CDI linked_list2: 
--------------------------------------------------------------------------------
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
[34m- 41:     def push(self, val):[0m
[34m- 42:         '''Insert a value at the head of the list.'''[0m
[34m- 43:         old_head = self.head[0m
[34m- 44:         self.head = Node(val, old_head)[0m
[34m- 45:         self._length += 1[0m
[34m- 46:     [0m
[32m+ 41:     @classmethod[0m
[32m+ 42:     def push(self, val):[0m
[32m+ 43:         '''Insert a value at the head of the list.'''[0m
[32m+ 44:         old_head = self.head[0m
[32m+ 45:         self.head = Node(val, old_head)[0m
[32m+ 46:         self._length += 1[0m
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
--------------------------------------------------------------------------------
[0.13063 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

self = <linked_list2.LinkedList object at 0x7f6b06116410>, data = 5

>   ???
E   TypeError: 'int' object is not iterable

linked_list2:35: TypeError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
>       one = LinkedList(5)

0-ts/test_linked_list2.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linked_list2:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linked_list2.LinkedList'>, val = 5

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linked_list2:44: AttributeError
[36m   -[0m [#  13] CDI linked_list2: 
--------------------------------------------------------------------------------
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
[34m- 47:     def pop(self):[0m
[34m- 48:         '''Remove the first value and return it.'''[0m
[34m- 49:         if not (self.head):[0m
[34m- 50:             raise IndexError('Cannot pop from an empty list')[0m
[34m- 51:         to_return = self.head[0m
[34m- 52:         self.head = self.head.next[0m
[34m- 53:         self._length -= 1[0m
[34m- 54:         return to_return.data[0m
[34m- 55:     [0m
[32m+ 47:     @classmethod[0m
[32m+ 48:     def pop(self):[0m
[32m+ 49:         '''Remove the first value and return it.'''[0m
[32m+ 50:         if not (self.head):[0m
[32m+ 51:             raise IndexError('Cannot pop from an empty list')[0m
[32m+ 52:         to_return = self.head[0m
[32m+ 53:         self.head = self.head.next[0m
[32m+ 54:         self._length -= 1[0m
[32m+ 55:         return to_return.data[0m
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
--------------------------------------------------------------------------------
[0.13318 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fff8b0>, <linked_list2.LinkedList object at 0x7f6b05fff790>, <linked_list2.LinkedList object at 0x7f6b05fff190>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linked_list2.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linked_list2:50: AttributeError
[36m   -[0m [#  14] CDI linked_list2: 
--------------------------------------------------------------------------------
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
[34m- 56:     def size(self):[0m
[34m- 57:         '''Return the length of the list.'''[0m
[34m- 58:         return self._length[0m
[34m- 59:     [0m
[32m+ 56:     @classmethod[0m
[32m+ 57:     def size(self):[0m
[32m+ 58:         '''Return the length of the list.'''[0m
[32m+ 59:         return self._length[0m
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
--------------------------------------------------------------------------------
[0.14358 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_size_function

test_lists = (<linked_list2.LinkedList object at 0x7f6b05ffd690>, <linked_list2.LinkedList object at 0x7f6b05ffda50>, <linked_list2.LinkedList object at 0x7f6b05ffdde0>)

    def test_size_function(test_lists):
        """Test size on empty list."""
>       assert test_lists[0].size() is 0

0-ts/test_linked_list2.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linked_list2.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute '_length'

linked_list2:59: AttributeError
[36m   -[0m [#  15] CDI linked_list2: 
--------------------------------------------------------------------------------
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
[34m- 60:     def search(self, val):[0m
[34m- 61:         '''Return the node containing val.'''[0m
[34m- 62:         curr = self.head[0m
[34m- 63:         while curr:[0m
[34m- 64:             if curr.data == val:[0m
[34m- 65:                 return curr[0m
[34m- 66:             curr = curr.next[0m
[34m- 67:     [0m
[32m+ 60:     @classmethod[0m
[32m+ 61:     def search(self, val):[0m
[32m+ 62:         '''Return the node containing val.'''[0m
[32m+ 63:         curr = self.head[0m
[32m+ 64:         while curr:[0m
[32m+ 65:             if curr.data == val:[0m
[32m+ 66:                 return curr[0m
[32m+ 67:             curr = curr.next[0m
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[0.14059 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f61e40>, <linked_list2.LinkedList object at 0x7f6b05f63b20>, <linked_list2.LinkedList object at 0x7f6b05f63bb0>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2

0-ts/test_linked_list2.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linked_list2.LinkedList'>, val = 2

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linked_list2:63: AttributeError
[36m   -[0m [#  16] CDI linked_list2: 
--------------------------------------------------------------------------------
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
  67:     
[34m- 68:     def remove(self, val):[0m
[34m- 69:         '''Remove node from list if exists.'''[0m
[34m- 70:         curr = self.head[0m
[34m- 71:         if (curr and val is self.head.data):[0m
[34m- 72:             self.head = self.head.next[0m
[34m- 73:             self._length -= 1[0m
[34m- 74:         while curr:[0m
[34m- 75:             if (curr.next and curr.next.data == val):[0m
[34m- 76:                 curr.next = curr.next.next[0m
[34m- 77:                 self._length -= 1[0m
[34m- 78:             curr = curr.next[0m
[34m- 79:     [0m
[32m+ 68:     @classmethod[0m
[32m+ 69:     def remove(self, val):[0m
[32m+ 70:         '''Remove node from list if exists.'''[0m
[32m+ 71:         curr = self.head[0m
[32m+ 72:         if (curr and val is self.head.data):[0m
[32m+ 73:             self.head = self.head.next[0m
[32m+ 74:             self._length -= 1[0m
[32m+ 75:         while curr:[0m
[32m+ 76:             if (curr.next and curr.next.data == val):[0m
[32m+ 77:                 curr.next = curr.next.next[0m
[32m+ 78:                 self._length -= 1[0m
[32m+ 79:             curr = curr.next[0m
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
--------------------------------------------------------------------------------
[0.14426 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b06078d60>, <linked_list2.LinkedList object at 0x7f6b0607a080>, <linked_list2.LinkedList object at 0x7f6b0607ab90>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
>       test_lists[2].remove(4)

0-ts/test_linked_list2.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linked_list2.LinkedList'>, val = 4

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linked_list2:71: AttributeError
[36m   -[0m [#  17] CDI linked_list2: 
--------------------------------------------------------------------------------
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
[34m- 80:     def display(self):[0m
[34m- 81:         '''Display list as a tuple.'''[0m
[34m- 82:         curr = self.head[0m
[34m- 83:         display = '('[0m
[34m- 84:         while curr:[0m
[34m- 85:             display += str(curr.data) + ', '[0m
[34m- 86:             curr = curr.next[0m
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 80:     @classmethod[0m
[32m+ 81:     def display(self):[0m
[32m+ 82:         '''Display list as a tuple.'''[0m
[32m+ 83:         curr = self.head[0m
[32m+ 84:         display = '('[0m
[32m+ 85:         while curr:[0m
[32m+ 86:             display += str(curr.data) + ', '[0m
[32m+ 87:             curr = curr.next[0m
[32m+ 88:         return display[:-2] + ')'[0m
--------------------------------------------------------------------------------
[0.12971 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b0607bc40>, <linked_list2.LinkedList object at 0x7f6b0607add0>, <linked_list2.LinkedList object at 0x7f6b0607a800>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'

0-ts/test_linked_list2.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'linked_list2.LinkedList'>

>   ???
E   AttributeError: type object 'LinkedList' has no attribute 'head'

linked_list2:83: AttributeError
[36m   -[0m [#  18] COD linked_list2: 
--------------------------------------------------------------------------------
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
[34m- 49:         if not (self.head):[0m
[32m+ 49:         if self.head:[0m
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
--------------------------------------------------------------------------------
[0.10946 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b06114a90>, <linked_list2.LinkedList object at 0x7f6b06117a60>, <linked_list2.LinkedList object at 0x7f6b06117a90>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b06117a90>

>   ???
E   IndexError: Cannot pop from an empty list

linked_list2:50: IndexError
[36m   -[0m [#  19] COI linked_list2: 
--------------------------------------------------------------------------------
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
[34m- 38:             if data:[0m
[32m+ 38:             if not data:[0m
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
--------------------------------------------------------------------------------
[0.10624 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b06079b10>, <linked_list2.LinkedList object at 0x7f6b060797b0>, <linked_list2.LinkedList object at 0x7f6b060797e0>)

    def test_push_adds_to_the_head(test_lists):
        """Test push, adds to the head of the list."""
        ll = test_lists[1]
>       assert ll.head.data is 5
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:31: AttributeError
[36m   -[0m [#  20] COI linked_list2: 
--------------------------------------------------------------------------------
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
[34m- 49:         if not (self.head):[0m
[32m+ 49:         if not ((not (self.head))):[0m
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
--------------------------------------------------------------------------------
[0.13959 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f88f10>, <linked_list2.LinkedList object at 0x7f6b05f8af80>, <linked_list2.LinkedList object at 0x7f6b05f8b7c0>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05f8b7c0>

>   ???
E   IndexError: Cannot pop from an empty list

linked_list2:50: IndexError
[36m   -[0m [#  21] COI linked_list2: 
--------------------------------------------------------------------------------
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
[34m- 63:         while curr:[0m
[32m+ 63:         while not curr:[0m
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
  67:     
--------------------------------------------------------------------------------
[0.14657 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b060b5c30>, <linked_list2.LinkedList object at 0x7f6b060b7d00>, <linked_list2.LinkedList object at 0x7f6b060b4820>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:146: AttributeError
[36m   -[0m [#  22] COI linked_list2: 
--------------------------------------------------------------------------------
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
[34m- 64:             if curr.data == val:[0m
[32m+ 64:             if not (curr.data == val):[0m
  65:                 return curr
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
--------------------------------------------------------------------------------
[0.13803 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f8a110>, <linked_list2.LinkedList object at 0x7f6b05f8b580>, <linked_list2.LinkedList object at 0x7f6b05f8b820>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2
E       AssertionError

0-ts/test_linked_list2.py:146: AssertionError
[36m   -[0m [#  23] COI linked_list2: 
--------------------------------------------------------------------------------
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
[34m- 71:         if (curr and val is self.head.data):[0m
[32m+ 71:         if not ((curr and val is self.head.data)):[0m
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[0.15117 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b060b7f70>, <linked_list2.LinkedList object at 0x7f6b060b66b0>, <linked_list2.LinkedList object at 0x7f6b060b6e90>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#  24] COI linked_list2: 
--------------------------------------------------------------------------------
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
[34m- 74:         while curr:[0m
[32m+ 74:         while not curr:[0m
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
--------------------------------------------------------------------------------
[0.14726 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b060c3a60>, <linked_list2.LinkedList object at 0x7f6b060c3220>, <linked_list2.LinkedList object at 0x7f6b060c3160>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#  25] COI linked_list2: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
[34m- 75:             if (curr.next and curr.next.data == val):[0m
[32m+ 75:             if not ((curr.next and curr.next.data == val)):[0m
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
--------------------------------------------------------------------------------
[0.11925 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b83d0>, <linked_list2.LinkedList object at 0x7f6b061b9570>, <linked_list2.LinkedList object at 0x7f6b061b9d80>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#  26] COI linked_list2: 
--------------------------------------------------------------------------------
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
[34m- 84:         while curr:[0m
[32m+ 84:         while not curr:[0m
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.15453 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b060b4580>, <linked_list2.LinkedList object at 0x7f6b060b4190>, <linked_list2.LinkedList object at 0x7f6b060b44f0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  27] CRP linked_list2: 
--------------------------------------------------------------------------------
  28:     '''
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
[34m- 32:         self._length = 0[0m
[32m+ 32:         self._length = 1[0m
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
--------------------------------------------------------------------------------
[0.10714 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_size_one

test_lists = (<linked_list2.LinkedList object at 0x7f6b061e4fa0>, <linked_list2.LinkedList object at 0x7f6b061e4e80>, <linked_list2.LinkedList object at 0x7f6b061e7580>)

    def test_size_one(test_lists):
        """Test ll of one has length of one."""
>       assert test_lists[1]._length is 1
E       AssertionError

0-ts/test_linked_list2.py:47: AssertionError
[36m   -[0m [#  28] CRP linked_list2: 
--------------------------------------------------------------------------------
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
[34m- 45:         self._length += 1[0m
[32m+ 45:         self._length += 2[0m
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
--------------------------------------------------------------------------------
[0.14002 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_size_one

test_lists = (<linked_list2.LinkedList object at 0x7f6b061e5540>, <linked_list2.LinkedList object at 0x7f6b061e7460>, <linked_list2.LinkedList object at 0x7f6b061e6230>)

    def test_size_one(test_lists):
        """Test ll of one has length of one."""
>       assert test_lists[1]._length is 1
E       AssertionError

0-ts/test_linked_list2.py:47: AssertionError
[36m   -[0m [#  29] CRP linked_list2: 
--------------------------------------------------------------------------------
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
[34m- 50:             raise IndexError('Cannot pop from an empty list')[0m
[32m+ 50:             raise IndexError('mutpy')[0m
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
--------------------------------------------------------------------------------
[0.16603 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_cant_pop_on_empty_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbf580>, <linked_list2.LinkedList object at 0x7f6b05fbe0e0>, <linked_list2.LinkedList object at 0x7f6b05fbf6d0>)

    def test_cant_pop_on_empty_list(test_lists):
        """Test pop on an empty list raises error."""
        with pytest.raises(IndexError, match='Cannot pop from an empty list'):
>           test_lists[0].pop()

0-ts/test_linked_list2.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fbf580>

>   ???
E   IndexError: mutpy

linked_list2:50: IndexError

During handling of the above exception, another exception occurred:

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbf580>, <linked_list2.LinkedList object at 0x7f6b05fbe0e0>, <linked_list2.LinkedList object at 0x7f6b05fbf6d0>)

    def test_cant_pop_on_empty_list(test_lists):
        """Test pop on an empty list raises error."""
>       with pytest.raises(IndexError, match='Cannot pop from an empty list'):
E       AssertionError: Regex pattern 'Cannot pop from an empty list' does not match 'mutpy'.

0-ts/test_linked_list2.py:105: AssertionError
[36m   -[0m [#  30] CRP linked_list2: 
--------------------------------------------------------------------------------
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
[34m- 50:             raise IndexError('Cannot pop from an empty list')[0m
[32m+ 50:             raise IndexError('')[0m
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
--------------------------------------------------------------------------------
[0.16152 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_cant_pop_on_empty_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f33460>, <linked_list2.LinkedList object at 0x7f6b05f307f0>, <linked_list2.LinkedList object at 0x7f6b05f30550>)

    def test_cant_pop_on_empty_list(test_lists):
        """Test pop on an empty list raises error."""
        with pytest.raises(IndexError, match='Cannot pop from an empty list'):
>           test_lists[0].pop()

0-ts/test_linked_list2.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05f33460>

>   ???
E   IndexError

linked_list2:50: IndexError

During handling of the above exception, another exception occurred:

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f33460>, <linked_list2.LinkedList object at 0x7f6b05f307f0>, <linked_list2.LinkedList object at 0x7f6b05f30550>)

    def test_cant_pop_on_empty_list(test_lists):
        """Test pop on an empty list raises error."""
>       with pytest.raises(IndexError, match='Cannot pop from an empty list'):
E       AssertionError: Regex pattern 'Cannot pop from an empty list' does not match ''.

0-ts/test_linked_list2.py:105: AssertionError
[36m   -[0m [#  31] CRP linked_list2: 
--------------------------------------------------------------------------------
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
[34m- 53:         self._length -= 1[0m
[32m+ 53:         self._length -= 2[0m
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[0.15393 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_decreases_length

test_lists = (<linked_list2.LinkedList object at 0x7f6b0605d1b0>, <linked_list2.LinkedList object at 0x7f6b0605f010>, <linked_list2.LinkedList object at 0x7f6b0605f070>)

    def test_pop_decreases_length(test_lists):
        """Test pop decreases length."""
        ll = test_lists[2]
        length = ll._length
        ll.pop()
>       assert ll._length is length - 1
E       AssertionError

0-ts/test_linked_list2.py:86: AssertionError
[36m   -[0m [#  32] CRP linked_list2: 
--------------------------------------------------------------------------------
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
[34m- 73:             self._length -= 1[0m
[32m+ 73:             self._length -= 2[0m
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
--------------------------------------------------------------------------------
[0.12361 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list_one_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b80d0>, <linked_list2.LinkedList object at 0x7f6b061bb1c0>, <linked_list2.LinkedList object at 0x7f6b061bb9a0>)

    def test_remove_on_list_one_list(test_lists):
        """Test remove from list of 1."""
        test_lists[1].remove(5)
>       assert test_lists[1].size() is 0
E       AssertionError

0-ts/test_linked_list2.py:187: AssertionError
[36m   -[0m [#  33] CRP linked_list2: 
--------------------------------------------------------------------------------
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
[34m- 77:                 self._length -= 1[0m
[32m+ 77:                 self._length -= 2[0m
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[0.11854 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e6a860>, <linked_list2.LinkedList object at 0x7f6b05e6baf0>, <linked_list2.LinkedList object at 0x7f6b05e6bb20>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#  34] CRP linked_list2: 
--------------------------------------------------------------------------------
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
[34m- 83:         display = '('[0m
[32m+ 83:         display = 'mutpy'[0m
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.13116 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b85b0>, <linked_list2.LinkedList object at 0x7f6b061b88e0>, <linked_list2.LinkedList object at 0x7f6b061b8e20>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  35] CRP linked_list2: 
--------------------------------------------------------------------------------
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
[34m- 83:         display = '('[0m
[32m+ 83:         display = ''[0m
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.14499 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b0621a860>, <linked_list2.LinkedList object at 0x7f6b06219450>, <linked_list2.LinkedList object at 0x7f6b0621bc10>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  36] CRP linked_list2: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
[34m- 85:             display += str(curr.data) + ', '[0m
[32m+ 85:             display += str(curr.data) + 'mutpy'[0m
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.13033 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e270a0>, <linked_list2.LinkedList object at 0x7f6b05e27a30>, <linked_list2.LinkedList object at 0x7f6b05e25990>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  37] CRP linked_list2: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
[34m- 85:             display += str(curr.data) + ', '[0m
[32m+ 85:             display += str(curr.data) + ''[0m
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.12431 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b0607ab00>, <linked_list2.LinkedList object at 0x7f6b060793c0>, <linked_list2.LinkedList object at 0x7f6b0607b580>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  38] CRP linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:-3] + ')'[0m
--------------------------------------------------------------------------------
[0.14397 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b061ba710>, <linked_list2.LinkedList object at 0x7f6b061bb7c0>, <linked_list2.LinkedList object at 0x7f6b061ba350>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  39] CRP linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:-2] + 'mutpy'[0m
--------------------------------------------------------------------------------
[0.12420 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f65b70>, <linked_list2.LinkedList object at 0x7f6b05f65cc0>, <linked_list2.LinkedList object at 0x7f6b05f65cf0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  40] CRP linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:-2] + ''[0m
--------------------------------------------------------------------------------
[0.15236 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e341c0>, <linked_list2.LinkedList object at 0x7f6b05e36b90>, <linked_list2.LinkedList object at 0x7f6b05e34ca0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  41] EHD linked_list2: 
--------------------------------------------------------------------------------
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
[34m- 38:             if data:[0m
[34m- 39:                 self.push(data)[0m
[32m+ 38:             raise[0m
[32m+ 39:     [0m
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[0.13366 s] [36mincompetent[0m

TypeError: linked_list2:35: TypeError: 'NoneType' object is not iterable

[36m   -[0m [#  42] EXS linked_list2: 
--------------------------------------------------------------------------------
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
[34m- 38:             if data:[0m
[34m- 39:                 self.push(data)[0m
[32m+ 38:             pass[0m
[32m+ 39:     [0m
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[0.13331 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b06117520>, <linked_list2.LinkedList object at 0x7f6b061173a0>, <linked_list2.LinkedList object at 0x7f6b061174c0>)

    def test_push_adds_to_the_head(test_lists):
        """Test push, adds to the head of the list."""
        ll = test_lists[1]
>       assert ll.head.data is 5
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:31: AttributeError
[36m   -[0m [#  43] LCR linked_list2: 
--------------------------------------------------------------------------------
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
[34m- 71:         if (curr and val is self.head.data):[0m
[32m+ 71:         if (curr or val is self.head.data):[0m
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[0.14648 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b060b48e0>, <linked_list2.LinkedList object at 0x7f6b060b7220>, <linked_list2.LinkedList object at 0x7f6b060b66b0>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#  44] LCR linked_list2: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
[34m- 75:             if (curr.next and curr.next.data == val):[0m
[32m+ 75:             if (curr.next or curr.next.data == val):[0m
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
--------------------------------------------------------------------------------
[0.13767 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f30a60>, <linked_list2.LinkedList object at 0x7f6b05f30ee0>, <linked_list2.LinkedList object at 0x7f6b05f30a30>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
>       test_lists[2].remove(4)

0-ts/test_linked_list2.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05f30a30>, val = 4

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

linked_list2:75: AttributeError
[36m   -[0m [#  45] OIL linked_list2: 
--------------------------------------------------------------------------------
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
[34m- 37:         except TypeError:[0m
[32m+ 37:                 breakexcept TypeError:[0m
  38:             if data:
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
--------------------------------------------------------------------------------
[0.10749 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_ll_has_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e250c0>, <linked_list2.LinkedList object at 0x7f6b061b8130>, <linked_list2.LinkedList object at 0x7f6b061bac20>)

    def test_ll_has_head(test_lists):
        """Test ll with iterable has a head."""
        ll = test_lists[2]
>       assert ll.head.data is 5
E       AssertionError

0-ts/test_linked_list2.py:37: AssertionError
[36m   -[0m [#  46] OIL linked_list2: 
--------------------------------------------------------------------------------
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
[34m- 67:     [0m
[32m+ 67:             break[0m
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[0.17237 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05ec0a90>, <linked_list2.LinkedList object at 0x7f6b05ec2da0>, <linked_list2.LinkedList object at 0x7f6b05ec3a90>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:146: AttributeError
[36m   -[0m [#  47] OIL linked_list2: 
--------------------------------------------------------------------------------
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
[34m- 79:     [0m
[32m+ 79:             break[0m
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
--------------------------------------------------------------------------------
[0.17058 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_second_end_of_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e6aef0>, <linked_list2.LinkedList object at 0x7f6b05e685e0>, <linked_list2.LinkedList object at 0x7f6b05e69b70>)

    def test_remove_second_end_of_list(test_lists):
        """Test remove node second last in list."""
        test_lists[2].remove(2)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:163: AssertionError
[36m   -[0m [#  48] OIL linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:             break[0m
[32m+ 88:         return display[:-2] + ')'[0m
--------------------------------------------------------------------------------
[0.14381 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b0621b280>, <linked_list2.LinkedList object at 0x7f6b062185e0>, <linked_list2.LinkedList object at 0x7f6b0621bac0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  49] RIL linked_list2: 
--------------------------------------------------------------------------------
  31:         '''Linked list initialized with head.'''
  32:         self._length = 0
  33:         self.head = None
  34:         try:
[34m- 35:             for val in data:[0m
[32m+ 35:             for val in reversed(data):[0m
  36:                 self.push(val)
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
--------------------------------------------------------------------------------
[0.13651 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_ll_has_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b06115210>, <linked_list2.LinkedList object at 0x7f6b06115c00>, <linked_list2.LinkedList object at 0x7f6b06116bf0>)

    def test_ll_has_head(test_lists):
        """Test ll with iterable has a head."""
        ll = test_lists[2]
>       assert ll.head.data is 5
E       AssertionError

0-ts/test_linked_list2.py:37: AssertionError
[36m   -[0m [#  50] ROR linked_list2: 
--------------------------------------------------------------------------------
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
[34m- 64:             if curr.data == val:[0m
[32m+ 64:             if curr.data != val:[0m
  65:                 return curr
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
--------------------------------------------------------------------------------
[0.15137 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b0626bf70>, <linked_list2.LinkedList object at 0x7f6b06269cc0>, <linked_list2.LinkedList object at 0x7f6b06269db0>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2
E       AssertionError

0-ts/test_linked_list2.py:146: AssertionError
[36m   -[0m [#  51] ROR linked_list2: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
[34m- 75:             if (curr.next and curr.next.data == val):[0m
[32m+ 75:             if (curr.next and curr.next.data != val):[0m
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
--------------------------------------------------------------------------------
[0.13724 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e692d0>, <linked_list2.LinkedList object at 0x7f6b05e6b070>, <linked_list2.LinkedList object at 0x7f6b05e6ac20>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [#  52] SDI linked_list2: 
--------------------------------------------------------------------------------
   6: 
   7:     Data attribute for data storage and Next for pointer to next node.
   8:     '''
   9:     
[34m- 10:     def __init__(self, data, next_node=None):[0m
[34m- 11:         '''Attribute data and next_node.'''[0m
[34m- 12:         self.data = data[0m
[34m- 13:         self.next = next_node[0m
[34m- 14: [0m
[32m+ 10:     @staticmethod[0m
[32m+ 11:     def __init__(self, data, next_node=None):[0m
[32m+ 12:         '''Attribute data and next_node.'''[0m
[32m+ 13:         self.data = data[0m
[32m+ 14:         self.next = next_node[0m
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
  18: 
--------------------------------------------------------------------------------
[0.12209 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:24: TypeError: Node.__init__() missing 1 required positional argument: 'data'

[36m   -[0m [#  53] SDI linked_list2: 
--------------------------------------------------------------------------------
  26:     display() - will return a unicode string representing the list as
  27:     if it were a Python tuple literal: "(12, \'sam\', 37, \'tango\')"
  28:     '''
  29:     
[34m- 30:     def __init__(self, data=None):[0m
[34m- 31:         '''Linked list initialized with head.'''[0m
[34m- 32:         self._length = 0[0m
[34m- 33:         self.head = None[0m
[34m- 34:         try:[0m
[34m- 35:             for val in data:[0m
[34m- 36:                 self.push(val)[0m
[34m- 37:         except TypeError:[0m
[34m- 38:             if data:[0m
[34m- 39:                 self.push(data)[0m
[34m- 40:     [0m
[32m+ 30:     @staticmethod[0m
[32m+ 31:     def __init__(self, data=None):[0m
[32m+ 32:         '''Linked list initialized with head.'''[0m
[32m+ 33:         self._length = 0[0m
[32m+ 34:         self.head = None[0m
[32m+ 35:         try:[0m
[32m+ 36:             for val in data:[0m
[32m+ 37:                 self.push(val)[0m
[32m+ 38:         except TypeError:[0m
[32m+ 39:             if data:[0m
[32m+ 40:                 self.push(data)[0m
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
--------------------------------------------------------------------------------
[0.13589 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:15: TypeError: LinkedList.__init__() missing 1 required positional argument: 'self'

[36m   -[0m [#  54] SDI linked_list2: 
--------------------------------------------------------------------------------
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
[34m- 41:     def push(self, val):[0m
[34m- 42:         '''Insert a value at the head of the list.'''[0m
[34m- 43:         old_head = self.head[0m
[34m- 44:         self.head = Node(val, old_head)[0m
[34m- 45:         self._length += 1[0m
[34m- 46:     [0m
[32m+ 41:     @staticmethod[0m
[32m+ 42:     def push(self, val):[0m
[32m+ 43:         '''Insert a value at the head of the list.'''[0m
[32m+ 44:         old_head = self.head[0m
[32m+ 45:         self.head = Node(val, old_head)[0m
[32m+ 46:         self._length += 1[0m
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
--------------------------------------------------------------------------------
[0.12880 s] [36mincompetent[0m

TypeError: linked_list2:39: TypeError: LinkedList.push() missing 1 required positional argument: 'val'

[36m   -[0m [#  55] SDI linked_list2: 
--------------------------------------------------------------------------------
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
[34m- 47:     def pop(self):[0m
[34m- 48:         '''Remove the first value and return it.'''[0m
[34m- 49:         if not (self.head):[0m
[34m- 50:             raise IndexError('Cannot pop from an empty list')[0m
[34m- 51:         to_return = self.head[0m
[34m- 52:         self.head = self.head.next[0m
[34m- 53:         self._length -= 1[0m
[34m- 54:         return to_return.data[0m
[34m- 55:     [0m
[32m+ 47:     @staticmethod[0m
[32m+ 48:     def pop(self):[0m
[32m+ 49:         '''Remove the first value and return it.'''[0m
[32m+ 50:         if not (self.head):[0m
[32m+ 51:             raise IndexError('Cannot pop from an empty list')[0m
[32m+ 52:         to_return = self.head[0m
[32m+ 53:         self.head = self.head.next[0m
[32m+ 54:         self._length -= 1[0m
[32m+ 55:         return to_return.data[0m
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
--------------------------------------------------------------------------------
[0.13925 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:71: TypeError: LinkedList.pop() missing 1 required positional argument: 'self'

[36m   -[0m [#  56] SDI linked_list2: 
--------------------------------------------------------------------------------
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
[34m- 56:     def size(self):[0m
[34m- 57:         '''Return the length of the list.'''[0m
[34m- 58:         return self._length[0m
[34m- 59:     [0m
[32m+ 56:     @staticmethod[0m
[32m+ 57:     def size(self):[0m
[32m+ 58:         '''Return the length of the list.'''[0m
[32m+ 59:         return self._length[0m
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
--------------------------------------------------------------------------------
[0.14249 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:111: TypeError: LinkedList.size() missing 1 required positional argument: 'self'

[36m   -[0m [#  57] SDI linked_list2: 
--------------------------------------------------------------------------------
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
  59:     
[34m- 60:     def search(self, val):[0m
[34m- 61:         '''Return the node containing val.'''[0m
[34m- 62:         curr = self.head[0m
[34m- 63:         while curr:[0m
[34m- 64:             if curr.data == val:[0m
[34m- 65:                 return curr[0m
[34m- 66:             curr = curr.next[0m
[34m- 67:     [0m
[32m+ 60:     @staticmethod[0m
[32m+ 61:     def search(self, val):[0m
[32m+ 62:         '''Return the node containing val.'''[0m
[32m+ 63:         curr = self.head[0m
[32m+ 64:         while curr:[0m
[32m+ 65:             if curr.data == val:[0m
[32m+ 66:                 return curr[0m
[32m+ 67:             curr = curr.next[0m
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
--------------------------------------------------------------------------------
[0.11933 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:146: TypeError: LinkedList.search() missing 1 required positional argument: 'val'

[36m   -[0m [#  58] SDI linked_list2: 
--------------------------------------------------------------------------------
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
  67:     
[34m- 68:     def remove(self, val):[0m
[34m- 69:         '''Remove node from list if exists.'''[0m
[34m- 70:         curr = self.head[0m
[34m- 71:         if (curr and val is self.head.data):[0m
[34m- 72:             self.head = self.head.next[0m
[34m- 73:             self._length -= 1[0m
[34m- 74:         while curr:[0m
[34m- 75:             if (curr.next and curr.next.data == val):[0m
[34m- 76:                 curr.next = curr.next.next[0m
[34m- 77:                 self._length -= 1[0m
[34m- 78:             curr = curr.next[0m
[34m- 79:     [0m
[32m+ 68:     @staticmethod[0m
[32m+ 69:     def remove(self, val):[0m
[32m+ 70:         '''Remove node from list if exists.'''[0m
[32m+ 71:         curr = self.head[0m
[32m+ 72:         if (curr and val is self.head.data):[0m
[32m+ 73:             self.head = self.head.next[0m
[32m+ 74:             self._length -= 1[0m
[32m+ 75:         while curr:[0m
[32m+ 76:             if (curr.next and curr.next.data == val):[0m
[32m+ 77:                 curr.next = curr.next.next[0m
[32m+ 78:                 self._length -= 1[0m
[32m+ 79:             curr = curr.next[0m
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
--------------------------------------------------------------------------------
[0.14696 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:156: TypeError: LinkedList.remove() missing 1 required positional argument: 'val'

[36m   -[0m [#  59] SDI linked_list2: 
--------------------------------------------------------------------------------
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
[34m- 80:     def display(self):[0m
[34m- 81:         '''Display list as a tuple.'''[0m
[34m- 82:         curr = self.head[0m
[34m- 83:         display = '('[0m
[34m- 84:         while curr:[0m
[34m- 85:             display += str(curr.data) + ', '[0m
[34m- 86:             curr = curr.next[0m
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 80:     @staticmethod[0m
[32m+ 81:     def display(self):[0m
[32m+ 82:         '''Display list as a tuple.'''[0m
[32m+ 83:         curr = self.head[0m
[32m+ 84:         display = '('[0m
[32m+ 85:         while curr:[0m
[32m+ 86:             display += str(curr.data) + ', '[0m
[32m+ 87:             curr = curr.next[0m
[32m+ 88:         return display[:-2] + ')'[0m
--------------------------------------------------------------------------------
[0.15234 s] [36mincompetent[0m

TypeError: /home/lucca/desktop/ic/experimento/testes/python_experiments2/linked-list2/0-ts/test_linked_list2.py:198: TypeError: LinkedList.display() missing 1 required positional argument: 'self'

[36m   -[0m [#  60] SDL linked_list2: 
--------------------------------------------------------------------------------
   8:     '''
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
[34m- 12:         self.data = data[0m
[32m+ 12:         pass[0m
  13:         self.next = next_node
  14: 
  15: 
  16: class LinkedList(object):
--------------------------------------------------------------------------------
[0.12683 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_node_has_data

def test_node_has_data():
        """Test node object has data."""
        from linked_list2 import Node
        ll = Node(5)
>       assert ll.data is 5 and ll.next is None
E       AttributeError: 'Node' object has no attribute 'data'

0-ts/test_linked_list2.py:25: AttributeError
[36m   -[0m [#  61] SDL linked_list2: 
--------------------------------------------------------------------------------
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
  12:         self.data = data
[34m- 13:         self.next = next_node[0m
[32m+ 13:         pass[0m
  14: 
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
--------------------------------------------------------------------------------
[0.15860 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_node_has_data

def test_node_has_data():
        """Test node object has data."""
        from linked_list2 import Node
        ll = Node(5)
>       assert ll.data is 5 and ll.next is None
E       AttributeError: 'Node' object has no attribute 'next'

0-ts/test_linked_list2.py:25: AttributeError
[36m   -[0m [#  62] SDL linked_list2: 
--------------------------------------------------------------------------------
  28:     '''
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
[34m- 32:         self._length = 0[0m
[32m+ 32:         pass[0m
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
--------------------------------------------------------------------------------
[0.16057 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

self = <linked_list2.LinkedList object at 0x7f6b05fbfcd0>, data = 5

>   ???
E   TypeError: 'int' object is not iterable

linked_list2:35: TypeError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
>       one = LinkedList(5)

0-ts/test_linked_list2.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linked_list2:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fbfcd0>, val = 5

>   ???
E   AttributeError: 'LinkedList' object has no attribute '_length'

linked_list2:45: AttributeError
[36m   -[0m [#  63] SDL linked_list2: 
--------------------------------------------------------------------------------
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
  32:         self._length = 0
[34m- 33:         self.head = None[0m
[32m+ 33:         pass[0m
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
--------------------------------------------------------------------------------
[0.12664 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

self = <linked_list2.LinkedList object at 0x7f6b06219c60>, data = 5

>   ???
E   TypeError: 'int' object is not iterable

linked_list2:35: TypeError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
>       one = LinkedList(5)

0-ts/test_linked_list2.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linked_list2:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b06219c60>, val = 5

>   ???
E   AttributeError: 'LinkedList' object has no attribute 'head'

linked_list2:43: AttributeError
[36m   -[0m [#  64] SDL linked_list2: 
--------------------------------------------------------------------------------
  32:         self._length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
[34m- 36:                 self.push(val)[0m
[32m+ 36:                 pass[0m
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
--------------------------------------------------------------------------------
[0.13022 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_ll_has_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbe530>, <linked_list2.LinkedList object at 0x7f6b05fbf730>, <linked_list2.LinkedList object at 0x7f6b05fbf430>)

    def test_ll_has_head(test_lists):
        """Test ll with iterable has a head."""
        ll = test_lists[2]
>       assert ll.head.data is 5
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:37: AttributeError
[36m   -[0m [#  65] SDL linked_list2: 
--------------------------------------------------------------------------------
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
  38:             if data:
[34m- 39:                 self.push(data)[0m
[32m+ 39:                 pass[0m
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[0.13816 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b06117820>, <linked_list2.LinkedList object at 0x7f6b061176d0>, <linked_list2.LinkedList object at 0x7f6b061142b0>)

    def test_push_adds_to_the_head(test_lists):
        """Test push, adds to the head of the list."""
        ll = test_lists[1]
>       assert ll.head.data is 5
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:31: AttributeError
[36m   -[0m [#  66] SDL linked_list2: 
--------------------------------------------------------------------------------
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
[34m- 43:         old_head = self.head[0m
[32m+ 43:         pass[0m
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
  47:     def pop(self):
--------------------------------------------------------------------------------
[0.10924 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

self = <linked_list2.LinkedList object at 0x7f6b06079c00>, data = 5

>   ???
E   TypeError: 'int' object is not iterable

linked_list2:35: TypeError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
>       one = LinkedList(5)

0-ts/test_linked_list2.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linked_list2:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b06079c00>, val = 5

>   ???
E   NameError: name 'old_head' is not defined

linked_list2:44: NameError
[36m   -[0m [#  67] SDL linked_list2: 
--------------------------------------------------------------------------------
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
[34m- 44:         self.head = Node(val, old_head)[0m
[32m+ 44:         pass[0m
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
--------------------------------------------------------------------------------
[0.11959 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbdab0>, <linked_list2.LinkedList object at 0x7f6b05fbe380>, <linked_list2.LinkedList object at 0x7f6b05fbc730>)

    def test_push_adds_to_the_head(test_lists):
        """Test push, adds to the head of the list."""
        ll = test_lists[1]
>       assert ll.head.data is 5
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:31: AttributeError
[36m   -[0m [#  68] SDL linked_list2: 
--------------------------------------------------------------------------------
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
[34m- 51:         to_return = self.head[0m
[32m+ 51:         pass[0m
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
--------------------------------------------------------------------------------
[0.12991 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b9cc0>, <linked_list2.LinkedList object at 0x7f6b061b80d0>, <linked_list2.LinkedList object at 0x7f6b061bb2b0>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b061bb2b0>

>   ???
E   NameError: name 'to_return' is not defined

linked_list2:54: NameError
[36m   -[0m [#  69] SDL linked_list2: 
--------------------------------------------------------------------------------
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
[34m- 52:         self.head = self.head.next[0m
[32m+ 52:         pass[0m
  53:         self._length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.13339 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b0607b7f0>, <linked_list2.LinkedList object at 0x7f6b060795a0>, <linked_list2.LinkedList object at 0x7f6b0607ae00>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
        ll.pop()
>       assert ll.head.data is 4
E       AssertionError

0-ts/test_linked_list2.py:72: AssertionError
[36m   -[0m [#  70] SDL linked_list2: 
--------------------------------------------------------------------------------
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
[34m- 54:         return to_return.data[0m
[32m+ 54:         pass[0m
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
  58:         return self._length
--------------------------------------------------------------------------------
[0.13223 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_returns_data

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e347c0>, <linked_list2.LinkedList object at 0x7f6b05e34130>, <linked_list2.LinkedList object at 0x7f6b05e35870>)

    def test_pop_returns_data(test_lists):
        """Test pop method returns data of removed node."""
        returned = test_lists[2].pop()
>       assert returned is 5
E       AssertionError

0-ts/test_linked_list2.py:78: AssertionError
[36m   -[0m [#  71] SDL linked_list2: 
--------------------------------------------------------------------------------
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
[34m- 58:         return self._length[0m
[32m+ 58:         pass[0m
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
--------------------------------------------------------------------------------
[0.11529 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_size_function

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e35fc0>, <linked_list2.LinkedList object at 0x7f6b05e357e0>, <linked_list2.LinkedList object at 0x7f6b05e362c0>)

    def test_size_function(test_lists):
        """Test size on empty list."""
>       assert test_lists[0].size() is 0
E       AssertionError

0-ts/test_linked_list2.py:111: AssertionError
[36m   -[0m [#  72] SDL linked_list2: 
--------------------------------------------------------------------------------
  58:         return self._length
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
[34m- 62:         curr = self.head[0m
[32m+ 62:         pass[0m
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
--------------------------------------------------------------------------------
[0.12088 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05f8b910>, <linked_list2.LinkedList object at 0x7f6b05f8a1d0>, <linked_list2.LinkedList object at 0x7f6b05f892d0>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2

0-ts/test_linked_list2.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05f892d0>, val = 2

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linked_list2:63: UnboundLocalError
[36m   -[0m [#  73] SDL linked_list2: 
--------------------------------------------------------------------------------
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
  64:             if curr.data == val:
[34m- 65:                 return curr[0m
[32m+ 65:                 pass[0m
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
--------------------------------------------------------------------------------
[0.11944 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b061ba230>, <linked_list2.LinkedList object at 0x7f6b061b85b0>, <linked_list2.LinkedList object at 0x7f6b061b93f0>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:146: AttributeError
[36m   -[0m [#  74] SDL linked_list2: 
--------------------------------------------------------------------------------
  62:         curr = self.head
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
[34m- 66:             curr = curr.next[0m
[32m+ 66:             pass[0m
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
--------------------------------------------------------------------------------
[5.00667 s] [33mtimeout[0m
[36m   -[0m [#  75] SDL linked_list2: 
--------------------------------------------------------------------------------
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
[34m- 70:         curr = self.head[0m
[32m+ 70:         pass[0m
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
--------------------------------------------------------------------------------
[0.14768 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b06110790>, <linked_list2.LinkedList object at 0x7f6b06110ee0>, <linked_list2.LinkedList object at 0x7f6b06110310>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
>       test_lists[2].remove(4)

0-ts/test_linked_list2.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b06110310>, val = 4

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linked_list2:71: UnboundLocalError
[36m   -[0m [#  76] SDL linked_list2: 
--------------------------------------------------------------------------------
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
[34m- 72:             self.head = self.head.next[0m
[32m+ 72:             pass[0m
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[0.10930 s] [31msurvived[0m
[36m   -[0m [#  77] SDL linked_list2: 
--------------------------------------------------------------------------------
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
[34m- 76:                 curr.next = curr.next.next[0m
[32m+ 76:                 pass[0m
  77:                 self._length -= 1
  78:             curr = curr.next
  79:     
  80:     def display(self):
--------------------------------------------------------------------------------
[0.12518 s] [31msurvived[0m
[36m   -[0m [#  78] SDL linked_list2: 
--------------------------------------------------------------------------------
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
[34m- 78:             curr = curr.next[0m
[32m+ 78:             pass[0m
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
--------------------------------------------------------------------------------
[5.00665 s] [33mtimeout[0m
[36m   -[0m [#  79] SDL linked_list2: 
--------------------------------------------------------------------------------
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
[34m- 82:         curr = self.head[0m
[32m+ 82:         pass[0m
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
--------------------------------------------------------------------------------
[0.17182 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e6e9e0>, <linked_list2.LinkedList object at 0x7f6b05e6ca60>, <linked_list2.LinkedList object at 0x7f6b062ed150>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'

0-ts/test_linked_list2.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b062ed150>

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

linked_list2:84: UnboundLocalError
[36m   -[0m [#  80] SDL linked_list2: 
--------------------------------------------------------------------------------
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
[34m- 83:         display = '('[0m
[32m+ 83:         pass[0m
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.15500 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e6e710>, <linked_list2.LinkedList object at 0x7f6b05e6cd60>, <linked_list2.LinkedList object at 0x7f6b05e6ea70>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'

0-ts/test_linked_list2.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05e6ea70>

>   ???
E   UnboundLocalError: local variable 'display' referenced before assignment

linked_list2:85: UnboundLocalError
[36m   -[0m [#  81] SDL linked_list2: 
--------------------------------------------------------------------------------
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
[34m- 86:             curr = curr.next[0m
[32m+ 86:             pass[0m
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[5.00660 s] [33mtimeout[0m
[36m   -[0m [#  82] SDL linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         pass[0m
--------------------------------------------------------------------------------
[0.14590 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e375b0>, <linked_list2.LinkedList object at 0x7f6b05e34b20>, <linked_list2.LinkedList object at 0x7f6b05e35750>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  83] SIR linked_list2: 
--------------------------------------------------------------------------------
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
[34m- 87:         return display[:-2] + ')'[0m
[32m+ 87:         return display[:] + ')'[0m
--------------------------------------------------------------------------------
[0.12691 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e6c610>, <linked_list2.LinkedList object at 0x7f6b05e6e620>, <linked_list2.LinkedList object at 0x7f6b05e6e2f0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[36m   -[0m [#  84] SVD linked_list2: 
--------------------------------------------------------------------------------
   8:     '''
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
[34m- 12:         self.data = data[0m
[32m+ 12:         data = data[0m
  13:         self.next = next_node
  14: 
  15: 
  16: class LinkedList(object):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  85] SVD linked_list2: 
--------------------------------------------------------------------------------
   9:     
  10:     def __init__(self, data, next_node=None):
  11:         '''Attribute data and next_node.'''
  12:         self.data = data
[34m- 13:         self.next = next_node[0m
[32m+ 13:         next = next_node[0m
  14: 
  15: 
  16: class LinkedList(object):
  17:     '''Method for linked list.
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  86] SVD linked_list2: 
--------------------------------------------------------------------------------
  28:     '''
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
[34m- 32:         self._length = 0[0m
[32m+ 32:         _length = 0[0m
  33:         self.head = None
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  87] SVD linked_list2: 
--------------------------------------------------------------------------------
  29:     
  30:     def __init__(self, data=None):
  31:         '''Linked list initialized with head.'''
  32:         self._length = 0
[34m- 33:         self.head = None[0m
[32m+ 33:         head = None[0m
  34:         try:
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  88] SVD linked_list2: 
--------------------------------------------------------------------------------
  32:         self._length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
[34m- 36:                 self.push(val)[0m
[32m+ 36:                 push(val)[0m
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
--------------------------------------------------------------------------------
[0.12613 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

@pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
        one = LinkedList(5)
>       multi = LinkedList([1, 2, 3, 4, 5])

0-ts/test_linked_list2.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05e348b0>
data = [1, 2, 3, 4, 5]

>   ???
E   NameError: name 'push' is not defined

linked_list2:36: NameError
[36m   -[0m [#  89] SVD linked_list2: 
--------------------------------------------------------------------------------
  35:             for val in data:
  36:                 self.push(val)
  37:         except TypeError:
  38:             if data:
[34m- 39:                 self.push(data)[0m
[32m+ 39:                 push(data)[0m
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
--------------------------------------------------------------------------------
[0.12429 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

self = <linked_list2.LinkedList object at 0x7f6b05e25810>, data = 5

>   ???
E   TypeError: 'int' object is not iterable

linked_list2:35: TypeError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
>       one = LinkedList(5)

0-ts/test_linked_list2.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05e25810>, data = 5

>   ???
E   NameError: name 'push' is not defined

linked_list2:39: NameError
[36m   -[0m [#  90] SVD linked_list2: 
--------------------------------------------------------------------------------
  39:                 self.push(data)
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
[34m- 43:         old_head = self.head[0m
[32m+ 43:         old_head = head[0m
  44:         self.head = Node(val, old_head)
  45:         self._length += 1
  46:     
  47:     def pop(self):
--------------------------------------------------------------------------------
[0.10557 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_push_adds_to_the_head

self = <linked_list2.LinkedList object at 0x7f6b05fbf940>, data = 5

>   ???
E   TypeError: 'int' object is not iterable

linked_list2:35: TypeError

During handling of the above exception, another exception occurred:

    @pytest.fixture
    def test_lists():
        """Fixture for linked list tests."""
        from linked_list2 import LinkedList
        empty = LinkedList()
>       one = LinkedList(5)

0-ts/test_linked_list2.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
linked_list2:39: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fbf940>, val = 5

>   ???
E   NameError: name 'head' is not defined

linked_list2:43: NameError
[36m   -[0m [#  91] SVD linked_list2: 
--------------------------------------------------------------------------------
  40:     
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
[34m- 44:         self.head = Node(val, old_head)[0m
[32m+ 44:         head = Node(val, old_head)[0m
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  92] SVD linked_list2: 
--------------------------------------------------------------------------------
  41:     def push(self, val):
  42:         '''Insert a value at the head of the list.'''
  43:         old_head = self.head
  44:         self.head = Node(val, old_head)
[34m- 45:         self._length += 1[0m
[32m+ 45:         _length += 1[0m
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  93] SVD linked_list2: 
--------------------------------------------------------------------------------
  45:         self._length += 1
  46:     
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
[34m- 49:         if not (self.head):[0m
[32m+ 49:         if not head:[0m
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
  53:         self._length -= 1
--------------------------------------------------------------------------------
[0.14017 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbea70>, <linked_list2.LinkedList object at 0x7f6b05fbd900>, <linked_list2.LinkedList object at 0x7f6b05fbea40>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fbea40>

>   ???
E   NameError: name 'head' is not defined

linked_list2:49: NameError
[36m   -[0m [#  94] SVD linked_list2: 
--------------------------------------------------------------------------------
  47:     def pop(self):
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
[34m- 51:         to_return = self.head[0m
[32m+ 51:         to_return = head[0m
  52:         self.head = self.head.next
  53:         self._length -= 1
  54:         return to_return.data
  55:     
--------------------------------------------------------------------------------
[0.16008 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e37340>, <linked_list2.LinkedList object at 0x7f6b05e35240>, <linked_list2.LinkedList object at 0x7f6b05e37d30>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05e37d30>

>   ???
E   NameError: name 'head' is not defined

linked_list2:51: NameError
[36m   -[0m [#  95] SVD linked_list2: 
--------------------------------------------------------------------------------
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
[34m- 52:         self.head = self.head.next[0m
[32m+ 52:         head = self.head.next[0m
  53:         self._length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  96] SVD linked_list2: 
--------------------------------------------------------------------------------
  48:         '''Remove the first value and return it.'''
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
[34m- 52:         self.head = self.head.next[0m
[32m+ 52:         self.head = head.next[0m
  53:         self._length -= 1
  54:         return to_return.data
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.13935 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_pop_multi_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbc0d0>, <linked_list2.LinkedList object at 0x7f6b05fbecb0>, <linked_list2.LinkedList object at 0x7f6b05fbc220>)

    def test_pop_multi_list(test_lists):
        """Test pop on list of 5."""
        ll = test_lists[2]
>       ll.pop()

0-ts/test_linked_list2.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fbc220>

>   ???
E   NameError: name 'head' is not defined

linked_list2:52: NameError
[36m   -[0m [#  97] SVD linked_list2: 
--------------------------------------------------------------------------------
  49:         if not (self.head):
  50:             raise IndexError('Cannot pop from an empty list')
  51:         to_return = self.head
  52:         self.head = self.head.next
[34m- 53:         self._length -= 1[0m
[32m+ 53:         _length -= 1[0m
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [#  98] SVD linked_list2: 
--------------------------------------------------------------------------------
  54:         return to_return.data
  55:     
  56:     def size(self):
  57:         '''Return the length of the list.'''
[34m- 58:         return self._length[0m
[32m+ 58:         return _length[0m
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
--------------------------------------------------------------------------------
[0.14679 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_size_function

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fd1ea0>, <linked_list2.LinkedList object at 0x7f6b05fd3a30>, <linked_list2.LinkedList object at 0x7f6b05fd3ca0>)

    def test_size_function(test_lists):
        """Test size on empty list."""
>       assert test_lists[0].size() is 0

0-ts/test_linked_list2.py:111: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fd1ea0>

>   ???
E   NameError: name '_length' is not defined

linked_list2:58: NameError
[36m   -[0m [#  99] SVD linked_list2: 
--------------------------------------------------------------------------------
  58:         return self._length
  59:     
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
[34m- 62:         curr = self.head[0m
[32m+ 62:         curr = head[0m
  63:         while curr:
  64:             if curr.data == val:
  65:                 return curr
  66:             curr = curr.next
--------------------------------------------------------------------------------
[0.14942 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b061b8fd0>, <linked_list2.LinkedList object at 0x7f6b061bb9a0>, <linked_list2.LinkedList object at 0x7f6b061bb250>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2

0-ts/test_linked_list2.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b061bb250>, val = 2

>   ???
E   NameError: name 'head' is not defined

linked_list2:62: NameError
[36m   -[0m [# 100] SVD linked_list2: 
--------------------------------------------------------------------------------
  66:             curr = curr.next
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
[34m- 70:         curr = self.head[0m
[32m+ 70:         curr = head[0m
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
--------------------------------------------------------------------------------
[0.12392 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbe230>, <linked_list2.LinkedList object at 0x7f6b05fbd6c0>, <linked_list2.LinkedList object at 0x7f6b05fbe3b0>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
>       test_lists[2].remove(4)

0-ts/test_linked_list2.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05fbe3b0>, val = 4

>   ???
E   NameError: name 'head' is not defined

linked_list2:70: NameError
[36m   -[0m [# 101] SVD linked_list2: 
--------------------------------------------------------------------------------
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
[34m- 71:         if (curr and val is self.head.data):[0m
[32m+ 71:         if (curr and val is head.data):[0m
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
--------------------------------------------------------------------------------
[0.14639 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b06117f40>, <linked_list2.LinkedList object at 0x7f6b06117d30>, <linked_list2.LinkedList object at 0x7f6b06116860>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
>       test_lists[2].remove(4)

0-ts/test_linked_list2.py:156: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b06116860>, val = 4

>   ???
E   NameError: name 'head' is not defined

linked_list2:71: NameError
[36m   -[0m [# 102] SVD linked_list2: 
--------------------------------------------------------------------------------
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
[34m- 72:             self.head = self.head.next[0m
[32m+ 72:             head = self.head.next[0m
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 103] SVD linked_list2: 
--------------------------------------------------------------------------------
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
[34m- 72:             self.head = self.head.next[0m
[32m+ 72:             self.head = head.next[0m
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
--------------------------------------------------------------------------------
[0.14318 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list_one_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b0607aaa0>, <linked_list2.LinkedList object at 0x7f6b06079ff0>, <linked_list2.LinkedList object at 0x7f6b0607a8f0>)

    def test_remove_on_list_one_list(test_lists):
        """Test remove from list of 1."""
>       test_lists[1].remove(5)

0-ts/test_linked_list2.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b06079ff0>, val = 5

>   ???
E   NameError: name 'head' is not defined

linked_list2:72: NameError
[36m   -[0m [# 104] SVD linked_list2: 
--------------------------------------------------------------------------------
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
[34m- 73:             self._length -= 1[0m
[32m+ 73:             _length -= 1[0m
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
  77:                 self._length -= 1
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 105] SVD linked_list2: 
--------------------------------------------------------------------------------
  73:             self._length -= 1
  74:         while curr:
  75:             if (curr.next and curr.next.data == val):
  76:                 curr.next = curr.next.next
[34m- 77:                 self._length -= 1[0m
[32m+ 77:                 _length -= 1[0m
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
--------------------------------------------------------------------------------
[0.00000 s] [36mincompetent[0m

ValueError: expression must have Store context but has Load instead

[36m   -[0m [# 106] SVD linked_list2: 
--------------------------------------------------------------------------------
  78:             curr = curr.next
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
[34m- 82:         curr = self.head[0m
[32m+ 82:         curr = head[0m
  83:         display = '('
  84:         while curr:
  85:             display += str(curr.data) + ', '
  86:             curr = curr.next
--------------------------------------------------------------------------------
[0.15916 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05e6c1c0>, <linked_list2.LinkedList object at 0x7f6b05e6c130>, <linked_list2.LinkedList object at 0x7f6b05e6cca0>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'

0-ts/test_linked_list2.py:198: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <linked_list2.LinkedList object at 0x7f6b05e6cca0>

>   ???
E   NameError: name 'head' is not defined

linked_list2:82: NameError
[36m   -[0m [# 107] ZIL linked_list2: 
--------------------------------------------------------------------------------
  32:         self._length = 0
  33:         self.head = None
  34:         try:
  35:             for val in data:
[34m- 36:                 self.push(val)[0m
[32m+ 36:                 break[0m
  37:         except TypeError:
  38:             if data:
  39:                 self.push(data)
  40:     
--------------------------------------------------------------------------------
[0.13782 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_ll_has_head

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbed70>, <linked_list2.LinkedList object at 0x7f6b05fbf460>, <linked_list2.LinkedList object at 0x7f6b05fbf100>)

    def test_ll_has_head(test_lists):
        """Test ll with iterable has a head."""
        ll = test_lists[2]
>       assert ll.head.data is 5
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:37: AttributeError
[36m   -[0m [# 108] ZIL linked_list2: 
--------------------------------------------------------------------------------
  60:     def search(self, val):
  61:         '''Return the node containing val.'''
  62:         curr = self.head
  63:         while curr:
[34m- 64:             if curr.data == val:[0m
[34m- 65:                 return curr[0m
[34m- 66:             curr = curr.next[0m
[32m+ 64:             break[0m
[32m+ 65:     [0m
[32m+ 66:     [0m
  67:     
  68:     def remove(self, val):
  69:         '''Remove node from list if exists.'''
  70:         curr = self.head
--------------------------------------------------------------------------------
[0.13979 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_search_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b0607bf70>, <linked_list2.LinkedList object at 0x7f6b06078340>, <linked_list2.LinkedList object at 0x7f6b0607aad0>)

    def test_search_on_list(test_lists):
        """Test search returns node."""
>       assert test_lists[2].search(2).data is 2
E       AttributeError: 'NoneType' object has no attribute 'data'

0-ts/test_linked_list2.py:146: AttributeError
[36m   -[0m [# 109] ZIL linked_list2: 
--------------------------------------------------------------------------------
  71:         if (curr and val is self.head.data):
  72:             self.head = self.head.next
  73:             self._length -= 1
  74:         while curr:
[34m- 75:             if (curr.next and curr.next.data == val):[0m
[34m- 76:                 curr.next = curr.next.next[0m
[34m- 77:                 self._length -= 1[0m
[34m- 78:             curr = curr.next[0m
[32m+ 75:             break[0m
[32m+ 76:     [0m
[32m+ 77:     [0m
[32m+ 78:     [0m
  79:     
  80:     def display(self):
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
--------------------------------------------------------------------------------
[0.12364 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_remove_on_list

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbd2d0>, <linked_list2.LinkedList object at 0x7f6b05fbc3d0>, <linked_list2.LinkedList object at 0x7f6b05fbc220>)

    def test_remove_on_list(test_lists):
        """Test remove work for node in list."""
        test_lists[2].remove(4)
>       assert test_lists[2].size() is 4
E       AssertionError

0-ts/test_linked_list2.py:157: AssertionError
[36m   -[0m [# 110] ZIL linked_list2: 
--------------------------------------------------------------------------------
  81:         '''Display list as a tuple.'''
  82:         curr = self.head
  83:         display = '('
  84:         while curr:
[34m- 85:             display += str(curr.data) + ', '[0m
[34m- 86:             curr = curr.next[0m
[32m+ 85:             break[0m
[32m+ 86:         [0m
  87:         return display[:-2] + ')'
--------------------------------------------------------------------------------
[0.18187 s] [32mkilled[0m by 0-ts/test_linked_list2.py::test_display_method

test_lists = (<linked_list2.LinkedList object at 0x7f6b05fbeef0>, <linked_list2.LinkedList object at 0x7f6b05fbfbb0>, <linked_list2.LinkedList object at 0x7f6b05fbc130>)

    def test_display_method(test_lists):
        """Test display method."""
>       assert test_lists[2].display() == '(5, 4, 3, 2, 1)'
E       AssertionError

0-ts/test_linked_list2.py:198: AssertionError
[34m[*][0m Mutation score [34.36760 s]: [1m[34m97.7%[0m
[36m   -[0m all: 110
[36m   -[0m killed: 81 (73.6%)
[36m   -[0m survived: 2 (1.8%)
[36m   -[0m incompetent: 24 (21.8%)
[36m   -[0m timeout: 3 (2.7%)
