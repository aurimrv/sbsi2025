import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list2 import Node, LinkedList

import pytest

# Test Node class
def test_node_creation():
    node = Node(5)
    assert node.data == 5
    assert node.next is None

# Test LinkedList class methods
def test_push():
    ll = LinkedList()
    ll.push(10)
    assert ll.size() == 1
    assert ll.head.data == 10

def test_pop():
    ll = LinkedList([1, 2, 3])
    popped = ll.pop()
    assert popped == 1
    assert ll.size() == 2

def test_size():
    ll = LinkedList([1, 2, 3, 4])
    assert ll.size() == 4

def test_search():
    ll = LinkedList(['a', 'b', 'c', 'd'])
    assert ll.search('c').data == 'c'
    assert ll.search('z') is None

def test_remove():
    ll = LinkedList([1, 2, 3, 4, 5])
    ll.remove(3)
    assert ll.size() == 4
    assert ll.display() == '(1, 2, 4, 5)'

def test_display():
    ll = LinkedList([10, 'hello', 20])
    assert ll.display() == '(10, hello, 20)'

# Additional tests for coverage
def test_multiple_push_and_pop():
    ll = LinkedList()
    ll.push(1)
    ll.push(2)
    ll.push(3)
    assert ll.pop() == 3
    assert ll.pop() == 2
    assert ll.pop() == 1

def test_empty_list_pop_exception():
    ll = LinkedList()
    with pytest.raises(IndexError):
        ll.pop()

def test_remove_head():
    ll = LinkedList([1, 2, 3])
    ll.remove(1)
    assert ll.size() == 2
    assert ll.display() == '(2, 3)'

def test_remove_last():
    ll = LinkedList([1, 2, 3])
    ll.remove(3)
    assert ll.size() == 2
    assert ll.display() == '(1, 2)'

def test_remove_nonexistent():
    ll = LinkedList([1, 2, 3])
    ll.remove(5)
    assert ll.size() == 3
    assert ll.display() == '(1, 2, 3)'