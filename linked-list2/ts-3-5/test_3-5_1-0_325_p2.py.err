import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list2 import Node, LinkedList

import pytest

class TestLinkedList:
    @pytest.fixture
    def empty_list(self):
        return LinkedList()

    @pytest.fixture
    def list_with_values(self):
        return LinkedList([1, 2, 3, 4, 5])

    def test_push(self, empty_list):
        empty_list.push(10)
        assert empty_list.size() == 1
        assert empty_list.display() == "(10)"

    def test_pop_empty_list(self, empty_list):
        with pytest.raises(IndexError):
            empty_list.pop()

    def test_pop_non_empty_list(self, list_with_values):
        assert list_with_values.pop() == 5
        assert list_with_values.size() == 4
        assert list_with_values.display() == "(1, 2, 3, 4)"

    def test_size_empty_list(self, empty_list):
        assert empty_list.size() == 0

    def test_size_non_empty_list(self, list_with_values):
        assert list_with_values.size() == 5

    def test_search_found(self, list_with_values):
        assert list_with_values.search(3).data == 3

    def test_search_not_found(self, list_with_values):
        assert list_with_values.search(10) is None

    def test_remove_element_not_found(self, empty_list):
        empty_list.remove(5)
        assert empty_list.size() == 0

    def test_remove_element_first_occurrence(self, list_with_values):
        list_with_values.remove(2)
        assert list_with_values.size() == 4
        assert list_with_values.display() == "(1, 3, 4, 5)"

    def test_remove_element_multiple_occurrences(self, list_with_values):
        list_with_values.push(3)
        list_with_values.remove(3)
        assert list_with_values.size() == 4
        assert list_with_values.display() == "(1, 2, 4, 5)"

    def test_display_empty_list(self, empty_list):
        assert empty_list.display() == "()"

    def test_display_non_empty_list(self, list_with_values):
        assert list_with_values.display() == "(1, 2, 3, 4, 5)"