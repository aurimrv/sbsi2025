import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list2 import Node, LinkedList

# Test cases for Node class
def test_node_initialization():
    node = Node(5)
    assert node.data == 5
    assert node.next is None

def test_node_next_pointer():
    node1 = Node(10)
    node2 = Node(20, node1)
    assert node2.next == node1

# Test cases for LinkedList class
def test_linked_list_initialization_empty():
    ll = LinkedList()
    assert ll.head is None
    assert ll.size() == 0

def test_linked_list_push():
    ll = LinkedList()
    ll.push(30)
    assert ll.head.data == 30
    assert ll.size() == 1

def test_linked_list_pop():
    ll = LinkedList([1, 2, 3])
    popped_val = ll.pop()
    assert popped_val == 3
    assert ll.size() == 2

def test_linked_list_size():
    ll = LinkedList([5, 10, 15])
    assert ll.size() == 3

def test_linked_list_search_found():
    ll = LinkedList([5, 10, 15])
    node = ll.search(10)
    assert node.data == 10

def test_linked_list_search_not_found():
    ll = LinkedList([5, 10, 15])
    node = ll.search(20)
    assert node is None

def test_linked_list_remove_head():
    ll = LinkedList([5, 10, 15])
    ll.remove(5)
    assert ll.size() == 2
    assert ll.head.data == 10

def test_linked_list_remove_middle():
    ll = LinkedList([5, 10, 15])
    ll.remove(10)
    assert ll.size() == 2
    assert ll.head.next.data == 15

def test_linked_list_remove_last():
    ll = LinkedList([5, 10, 15])
    ll.remove(15)
    assert ll.size() == 2
    assert ll.head.next.next is None

def test_linked_list_display():
    ll = LinkedList([5, 'test', 10, 'example'])
    assert ll.display() == "(5, 'test', 10, 'example')"