import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list2 import Node, LinkedList

@pytest.fixture
def sample_linked_list():
    return LinkedList([1, 2, 3, 4, 5])

def test_push(sample_linked_list):
    sample_linked_list.push(0)
    assert sample_linked_list.head.data == 0
    assert sample_linked_list.size() == 6

def test_pop(sample_linked_list):
    popped_data = sample_linked_list.pop()
    assert popped_data == 1
    assert sample_linked_list.size() == 4

def test_size(sample_linked_list):
    assert sample_linked_list.size() == 5

def test_search_existing_value(sample_linked_list):
    node = sample_linked_list.search(3)
    assert node.data == 3

def test_search_non_existing_value(sample_linked_list):
    node = sample_linked_list.search(6)
    assert node is None

def test_remove_existing_node(sample_linked_list):
    node = sample_linked_list.search(3)
    sample_linked_list.remove(node.data)
    assert sample_linked_list.size() == 4
    assert sample_linked_list.display() == '(1, 2, 4, 5)'

def test_remove_head_node(sample_linked_list):
    sample_linked_list.remove(1)
    assert sample_linked_list.size() == 4
    assert sample_linked_list.display() == '(2, 3, 4, 5)'

def test_remove_last_node(sample_linked_list):
    sample_linked_list.remove(5)
    assert sample_linked_list.size() == 4
    assert sample_linked_list.display() == '(1, 2, 3, 4)'

def test_display(sample_linked_list):
    assert sample_linked_list.display() == '(1, 2, 3, 4, 5)'
