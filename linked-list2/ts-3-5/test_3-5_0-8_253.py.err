import os
import sys
import pytest

# Add project directory to the sys path
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from linked_list2 import Node, LinkedList

# Test cases for Node class
class TestNode:
    def test_node_data(self):
        node = Node(5)
        assert node.data == 5

    def test_node_next(self):
        node1 = Node(5)
        node2 = Node(10, node1)
        assert node2.next == node1

# Test cases for LinkedList class
class TestLinkedList:
    def test_push(self):
        ll = LinkedList()
        ll.push(5)
        assert ll.head.data == 5
        assert ll.size() == 1

    def test_pop(self):
        ll = LinkedList([1, 2, 3])
        assert ll.pop() == 1
        assert ll.size() == 2

    def test_size(self):
        ll = LinkedList([1, 2, 3, 4, 5])
        assert ll.size() == 5

    def test_search_found(self):
        ll = LinkedList(['a', 'b', 'c'])
        assert ll.search('b').data == 'b'

    def test_search_not_found(self):
        ll = LinkedList(['a', 'b', 'c'])
        assert ll.search('d') is None

    def test_remove_at_head(self):
        ll = LinkedList([1, 2, 3])
        ll.remove(1)
        assert ll.size() == 2
        assert ll.head.data == 2

    def test_remove_in_middle(self):
        ll = LinkedList([1, 2, 3, 4])
        ll.remove(2)
        assert ll.size() == 3
        assert ll.head.next.data == 3

    def test_display(self):
        ll = LinkedList([1, 'a', 3, 'b', 5])
        assert ll.display() == '(1, a, 3, b, 5)'