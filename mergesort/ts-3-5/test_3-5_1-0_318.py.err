import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from mergesort import mergesort

def test_mergesort():
    # Test case for empty list
    assert mergesort([]) == []

    # Test case for list with one element
    assert mergesort([5]) == [5]

    # Test case for list in descending order
    assert mergesort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test case for list with duplicate elements
    assert mergesort([4, 2, 1, 3, 2, 1]) == [1, 1, 2, 2, 3, 4]

    # Test case for list already sorted
    assert mergesort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

def test_sort():
    # Test case for sorting empty list
    assert mergesort.sort([]) == []

    # Test case for sorting list in descending order
    assert mergesort.sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test case for sorting list with duplicate elements
    assert mergesort.sort([4, 2, 1, 3, 2, 1]) == [1, 1, 2, 2, 3, 4]

    # Test case for sorting with negative numbers
    assert mergesort.sort([-3, -2, -5, -1, -4]) == [-5, -4, -3, -2, -1]

def test_merge():
    # Test case for merging two empty lists
    assert mergesort.merge([], []) == []

    # Test case for merging with one empty list
    assert mergesort.merge([1, 3, 5], []) == [1, 3, 5]

    # Test case for merging two lists with alternating elements
    assert mergesort.merge([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]

    # Test case for merging two lists with duplicate elements
    assert mergesort.merge([1, 2, 3, 5], [2, 4, 6]) == [1, 2, 2, 3, 4, 5, 6]

    # Test case for merging lists of different lengths
    assert mergesort.merge([1, 2, 3], [4, 5]) == [1, 2, 3, 4, 5]