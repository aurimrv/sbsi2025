import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from mergesort import mergesort

def test_mergesort():
    # Test mergesort on empty list
    assert mergesort([]) == []

    # Test mergesort on single element list
    assert mergesort([5]) == [5]

    # Test mergesort on already sorted list
    assert mergesort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

    # Test mergesort on reverse sorted list
    assert mergesort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test mergesort on list with duplicate elements
    assert mergesort([3, 2, 1, 3, 5, 4, 2]) == [1, 2, 2, 3, 3, 4, 5]

def test_sort():
    # Test sort on empty list
    assert mergesort.sort([]) == []

    # Test sort on single element list
    assert mergesort.sort([5]) == [5]

    # Test sort on already sorted list
    assert mergesort.sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

    # Test sort on reverse sorted list
    assert mergesort.sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test sort on list with duplicate elements
    assert mergesort.sort([3, 2, 1, 3, 5, 4, 2]) == [1, 2, 2, 3, 3, 4, 5]

def test_merge():
    # Test merge on empty lists
    assert mergesort.merge([], []) == []

    # Test merge on one empty list
    assert mergesort.merge([1, 2, 3], []) == [1, 2, 3]
    assert mergesort.merge([], [4, 5, 6]) == [4, 5, 6]

    # Test merge on two sorted lists
    assert mergesort.merge([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]

    # Test merge on two sorted lists with duplicate elements
    assert mergesort.merge([1, 2, 3, 4], [2, 3, 5, 6]) == [1, 2, 2, 3, 3, 4, 5, 6]