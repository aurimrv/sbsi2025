import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from mergesort import mergesort

def test_mergesort():
    # Test mergesort with an empty list
    assert mergesort([]) == []

    # Test mergesort with a single element list
    assert mergesort([5]) == [5]

    # Test mergesort with a list of sorted elements
    assert mergesort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

    # Test mergesort with a list of reverse sorted elements
    assert mergesort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test mergesort with a list containing duplicate elements
    assert mergesort([4, 2, 1, 3, 4, 2, 1, 3]) == [1, 1, 2, 2, 3, 3, 4, 4]

def test_sort():
    # Test sort with an empty list
    assert mergesort.sort([]) == []

    # Test sort with a single element list
    assert mergesort.sort([5]) == [5]

    # Test sort with a list of sorted elements
    assert mergesort.sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

    # Test sort with a list of reverse sorted elements
    assert mergesort.sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test sort with a list containing duplicate elements
    assert mergesort.sort([4, 2, 1, 3, 4, 2, 1, 3]) == [1, 1, 2, 2, 3, 3, 4, 4]

def test_merge():
    # Test merge with two empty lists
    assert mergesort.merge([], []) == []

    # Test merge with one empty list and one non-empty list
    assert mergesort.merge([], [1, 2, 3]) == [1, 2, 3]

    # Test merge with two non-empty lists of different lengths
    assert mergesort.merge([1, 3, 5], [2, 4, 6, 7]) == [1, 2, 3, 4, 5, 6, 7]

    # Test merge with two non-empty lists containing duplicate elements
    assert mergesort.merge([1, 2, 2, 4], [2, 3, 3, 5]) == [1, 2, 2, 2, 3, 3, 4, 5]