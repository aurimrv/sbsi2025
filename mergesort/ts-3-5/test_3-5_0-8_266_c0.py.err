import os
import sys
from collections import deque
from typing import List

def mergesort(arr: List[int]) -> List[int]:
    if len(arr) <= 1:
        return arr
    mid = len(arr) // 2
    left = mergesort(arr[:mid])
    right = mergesort(arr[mid:])
    return merge(left, right)

def merge(left: List[int], right: List[int]) -> List[int]:
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

def test_sort():
    assert mergesort([4, 2, 1, 3]) == [1, 2, 3, 4]
    assert mergesort([10, 5, 8, 3, 1, 6, 7]) == [1, 3, 5, 6, 7, 8, 10]
    assert mergesort([1, 2, 3, 4]) == [1, 2, 3, 4]

def test_merge():
    assert merge([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
    assert merge([10, 20, 30], [5, 15, 25]) == [5, 10, 15, 20, 25, 30]
    assert merge([9, 8, 7], [6, 5, 4]) == [4, 5, 6, 7, 8, 9]