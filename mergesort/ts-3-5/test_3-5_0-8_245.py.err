import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from mergesort import mergesort

import pytest

def test_mergesort():
    # Test empty list
    assert mergesort([]) == []
    
    # Test sorted list
    assert mergesort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
    
    # Test reverse sorted list
    assert mergesort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
    
    # Test list with duplicates
    assert mergesort([3, 2, 3, 1, 2]) == [1, 2, 2, 3, 3]
    
    # Test list with negative numbers
    assert mergesort([-3, -1, -5, -2, -4]) == [-5, -4, -3, -2, -1]

def test_sort():
    # Test sort with empty list
    assert mergesort.sort([]) == []
    
    # Test sort with already sorted list
    assert mergesort.sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

    # Test sort with reverse sorted list
    assert mergesort.sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

    # Test sort with list of one element
    assert mergesort.sort([7]) == [7]

def test_merge():
    # Test merge with two empty lists
    assert mergesort.merge([], []) == []
    
    # Test merge with one empty list and one non-empty list
    assert mergesort.merge([], [1, 2, 3]) == [1, 2, 3]
    
    # Test merge with overlapping elements in lists
    assert mergesort.merge([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]
    
    # Test merge with reverse sorted lists
    assert mergesort.merge([5, 3, 1], [6, 4, 2]) == [1, 2, 3, 4, 5, 6]