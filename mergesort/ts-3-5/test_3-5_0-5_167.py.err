import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from mergesort import mergesort

def test_mergesort():
    # Test case for empty list
    assert mergesort([]) == []

    # Test case for list with one element
    assert mergesort([5]) == [5]

    # Test case for list with two elements in reverse order
    assert mergesort([9, 3]) == [3, 9]

    # Test case for list with multiple elements in random order
    assert mergesort([4, 2, 7, 1, 8, 5, 3, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]

def test_sort():
    # Test case for empty list
    assert mergesort.sort([]) == []

    # Test case for list with one element
    assert mergesort.sort([5]) == [5]

    # Test case for list with two elements in reverse order
    assert mergesort.sort([9, 3]) == [3, 9]

    # Test case for list with multiple elements in random order
    assert mergesort.sort([4, 2, 7, 1, 8, 5, 3, 6]) == [1, 2, 3, 4, 5, 6, 7, 8]

def test_merge():
    # Test case for merging two empty lists
    assert mergesort.merge([], []) == []

    # Test case for merging an empty list with a non-empty list
    assert mergesort.merge([], [1, 2, 3]) == [1, 2, 3]

    # Test case for merging two non-empty lists with overlapping elements
    assert mergesort.merge([1, 3, 5], [2, 4, 6]) == [1, 2, 3, 4, 5, 6]

    # Test case for merging two non-empty lists with some elements in common
    assert mergesort.merge([1, 2, 4], [2, 3, 5]) == [1, 2, 2, 3, 4, 5]