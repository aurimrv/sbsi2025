import os
import sys
from collections import deque

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import mergesort

def test_sort_empty_list():
    assert mergesort.mergesort([]) == []

def test_sort_single_element_list():
    assert mergesort.mergesort([5]) == [5]

def test_sort_already_sorted_list():
    assert mergesort.mergesort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

def test_sort_reverse_sorted_list():
    assert mergesort.mergesort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

def test_sort_mixed_elements_list():
    assert mergesort.mergesort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]

def test_merge_empty_lists():
    assert mergesort.mergesort([], []) == []

def test_merge_single_element_lists():
    assert mergesort.mergesort([5], [3]) == [3, 5]

def test_merge_lists_with_same_elements():
    assert mergesort.mergesort([1, 2, 3], [1, 2, 3]) == [1, 1, 2, 2, 3, 3]

def test_merge_different_length_lists():
    assert mergesort.mergesort([1, 3, 5], [2, 4]) == [1, 2, 3, 4, 5]

def test_mergesort_large_random_list():
    input_list = [9, 2, 8, 4, 5, 7, 3, 1, 6, 0]
    expected_output = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
    assert mergesort.mergesort(input_list) == expected_output