[*] Start mutation process:
   - targets: word_squares.py
   - tests: ./ALL-SMART
[*] 18 tests passed:
   - test_word_squares_MOSA [0.05852 s]
   - test_word_squares_DYNAMOSA [0.04384 s]
   - test_word_squares_WHOLE_SUITE [0.04553 s]
   - test_word_squares_MIO [0.04396 s]
[*] Start mutants generation and execution:
   - [#   1] AOR word_squares: 
--------------------------------------------------------------------------------
  15:             prefix += square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
- 19:             construct(square + [prefix_word])
+ 19:             construct(square - [prefix_word])
  20:     
  21:     construct.squares = []
  22:     
  23:     
--------------------------------------------------------------------------------
[0.07978 s] incompetent

TypeError: word_squares:19: TypeError: unsupported operand type(s) for -: 'list' and 'list'

   - [#   2] ASR word_squares: 
--------------------------------------------------------------------------------
  11:         
  12:         prefix = ''
  13:         idx = len(square)
  14:         for i in range(idx):
- 15:             prefix += square[i][idx]
+ 15:             prefix -= square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
  19:             construct(square + [prefix_word])
--------------------------------------------------------------------------------
[0.07819 s] incompetent

TypeError: word_squares:15: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#   3] COI word_squares: 
--------------------------------------------------------------------------------
   4:     
   5:     trie = Trie(words)
   6:     
   7:     def construct(square):
-  8:         if len(square) == len(square[0]):
+  8:         if not (len(square) == len(square[0])):
   9:             construct.squares.append(square)
  10:             return
  11:         
  12:         prefix = ''
--------------------------------------------------------------------------------
[0.07794 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.word_squares(dict_0)
        trie_0 = module_1.Trie(var_0)
>       assert trie_0.head == {}
E       AssertionError

ALL-SMART/test_word_squares_DYNAMOSA.py:15: AssertionError
   - [#   4] OIL word_squares: 
--------------------------------------------------------------------------------
  12:         prefix = ''
  13:         idx = len(square)
  14:         for i in range(idx):
  15:             prefix += square[i][idx]
- 16:         
+ 16:             break
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
  19:             construct(square + [prefix_word])
  20:     
--------------------------------------------------------------------------------
[0.06510 s] survived
   - [#   5] OIL word_squares: 
--------------------------------------------------------------------------------
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
  19:             construct(square + [prefix_word])
- 20:     
+ 20:             break
  21:     construct.squares = []
  22:     
  23:     
  24:     for word in words:
--------------------------------------------------------------------------------
[0.06735 s] survived
   - [#   6] OIL word_squares: 
--------------------------------------------------------------------------------
  22:     
  23:     
  24:     for word in words:
  25:         construct([word])
- 26:     
+ 26:         break
  27:     return construct.squares
--------------------------------------------------------------------------------
[0.06765 s] survived
   - [#   7] RIL word_squares: 
--------------------------------------------------------------------------------
  10:             return
  11:         
  12:         prefix = ''
  13:         idx = len(square)
- 14:         for i in range(idx):
+ 14:         for i in reversed(range(idx)):
  15:             prefix += square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
--------------------------------------------------------------------------------
[0.06654 s] survived
   - [#   8] RIL word_squares: 
--------------------------------------------------------------------------------
  14:         for i in range(idx):
  15:             prefix += square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
- 18:         for prefix_word in prefix_words:
+ 18:         for prefix_word in reversed(prefix_words):
  19:             construct(square + [prefix_word])
  20:     
  21:     construct.squares = []
  22:     
--------------------------------------------------------------------------------
[0.06652 s] survived
   - [#   9] RIL word_squares: 
--------------------------------------------------------------------------------
  20:     
  21:     construct.squares = []
  22:     
  23:     
- 24:     for word in words:
+ 24:     for word in reversed(words):
  25:         construct([word])
  26:     
  27:     return construct.squares
--------------------------------------------------------------------------------
[0.08363 s] incompetent

TypeError: word_squares:24: TypeError: 'set' object is not reversible

   - [#  10] ROR word_squares: 
--------------------------------------------------------------------------------
   4:     
   5:     trie = Trie(words)
   6:     
   7:     def construct(square):
-  8:         if len(square) == len(square[0]):
+  8:         if len(square) != len(square[0]):
   9:             construct.squares.append(square)
  10:             return
  11:         
  12:         prefix = ''
--------------------------------------------------------------------------------
[0.07642 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.word_squares(dict_0)
        trie_0 = module_1.Trie(var_0)
>       assert trie_0.head == {}
E       AssertionError

ALL-SMART/test_word_squares_DYNAMOSA.py:15: AssertionError
   - [#  11] SDL word_squares: 
--------------------------------------------------------------------------------
   1: from trie import Trie
   2: 
   3: def word_squares(words):
   4:     
-  5:     trie = Trie(words)
+  5:     pass
   6:     
   7:     def construct(square):
   8:         if len(square) == len(square[0]):
   9:             construct.squares.append(square)
--------------------------------------------------------------------------------
[0.07397 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
>       var_0 = module_0.word_squares(dict_0)

ALL-SMART/test_word_squares_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
word_squares:25: in word_squares
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

square = ['GCr(>EDUGS?k8 nE']

>   ???
E   NameError: name 'trie' is not defined

word_squares:17: NameError
   - [#  12] SDL word_squares: 
--------------------------------------------------------------------------------
   5:     trie = Trie(words)
   6:     
   7:     def construct(square):
   8:         if len(square) == len(square[0]):
-  9:             construct.squares.append(square)
+  9:             pass
  10:             return
  11:         
  12:         prefix = ''
  13:         idx = len(square)
--------------------------------------------------------------------------------
[0.06561 s] survived
   - [#  13] SDL word_squares: 
--------------------------------------------------------------------------------
   6:     
   7:     def construct(square):
   8:         if len(square) == len(square[0]):
   9:             construct.squares.append(square)
- 10:             return
+ 10:             pass
  11:         
  12:         prefix = ''
  13:         idx = len(square)
  14:         for i in range(idx):
--------------------------------------------------------------------------------
[0.08111 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.word_squares(dict_0)
        trie_0 = module_1.Trie(var_0)
        assert trie_0.head == {}
>       var_1 = module_0.word_squares(str_0)

ALL-SMART/test_word_squares_DYNAMOSA.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
word_squares:25: in word_squares
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

square = ['G']

>   ???
E   IndexError: string index out of range

word_squares:15: IndexError
   - [#  14] SDL word_squares: 
--------------------------------------------------------------------------------
   8:         if len(square) == len(square[0]):
   9:             construct.squares.append(square)
  10:             return
  11:         
- 12:         prefix = ''
+ 12:         pass
  13:         idx = len(square)
  14:         for i in range(idx):
  15:             prefix += square[i][idx]
  16:         
--------------------------------------------------------------------------------
[0.07740 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
>       var_0 = module_0.word_squares(dict_0)

ALL-SMART/test_word_squares_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
word_squares:25: in word_squares
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

square = ['GCr(>EDUGS?k8 nE']

>   ???
E   UnboundLocalError: local variable 'prefix' referenced before assignment

word_squares:15: UnboundLocalError
   - [#  15] SDL word_squares: 
--------------------------------------------------------------------------------
   9:             construct.squares.append(square)
  10:             return
  11:         
  12:         prefix = ''
- 13:         idx = len(square)
+ 13:         pass
  14:         for i in range(idx):
  15:             prefix += square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
--------------------------------------------------------------------------------
[0.07717 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
>       var_0 = module_0.word_squares(dict_0)

ALL-SMART/test_word_squares_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
word_squares:25: in word_squares
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

square = ['GCr(>EDUGS?k8 nE']

>   ???
E   NameError: name 'idx' is not defined

word_squares:14: NameError
   - [#  16] SDL word_squares: 
--------------------------------------------------------------------------------
  13:         idx = len(square)
  14:         for i in range(idx):
  15:             prefix += square[i][idx]
  16:         
- 17:         prefix_words = trie.get_all_common_prefix(prefix)
+ 17:         pass
  18:         for prefix_word in prefix_words:
  19:             construct(square + [prefix_word])
  20:     
  21:     construct.squares = []
--------------------------------------------------------------------------------
[0.08042 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
>       var_0 = module_0.word_squares(dict_0)

ALL-SMART/test_word_squares_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
word_squares:25: in word_squares
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

square = ['GCr(>EDUGS?k8 nE']

>   ???
E   NameError: name 'prefix_words' is not defined

word_squares:18: NameError
   - [#  17] SDL word_squares: 
--------------------------------------------------------------------------------
  15:             prefix += square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
- 19:             construct(square + [prefix_word])
+ 19:             pass
  20:     
  21:     construct.squares = []
  22:     
  23:     
--------------------------------------------------------------------------------
[0.06628 s] survived
   - [#  18] SDL word_squares: 
--------------------------------------------------------------------------------
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
  19:             construct(square + [prefix_word])
  20:     
- 21:     construct.squares = []
+ 21:     pass
  22:     
  23:     
  24:     for word in words:
  25:         construct([word])
--------------------------------------------------------------------------------
[0.07966 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
>       var_0 = module_0.word_squares(dict_0)

ALL-SMART/test_word_squares_DYNAMOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

words = {'GCr(>EDUGS?k8 nE': 'GCr(>EDUGS?k8 nE'}

>   ???
E   AttributeError: 'function' object has no attribute 'squares'

word_squares:27: AttributeError
   - [#  19] SDL word_squares: 
--------------------------------------------------------------------------------
  21:     construct.squares = []
  22:     
  23:     
  24:     for word in words:
- 25:         construct([word])
+ 25:         pass
  26:     
  27:     return construct.squares
--------------------------------------------------------------------------------
[0.06228 s] survived
   - [#  20] SDL word_squares: 
--------------------------------------------------------------------------------
  23:     
  24:     for word in words:
  25:         construct([word])
  26:     
- 27:     return construct.squares
+ 27:     pass
--------------------------------------------------------------------------------
[0.07717 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/word-squares/./trie.py:7: TypeError: 'NoneType' object is not iterable

   - [#  21] ZIL word_squares: 
--------------------------------------------------------------------------------
  11:         
  12:         prefix = ''
  13:         idx = len(square)
  14:         for i in range(idx):
- 15:             prefix += square[i][idx]
+ 15:             break
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
  19:             construct(square + [prefix_word])
--------------------------------------------------------------------------------
[0.07956 s] killed by ALL-SMART/test_word_squares_DYNAMOSA.py::test_case_1

def test_case_1():
        str_0 = 'GCr(>EDUGS?k8 nE'
        dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0, str_0: str_0}
        var_0 = module_0.word_squares(dict_0)
        trie_0 = module_1.Trie(var_0)
>       assert trie_0.head == {}
E       AssertionError

ALL-SMART/test_word_squares_DYNAMOSA.py:15: AssertionError
   - [#  22] ZIL word_squares: 
--------------------------------------------------------------------------------
  15:             prefix += square[i][idx]
  16:         
  17:         prefix_words = trie.get_all_common_prefix(prefix)
  18:         for prefix_word in prefix_words:
- 19:             construct(square + [prefix_word])
+ 19:             break
  20:     
  21:     construct.squares = []
  22:     
  23:     
--------------------------------------------------------------------------------
[0.06683 s] survived
   - [#  23] ZIL word_squares: 
--------------------------------------------------------------------------------
  21:     construct.squares = []
  22:     
  23:     
  24:     for word in words:
- 25:         construct([word])
+ 25:         break
  26:     
  27:     return construct.squares
--------------------------------------------------------------------------------
[0.06621 s] survived
[*] Mutation score [2.27621 s]: 47.4%
   - all: 23
   - killed: 9 (39.1%)
   - survived: 10 (43.5%)
   - incompetent: 4 (17.4%)
   - timeout: 0 (0.0%)
