[*] Start mutation process:
   - targets: trie.py
   - tests: ts-3-5/test_3-5_0-7_223.py
[*] 6 tests passed:
   - test_3-5_0-7_223 [0.19191 s]
[*] Start mutants generation and execution:
   - [#   1] AOR trie: 
--------------------------------------------------------------------------------
  30:             if self.eof in node:
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
- 34:                 words.extend(getWords(val, prefix + key))
+ 34:                 words.extend(getWords(val, prefix - key))
  35:             return words
  36:         
  37:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.20575 s] incompetent

TypeError: trie:34: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   2] ASR trie: 
--------------------------------------------------------------------------------
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
  26:             node = node[letter]
- 27:             idx += 1
+ 27:             idx -= 1
  28:         
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
  31:                 return [prefix]
--------------------------------------------------------------------------------
[0.21397 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#   3] CDI trie: 
--------------------------------------------------------------------------------
   1: class Trie:
   2:     
   3:     eof = '__eof__'
   4:     
-  5:     def __init__(self, words):
-  6:         self.head = {}
-  7:         for word in words:
-  8:             current = self.head
-  9:             for letter in word:
- 10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
- 12:     
+  5:     @classmethod
+  6:     def __init__(self, words):
+  7:         self.head = {}
+  8:         for word in words:
+  9:             current = self.head
+ 10:             for letter in word:
+ 11:                 current = current.setdefault(letter, {})
+ 12:             current[self.eof] = self.eof
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
--------------------------------------------------------------------------------
[0.20602 s] survived
   - [#   4] CDI trie: 
--------------------------------------------------------------------------------
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
- 13:     def add(self, word):
- 14:         current = self.head
- 15:         for letter in word:
- 16:             current = current.setdefault(letter, {})
- 17:         current[self.eof] = self.eof
- 18:     
+ 13:     @classmethod
+ 14:     def add(self, word):
+ 15:         current = self.head
+ 16:         for letter in word:
+ 17:             current = current.setdefault(letter, {})
+ 18:         current[self.eof] = self.eof
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
--------------------------------------------------------------------------------
[0.20962 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
>       trie.add('dog')

ts-3-5/test_3-5_0-7_223.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'trie.Trie'>, word = 'dog'

>   ???
E   AttributeError: type object 'Trie' has no attribute 'head'

trie:15: AttributeError
   - [#   5] CDI trie: 
--------------------------------------------------------------------------------
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
  17:         current[self.eof] = self.eof
  18:     
- 19:     def get_all_common_prefix(self, prefix):
- 20:         idx = 0
- 21:         node = self.head
- 22:         while idx < len(prefix):
- 23:             letter = prefix[idx]
- 24:             if letter not in node:
- 25:                 return []
- 26:             node = node[letter]
- 27:             idx += 1
- 28:         
- 29:         def getWords(node, prefix):
- 30:             if self.eof in node:
- 31:                 return [prefix]
- 32:             words = []
- 33:             for (key, val) in node.items():
- 34:                 words.extend(getWords(val, prefix + key))
- 35:             return words
- 36:         
- 37:         return getWords(node, prefix)
+ 19:     @classmethod
+ 20:     def get_all_common_prefix(self, prefix):
+ 21:         idx = 0
+ 22:         node = self.head
+ 23:         while idx < len(prefix):
+ 24:             letter = prefix[idx]
+ 25:             if letter not in node:
+ 26:                 return []
+ 27:             node = node[letter]
+ 28:             idx += 1
+ 29:         
+ 30:         def getWords(node, prefix):
+ 31:             if self.eof in node:
+ 32:                 return [prefix]
+ 33:             words = []
+ 34:             for (key, val) in node.items():
+ 35:                 words.extend(getWords(val, prefix + key))
+ 36:             return words
+ 37:         
+ 38:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.20894 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'trie.Trie'>, prefix = 'b'

>   ???
E   AttributeError: type object 'Trie' has no attribute 'head'

trie:22: AttributeError
   - [#   6] COD trie: 
--------------------------------------------------------------------------------
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
- 24:             if letter not in node:
+ 24:             if letter in node:
  25:                 return []
  26:             node = node[letter]
  27:             idx += 1
  28:         
--------------------------------------------------------------------------------
[0.20715 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#   7] COI trie: 
--------------------------------------------------------------------------------
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
- 22:         while idx < len(prefix):
+ 22:         while not (idx < len(prefix)):
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
  26:             node = node[letter]
--------------------------------------------------------------------------------
[0.21109 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#   8] COI trie: 
--------------------------------------------------------------------------------
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
- 24:             if letter not in node:
+ 24:             if not (letter not in node):
  25:                 return []
  26:             node = node[letter]
  27:             idx += 1
  28:         
--------------------------------------------------------------------------------
[0.20975 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#   9] COI trie: 
--------------------------------------------------------------------------------
  26:             node = node[letter]
  27:             idx += 1
  28:         
  29:         def getWords(node, prefix):
- 30:             if self.eof in node:
+ 30:             if not (self.eof in node):
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
--------------------------------------------------------------------------------
[0.21242 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  10] COI trie: 
--------------------------------------------------------------------------------
  26:             node = node[letter]
  27:             idx += 1
  28:         
  29:         def getWords(node, prefix):
- 30:             if self.eof in node:
+ 30:             if self.eof not in node:
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
--------------------------------------------------------------------------------
[0.21078 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  11] OIL trie: 
--------------------------------------------------------------------------------
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
- 12:     
+ 12:             break
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
--------------------------------------------------------------------------------
[0.21005 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  12] OIL trie: 
--------------------------------------------------------------------------------
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
- 12:     
+ 11:                 break
+ 12:             current[self.eof] = self.eof
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
--------------------------------------------------------------------------------
[0.21148 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  13] OIL trie: 
--------------------------------------------------------------------------------
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
- 17:         current[self.eof] = self.eof
- 18:     
+ 17:             break
+ 18:         current[self.eof] = self.eof
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
--------------------------------------------------------------------------------
[0.21309 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
        trie.add('dog')
>       assert trie.head == {'d': {'o': {'g': {'__eof__': '__eof__'}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:17: AssertionError
   - [#  14] OIL trie: 
--------------------------------------------------------------------------------
  24:             if letter not in node:
  25:                 return []
  26:             node = node[letter]
  27:             idx += 1
- 28:         
+ 28:             break
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
  31:                 return [prefix]
  32:             words = []
--------------------------------------------------------------------------------
[0.18547 s] survived
   - [#  15] OIL trie: 
--------------------------------------------------------------------------------
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
- 35:             return words
- 36:         
+ 35:                 break
+ 36:             return words
  37:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.18800 s] survived
   - [#  16] RIL trie: 
--------------------------------------------------------------------------------
   3:     eof = '__eof__'
   4:     
   5:     def __init__(self, words):
   6:         self.head = {}
-  7:         for word in words:
+  7:         for word in reversed(words):
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
--------------------------------------------------------------------------------
[0.18792 s] survived
   - [#  17] RIL trie: 
--------------------------------------------------------------------------------
   5:     def __init__(self, words):
   6:         self.head = {}
   7:         for word in words:
   8:             current = self.head
-  9:             for letter in word:
+  9:             for letter in reversed(word):
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
  13:     def add(self, word):
--------------------------------------------------------------------------------
[0.20757 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  18] RIL trie: 
--------------------------------------------------------------------------------
  11:             current[self.eof] = self.eof
  12:     
  13:     def add(self, word):
  14:         current = self.head
- 15:         for letter in word:
+ 15:         for letter in reversed(word):
  16:             current = current.setdefault(letter, {})
  17:         current[self.eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
--------------------------------------------------------------------------------
[0.21023 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
        trie.add('dog')
>       assert trie.head == {'d': {'o': {'g': {'__eof__': '__eof__'}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:17: AssertionError
   - [#  19] RIL trie: 
--------------------------------------------------------------------------------
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
  31:                 return [prefix]
  32:             words = []
- 33:             for (key, val) in node.items():
+ 33:             for (key, val) in reversed(node.items()):
  34:                 words.extend(getWords(val, prefix + key))
  35:             return words
  36:         
  37:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.20670 s] survived
   - [#  20] ROR trie: 
--------------------------------------------------------------------------------
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
- 22:         while idx < len(prefix):
+ 22:         while idx > len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
  26:             node = node[letter]
--------------------------------------------------------------------------------
[0.21375 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  21] ROR trie: 
--------------------------------------------------------------------------------
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
- 22:         while idx < len(prefix):
+ 22:         while idx <= len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
  26:             node = node[letter]
--------------------------------------------------------------------------------
[0.20971 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a350b80>, prefix = 'b'

>   ???
E   IndexError: string index out of range

trie:23: IndexError
   - [#  22] SDI trie: 
--------------------------------------------------------------------------------
   1: class Trie:
   2:     
   3:     eof = '__eof__'
   4:     
-  5:     def __init__(self, words):
-  6:         self.head = {}
-  7:         for word in words:
-  8:             current = self.head
-  9:             for letter in word:
- 10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
- 12:     
+  5:     @staticmethod
+  6:     def __init__(self, words):
+  7:         self.head = {}
+  8:         for word in words:
+  9:             current = self.head
+ 10:             for letter in word:
+ 11:                 current = current.setdefault(letter, {})
+ 12:             current[self.eof] = self.eof
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
--------------------------------------------------------------------------------
[0.21400 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/trie/ts-3-5/test_3-5_0-7_223.py:11: TypeError: Trie.__init__() missing 1 required positional argument: 'words'

   - [#  23] SDI trie: 
--------------------------------------------------------------------------------
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
- 13:     def add(self, word):
- 14:         current = self.head
- 15:         for letter in word:
- 16:             current = current.setdefault(letter, {})
- 17:         current[self.eof] = self.eof
- 18:     
+ 13:     @staticmethod
+ 14:     def add(self, word):
+ 15:         current = self.head
+ 16:         for letter in word:
+ 17:             current = current.setdefault(letter, {})
+ 18:         current[self.eof] = self.eof
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
--------------------------------------------------------------------------------
[0.20767 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/trie/ts-3-5/test_3-5_0-7_223.py:16: TypeError: Trie.add() missing 1 required positional argument: 'word'

   - [#  24] SDI trie: 
--------------------------------------------------------------------------------
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
  17:         current[self.eof] = self.eof
  18:     
- 19:     def get_all_common_prefix(self, prefix):
- 20:         idx = 0
- 21:         node = self.head
- 22:         while idx < len(prefix):
- 23:             letter = prefix[idx]
- 24:             if letter not in node:
- 25:                 return []
- 26:             node = node[letter]
- 27:             idx += 1
- 28:         
- 29:         def getWords(node, prefix):
- 30:             if self.eof in node:
- 31:                 return [prefix]
- 32:             words = []
- 33:             for (key, val) in node.items():
- 34:                 words.extend(getWords(val, prefix + key))
- 35:             return words
- 36:         
- 37:         return getWords(node, prefix)
+ 19:     @staticmethod
+ 20:     def get_all_common_prefix(self, prefix):
+ 21:         idx = 0
+ 22:         node = self.head
+ 23:         while idx < len(prefix):
+ 24:             letter = prefix[idx]
+ 25:             if letter not in node:
+ 26:                 return []
+ 27:             node = node[letter]
+ 28:             idx += 1
+ 29:         
+ 30:         def getWords(node, prefix):
+ 31:             if self.eof in node:
+ 32:                 return [prefix]
+ 33:             words = []
+ 34:             for (key, val) in node.items():
+ 35:                 words.extend(getWords(val, prefix + key))
+ 36:             return words
+ 37:         
+ 38:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.20799 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/trie/ts-3-5/test_3-5_0-7_223.py:22: TypeError: Trie.get_all_common_prefix() missing 1 required positional argument: 'prefix'

   - [#  25] SDL trie: 
--------------------------------------------------------------------------------
   1: class Trie:
   2:     
-  3:     eof = '__eof__'
+  3:     pass
   4:     
   5:     def __init__(self, words):
   6:         self.head = {}
   7:         for word in words:
--------------------------------------------------------------------------------
[0.21408 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
>       trie = Trie(words)

ts-3-5/test_3-5_0-7_223.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a0d6fe0>
words = ['apple', 'banana', 'cherry']

>   ???
E   AttributeError: 'Trie' object has no attribute 'eof'

trie:11: AttributeError
   - [#  26] SDL trie: 
--------------------------------------------------------------------------------
   2:     
   3:     eof = '__eof__'
   4:     
   5:     def __init__(self, words):
-  6:         self.head = {}
+  6:         pass
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
--------------------------------------------------------------------------------
[0.22060 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
>       trie = Trie(words)

ts-3-5/test_3-5_0-7_223.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a0926b0>
words = ['apple', 'banana', 'cherry']

>   ???
E   AttributeError: 'Trie' object has no attribute 'head'

trie:8: AttributeError
   - [#  27] SDL trie: 
--------------------------------------------------------------------------------
   4:     
   5:     def __init__(self, words):
   6:         self.head = {}
   7:         for word in words:
-  8:             current = self.head
+  8:             pass
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
--------------------------------------------------------------------------------
[0.20682 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
>       trie = Trie(words)

ts-3-5/test_3-5_0-7_223.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a125000>
words = ['apple', 'banana', 'cherry']

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

trie:10: UnboundLocalError
   - [#  28] SDL trie: 
--------------------------------------------------------------------------------
   6:         self.head = {}
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
- 10:                 current = current.setdefault(letter, {})
+ 10:                 pass
  11:             current[self.eof] = self.eof
  12:     
  13:     def add(self, word):
  14:         current = self.head
--------------------------------------------------------------------------------
[0.20606 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  29] SDL trie: 
--------------------------------------------------------------------------------
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
+ 11:             pass
  12:     
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
--------------------------------------------------------------------------------
[0.21169 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  30] SDL trie: 
--------------------------------------------------------------------------------
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
  13:     def add(self, word):
- 14:         current = self.head
+ 14:         pass
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
  17:         current[self.eof] = self.eof
  18:     
--------------------------------------------------------------------------------
[0.20920 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
>       trie.add('dog')

ts-3-5/test_3-5_0-7_223.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a0ba530>, word = 'dog'

>   ???
E   UnboundLocalError: local variable 'current' referenced before assignment

trie:16: UnboundLocalError
   - [#  31] SDL trie: 
--------------------------------------------------------------------------------
  12:     
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
- 16:             current = current.setdefault(letter, {})
+ 16:             pass
  17:         current[self.eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
--------------------------------------------------------------------------------
[0.21511 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
        trie.add('dog')
>       assert trie.head == {'d': {'o': {'g': {'__eof__': '__eof__'}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:17: AssertionError
   - [#  32] SDL trie: 
--------------------------------------------------------------------------------
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
- 17:         current[self.eof] = self.eof
+ 17:         pass
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
--------------------------------------------------------------------------------
[0.21344 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
        trie.add('dog')
>       assert trie.head == {'d': {'o': {'g': {'__eof__': '__eof__'}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:17: AssertionError
   - [#  33] SDL trie: 
--------------------------------------------------------------------------------
  16:             current = current.setdefault(letter, {})
  17:         current[self.eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
- 20:         idx = 0
+ 20:         pass
  21:         node = self.head
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
--------------------------------------------------------------------------------
[0.21102 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a310400>, prefix = 'b'

>   ???
E   UnboundLocalError: local variable 'idx' referenced before assignment

trie:22: UnboundLocalError
   - [#  34] SDL trie: 
--------------------------------------------------------------------------------
  17:         current[self.eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
- 21:         node = self.head
+ 21:         pass
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
--------------------------------------------------------------------------------
[0.20937 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a3dc370>, prefix = 'b'

>   ???
E   UnboundLocalError: local variable 'node' referenced before assignment

trie:24: UnboundLocalError
   - [#  35] SDL trie: 
--------------------------------------------------------------------------------
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
- 23:             letter = prefix[idx]
+ 23:             pass
  24:             if letter not in node:
  25:                 return []
  26:             node = node[letter]
  27:             idx += 1
--------------------------------------------------------------------------------
[0.21213 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a2d5e40>, prefix = 'b'

>   ???
E   NameError: name 'letter' is not defined

trie:24: NameError
   - [#  36] SDL trie: 
--------------------------------------------------------------------------------
  21:         node = self.head
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
- 25:                 return []
+ 25:                 pass
  26:             node = node[letter]
  27:             idx += 1
  28:         
  29:         def getWords(node, prefix):
--------------------------------------------------------------------------------
[0.21234 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix_no_match

def test_trie_get_all_common_prefix_no_match():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('x')

ts-3-5/test_3-5_0-7_223.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a127f10>, prefix = 'x'

>   ???
E   KeyError: 'x'

trie:26: KeyError
   - [#  37] SDL trie: 
--------------------------------------------------------------------------------
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
- 26:             node = node[letter]
+ 26:             pass
  27:             idx += 1
  28:         
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
--------------------------------------------------------------------------------
[0.21220 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  38] SDL trie: 
--------------------------------------------------------------------------------
  27:             idx += 1
  28:         
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
- 31:                 return [prefix]
+ 31:                 pass
  32:             words = []
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
  35:             return words
--------------------------------------------------------------------------------
[0.21498 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trie:37: in get_all_common_prefix
    ???
trie:34: in getWords
    ???
trie:34: in getWords
    ???
trie:34: in getWords
    ???
trie:34: in getWords
    ???
trie:34: in getWords
    ???
trie:34: in getWords
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = '__eof__', prefix = 'banana__eof__'

>   ???
E   AttributeError: 'str' object has no attribute 'items'

trie:33: AttributeError
   - [#  39] SDL trie: 
--------------------------------------------------------------------------------
  28:         
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
  31:                 return [prefix]
- 32:             words = []
+ 32:             pass
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
  35:             return words
  36:         
--------------------------------------------------------------------------------
[0.21098 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trie:37: in get_all_common_prefix
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, prefix = 'b'

>   ???
E   NameError: name 'words' is not defined

trie:34: NameError
   - [#  40] SDL trie: 
--------------------------------------------------------------------------------
  30:             if self.eof in node:
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
- 34:                 words.extend(getWords(val, prefix + key))
+ 34:                 pass
  35:             return words
  36:         
  37:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.20704 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  41] SDL trie: 
--------------------------------------------------------------------------------
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
- 35:             return words
+ 35:             pass
  36:         
  37:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.22999 s] incompetent

TypeError: trie:34: TypeError: 'NoneType' object is not iterable

   - [#  42] SDL trie: 
--------------------------------------------------------------------------------
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
  35:             return words
  36:         
- 37:         return getWords(node, prefix)
+ 37:         pass
--------------------------------------------------------------------------------
[0.21440 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  43] SVD trie: 
--------------------------------------------------------------------------------
   2:     
   3:     eof = '__eof__'
   4:     
   5:     def __init__(self, words):
-  6:         self.head = {}
+  6:         head = {}
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  44] SVD trie: 
--------------------------------------------------------------------------------
   4:     
   5:     def __init__(self, words):
   6:         self.head = {}
   7:         for word in words:
-  8:             current = self.head
+  8:             current = head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
--------------------------------------------------------------------------------
[0.20884 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
>       trie = Trie(words)

ts-3-5/test_3-5_0-7_223.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a488ac0>
words = ['apple', 'banana', 'cherry']

>   ???
E   NameError: name 'head' is not defined

trie:8: NameError
   - [#  45] SVD trie: 
--------------------------------------------------------------------------------
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
+ 11:             current[eof] = self.eof
  12:     
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
--------------------------------------------------------------------------------
[0.21058 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
>       trie = Trie(words)

ts-3-5/test_3-5_0-7_223.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a30f9a0>
words = ['apple', 'banana', 'cherry']

>   ???
E   NameError: name 'eof' is not defined

trie:11: NameError
   - [#  46] SVD trie: 
--------------------------------------------------------------------------------
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
  10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
+ 11:             current[self.eof] = eof
  12:     
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
--------------------------------------------------------------------------------
[0.20892 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
>       trie = Trie(words)

ts-3-5/test_3-5_0-7_223.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a1275e0>
words = ['apple', 'banana', 'cherry']

>   ???
E   NameError: name 'eof' is not defined

trie:11: NameError
   - [#  47] SVD trie: 
--------------------------------------------------------------------------------
  10:                 current = current.setdefault(letter, {})
  11:             current[self.eof] = self.eof
  12:     
  13:     def add(self, word):
- 14:         current = self.head
+ 14:         current = head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
  17:         current[self.eof] = self.eof
  18:     
--------------------------------------------------------------------------------
[0.21056 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
>       trie.add('dog')

ts-3-5/test_3-5_0-7_223.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a42ddb0>, word = 'dog'

>   ???
E   NameError: name 'head' is not defined

trie:14: NameError
   - [#  48] SVD trie: 
--------------------------------------------------------------------------------
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
- 17:         current[self.eof] = self.eof
+ 17:         current[eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
--------------------------------------------------------------------------------
[0.21069 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
>       trie.add('dog')

ts-3-5/test_3-5_0-7_223.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a3a12d0>, word = 'dog'

>   ???
E   NameError: name 'eof' is not defined

trie:17: NameError
   - [#  49] SVD trie: 
--------------------------------------------------------------------------------
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
  16:             current = current.setdefault(letter, {})
- 17:         current[self.eof] = self.eof
+ 17:         current[self.eof] = eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
--------------------------------------------------------------------------------
[0.20393 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
>       trie.add('dog')

ts-3-5/test_3-5_0-7_223.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a0faf80>, word = 'dog'

>   ???
E   NameError: name 'eof' is not defined

trie:17: NameError
   - [#  50] SVD trie: 
--------------------------------------------------------------------------------
  17:         current[self.eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
- 21:         node = self.head
+ 21:         node = head
  22:         while idx < len(prefix):
  23:             letter = prefix[idx]
  24:             if letter not in node:
  25:                 return []
--------------------------------------------------------------------------------
[0.20868 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <trie.Trie object at 0x74af1a0b8160>, prefix = 'b'

>   ???
E   NameError: name 'head' is not defined

trie:21: NameError
   - [#  51] SVD trie: 
--------------------------------------------------------------------------------
  26:             node = node[letter]
  27:             idx += 1
  28:         
  29:         def getWords(node, prefix):
- 30:             if self.eof in node:
+ 30:             if eof in node:
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
  34:                 words.extend(getWords(val, prefix + key))
--------------------------------------------------------------------------------
[0.20988 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       common_prefix = trie.get_all_common_prefix('b')

ts-3-5/test_3-5_0-7_223.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
trie:37: in get_all_common_prefix
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

node = {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, prefix = 'b'

>   ???
E   NameError: name 'eof' is not defined

trie:30: NameError
   - [#  52] ZIL trie: 
--------------------------------------------------------------------------------
   4:     
   5:     def __init__(self, words):
   6:         self.head = {}
   7:         for word in words:
-  8:             current = self.head
-  9:             for letter in word:
- 10:                 current = current.setdefault(letter, {})
- 11:             current[self.eof] = self.eof
+  8:             break
+  9:     
+ 10:     
+ 11:     
  12:     
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
--------------------------------------------------------------------------------
[0.22681 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  53] ZIL trie: 
--------------------------------------------------------------------------------
   6:         self.head = {}
   7:         for word in words:
   8:             current = self.head
   9:             for letter in word:
- 10:                 current = current.setdefault(letter, {})
+ 10:                 break
  11:             current[self.eof] = self.eof
  12:     
  13:     def add(self, word):
  14:         current = self.head
--------------------------------------------------------------------------------
[0.22666 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_init

def test_trie_init():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
>       assert trie.head == {'a': {'p': {'p': {'l': {'e': {'__eof__': '__eof__'}}}}}, 'b': {'a': {'n': {'a': {'n': {'a': {'__eof__': '__eof__'}}}}}}, 'c': {'h': {'e': {'r': {'r': {'y': {'__eof__': '__eof__'}}}}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:12: AssertionError
   - [#  54] ZIL trie: 
--------------------------------------------------------------------------------
  12:     
  13:     def add(self, word):
  14:         current = self.head
  15:         for letter in word:
- 16:             current = current.setdefault(letter, {})
+ 16:             break
  17:         current[self.eof] = self.eof
  18:     
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
--------------------------------------------------------------------------------
[0.20843 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_add

def test_trie_add():
        trie = Trie([])
        trie.add('dog')
>       assert trie.head == {'d': {'o': {'g': {'__eof__': '__eof__'}}}}
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:17: AssertionError
   - [#  55] ZIL trie: 
--------------------------------------------------------------------------------
  19:     def get_all_common_prefix(self, prefix):
  20:         idx = 0
  21:         node = self.head
  22:         while idx < len(prefix):
- 23:             letter = prefix[idx]
- 24:             if letter not in node:
- 25:                 return []
- 26:             node = node[letter]
- 27:             idx += 1
+ 23:             break
+ 24:         
+ 25:         
+ 26:         
+ 27:         
  28:         
  29:         def getWords(node, prefix):
  30:             if self.eof in node:
  31:                 return [prefix]
--------------------------------------------------------------------------------
[0.20970 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
   - [#  56] ZIL trie: 
--------------------------------------------------------------------------------
  30:             if self.eof in node:
  31:                 return [prefix]
  32:             words = []
  33:             for (key, val) in node.items():
- 34:                 words.extend(getWords(val, prefix + key))
+ 34:                 break
  35:             return words
  36:         
  37:         return getWords(node, prefix)
--------------------------------------------------------------------------------
[0.20573 s] killed by ts-3-5/test_3-5_0-7_223.py::test_trie_get_all_common_prefix

def test_trie_get_all_common_prefix():
        words = ['apple', 'banana', 'cherry']
        trie = Trie(words)
        common_prefix = trie.get_all_common_prefix('b')
>       assert common_prefix == ['banana']
E       AssertionError

ts-3-5/test_3-5_0-7_223.py:23: AssertionError
[*] Mutation score [13.06120 s]: 90.0%
   - all: 56
   - killed: 45 (80.4%)
   - survived: 5 (8.9%)
   - incompetent: 6 (10.7%)
   - timeout: 0 (0.0%)
