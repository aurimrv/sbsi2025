[34m[*][0m Start mutation process:
[36m   -[0m targets: factorial.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 1 tests passed:
[36m   -[0m test_factorial [0.16235 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     return reduce((lambda x, y: (x / y)), range(1, n + 1))[0m
--------------------------------------------------------------------------------
[0.12956 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
        assert factorial(1) == 1
>       assert factorial(3) == 6
E       AssertionError

0-ts/test_factorial.py:7: AssertionError
[36m   -[0m [#   2] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     return reduce((lambda x, y: (x // y)), range(1, n + 1))[0m
--------------------------------------------------------------------------------
[0.12067 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
        assert factorial(1) == 1
>       assert factorial(3) == 6
E       AssertionError

0-ts/test_factorial.py:7: AssertionError
[36m   -[0m [#   3] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     return reduce((lambda x, y: (x ** y)), range(1, n + 1))[0m
--------------------------------------------------------------------------------
[0.12453 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
        assert factorial(1) == 1
>       assert factorial(3) == 6
E       AssertionError

0-ts/test_factorial.py:7: AssertionError
[36m   -[0m [#   4] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     return reduce((lambda x, y: (x * y)), range(1, n - 1))[0m
--------------------------------------------------------------------------------
[0.12373 s] [36mincompetent[0m

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

[36m   -[0m [#   5] COI factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
[34m- 15:     if n <= 0:[0m
[32m+ 15:     if not (n <= 0):[0m
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.11456 s] [36mincompetent[0m

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

[36m   -[0m [#   6] CRP factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
[34m- 15:     if n <= 0:[0m
[32m+ 15:     if n <= 1:[0m
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.12283 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
>       assert factorial(1) == 1
E       AssertionError

0-ts/test_factorial.py:6: AssertionError
[36m   -[0m [#   7] CRP factorial: 
--------------------------------------------------------------------------------
  12:         of 0 or less will output 0.
  13:     '''
  14:     
  15:     if n <= 0:
[34m- 16:         return 0[0m
[32m+ 16:         return 1[0m
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.09190 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
>       assert factorial(0) == 0
E       AssertionError

0-ts/test_factorial.py:5: AssertionError
[36m   -[0m [#   8] CRP factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     return reduce((lambda x, y: (x * y)), range(2, n + 1))[0m
--------------------------------------------------------------------------------
[0.12741 s] [36mincompetent[0m

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

[36m   -[0m [#   9] CRP factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     return reduce((lambda x, y: (x * y)), range(1, n + 2))[0m
--------------------------------------------------------------------------------
[0.09376 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
>       assert factorial(1) == 1
E       AssertionError

0-ts/test_factorial.py:6: AssertionError
[36m   -[0m [#  10] ROR factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
[34m- 15:     if n <= 0:[0m
[32m+ 15:     if n >= 0:[0m
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.12654 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
>       assert factorial(1) == 1
E       AssertionError

0-ts/test_factorial.py:6: AssertionError
[36m   -[0m [#  11] ROR factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
[34m- 15:     if n <= 0:[0m
[32m+ 15:     if n < 0:[0m
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.09937 s] [36mincompetent[0m

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

[36m   -[0m [#  12] SDL factorial: 
--------------------------------------------------------------------------------
  12:         of 0 or less will output 0.
  13:     '''
  14:     
  15:     if n <= 0:
[34m- 16:         return 0[0m
[32m+ 16:         pass[0m
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.11679 s] [36mincompetent[0m

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

[36m   -[0m [#  13] SDL factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
[34m- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))[0m
[32m+ 18:     pass[0m
--------------------------------------------------------------------------------
[0.12630 s] [32mkilled[0m by 0-ts/test_factorial.py::test_factorial

def test_factorial():
        assert factorial(0) == 0
>       assert factorial(1) == 1
E       AssertionError

0-ts/test_factorial.py:6: AssertionError
[34m[*][0m Mutation score [1.93519 s]: [1m[34m100.0%[0m
[36m   -[0m all: 13
[36m   -[0m killed: 8 (61.5%)
[36m   -[0m survived: 0 (0.0%)
[36m   -[0m incompetent: 5 (38.5%)
[36m   -[0m timeout: 0 (0.0%)
