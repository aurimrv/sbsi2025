[*] Start mutation process:
   - targets: factorial.py
   - tests: ./ALL-SMART
[*] 11 tests passed:
   - test_factorial_MOSA [0.05632 s]
   - test_factorial_DYNAMOSA [0.04244 s]
   - test_factorial_WHOLE_SUITE [0.03825 s]
   - test_factorial_MIO [0.04514 s]
[*] Start mutants generation and execution:
   - [#   1] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
+ 18:     return reduce((lambda x, y: (x / y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.08361 s] killed by ALL-SMART/test_factorial_DYNAMOSA.py::test_case_3

def test_case_3():
        int_0 = 561
        var_0 = module_0.factorial(int_0)
>       assert var_0 == 20072279406586251523219428427060967201647683023116656760654790403532244991241374287944540344906653128276596194573674221153424826825918563176133876508424208573843846037240962216612755190526691791493296713445212690445151722874017910124404050880256627075103246554369981613773134391922024279013079865764373374288292398988856688485792772569785486227583231439978652777534068097047186201708930075236400738695469499293458683065478678860164150846599255077524898840606430176544649143440717845159694902197616608995516049750114427326252957581305754298716435632786370059880322468623412088289840701740801334916866375560727552218256673729290986429819931057168018207362270368688293648431611711722286240135265580807833343670673710873734940638380878067982640079694992390409922975941507134206807094080617416248012683340310992231022699432393374417423593602734736684676509767952380817392245546896603142462735724265301900819451275807591319993364651595034870947836881799914942927111805771477485954294070027667695827326144183674521799221774040084390614093979946177949813242476333615190466769845579704537950946622148573163605458722380928241007514348243639324969401243725738070279668629504000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
E       AssertionError

ALL-SMART/test_factorial_DYNAMOSA.py:26: AssertionError
   - [#   2] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
+ 18:     return reduce((lambda x, y: (x // y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.07444 s] killed by ALL-SMART/test_factorial_DYNAMOSA.py::test_case_3

def test_case_3():
        int_0 = 561
        var_0 = module_0.factorial(int_0)
>       assert var_0 == 20072279406586251523219428427060967201647683023116656760654790403532244991241374287944540344906653128276596194573674221153424826825918563176133876508424208573843846037240962216612755190526691791493296713445212690445151722874017910124404050880256627075103246554369981613773134391922024279013079865764373374288292398988856688485792772569785486227583231439978652777534068097047186201708930075236400738695469499293458683065478678860164150846599255077524898840606430176544649143440717845159694902197616608995516049750114427326252957581305754298716435632786370059880322468623412088289840701740801334916866375560727552218256673729290986429819931057168018207362270368688293648431611711722286240135265580807833343670673710873734940638380878067982640079694992390409922975941507134206807094080617416248012683340310992231022699432393374417423593602734736684676509767952380817392245546896603142462735724265301900819451275807591319993364651595034870947836881799914942927111805771477485954294070027667695827326144183674521799221774040084390614093979946177949813242476333615190466769845579704537950946622148573163605458722380928241007514348243639324969401243725738070279668629504000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
E       AssertionError

ALL-SMART/test_factorial_DYNAMOSA.py:26: AssertionError
   - [#   3] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
+ 18:     return reduce((lambda x, y: (x ** y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.07498 s] killed by ALL-SMART/test_factorial_DYNAMOSA.py::test_case_3

def test_case_3():
        int_0 = 561
        var_0 = module_0.factorial(int_0)
>       assert var_0 == 20072279406586251523219428427060967201647683023116656760654790403532244991241374287944540344906653128276596194573674221153424826825918563176133876508424208573843846037240962216612755190526691791493296713445212690445151722874017910124404050880256627075103246554369981613773134391922024279013079865764373374288292398988856688485792772569785486227583231439978652777534068097047186201708930075236400738695469499293458683065478678860164150846599255077524898840606430176544649143440717845159694902197616608995516049750114427326252957581305754298716435632786370059880322468623412088289840701740801334916866375560727552218256673729290986429819931057168018207362270368688293648431611711722286240135265580807833343670673710873734940638380878067982640079694992390409922975941507134206807094080617416248012683340310992231022699432393374417423593602734736684676509767952380817392245546896603142462735724265301900819451275807591319993364651595034870947836881799914942927111805771477485954294070027667695827326144183674521799221774040084390614093979946177949813242476333615190466769845579704537950946622148573163605458722380928241007514348243639324969401243725738070279668629504000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
E       AssertionError

ALL-SMART/test_factorial_DYNAMOSA.py:26: AssertionError
   - [#   4] AOR factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
+ 18:     return reduce((lambda x, y: (x * y)), range(1, n - 1))
--------------------------------------------------------------------------------
[0.07368 s] incompetent

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

   - [#   5] COI factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
- 15:     if n <= 0:
+ 15:     if not (n <= 0):
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.07657 s] incompetent

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

   - [#   6] ROR factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
- 15:     if n <= 0:
+ 15:     if n >= 0:
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.07809 s] incompetent

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

   - [#   7] ROR factorial: 
--------------------------------------------------------------------------------
  11:         The factorial number for n (n!).  Input
  12:         of 0 or less will output 0.
  13:     '''
  14:     
- 15:     if n <= 0:
+ 15:     if n < 0:
  16:         return 0
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.07479 s] incompetent

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

   - [#   8] SDL factorial: 
--------------------------------------------------------------------------------
  12:         of 0 or less will output 0.
  13:     '''
  14:     
  15:     if n <= 0:
- 16:         return 0
+ 16:         pass
  17:     
  18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
--------------------------------------------------------------------------------
[0.07227 s] incompetent

TypeError: factorial:18: TypeError: reduce() of empty iterable with no initial value

   - [#   9] SDL factorial: 
--------------------------------------------------------------------------------
  14:     
  15:     if n <= 0:
  16:         return 0
  17:     
- 18:     return reduce((lambda x, y: (x * y)), range(1, n + 1))
+ 18:     pass
--------------------------------------------------------------------------------
[0.07419 s] killed by ALL-SMART/test_factorial_DYNAMOSA.py::test_case_1

def test_case_1():
        bool_0 = True
        var_0 = module_0.factorial(bool_0)
>       assert var_0 == 1
E       AssertionError

ALL-SMART/test_factorial_DYNAMOSA.py:18: AssertionError
[*] Mutation score [0.96937 s]: 100.0%
   - all: 9
   - killed: 4 (44.4%)
   - survived: 0 (0.0%)
   - incompetent: 5 (55.6%)
   - timeout: 0 (0.0%)
