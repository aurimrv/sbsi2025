[*] Start mutation process:
   - targets: deque.py
   - tests: ./ALL-SMART
[*] 32 tests passed:
   - test_deque_DYNAMOSA [0.07657 s]
   - test_deque_WHOLE_SUITE [0.04323 s]
   - test_deque_MOSA [0.04275 s]
   - test_deque_MIO [0.05343 s]
[*] Start mutants generation and execution:
   - [#   1] CDI deque: 
--------------------------------------------------------------------------------
  20:     size(): returns the count of items in the queue (returns 0 if the queue
  21:     is empty).
  22:     '''
  23:     
- 24:     def __init__(self, data=None):
- 25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
- 27:     
+ 24:     @classmethod
+ 25:     def __init__(self, data=None):
+ 26:         '''Initialize deque.'''
+ 27:         self._container = DoubleLinkedList(data)
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
--------------------------------------------------------------------------------
[0.07917 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_2

def test_case_2():
        deque_0 = module_0.Deque()
        var_0 = deque_0.append(deque_0)
        bool_0 = True
        deque_1 = module_0.Deque()
        var_1 = deque_0.peekleft()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_MOSA.py:26: AssertionError
   - [#   2] CDI deque: 
--------------------------------------------------------------------------------
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
  26:         self._container = DoubleLinkedList(data)
  27:     
- 28:     def append(self, val):
- 29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
- 31:     
+ 28:     @classmethod
+ 29:     def append(self, val):
+ 30:         '''Add value to the end of the deque.'''
+ 31:         self._container.append(val)
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
--------------------------------------------------------------------------------
[0.08117 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
>       var_1 = deque_0.append(deque_0)

ALL-SMART/test_deque_MOSA.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>, val = <deque.Deque object at 0x771b37782bc0>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:31: AttributeError
   - [#   3] CDI deque: 
--------------------------------------------------------------------------------
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
- 32:     def appendleft(self, val):
- 33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
- 35:     
+ 32:     @classmethod
+ 33:     def appendleft(self, val):
+ 34:         '''Add a value to the front of the deque.'''
+ 35:         self._container.push(val)
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
--------------------------------------------------------------------------------
[0.08524 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_5

def test_case_5():
        none_type_0 = None
        deque_0 = module_0.Deque()
>       var_0 = deque_0.appendleft(none_type_0)

ALL-SMART/test_deque_MOSA.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>, val = None

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:35: AttributeError
   - [#   4] CDI deque: 
--------------------------------------------------------------------------------
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
- 36:     def pop(self):
- 37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
- 39:     
+ 36:     @classmethod
+ 37:     def pop(self):
+ 38:         '''Remove a value from the end of the deque and returns it.'''
+ 39:         return self._container.shift()
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
--------------------------------------------------------------------------------
[0.09011 s] killed by ALL-SMART/test_deque_WHOLE_SUITE.py::test_case_6

def test_case_6():
        deque_0 = module_1.Deque()
        none_type_0 = None
        var_0 = deque_0.appendleft(deque_0)
        var_1 = deque_0.peekleft()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'deque.Deque'
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
>       var_3 = deque_0.pop()

ALL-SMART/test_deque_WHOLE_SUITE.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:39: AttributeError
   - [#   5] CDI deque: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
- 40:     def popleft(self):
- 41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
- 43:     
+ 40:     @classmethod
+ 41:     def popleft(self):
+ 42:         '''Remove a value from the front of the deque and returns it.'''
+ 43:         return self._container.pop()
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
--------------------------------------------------------------------------------
[0.08492 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
>       var_3 = var_2.popleft()

ALL-SMART/test_deque_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:43: AttributeError
   - [#   6] CDI deque: 
--------------------------------------------------------------------------------
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
- 44:     def peek(self):
- 45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
- 47:             return self._container.head.data
- 48:         return None
- 49:     
+ 44:     @classmethod
+ 45:     def peek(self):
+ 46:         '''Return the next value that would be returned by pop.'''
+ 47:         if self._container.head:
+ 48:             return self._container.head.data
+ 49:         return None
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
--------------------------------------------------------------------------------
[0.08165 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
>       var_2 = deque_0.peek()

ALL-SMART/test_deque_MOSA.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:47: AttributeError
   - [#   7] CDI deque: 
--------------------------------------------------------------------------------
  46:         if self._container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
- 50:     def peekleft(self):
- 51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
- 53:             return self._container.tail.data
- 54:         return None
- 55:     
+ 50:     @classmethod
+ 51:     def peekleft(self):
+ 52:         '''Return the next value from the front of the deque.'''
+ 53:         if self._container.tail:
+ 54:             return self._container.tail.data
+ 55:         return None
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.08177 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
>       var_0 = deque_0.peekleft()

ALL-SMART/test_deque_MOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:53: AttributeError
   - [#   8] CDI deque: 
--------------------------------------------------------------------------------
  52:         if self._container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
- 56:     def size(self):
- 57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 56:     @classmethod
+ 57:     def size(self):
+ 58:         '''Return the count of items in the queue.'''
+ 59:         return self._container._length
--------------------------------------------------------------------------------
[0.08184 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
        var_3 = var_2.popleft()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'deque.Deque'
>       var_4 = deque_0.size()

ALL-SMART/test_deque_MOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:59: AttributeError
   - [#   9] COI deque: 
--------------------------------------------------------------------------------
  42:         return self._container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
+ 46:         if not (self._container.head):
  47:             return self._container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
--------------------------------------------------------------------------------
[0.07706 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_MOSA.py:10: AssertionError
   - [#  10] COI deque: 
--------------------------------------------------------------------------------
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
+ 52:         if not (self._container.tail):
  53:             return self._container.tail.data
  54:         return None
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.07992 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
>       var_0 = deque_0.peekleft()

ALL-SMART/test_deque_MOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b37962380>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

deque:53: AttributeError
   - [#  11] SDI deque: 
--------------------------------------------------------------------------------
  20:     size(): returns the count of items in the queue (returns 0 if the queue
  21:     is empty).
  22:     '''
  23:     
- 24:     def __init__(self, data=None):
- 25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
- 27:     
+ 24:     @staticmethod
+ 25:     def __init__(self, data=None):
+ 26:         '''Initialize deque.'''
+ 27:         self._container = DoubleLinkedList(data)
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
--------------------------------------------------------------------------------
[0.07897 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:6: TypeError: Deque.__init__() missing 1 required positional argument: 'self'

   - [#  12] SDI deque: 
--------------------------------------------------------------------------------
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
  26:         self._container = DoubleLinkedList(data)
  27:     
- 28:     def append(self, val):
- 29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
- 31:     
+ 28:     @staticmethod
+ 29:     def append(self, val):
+ 30:         '''Add value to the end of the deque.'''
+ 31:         self._container.append(val)
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
--------------------------------------------------------------------------------
[0.07914 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:8: TypeError: Deque.append() missing 1 required positional argument: 'val'

   - [#  13] SDI deque: 
--------------------------------------------------------------------------------
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
- 32:     def appendleft(self, val):
- 33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
- 35:     
+ 32:     @staticmethod
+ 33:     def appendleft(self, val):
+ 34:         '''Add a value to the front of the deque.'''
+ 35:         self._container.push(val)
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
--------------------------------------------------------------------------------
[0.08348 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:40: TypeError: Deque.appendleft() missing 1 required positional argument: 'val'

   - [#  14] SDI deque: 
--------------------------------------------------------------------------------
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
- 36:     def pop(self):
- 37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
- 39:     
+ 36:     @staticmethod
+ 37:     def pop(self):
+ 38:         '''Remove a value from the end of the deque and returns it.'''
+ 39:         return self._container.shift()
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
--------------------------------------------------------------------------------
[0.08858 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_WHOLE_SUITE.py:51: TypeError: Deque.pop() missing 1 required positional argument: 'self'

   - [#  15] SDI deque: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
- 40:     def popleft(self):
- 41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
- 43:     
+ 40:     @staticmethod
+ 41:     def popleft(self):
+ 42:         '''Remove a value from the front of the deque and returns it.'''
+ 43:         return self._container.pop()
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
--------------------------------------------------------------------------------
[0.07808 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:11: TypeError: Deque.popleft() missing 1 required positional argument: 'self'

   - [#  16] SDI deque: 
--------------------------------------------------------------------------------
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
- 44:     def peek(self):
- 45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
- 47:             return self._container.head.data
- 48:         return None
- 49:     
+ 44:     @staticmethod
+ 45:     def peek(self):
+ 46:         '''Return the next value that would be returned by pop.'''
+ 47:         if self._container.head:
+ 48:             return self._container.head.data
+ 49:         return None
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
--------------------------------------------------------------------------------
[0.07918 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:9: TypeError: Deque.peek() missing 1 required positional argument: 'self'

   - [#  17] SDI deque: 
--------------------------------------------------------------------------------
  46:         if self._container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
- 50:     def peekleft(self):
- 51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
- 53:             return self._container.tail.data
- 54:         return None
- 55:     
+ 50:     @staticmethod
+ 51:     def peekleft(self):
+ 52:         '''Return the next value from the front of the deque.'''
+ 53:         if self._container.tail:
+ 54:             return self._container.tail.data
+ 55:         return None
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.08013 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:7: TypeError: Deque.peekleft() missing 1 required positional argument: 'self'

   - [#  18] SDI deque: 
--------------------------------------------------------------------------------
  52:         if self._container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
- 56:     def size(self):
- 57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 56:     @staticmethod
+ 57:     def size(self):
+ 58:         '''Return the count of items in the queue.'''
+ 59:         return self._container._length
--------------------------------------------------------------------------------
[0.08127 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ALL-SMART/test_deque_MOSA.py:13: TypeError: Deque.size() missing 1 required positional argument: 'self'

   - [#  19] SDL deque: 
--------------------------------------------------------------------------------
  22:     '''
  23:     
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
+ 26:         pass
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
--------------------------------------------------------------------------------
[0.08041 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
>       var_0 = deque_0.peekleft()

ALL-SMART/test_deque_MOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b37858340>

>   ???
E   AttributeError: 'Deque' object has no attribute '_container'

deque:52: AttributeError
   - [#  20] SDL deque: 
--------------------------------------------------------------------------------
  26:         self._container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
+ 30:         pass
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
--------------------------------------------------------------------------------
[0.07989 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_MOSA.py:10: AssertionError
   - [#  21] SDL deque: 
--------------------------------------------------------------------------------
  30:         self._container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
+ 34:         pass
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
--------------------------------------------------------------------------------
[0.08878 s] killed by ALL-SMART/test_deque_WHOLE_SUITE.py::test_case_6

def test_case_6():
        deque_0 = module_1.Deque()
        none_type_0 = None
        var_0 = deque_0.appendleft(deque_0)
        var_1 = deque_0.peekleft()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_WHOLE_SUITE.py:48: AssertionError
   - [#  22] SDL deque: 
--------------------------------------------------------------------------------
  34:         self._container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
+ 38:         pass
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
--------------------------------------------------------------------------------
[0.07501 s] survived
   - [#  23] SDL deque: 
--------------------------------------------------------------------------------
  38:         return self._container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
+ 42:         pass
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
--------------------------------------------------------------------------------
[0.08038 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
        var_3 = var_2.popleft()
>       assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_MOSA.py:12: AssertionError
   - [#  24] SDL deque: 
--------------------------------------------------------------------------------
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
- 47:             return self._container.head.data
+ 47:             pass
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
--------------------------------------------------------------------------------
[0.07973 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
>       assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_MOSA.py:10: AssertionError
   - [#  25] SDL deque: 
--------------------------------------------------------------------------------
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
- 48:         return None
+ 48:         pass
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
--------------------------------------------------------------------------------
[0.07744 s] survived
   - [#  26] SDL deque: 
--------------------------------------------------------------------------------
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
- 53:             return self._container.tail.data
+ 53:             pass
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
--------------------------------------------------------------------------------
[0.08361 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_2

def test_case_2():
        deque_0 = module_0.Deque()
        var_0 = deque_0.append(deque_0)
        bool_0 = True
        deque_1 = module_0.Deque()
        var_1 = deque_0.peekleft()
>       assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'deque.Deque'
E       AssertionError

ALL-SMART/test_deque_MOSA.py:26: AssertionError
   - [#  27] SDL deque: 
--------------------------------------------------------------------------------
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
- 54:         return None
+ 54:         pass
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.07787 s] survived
   - [#  28] SDL deque: 
--------------------------------------------------------------------------------
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 58:         pass
--------------------------------------------------------------------------------
[0.07641 s] survived
   - [#  29] SVD deque: 
--------------------------------------------------------------------------------
  22:     '''
  23:     
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
+ 26:         _container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  30] SVD deque: 
--------------------------------------------------------------------------------
  26:         self._container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
+ 30:         _container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
--------------------------------------------------------------------------------
[0.07898 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
>       var_1 = deque_0.append(deque_0)

ALL-SMART/test_deque_MOSA.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b37961c00>
val = <deque.Deque object at 0x771b37961c00>

>   ???
E   NameError: name '_container' is not defined

deque:30: NameError
   - [#  31] SVD deque: 
--------------------------------------------------------------------------------
  30:         self._container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
+ 34:         _container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
--------------------------------------------------------------------------------
[0.08651 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_5

def test_case_5():
        none_type_0 = None
        deque_0 = module_0.Deque()
>       var_0 = deque_0.appendleft(none_type_0)

ALL-SMART/test_deque_MOSA.py:40: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b377b6590>, val = None

>   ???
E   NameError: name '_container' is not defined

deque:34: NameError
   - [#  32] SVD deque: 
--------------------------------------------------------------------------------
  34:         self._container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
+ 38:         return _container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
--------------------------------------------------------------------------------
[0.08671 s] killed by ALL-SMART/test_deque_WHOLE_SUITE.py::test_case_6

def test_case_6():
        deque_0 = module_1.Deque()
        none_type_0 = None
        var_0 = deque_0.appendleft(deque_0)
        var_1 = deque_0.peekleft()
        assert f'{type(var_1).__module__}.{type(var_1).__qualname__}' == 'deque.Deque'
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
>       var_3 = deque_0.pop()

ALL-SMART/test_deque_WHOLE_SUITE.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b378b37c0>

>   ???
E   NameError: name '_container' is not defined

deque:38: NameError
   - [#  33] SVD deque: 
--------------------------------------------------------------------------------
  38:         return self._container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
+ 42:         return _container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
--------------------------------------------------------------------------------
[0.07906 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
>       var_3 = var_2.popleft()

ALL-SMART/test_deque_MOSA.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b378b2bf0>

>   ???
E   NameError: name '_container' is not defined

deque:42: NameError
   - [#  34] SVD deque: 
--------------------------------------------------------------------------------
  42:         return self._container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
+ 46:         if _container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
--------------------------------------------------------------------------------
[0.09373 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
>       var_2 = deque_0.peek()

ALL-SMART/test_deque_MOSA.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b376bd600>

>   ???
E   NameError: name '_container' is not defined

deque:46: NameError
   - [#  35] SVD deque: 
--------------------------------------------------------------------------------
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
- 47:             return self._container.head.data
+ 47:             return _container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
--------------------------------------------------------------------------------
[0.09280 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
>       var_2 = deque_0.peek()

ALL-SMART/test_deque_MOSA.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b37699cc0>

>   ???
E   NameError: name '_container' is not defined

deque:47: NameError
   - [#  36] SVD deque: 
--------------------------------------------------------------------------------
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
+ 52:         if _container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.07801 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
>       var_0 = deque_0.peekleft()

ALL-SMART/test_deque_MOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b37746050>

>   ???
E   NameError: name '_container' is not defined

deque:52: NameError
   - [#  37] SVD deque: 
--------------------------------------------------------------------------------
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
- 53:             return self._container.tail.data
+ 53:             return _container.tail.data
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
--------------------------------------------------------------------------------
[0.08252 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_2

def test_case_2():
        deque_0 = module_0.Deque()
        var_0 = deque_0.append(deque_0)
        bool_0 = True
        deque_1 = module_0.Deque()
>       var_1 = deque_0.peekleft()

ALL-SMART/test_deque_MOSA.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b3762b7f0>

>   ???
E   NameError: name '_container' is not defined

deque:53: NameError
   - [#  38] SVD deque: 
--------------------------------------------------------------------------------
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 58:         return _container._length
--------------------------------------------------------------------------------
[0.08363 s] killed by ALL-SMART/test_deque_MOSA.py::test_case_0

def test_case_0():
        deque_0 = module_0.Deque()
        var_0 = deque_0.peekleft()
        var_1 = deque_0.append(deque_0)
        var_2 = deque_0.peek()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'deque.Deque'
        var_3 = var_2.popleft()
        assert f'{type(var_3).__module__}.{type(var_3).__qualname__}' == 'deque.Deque'
>       var_4 = deque_0.size()

ALL-SMART/test_deque_MOSA.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x771b3785a560>

>   ???
E   NameError: name '_container' is not defined

deque:58: NameError
[*] Mutation score [3.96511 s]: 86.2%
   - all: 38
   - killed: 25 (65.8%)
   - survived: 4 (10.5%)
   - incompetent: 9 (23.7%)
   - timeout: 0 (0.0%)
