import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from deque import Deque

@pytest.fixture
def deque_empty():
    return Deque()

@pytest.fixture
def deque_with_data():
    return Deque([1, 2, 3])

def test_append(deque_empty):
    deque_empty.append(1)
    assert deque_empty.peek() == 1

def test_append_multiple(deque_empty):
    deque_empty.append(1)
    deque_empty.append(2)
    assert deque_empty.peek() == 1

def test_appendleft(deque_empty):
    deque_empty.appendleft(1)
    assert deque_empty.peekleft() == 1

def test_appendleft_multiple(deque_empty):
    deque_empty.appendleft(1)
    deque_empty.appendleft(2)
    assert deque_empty.peekleft() == 2

def test_pop(deque_with_data):
    assert deque_with_data.pop() == 3

def test_pop_empty(deque_empty):
    with pytest.raises(Exception):
        deque_empty.pop()

def test_popleft(deque_with_data):
    assert deque_with_data.popleft() == 1

def test_popleft_empty(deque_empty):
    with pytest.raises(Exception):
        deque_empty.popleft()

def test_peek(deque_with_data):
    assert deque_with_data.peek() == 3

def test_peek_empty(deque_empty):
    assert deque_empty.peek() is None

def test_peekleft(deque_with_data):
    assert deque_with_data.peekleft() == 1

def test_peekleft_empty(deque_empty):
    assert deque_empty.peekleft() is None

def test_size(deque_with_data):
    assert deque_with_data.size() == 3

def test_size_empty(deque_empty):
    assert deque_empty.size() == 0