import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from deque import Deque

import pytest

# Test cases for the Deque class methods

def test_append():
    dq = Deque()
    dq.append(1)
    assert dq.size() == 1

def test_append_multiple():
    dq = Deque()
    dq.append(1)
    dq.append(2)
    assert dq.size() == 2

def test_appendleft():
    dq = Deque()
    dq.appendleft(1)
    assert dq.size() == 1

def test_appendleft_multiple():
    dq = Deque()
    dq.appendleft(1)
    dq.appendleft(2)
    assert dq.size() == 2

def test_pop():
    dq = Deque([1, 2])
    assert dq.pop() == 2
    assert dq.size() == 1

def test_pop_empty():
    dq = Deque()
    with pytest.raises(Exception):
        dq.pop()

def test_popleft():
    dq = Deque([1, 2])
    assert dq.popleft() == 1
    assert dq.size() == 1

def test_popleft_empty():
    dq = Deque()
    with pytest.raises(Exception):
        dq.popleft()

def test_peek():
    dq = Deque([1, 2])
    assert dq.peek() == 2

def test_peek_empty():
    dq = Deque()
    assert dq.peek() is None

def test_peekleft():
    dq = Deque([1, 2])
    assert dq.peekleft() == 1

def test_peekleft_empty():
    dq = Deque()
    assert dq.peekleft() is None

def test_size():
    dq = Deque([1, 2, 3])
    assert dq.size() == 3

def test_size_empty():
    dq = Deque()
    assert dq.size() == 0