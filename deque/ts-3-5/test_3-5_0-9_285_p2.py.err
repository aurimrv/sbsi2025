import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from deque import Deque

@pytest.fixture
def empty_deque():
    return Deque()

@pytest.fixture
def filled_deque():
    return Deque([1, 2, 3, 4])

def test_append_empty_deque(empty_deque):
    empty_deque.append(5)
    assert empty_deque.peek() == 5

def test_append_multiple_values(filled_deque):
    filled_deque.append(5)
    filled_deque.append(6)
    assert filled_deque.peek() == 6

def test_appendleft_empty_deque(empty_deque):
    empty_deque.appendleft(5)
    assert empty_deque.peekleft() == 5

def test_appendleft_multiple_values(filled_deque):
    filled_deque.appendleft(5)
    filled_deque.appendleft(6)
    assert filled_deque.peekleft() == 6

def test_pop_non_empty_deque(filled_deque):
    assert filled_deque.pop() == 4

def test_pop_empty_deque(empty_deque):
    with pytest.raises(Exception):
        empty_deque.pop()

def test_popleft_non_empty_deque(filled_deque):
    assert filled_deque.popleft() == 1

def test_popleft_empty_deque(empty_deque):
    with pytest.raises(Exception):
        empty_deque.popleft()

def test_peek_non_empty_deque(filled_deque):
    assert filled_deque.peek() == 4

def test_peek_empty_deque(empty_deque):
    assert empty_deque.peek() == None

def test_peekleft_non_empty_deque(filled_deque):
    assert filled_deque.peekleft() == 1

def test_peekleft_empty_deque(empty_deque):
    assert empty_deque.peekleft() == None

def test_size_empty_deque(empty_deque):
    assert empty_deque.size() == 0

def test_size_non_empty_deque(filled_deque):
    assert filled_deque.size() == 4