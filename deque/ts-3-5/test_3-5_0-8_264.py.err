import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from deque import Deque

import pytest

@pytest.fixture
def empty_deque():
    return Deque()

@pytest.fixture
def deque_with_values():
    return Deque([1, 2, 3])

def test_append(empty_deque):
    empty_deque.append(1)
    assert empty_deque.peek() == 1

def test_append_multiple_values(empty_deque):
    empty_deque.append(1)
    empty_deque.append(2)
    assert empty_deque.peek() == 2

def test_appendleft(empty_deque):
    empty_deque.appendleft(1)
    assert empty_deque.peekleft() == 1

def test_appendleft_multiple_values(empty_deque):
    empty_deque.appendleft(1)
    empty_deque.appendleft(2)
    assert empty_deque.peekleft() == 2

def test_pop(deque_with_values):
    assert deque_with_values.pop() == 3

def test_pop_until_empty(deque_with_values):
    deque_with_values.pop()
    deque_with_values.pop()
    deque_with_values.pop()
    with pytest.raises(Exception):
        deque_with_values.pop()

def test_popleft(deque_with_values):
    assert deque_with_values.popleft() == 1

def test_popleft_until_empty(deque_with_values):
    deque_with_values.popleft()
    deque_with_values.popleft()
    deque_with_values.popleft()
    with pytest.raises(Exception):
        deque_with_values.popleft()

def test_peek(deque_with_values):
    assert deque_with_values.peek() == 3

def test_peek_empty_deque(empty_deque):
    assert empty_deque.peek() is None

def test_peekleft(deque_with_values):
    assert deque_with_values.peekleft() == 1

def test_peekleft_empty_deque(empty_deque):
    assert empty_deque.peekleft() is None

def test_size(empty_deque, deque_with_values):
    assert empty_deque.size() == 0
    assert deque_with_values.size() == 3