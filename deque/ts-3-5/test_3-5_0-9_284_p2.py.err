import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from deque import Deque

@pytest.fixture
def initialize_deque():
    return Deque()

def test_append(initialize_deque):
    dq = initialize_deque
    dq.append(1)
    assert dq.size() == 1
    dq.append(2)
    assert dq.size() == 2

def test_appendleft(initialize_deque):
    dq = initialize_deque
    dq.appendleft(1)
    assert dq.size() == 1
    dq.appendleft(2)
    assert dq.size() == 2

def test_pop(initialize_deque):
    dq = initialize_deque
    dq.append(1)
    dq.append(2)
    assert dq.pop() == 2
    assert dq.size() == 1

def test_popleft(initialize_deque):
    dq = initialize_deque
    dq.appendleft(1)
    dq.appendleft(2)
    assert dq.popleft() == 2
    assert dq.size() == 1

def test_peek_empty(initialize_deque):
    dq = initialize_deque
    assert dq.peek() is None

def test_peek(initialize_deque):
    dq = initialize_deque
    dq.append(1)
    dq.append(2)
    assert dq.peek() == 2
    assert dq.size() == 2

def test_peekleft_empty(initialize_deque):
    dq = initialize_deque
    assert dq.peekleft() is None

def test_peekleft(initialize_deque):
    dq = initialize_deque
    dq.appendleft(1)
    dq.appendleft(2)
    assert dq.peekleft() == 2
    assert dq.size() == 2

def test_size(initialize_deque):
    dq = initialize_deque
    assert dq.size() == 0
    dq.append(1)
    assert dq.size() == 1
    dq.appendleft(2)
    assert dq.size() == 2