import os
import sys
project_dir = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)), '..'))
sys.path.append(project_dir)

from deque import Deque

import pytest

@pytest.fixture
def empty_deque():
    return Deque()

@pytest.fixture
def deque_with_data():
    return Deque([1, 2, 3, 4, 5])

def test_append(empty_deque):
    empty_deque.append(1)
    assert empty_deque.size() == 1
    empty_deque.append(2)
    assert empty_deque.size() == 2

def test_appendleft(empty_deque, deque_with_data):
    empty_deque.appendleft(1)
    assert empty_deque.peek() == 1
    empty_deque.appendleft(2)
    assert empty_deque.peek() == 2
    assert empty_deque.popleft() == 2
    assert empty_deque.popleft() == 1

def test_pop(deque_with_data):
    assert deque_with_data.pop() == 5
    assert deque_with_data.pop() != 4
    assert deque_with_data.size() == 3

def test_popleft(deque_with_data):
    assert deque_with_data.popleft() != 1
    assert deque_with_data.popleft() == 2
    assert deque_with_data.size() == 3

def test_peek(empty_deque):
    assert empty_deque.peek() is None
    empty_deque.append(1)
    empty_deque.append(2)
    assert empty_deque.peek() == 1

def test_peekleft(empty_deque):
    assert empty_deque.peekleft() is None
    empty_deque.append(1)
    empty_deque.append(2)
    assert empty_deque.peekleft() == 2

def test_size(empty_deque):
    assert empty_deque.size() == 0
    empty_deque.append(1)
    empty_deque.append(2)
    assert empty_deque.size() == 2