[*] Start mutation process:
   - targets: deque.py
   - tests: ts-3-5/test_3-5_1-0_308.py
[*] 9 tests passed:
   - test_3-5_1-0_308 [0.20115 s]
[*] Start mutants generation and execution:
   - [#   1] CDI deque: 
--------------------------------------------------------------------------------
  20:     size(): returns the count of items in the queue (returns 0 if the queue
  21:     is empty).
  22:     '''
  23:     
- 24:     def __init__(self, data=None):
- 25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
- 27:     
+ 24:     @classmethod
+ 25:     def __init__(self, data=None):
+ 26:         '''Initialize deque.'''
+ 27:         self._container = DoubleLinkedList(data)
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
--------------------------------------------------------------------------------
[0.19376 s] survived
   - [#   2] CDI deque: 
--------------------------------------------------------------------------------
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
  26:         self._container = DoubleLinkedList(data)
  27:     
- 28:     def append(self, val):
- 29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
- 31:     
+ 28:     @classmethod
+ 29:     def append(self, val):
+ 30:         '''Add value to the end of the deque.'''
+ 31:         self._container.append(val)
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
--------------------------------------------------------------------------------
[0.21642 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
>       dq.append(1)

ts-3-5/test_3-5_1-0_308.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>, val = 1

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:31: AttributeError
   - [#   3] CDI deque: 
--------------------------------------------------------------------------------
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
- 32:     def appendleft(self, val):
- 33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
- 35:     
+ 32:     @classmethod
+ 33:     def appendleft(self, val):
+ 34:         '''Add a value to the front of the deque.'''
+ 35:         self._container.push(val)
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
--------------------------------------------------------------------------------
[0.21703 s] killed by ts-3-5/test_3-5_1-0_308.py::test_appendleft

def test_appendleft():
        dq = Deque()
>       dq.appendleft(5)

ts-3-5/test_3-5_1-0_308.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>, val = 5

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:35: AttributeError
   - [#   4] CDI deque: 
--------------------------------------------------------------------------------
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
- 36:     def pop(self):
- 37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
- 39:     
+ 36:     @classmethod
+ 37:     def pop(self):
+ 38:         '''Remove a value from the end of the deque and returns it.'''
+ 39:         return self._container.shift()
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
--------------------------------------------------------------------------------
[0.23528 s] killed by ts-3-5/test_3-5_1-0_308.py::test_appendleft

def test_appendleft():
        dq = Deque()
        dq.appendleft(5)
>       assert dq.pop() == 5

ts-3-5/test_3-5_1-0_308.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:39: AttributeError
   - [#   5] CDI deque: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
- 40:     def popleft(self):
- 41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
- 43:     
+ 40:     @classmethod
+ 41:     def popleft(self):
+ 42:         '''Remove a value from the front of the deque and returns it.'''
+ 43:         return self._container.pop()
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
--------------------------------------------------------------------------------
[0.21707 s] killed by ts-3-5/test_3-5_1-0_308.py::test_popleft

def test_popleft():
        dq = Deque()
        dq.appendleft(7)
>       assert dq.popleft() == 7

ts-3-5/test_3-5_1-0_308.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:43: AttributeError
   - [#   6] CDI deque: 
--------------------------------------------------------------------------------
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
- 44:     def peek(self):
- 45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
- 47:             return self._container.head.data
- 48:         return None
- 49:     
+ 44:     @classmethod
+ 45:     def peek(self):
+ 46:         '''Return the next value that would be returned by pop.'''
+ 47:         if self._container.head:
+ 48:             return self._container.head.data
+ 49:         return None
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
--------------------------------------------------------------------------------
[0.21551 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
        dq.append(1)
>       assert dq.peek() == 1

ts-3-5/test_3-5_1-0_308.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:47: AttributeError
   - [#   7] CDI deque: 
--------------------------------------------------------------------------------
  46:         if self._container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
- 50:     def peekleft(self):
- 51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
- 53:             return self._container.tail.data
- 54:         return None
- 55:     
+ 50:     @classmethod
+ 51:     def peekleft(self):
+ 52:         '''Return the next value from the front of the deque.'''
+ 53:         if self._container.tail:
+ 54:             return self._container.tail.data
+ 55:         return None
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.22306 s] killed by ts-3-5/test_3-5_1-0_308.py::test_peekleft

def test_peekleft():
        dq = Deque()
        dq.append(3)
>       assert dq.peekleft() == 3

ts-3-5/test_3-5_1-0_308.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:53: AttributeError
   - [#   8] CDI deque: 
--------------------------------------------------------------------------------
  52:         if self._container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
- 56:     def size(self):
- 57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 56:     @classmethod
+ 57:     def size(self):
+ 58:         '''Return the count of items in the queue.'''
+ 59:         return self._container._length
--------------------------------------------------------------------------------
[0.21067 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append_multiple

def test_append_multiple():
        dq = Deque()
        dq.append(1)
        dq.append(2)
>       assert dq.size() == 2

ts-3-5/test_3-5_1-0_308.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:59: AttributeError
   - [#   9] COI deque: 
--------------------------------------------------------------------------------
  42:         return self._container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
+ 46:         if not (self._container.head):
  47:             return self._container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
--------------------------------------------------------------------------------
[0.21277 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
        dq.append(1)
>       assert dq.peek() == 1
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:15: AssertionError
   - [#  10] COI deque: 
--------------------------------------------------------------------------------
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
+ 52:         if not (self._container.tail):
  53:             return self._container.tail.data
  54:         return None
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.21742 s] killed by ts-3-5/test_3-5_1-0_308.py::test_peekleft

def test_peekleft():
        dq = Deque()
        dq.append(3)
>       assert dq.peekleft() == 3
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:46: AssertionError
   - [#  11] SDI deque: 
--------------------------------------------------------------------------------
  20:     size(): returns the count of items in the queue (returns 0 if the queue
  21:     is empty).
  22:     '''
  23:     
- 24:     def __init__(self, data=None):
- 25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
- 27:     
+ 24:     @staticmethod
+ 25:     def __init__(self, data=None):
+ 26:         '''Initialize deque.'''
+ 27:         self._container = DoubleLinkedList(data)
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
--------------------------------------------------------------------------------
[0.21605 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:13: TypeError: Deque.__init__() missing 1 required positional argument: 'self'

   - [#  12] SDI deque: 
--------------------------------------------------------------------------------
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
  26:         self._container = DoubleLinkedList(data)
  27:     
- 28:     def append(self, val):
- 29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
- 31:     
+ 28:     @staticmethod
+ 29:     def append(self, val):
+ 30:         '''Add value to the end of the deque.'''
+ 31:         self._container.append(val)
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
--------------------------------------------------------------------------------
[0.21410 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:14: TypeError: Deque.append() missing 1 required positional argument: 'val'

   - [#  13] SDI deque: 
--------------------------------------------------------------------------------
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
- 32:     def appendleft(self, val):
- 33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
- 35:     
+ 32:     @staticmethod
+ 33:     def appendleft(self, val):
+ 34:         '''Add a value to the front of the deque.'''
+ 35:         self._container.push(val)
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
--------------------------------------------------------------------------------
[0.18479 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:25: TypeError: Deque.appendleft() missing 1 required positional argument: 'val'

   - [#  14] SDI deque: 
--------------------------------------------------------------------------------
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
- 36:     def pop(self):
- 37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
- 39:     
+ 36:     @staticmethod
+ 37:     def pop(self):
+ 38:         '''Remove a value from the end of the deque and returns it.'''
+ 39:         return self._container.shift()
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
--------------------------------------------------------------------------------
[0.21049 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:26: TypeError: Deque.pop() missing 1 required positional argument: 'self'

   - [#  15] SDI deque: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
- 40:     def popleft(self):
- 41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
- 43:     
+ 40:     @staticmethod
+ 41:     def popleft(self):
+ 42:         '''Remove a value from the front of the deque and returns it.'''
+ 43:         return self._container.pop()
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
--------------------------------------------------------------------------------
[0.21295 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:36: TypeError: Deque.popleft() missing 1 required positional argument: 'self'

   - [#  16] SDI deque: 
--------------------------------------------------------------------------------
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
- 44:     def peek(self):
- 45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
- 47:             return self._container.head.data
- 48:         return None
- 49:     
+ 44:     @staticmethod
+ 45:     def peek(self):
+ 46:         '''Return the next value that would be returned by pop.'''
+ 47:         if self._container.head:
+ 48:             return self._container.head.data
+ 49:         return None
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
--------------------------------------------------------------------------------
[0.20771 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:15: TypeError: Deque.peek() missing 1 required positional argument: 'self'

   - [#  17] SDI deque: 
--------------------------------------------------------------------------------
  46:         if self._container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
- 50:     def peekleft(self):
- 51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
- 53:             return self._container.tail.data
- 54:         return None
- 55:     
+ 50:     @staticmethod
+ 51:     def peekleft(self):
+ 52:         '''Return the next value from the front of the deque.'''
+ 53:         if self._container.tail:
+ 54:             return self._container.tail.data
+ 55:         return None
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.22444 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:46: TypeError: Deque.peekleft() missing 1 required positional argument: 'self'

   - [#  18] SDI deque: 
--------------------------------------------------------------------------------
  52:         if self._container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
- 56:     def size(self):
- 57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 56:     @staticmethod
+ 57:     def size(self):
+ 58:         '''Return the count of items in the queue.'''
+ 59:         return self._container._length
--------------------------------------------------------------------------------
[0.20812 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_1-0_308.py:21: TypeError: Deque.size() missing 1 required positional argument: 'self'

   - [#  19] SDL deque: 
--------------------------------------------------------------------------------
  22:     '''
  23:     
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
+ 26:         pass
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
--------------------------------------------------------------------------------
[0.21939 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
>       dq.append(1)

ts-3-5/test_3-5_1-0_308.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cc267a60>, val = 1

>   ???
E   AttributeError: 'Deque' object has no attribute '_container'

deque:30: AttributeError
   - [#  20] SDL deque: 
--------------------------------------------------------------------------------
  26:         self._container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
+ 30:         pass
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
--------------------------------------------------------------------------------
[0.21343 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
        dq.append(1)
>       assert dq.peek() == 1
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:15: AssertionError
   - [#  21] SDL deque: 
--------------------------------------------------------------------------------
  30:         self._container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
+ 34:         pass
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
--------------------------------------------------------------------------------
[0.21233 s] killed by ts-3-5/test_3-5_1-0_308.py::test_appendleft

def test_appendleft():
        dq = Deque()
        dq.appendleft(5)
>       assert dq.pop() == 5

ts-3-5/test_3-5_1-0_308.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
deque:38: in pop
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x70f7cc09da80>

    def shift(self):
        """Remove the val from the tail of the list."""
        to_return = self.tail
        if self._length < 1:
>           raise IndexError('Cannot shift from an empty list.')
E           IndexError: Cannot shift from an empty list.

dll.py:81: IndexError
   - [#  22] SDL deque: 
--------------------------------------------------------------------------------
  34:         self._container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
+ 38:         pass
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
--------------------------------------------------------------------------------
[0.22064 s] killed by ts-3-5/test_3-5_1-0_308.py::test_appendleft

def test_appendleft():
        dq = Deque()
        dq.appendleft(5)
>       assert dq.pop() == 5
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:26: AssertionError
   - [#  23] SDL deque: 
--------------------------------------------------------------------------------
  38:         return self._container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
+ 42:         pass
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
--------------------------------------------------------------------------------
[0.20901 s] killed by ts-3-5/test_3-5_1-0_308.py::test_popleft

def test_popleft():
        dq = Deque()
        dq.appendleft(7)
>       assert dq.popleft() == 7
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:36: AssertionError
   - [#  24] SDL deque: 
--------------------------------------------------------------------------------
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
- 47:             return self._container.head.data
+ 47:             pass
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
--------------------------------------------------------------------------------
[0.21415 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
        dq.append(1)
>       assert dq.peek() == 1
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:15: AssertionError
   - [#  25] SDL deque: 
--------------------------------------------------------------------------------
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
- 48:         return None
+ 48:         pass
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
--------------------------------------------------------------------------------
[0.19264 s] survived
   - [#  26] SDL deque: 
--------------------------------------------------------------------------------
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
- 53:             return self._container.tail.data
+ 53:             pass
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
--------------------------------------------------------------------------------
[0.21746 s] killed by ts-3-5/test_3-5_1-0_308.py::test_peekleft

def test_peekleft():
        dq = Deque()
        dq.append(3)
>       assert dq.peekleft() == 3
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:46: AssertionError
   - [#  27] SDL deque: 
--------------------------------------------------------------------------------
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
- 54:         return None
+ 54:         pass
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.19724 s] survived
   - [#  28] SDL deque: 
--------------------------------------------------------------------------------
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 58:         pass
--------------------------------------------------------------------------------
[0.21068 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append_multiple

def test_append_multiple():
        dq = Deque()
        dq.append(1)
        dq.append(2)
>       assert dq.size() == 2
E       AssertionError

ts-3-5/test_3-5_1-0_308.py:21: AssertionError
   - [#  29] SVD deque: 
--------------------------------------------------------------------------------
  22:     '''
  23:     
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
+ 26:         _container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  30] SVD deque: 
--------------------------------------------------------------------------------
  26:         self._container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
+ 30:         _container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
--------------------------------------------------------------------------------
[0.21060 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
>       dq.append(1)

ts-3-5/test_3-5_1-0_308.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cc0ea4d0>, val = 1

>   ???
E   NameError: name '_container' is not defined

deque:30: NameError
   - [#  31] SVD deque: 
--------------------------------------------------------------------------------
  30:         self._container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
+ 34:         _container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
--------------------------------------------------------------------------------
[0.21210 s] killed by ts-3-5/test_3-5_1-0_308.py::test_appendleft

def test_appendleft():
        dq = Deque()
>       dq.appendleft(5)

ts-3-5/test_3-5_1-0_308.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cbea36d0>, val = 5

>   ???
E   NameError: name '_container' is not defined

deque:34: NameError
   - [#  32] SVD deque: 
--------------------------------------------------------------------------------
  34:         self._container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
+ 38:         return _container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
--------------------------------------------------------------------------------
[0.24443 s] killed by ts-3-5/test_3-5_1-0_308.py::test_appendleft

def test_appendleft():
        dq = Deque()
        dq.appendleft(5)
>       assert dq.pop() == 5

ts-3-5/test_3-5_1-0_308.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cbe7f5b0>

>   ???
E   NameError: name '_container' is not defined

deque:38: NameError
   - [#  33] SVD deque: 
--------------------------------------------------------------------------------
  38:         return self._container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
+ 42:         return _container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
--------------------------------------------------------------------------------
[0.23134 s] killed by ts-3-5/test_3-5_1-0_308.py::test_popleft

def test_popleft():
        dq = Deque()
        dq.appendleft(7)
>       assert dq.popleft() == 7

ts-3-5/test_3-5_1-0_308.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cc354040>

>   ???
E   NameError: name '_container' is not defined

deque:42: NameError
   - [#  34] SVD deque: 
--------------------------------------------------------------------------------
  42:         return self._container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
+ 46:         if _container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
--------------------------------------------------------------------------------
[0.21912 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
        dq.append(1)
>       assert dq.peek() == 1

ts-3-5/test_3-5_1-0_308.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cc0e2560>

>   ???
E   NameError: name '_container' is not defined

deque:46: NameError
   - [#  35] SVD deque: 
--------------------------------------------------------------------------------
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
- 47:             return self._container.head.data
+ 47:             return _container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
--------------------------------------------------------------------------------
[0.21087 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append

def test_append():
        dq = Deque()
        dq.append(1)
>       assert dq.peek() == 1

ts-3-5/test_3-5_1-0_308.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cbeeceb0>

>   ???
E   NameError: name '_container' is not defined

deque:47: NameError
   - [#  36] SVD deque: 
--------------------------------------------------------------------------------
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
+ 52:         if _container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.21946 s] killed by ts-3-5/test_3-5_1-0_308.py::test_peekleft

def test_peekleft():
        dq = Deque()
        dq.append(3)
>       assert dq.peekleft() == 3

ts-3-5/test_3-5_1-0_308.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cc215ea0>

>   ???
E   NameError: name '_container' is not defined

deque:52: NameError
   - [#  37] SVD deque: 
--------------------------------------------------------------------------------
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
- 53:             return self._container.tail.data
+ 53:             return _container.tail.data
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
--------------------------------------------------------------------------------
[0.22001 s] killed by ts-3-5/test_3-5_1-0_308.py::test_peekleft

def test_peekleft():
        dq = Deque()
        dq.append(3)
>       assert dq.peekleft() == 3

ts-3-5/test_3-5_1-0_308.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cc0ea620>

>   ???
E   NameError: name '_container' is not defined

deque:53: NameError
   - [#  38] SVD deque: 
--------------------------------------------------------------------------------
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 58:         return _container._length
--------------------------------------------------------------------------------
[0.21906 s] killed by ts-3-5/test_3-5_1-0_308.py::test_append_multiple

def test_append_multiple():
        dq = Deque()
        dq.append(1)
        dq.append(2)
>       assert dq.size() == 2

ts-3-5/test_3-5_1-0_308.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x70f7cbea2080>

>   ???
E   NameError: name '_container' is not defined

deque:58: NameError
[*] Mutation score [8.89492 s]: 89.7%
   - all: 38
   - killed: 26 (68.4%)
   - survived: 3 (7.9%)
   - incompetent: 9 (23.7%)
   - timeout: 0 (0.0%)
