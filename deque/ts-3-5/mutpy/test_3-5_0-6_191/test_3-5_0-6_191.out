[*] Start mutation process:
   - targets: deque.py
   - tests: ts-3-5/test_3-5_0-6_191.py
[*] 14 tests passed:
   - test_3-5_0-6_191 [0.20060 s]
[*] Start mutants generation and execution:
   - [#   1] CDI deque: 
--------------------------------------------------------------------------------
  20:     size(): returns the count of items in the queue (returns 0 if the queue
  21:     is empty).
  22:     '''
  23:     
- 24:     def __init__(self, data=None):
- 25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
- 27:     
+ 24:     @classmethod
+ 25:     def __init__(self, data=None):
+ 26:         '''Initialize deque.'''
+ 27:         self._container = DoubleLinkedList(data)
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
--------------------------------------------------------------------------------
[0.19423 s] survived
   - [#   2] CDI deque: 
--------------------------------------------------------------------------------
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
  26:         self._container = DoubleLinkedList(data)
  27:     
- 28:     def append(self, val):
- 29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
- 31:     
+ 28:     @classmethod
+ 29:     def append(self, val):
+ 30:         '''Add value to the end of the deque.'''
+ 31:         self._container.append(val)
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
--------------------------------------------------------------------------------
[0.20955 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e673bc4c0>

    def test_append(deque):
>       deque.append(1)

ts-3-5/test_3-5_0-6_191.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>, val = 1

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:31: AttributeError
   - [#   3] CDI deque: 
--------------------------------------------------------------------------------
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
- 32:     def appendleft(self, val):
- 33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
- 35:     
+ 32:     @classmethod
+ 33:     def appendleft(self, val):
+ 34:         '''Add a value to the front of the deque.'''
+ 35:         self._container.push(val)
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
--------------------------------------------------------------------------------
[0.23243 s] killed by ts-3-5/test_3-5_0-6_191.py::test_appendleft

deque = <deque.Deque object at 0x768e6749fa90>

    def test_appendleft(deque):
>       deque.appendleft(1)

ts-3-5/test_3-5_0-6_191.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>, val = 1

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:35: AttributeError
   - [#   4] CDI deque: 
--------------------------------------------------------------------------------
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
- 36:     def pop(self):
- 37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
- 39:     
+ 36:     @classmethod
+ 37:     def pop(self):
+ 38:         '''Remove a value from the end of the deque and returns it.'''
+ 39:         return self._container.shift()
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
--------------------------------------------------------------------------------
[0.22164 s] killed by ts-3-5/test_3-5_0-6_191.py::test_pop

deque = <deque.Deque object at 0x768e6757ad70>

    def test_pop(deque):
        deque.append(1)
>       assert deque.pop() == 1

ts-3-5/test_3-5_0-6_191.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:39: AttributeError
   - [#   5] CDI deque: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
- 40:     def popleft(self):
- 41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
- 43:     
+ 40:     @classmethod
+ 41:     def popleft(self):
+ 42:         '''Remove a value from the front of the deque and returns it.'''
+ 43:         return self._container.pop()
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
--------------------------------------------------------------------------------
[0.21964 s] killed by ts-3-5/test_3-5_0-6_191.py::test_popleft

deque = <deque.Deque object at 0x768e67327b20>

    def test_popleft(deque):
        deque.appendleft(1)
>       assert deque.popleft() == 1

ts-3-5/test_3-5_0-6_191.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:43: AttributeError
   - [#   6] CDI deque: 
--------------------------------------------------------------------------------
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
- 44:     def peek(self):
- 45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
- 47:             return self._container.head.data
- 48:         return None
- 49:     
+ 44:     @classmethod
+ 45:     def peek(self):
+ 46:         '''Return the next value that would be returned by pop.'''
+ 47:         if self._container.head:
+ 48:             return self._container.head.data
+ 49:         return None
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
--------------------------------------------------------------------------------
[0.22462 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peek_empty

deque = <deque.Deque object at 0x768e673247c0>

    def test_peek_empty(deque):
>       assert deque.peek() is None

ts-3-5/test_3-5_0-6_191.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:47: AttributeError
   - [#   7] CDI deque: 
--------------------------------------------------------------------------------
  46:         if self._container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
- 50:     def peekleft(self):
- 51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
- 53:             return self._container.tail.data
- 54:         return None
- 55:     
+ 50:     @classmethod
+ 51:     def peekleft(self):
+ 52:         '''Return the next value from the front of the deque.'''
+ 53:         if self._container.tail:
+ 54:             return self._container.tail.data
+ 55:         return None
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.22863 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peekleft_empty

deque = <deque.Deque object at 0x768e6744c370>

    def test_peekleft_empty(deque):
>       assert deque.peekleft() is None

ts-3-5/test_3-5_0-6_191.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:53: AttributeError
   - [#   8] CDI deque: 
--------------------------------------------------------------------------------
  52:         if self._container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
- 56:     def size(self):
- 57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 56:     @classmethod
+ 57:     def size(self):
+ 58:         '''Return the count of items in the queue.'''
+ 59:         return self._container._length
--------------------------------------------------------------------------------
[0.22593 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e67573010>

    def test_append(deque):
        deque.append(1)
>       assert deque.size() == 1

ts-3-5/test_3-5_0-6_191.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'deque.Deque'>

>   ???
E   AttributeError: type object 'Deque' has no attribute '_container'

deque:59: AttributeError
   - [#   9] COI deque: 
--------------------------------------------------------------------------------
  42:         return self._container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
+ 46:         if not (self._container.head):
  47:             return self._container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
--------------------------------------------------------------------------------
[0.24135 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peek_empty

deque = <deque.Deque object at 0x768e6749c580>

    def test_peek_empty(deque):
>       assert deque.peek() is None

ts-3-5/test_3-5_0-6_191.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e6749c580>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

deque:47: AttributeError
   - [#  10] COI deque: 
--------------------------------------------------------------------------------
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
+ 52:         if not (self._container.tail):
  53:             return self._container.tail.data
  54:         return None
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.22649 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peekleft_empty

deque = <deque.Deque object at 0x768e6744dc60>

    def test_peekleft_empty(deque):
>       assert deque.peekleft() is None

ts-3-5/test_3-5_0-6_191.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e6744dc60>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

deque:53: AttributeError
   - [#  11] SDI deque: 
--------------------------------------------------------------------------------
  20:     size(): returns the count of items in the queue (returns 0 if the queue
  21:     is empty).
  22:     '''
  23:     
- 24:     def __init__(self, data=None):
- 25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
- 27:     
+ 24:     @staticmethod
+ 25:     def __init__(self, data=None):
+ 26:         '''Initialize deque.'''
+ 27:         self._container = DoubleLinkedList(data)
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
--------------------------------------------------------------------------------
[0.21684 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:13: TypeError: Deque.__init__() missing 1 required positional argument: 'self'

   - [#  12] SDI deque: 
--------------------------------------------------------------------------------
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
  26:         self._container = DoubleLinkedList(data)
  27:     
- 28:     def append(self, val):
- 29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
- 31:     
+ 28:     @staticmethod
+ 29:     def append(self, val):
+ 30:         '''Add value to the end of the deque.'''
+ 31:         self._container.append(val)
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
--------------------------------------------------------------------------------
[0.21477 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:16: TypeError: Deque.append() missing 1 required positional argument: 'val'

   - [#  13] SDI deque: 
--------------------------------------------------------------------------------
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
  31:     
- 32:     def appendleft(self, val):
- 33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
- 35:     
+ 32:     @staticmethod
+ 33:     def appendleft(self, val):
+ 34:         '''Add a value to the front of the deque.'''
+ 35:         self._container.push(val)
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
--------------------------------------------------------------------------------
[0.21507 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:25: TypeError: Deque.appendleft() missing 1 required positional argument: 'val'

   - [#  14] SDI deque: 
--------------------------------------------------------------------------------
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
  35:     
- 36:     def pop(self):
- 37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
- 39:     
+ 36:     @staticmethod
+ 37:     def pop(self):
+ 38:         '''Remove a value from the end of the deque and returns it.'''
+ 39:         return self._container.shift()
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
--------------------------------------------------------------------------------
[0.21864 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:35: TypeError: Deque.pop() missing 1 required positional argument: 'self'

   - [#  15] SDI deque: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
  39:     
- 40:     def popleft(self):
- 41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
- 43:     
+ 40:     @staticmethod
+ 41:     def popleft(self):
+ 42:         '''Remove a value from the front of the deque and returns it.'''
+ 43:         return self._container.pop()
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
--------------------------------------------------------------------------------
[0.22322 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:43: TypeError: Deque.popleft() missing 1 required positional argument: 'self'

   - [#  16] SDI deque: 
--------------------------------------------------------------------------------
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
  43:     
- 44:     def peek(self):
- 45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
- 47:             return self._container.head.data
- 48:         return None
- 49:     
+ 44:     @staticmethod
+ 45:     def peek(self):
+ 46:         '''Return the next value that would be returned by pop.'''
+ 47:         if self._container.head:
+ 48:             return self._container.head.data
+ 49:         return None
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
--------------------------------------------------------------------------------
[0.22097 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:50: TypeError: Deque.peek() missing 1 required positional argument: 'self'

   - [#  17] SDI deque: 
--------------------------------------------------------------------------------
  46:         if self._container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
- 50:     def peekleft(self):
- 51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
- 53:             return self._container.tail.data
- 54:         return None
- 55:     
+ 50:     @staticmethod
+ 51:     def peekleft(self):
+ 52:         '''Return the next value from the front of the deque.'''
+ 53:         if self._container.tail:
+ 54:             return self._container.tail.data
+ 55:         return None
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.23030 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:57: TypeError: Deque.peekleft() missing 1 required positional argument: 'self'

   - [#  18] SDI deque: 
--------------------------------------------------------------------------------
  52:         if self._container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
- 56:     def size(self):
- 57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 56:     @staticmethod
+ 57:     def size(self):
+ 58:         '''Return the count of items in the queue.'''
+ 59:         return self._container._length
--------------------------------------------------------------------------------
[0.21441 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/deque/ts-3-5/test_3-5_0-6_191.py:17: TypeError: Deque.size() missing 1 required positional argument: 'self'

   - [#  19] SDL deque: 
--------------------------------------------------------------------------------
  22:     '''
  23:     
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
+ 26:         pass
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
--------------------------------------------------------------------------------
[0.21133 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e672d9570>

    def test_append(deque):
>       deque.append(1)

ts-3-5/test_3-5_0-6_191.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e672d9570>, val = 1

>   ???
E   AttributeError: 'Deque' object has no attribute '_container'

deque:30: AttributeError
   - [#  20] SDL deque: 
--------------------------------------------------------------------------------
  26:         self._container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
+ 30:         pass
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
--------------------------------------------------------------------------------
[0.21711 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e67092da0>

    def test_append(deque):
        deque.append(1)
>       assert deque.size() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:17: AssertionError
   - [#  21] SDL deque: 
--------------------------------------------------------------------------------
  30:         self._container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
+ 34:         pass
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
--------------------------------------------------------------------------------
[0.22100 s] killed by ts-3-5/test_3-5_0-6_191.py::test_appendleft

deque = <deque.Deque object at 0x768e672dbac0>

    def test_appendleft(deque):
        deque.appendleft(1)
>       assert deque.size() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:26: AssertionError
   - [#  22] SDL deque: 
--------------------------------------------------------------------------------
  34:         self._container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
+ 38:         pass
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
--------------------------------------------------------------------------------
[0.22599 s] killed by ts-3-5/test_3-5_0-6_191.py::test_pop

deque = <deque.Deque object at 0x768e6744f790>

    def test_pop(deque):
        deque.append(1)
>       assert deque.pop() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:35: AssertionError
   - [#  23] SDL deque: 
--------------------------------------------------------------------------------
  38:         return self._container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
+ 42:         pass
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
--------------------------------------------------------------------------------
[0.21864 s] killed by ts-3-5/test_3-5_0-6_191.py::test_popleft

deque = <deque.Deque object at 0x768e67579540>

    def test_popleft(deque):
        deque.appendleft(1)
>       assert deque.popleft() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:43: AssertionError
   - [#  24] SDL deque: 
--------------------------------------------------------------------------------
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
- 47:             return self._container.head.data
+ 47:             pass
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
--------------------------------------------------------------------------------
[0.21425 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peek

deque = <deque.Deque object at 0x768e673271c0>

    def test_peek(deque):
        deque.append(1)
>       assert deque.peek() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:54: AssertionError
   - [#  25] SDL deque: 
--------------------------------------------------------------------------------
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
  47:             return self._container.head.data
- 48:         return None
+ 48:         pass
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
--------------------------------------------------------------------------------
[0.19741 s] survived
   - [#  26] SDL deque: 
--------------------------------------------------------------------------------
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
- 53:             return self._container.tail.data
+ 53:             pass
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
--------------------------------------------------------------------------------
[0.22695 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peekleft

deque = <deque.Deque object at 0x768e672d7e80>

    def test_peekleft(deque):
        deque.appendleft(1)
>       assert deque.peekleft() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:61: AssertionError
   - [#  27] SDL deque: 
--------------------------------------------------------------------------------
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
  53:             return self._container.tail.data
- 54:         return None
+ 54:         pass
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
  58:         return self._container._length
--------------------------------------------------------------------------------
[0.20007 s] survived
   - [#  28] SDL deque: 
--------------------------------------------------------------------------------
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 58:         pass
--------------------------------------------------------------------------------
[0.20792 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e672d6800>

    def test_append(deque):
        deque.append(1)
>       assert deque.size() == 1
E       AssertionError

ts-3-5/test_3-5_0-6_191.py:17: AssertionError
   - [#  29] SVD deque: 
--------------------------------------------------------------------------------
  22:     '''
  23:     
  24:     def __init__(self, data=None):
  25:         '''Initialize deque.'''
- 26:         self._container = DoubleLinkedList(data)
+ 26:         _container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
  30:         self._container.append(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  30] SVD deque: 
--------------------------------------------------------------------------------
  26:         self._container = DoubleLinkedList(data)
  27:     
  28:     def append(self, val):
  29:         '''Add value to the end of the deque.'''
- 30:         self._container.append(val)
+ 30:         _container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
  34:         self._container.push(val)
--------------------------------------------------------------------------------
[0.23099 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e67326320>

    def test_append(deque):
>       deque.append(1)

ts-3-5/test_3-5_0-6_191.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e67326320>, val = 1

>   ???
E   NameError: name '_container' is not defined

deque:30: NameError
   - [#  31] SVD deque: 
--------------------------------------------------------------------------------
  30:         self._container.append(val)
  31:     
  32:     def appendleft(self, val):
  33:         '''Add a value to the front of the deque.'''
- 34:         self._container.push(val)
+ 34:         _container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
  38:         return self._container.shift()
--------------------------------------------------------------------------------
[0.21404 s] killed by ts-3-5/test_3-5_0-6_191.py::test_appendleft

deque = <deque.Deque object at 0x768e670bb880>

    def test_appendleft(deque):
>       deque.appendleft(1)

ts-3-5/test_3-5_0-6_191.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e670bb880>, val = 1

>   ???
E   NameError: name '_container' is not defined

deque:34: NameError
   - [#  32] SVD deque: 
--------------------------------------------------------------------------------
  34:         self._container.push(val)
  35:     
  36:     def pop(self):
  37:         '''Remove a value from the end of the deque and returns it.'''
- 38:         return self._container.shift()
+ 38:         return _container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
  42:         return self._container.pop()
--------------------------------------------------------------------------------
[0.22717 s] killed by ts-3-5/test_3-5_0-6_191.py::test_pop

deque = <deque.Deque object at 0x768e67325a80>

    def test_pop(deque):
        deque.append(1)
>       assert deque.pop() == 1

ts-3-5/test_3-5_0-6_191.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e67325a80>

>   ???
E   NameError: name '_container' is not defined

deque:38: NameError
   - [#  33] SVD deque: 
--------------------------------------------------------------------------------
  38:         return self._container.shift()
  39:     
  40:     def popleft(self):
  41:         '''Remove a value from the front of the deque and returns it.'''
- 42:         return self._container.pop()
+ 42:         return _container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
--------------------------------------------------------------------------------
[0.22678 s] killed by ts-3-5/test_3-5_0-6_191.py::test_popleft

deque = <deque.Deque object at 0x768e6744c2e0>

    def test_popleft(deque):
        deque.appendleft(1)
>       assert deque.popleft() == 1

ts-3-5/test_3-5_0-6_191.py:43: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e6744c2e0>

>   ???
E   NameError: name '_container' is not defined

deque:42: NameError
   - [#  34] SVD deque: 
--------------------------------------------------------------------------------
  42:         return self._container.pop()
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
- 46:         if self._container.head:
+ 46:         if _container.head:
  47:             return self._container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
--------------------------------------------------------------------------------
[0.22188 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peek_empty

deque = <deque.Deque object at 0x768e672daf50>

    def test_peek_empty(deque):
>       assert deque.peek() is None

ts-3-5/test_3-5_0-6_191.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e672daf50>

>   ???
E   NameError: name '_container' is not defined

deque:46: NameError
   - [#  35] SVD deque: 
--------------------------------------------------------------------------------
  43:     
  44:     def peek(self):
  45:         '''Return the next value that would be returned by pop.'''
  46:         if self._container.head:
- 47:             return self._container.head.data
+ 47:             return _container.head.data
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
--------------------------------------------------------------------------------
[0.22557 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peek

deque = <deque.Deque object at 0x768e6712f190>

    def test_peek(deque):
        deque.append(1)
>       assert deque.peek() == 1

ts-3-5/test_3-5_0-6_191.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e6712f190>

>   ???
E   NameError: name '_container' is not defined

deque:47: NameError
   - [#  36] SVD deque: 
--------------------------------------------------------------------------------
  48:         return None
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
- 52:         if self._container.tail:
+ 52:         if _container.tail:
  53:             return self._container.tail.data
  54:         return None
  55:     
  56:     def size(self):
--------------------------------------------------------------------------------
[0.22517 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peekleft_empty

deque = <deque.Deque object at 0x768e6749d3c0>

    def test_peekleft_empty(deque):
>       assert deque.peekleft() is None

ts-3-5/test_3-5_0-6_191.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e6749d3c0>

>   ???
E   NameError: name '_container' is not defined

deque:52: NameError
   - [#  37] SVD deque: 
--------------------------------------------------------------------------------
  49:     
  50:     def peekleft(self):
  51:         '''Return the next value from the front of the deque.'''
  52:         if self._container.tail:
- 53:             return self._container.tail.data
+ 53:             return _container.tail.data
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
--------------------------------------------------------------------------------
[0.22792 s] killed by ts-3-5/test_3-5_0-6_191.py::test_peekleft

deque = <deque.Deque object at 0x768e67324b80>

    def test_peekleft(deque):
        deque.appendleft(1)
>       assert deque.peekleft() == 1

ts-3-5/test_3-5_0-6_191.py:61: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e67324b80>

>   ???
E   NameError: name '_container' is not defined

deque:53: NameError
   - [#  38] SVD deque: 
--------------------------------------------------------------------------------
  54:         return None
  55:     
  56:     def size(self):
  57:         '''Return the count of items in the queue.'''
- 58:         return self._container._length
+ 58:         return _container._length
--------------------------------------------------------------------------------
[0.22132 s] killed by ts-3-5/test_3-5_0-6_191.py::test_append

deque = <deque.Deque object at 0x768e67110940>

    def test_append(deque):
        deque.append(1)
>       assert deque.size() == 1

ts-3-5/test_3-5_0-6_191.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <deque.Deque object at 0x768e67110940>

>   ???
E   NameError: name '_container' is not defined

deque:58: NameError
[*] Mutation score [9.13416 s]: 89.7%
   - all: 38
   - killed: 26 (68.4%)
   - survived: 3 (7.9%)
   - incompetent: 9 (23.7%)
   - timeout: 0 (0.0%)
