[*] Start mutation process:
   - targets: edit_distance.py
   - tests: ./ALL-SMART
[*] 26 tests passed:
   - test_edit_distance_DYNAMOSA [0.05647 s]
   - test_edit_distance_MIO [0.04214 s]
   - test_edit_distance_WHOLE_SUITE [0.04486 s]
   - test_edit_distance_MOSA [0.04216 s]
[*] Start mutants generation and execution:
   - [#   1] AOD edit_distance: 
--------------------------------------------------------------------------------
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
  33:     
  34:     distance[0][0] = 0
- 35:     parent[0][0] = -1
+ 35:     parent[0][0] = 1
  36:     
  37:     
  38:     
  39:     for i in range(1, len(str2)):
--------------------------------------------------------------------------------
[0.07920 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#   2] AOD edit_distance: 
--------------------------------------------------------------------------------
  64:     
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
- 68:     while parent[current_pos[0]][current_pos[1]] != -1:
+ 68:     while parent[current_pos[0]][current_pos[1]] != 1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
--------------------------------------------------------------------------------
[0.08238 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#   3] AOD edit_distance: 
--------------------------------------------------------------------------------
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
- 86:     return trace_stack[::-1]
+ 86:     return trace_stack[::1]
--------------------------------------------------------------------------------
[0.07264 s] survived
   - [#   4] AOR edit_distance: 
--------------------------------------------------------------------------------
  13:     
  14:     opt = [0, 0, 0]
  15:     
  16:     
- 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 17:     distance = [[0] / (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
--------------------------------------------------------------------------------
[0.08171 s] incompetent

TypeError: edit_distance:17: TypeError: unsupported operand type(s) for /: 'list' and 'int'

   - [#   5] AOR edit_distance: 
--------------------------------------------------------------------------------
  13:     
  14:     opt = [0, 0, 0]
  15:     
  16:     
- 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 17:     distance = [[0] // (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
--------------------------------------------------------------------------------
[0.07910 s] incompetent

TypeError: edit_distance:17: TypeError: unsupported operand type(s) for //: 'list' and 'int'

   - [#   6] AOR edit_distance: 
--------------------------------------------------------------------------------
  13:     
  14:     opt = [0, 0, 0]
  15:     
  16:     
- 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 17:     distance = [[0] ** (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
--------------------------------------------------------------------------------
[0.08015 s] incompetent

TypeError: edit_distance:17: TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

   - [#   7] AOR edit_distance: 
--------------------------------------------------------------------------------
  13:     
  14:     opt = [0, 0, 0]
  15:     
  16:     
- 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 17:     distance = [[0] * (len(str1) - 1) for _ in range(len(str2) + 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
--------------------------------------------------------------------------------
[0.08090 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list assignment index out of range

edit_distance:31: IndexError
   - [#   8] AOR edit_distance: 
--------------------------------------------------------------------------------
  13:     
  14:     opt = [0, 0, 0]
  15:     
  16:     
- 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) - 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
--------------------------------------------------------------------------------
[0.07942 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:26: IndexError
   - [#   9] AOR edit_distance: 
--------------------------------------------------------------------------------
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
- 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 19:     parent = [[0] / (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
--------------------------------------------------------------------------------
[0.08010 s] incompetent

TypeError: edit_distance:19: TypeError: unsupported operand type(s) for /: 'list' and 'int'

   - [#  10] AOR edit_distance: 
--------------------------------------------------------------------------------
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
- 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 19:     parent = [[0] // (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
--------------------------------------------------------------------------------
[0.08375 s] incompetent

TypeError: edit_distance:19: TypeError: unsupported operand type(s) for //: 'list' and 'int'

   - [#  11] AOR edit_distance: 
--------------------------------------------------------------------------------
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
- 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 19:     parent = [[0] ** (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
--------------------------------------------------------------------------------
[0.08165 s] incompetent

TypeError: edit_distance:19: TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

   - [#  12] AOR edit_distance: 
--------------------------------------------------------------------------------
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
- 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 19:     parent = [[0] * (len(str1) - 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
--------------------------------------------------------------------------------
[0.07999 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list assignment index out of range

edit_distance:32: IndexError
   - [#  13] AOR edit_distance: 
--------------------------------------------------------------------------------
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
- 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) - 1)]
  20:     
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
--------------------------------------------------------------------------------
[0.07984 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:27: IndexError
   - [#  14] AOR edit_distance: 
--------------------------------------------------------------------------------
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
- 21:     str1 = ' ' + str1
+ 21:     str1 = ' ' - str1
  22:     str2 = ' ' + str2
  23:     
  24:     
  25:     for i in range(len(str2)):
--------------------------------------------------------------------------------
[0.08218 s] incompetent

TypeError: edit_distance:21: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  15] AOR edit_distance: 
--------------------------------------------------------------------------------
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
- 22:     str2 = ' ' + str2
+ 22:     str2 = ' ' - str2
  23:     
  24:     
  25:     for i in range(len(str2)):
  26:         distance[i][0] = i
--------------------------------------------------------------------------------
[0.08121 s] incompetent

TypeError: edit_distance:22: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  16] AOR edit_distance: 
--------------------------------------------------------------------------------
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
  33:     
  34:     distance[0][0] = 0
- 35:     parent[0][0] = -1
+ 35:     parent[0][0] = +1
  36:     
  37:     
  38:     
  39:     for i in range(1, len(str2)):
--------------------------------------------------------------------------------
[0.08197 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  17] AOR edit_distance: 
--------------------------------------------------------------------------------
  41:             opt = [0, 0, 0]
  42:             
  43:             
  44:             if j > 0:
- 45:                 opt[INSERT] = distance[i][j - 1] + 1
+ 45:                 opt[INSERT] = distance[i][j + 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
--------------------------------------------------------------------------------
[0.10152 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:45: IndexError
   - [#  18] AOR edit_distance: 
--------------------------------------------------------------------------------
  41:             opt = [0, 0, 0]
  42:             
  43:             
  44:             if j > 0:
- 45:                 opt[INSERT] = distance[i][j - 1] + 1
+ 45:                 opt[INSERT] = distance[i][j - 1] - 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
--------------------------------------------------------------------------------
[0.07141 s] survived
   - [#  19] AOR edit_distance: 
--------------------------------------------------------------------------------
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
- 47:                 opt[DELETE] = distance[i - 1][j] + 1
+ 47:                 opt[DELETE] = distance[i + 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
--------------------------------------------------------------------------------
[0.08132 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:47: IndexError
   - [#  20] AOR edit_distance: 
--------------------------------------------------------------------------------
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
- 47:                 opt[DELETE] = distance[i - 1][j] + 1
+ 47:                 opt[DELETE] = distance[i - 1][j] - 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
--------------------------------------------------------------------------------
[0.07329 s] survived
   - [#  21] AOR edit_distance: 
--------------------------------------------------------------------------------
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
+ 49:                 opt[MATCH] = distance[i + 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
--------------------------------------------------------------------------------
[0.08115 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:49: IndexError
   - [#  22] AOR edit_distance: 
--------------------------------------------------------------------------------
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
+ 49:                 opt[MATCH] = distance[i - 1][j + 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
--------------------------------------------------------------------------------
[0.08160 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:49: IndexError
   - [#  23] AOR edit_distance: 
--------------------------------------------------------------------------------
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
+ 49:                 opt[MATCH] = distance[i - 1][j - 1] - (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
--------------------------------------------------------------------------------
[0.07491 s] survived
   - [#  24] AOR edit_distance: 
--------------------------------------------------------------------------------
  61:     
  62:     
  63:     
  64:     
- 65:     current_pos = (len(str2) - 1, len(str1) - 1)
+ 65:     current_pos = (len(str2) + 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
--------------------------------------------------------------------------------
[0.08258 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  25] AOR edit_distance: 
--------------------------------------------------------------------------------
  61:     
  62:     
  63:     
  64:     
- 65:     current_pos = (len(str2) - 1, len(str1) - 1)
+ 65:     current_pos = (len(str2) - 1, len(str1) + 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
--------------------------------------------------------------------------------
[0.10188 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  26] AOR edit_distance: 
--------------------------------------------------------------------------------
  64:     
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
- 68:     while parent[current_pos[0]][current_pos[1]] != -1:
+ 68:     while parent[current_pos[0]][current_pos[1]] != +1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
--------------------------------------------------------------------------------
[0.08229 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  27] AOR edit_distance: 
--------------------------------------------------------------------------------
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
  73:                 pass
  74:             else:
- 75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
+ 75:                 trace_stack.append((S - ' ') + str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
--------------------------------------------------------------------------------
[0.08392 s] incompetent

TypeError: edit_distance:75: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  28] AOR edit_distance: 
--------------------------------------------------------------------------------
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
  73:                 pass
  74:             else:
- 75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
+ 75:                 trace_stack.append((S + ' ') - str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
--------------------------------------------------------------------------------
[0.08059 s] incompetent

TypeError: edit_distance:75: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  29] AOR edit_distance: 
--------------------------------------------------------------------------------
  73:                 pass
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
- 77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
+ 77:             current_pos = (current_pos[0] + 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
--------------------------------------------------------------------------------
[0.07993 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  30] AOR edit_distance: 
--------------------------------------------------------------------------------
  73:                 pass
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
- 77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
+ 77:             current_pos = (current_pos[0] - 1, current_pos[1] + 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
--------------------------------------------------------------------------------
[0.08217 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  31] AOR edit_distance: 
--------------------------------------------------------------------------------
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
- 79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
+ 79:             trace_stack.append((I - ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
--------------------------------------------------------------------------------
[0.08109 s] incompetent

TypeError: edit_distance:79: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  32] AOR edit_distance: 
--------------------------------------------------------------------------------
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
- 79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
+ 79:             trace_stack.append((I + ' ') - str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
--------------------------------------------------------------------------------
[0.08004 s] incompetent

TypeError: edit_distance:79: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  33] AOR edit_distance: 
--------------------------------------------------------------------------------
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
- 80:             current_pos = (current_pos[0], current_pos[1] - 1)
+ 80:             current_pos = (current_pos[0], current_pos[1] + 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
--------------------------------------------------------------------------------
[0.08094 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_3

def test_case_3():
        str_0 = '['
        str_1 = 'yu'
>       var_0 = module_0.calculate_edit_distance(str_1, str_0)

ALL-SMART/test_edit_distance_MIO.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' yu', str2 = ' ['

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  34] AOR edit_distance: 
--------------------------------------------------------------------------------
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
- 83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
+ 83:             trace_stack.append((D - ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[0.10747 s] incompetent

TypeError: edit_distance:83: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  35] AOR edit_distance: 
--------------------------------------------------------------------------------
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
- 83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
+ 83:             trace_stack.append((D + ' ') - str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[0.08171 s] incompetent

TypeError: edit_distance:83: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  36] AOR edit_distance: 
--------------------------------------------------------------------------------
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
- 84:             current_pos = (current_pos[0] - 1, current_pos[1])
+ 84:             current_pos = (current_pos[0] + 1, current_pos[1])
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[0.08348 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  37] AOR edit_distance: 
--------------------------------------------------------------------------------
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
- 86:     return trace_stack[::-1]
+ 86:     return trace_stack[::+1]
--------------------------------------------------------------------------------
[0.07384 s] survived
   - [#  38] COI edit_distance: 
--------------------------------------------------------------------------------
  40:         for j in range(1, len(str1)):
  41:             opt = [0, 0, 0]
  42:             
  43:             
- 44:             if j > 0:
+ 44:             if not (j > 0):
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
--------------------------------------------------------------------------------
[0.07167 s] survived
   - [#  39] COI edit_distance: 
--------------------------------------------------------------------------------
  42:             
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
- 46:             if i > 0:
+ 46:             if not (i > 0):
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
--------------------------------------------------------------------------------
[0.07625 s] survived
   - [#  40] COI edit_distance: 
--------------------------------------------------------------------------------
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
+ 48:             if not ((j > 0 and i > 0)):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
--------------------------------------------------------------------------------
[0.07707 s] survived
   - [#  41] COI edit_distance: 
--------------------------------------------------------------------------------
  64:     
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
- 68:     while parent[current_pos[0]][current_pos[1]] != -1:
+ 68:     while not (parent[current_pos[0]][current_pos[1]] != -1):
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
--------------------------------------------------------------------------------
[0.08611 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_1

def test_case_1():
        str_0 = ''
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' ', str2 = ' '

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  42] COI edit_distance: 
--------------------------------------------------------------------------------
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
- 70:         if parent_val == 0:
+ 70:         if not (parent_val == 0):
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
  73:                 pass
  74:             else:
--------------------------------------------------------------------------------
[0.10115 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  43] COI edit_distance: 
--------------------------------------------------------------------------------
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
- 71:             if str2[current_pos[0]] == str1[current_pos[1]]:
+ 71:             if not (str2[current_pos[0]] == str1[current_pos[1]]):
  72:                 
  73:                 pass
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
--------------------------------------------------------------------------------
[0.07043 s] survived
   - [#  44] COI edit_distance: 
--------------------------------------------------------------------------------
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
- 78:         elif parent_val == 1:
+ 78:         elif not (parent_val == 1):
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
--------------------------------------------------------------------------------
[0.08342 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  45] LCR edit_distance: 
--------------------------------------------------------------------------------
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
+ 48:             if (j > 0 or i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
--------------------------------------------------------------------------------
[0.07427 s] survived
   - [#  46] OIL edit_distance: 
--------------------------------------------------------------------------------
  24:     
  25:     for i in range(len(str2)):
  26:         distance[i][0] = i
  27:         parent[i][0] = DELETE
- 28:     
+ 28:         break
  29:     
  30:     for j in range(len(str1)):
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
--------------------------------------------------------------------------------
[0.08304 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  47] OIL edit_distance: 
--------------------------------------------------------------------------------
  29:     
  30:     for j in range(len(str1)):
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
- 33:     
+ 33:         break
  34:     distance[0][0] = 0
  35:     parent[0][0] = -1
  36:     
  37:     
--------------------------------------------------------------------------------
[0.07211 s] survived
   - [#  48] OIL edit_distance: 
--------------------------------------------------------------------------------
  53:             parent_opt = opt.index(lowest_cost)
  54:             
  55:             distance[i][j] = lowest_cost
  56:             parent[i][j] = parent_opt
- 57:     
+ 57:         break
  58:     
  59:     
  60:     
  61:     
--------------------------------------------------------------------------------
[0.07419 s] survived
   - [#  49] OIL edit_distance: 
--------------------------------------------------------------------------------
  53:             parent_opt = opt.index(lowest_cost)
  54:             
  55:             distance[i][j] = lowest_cost
  56:             parent[i][j] = parent_opt
- 57:     
+ 57:             break
  58:     
  59:     
  60:     
  61:     
--------------------------------------------------------------------------------
[0.07348 s] survived
   - [#  50] OIL edit_distance: 
--------------------------------------------------------------------------------
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
- 84:             current_pos = (current_pos[0] - 1, current_pos[1])
+ 84:             current_pos = (current_pos[0] - 1, current_pos[1])break
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[0.07304 s] survived
   - [#  51] RIL edit_distance: 
--------------------------------------------------------------------------------
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
  24:     
- 25:     for i in range(len(str2)):
+ 25:     for i in reversed(range(len(str2))):
  26:         distance[i][0] = i
  27:         parent[i][0] = DELETE
  28:     
  29:     
--------------------------------------------------------------------------------
[0.07286 s] survived
   - [#  52] RIL edit_distance: 
--------------------------------------------------------------------------------
  26:         distance[i][0] = i
  27:         parent[i][0] = DELETE
  28:     
  29:     
- 30:     for j in range(len(str1)):
+ 30:     for j in reversed(range(len(str1))):
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
  33:     
  34:     distance[0][0] = 0
--------------------------------------------------------------------------------
[0.07429 s] survived
   - [#  53] RIL edit_distance: 
--------------------------------------------------------------------------------
  35:     parent[0][0] = -1
  36:     
  37:     
  38:     
- 39:     for i in range(1, len(str2)):
+ 39:     for i in reversed(range(1, len(str2))):
  40:         for j in range(1, len(str1)):
  41:             opt = [0, 0, 0]
  42:             
  43:             
--------------------------------------------------------------------------------
[0.07339 s] survived
   - [#  54] RIL edit_distance: 
--------------------------------------------------------------------------------
  36:     
  37:     
  38:     
  39:     for i in range(1, len(str2)):
- 40:         for j in range(1, len(str1)):
+ 40:         for j in reversed(range(1, len(str1))):
  41:             opt = [0, 0, 0]
  42:             
  43:             
  44:             if j > 0:
--------------------------------------------------------------------------------
[0.07540 s] survived
   - [#  55] ROR edit_distance: 
--------------------------------------------------------------------------------
  40:         for j in range(1, len(str1)):
  41:             opt = [0, 0, 0]
  42:             
  43:             
- 44:             if j > 0:
+ 44:             if j < 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
--------------------------------------------------------------------------------
[0.07608 s] survived
   - [#  56] ROR edit_distance: 
--------------------------------------------------------------------------------
  40:         for j in range(1, len(str1)):
  41:             opt = [0, 0, 0]
  42:             
  43:             
- 44:             if j > 0:
+ 44:             if j >= 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
--------------------------------------------------------------------------------
[0.07570 s] survived
   - [#  57] ROR edit_distance: 
--------------------------------------------------------------------------------
  42:             
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
- 46:             if i > 0:
+ 46:             if i < 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
--------------------------------------------------------------------------------
[0.09853 s] survived
   - [#  58] ROR edit_distance: 
--------------------------------------------------------------------------------
  42:             
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
- 46:             if i > 0:
+ 46:             if i >= 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
--------------------------------------------------------------------------------
[0.07006 s] survived
   - [#  59] ROR edit_distance: 
--------------------------------------------------------------------------------
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
+ 48:             if (j < 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
--------------------------------------------------------------------------------
[0.07175 s] survived
   - [#  60] ROR edit_distance: 
--------------------------------------------------------------------------------
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
+ 48:             if (j >= 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
--------------------------------------------------------------------------------
[0.07370 s] survived
   - [#  61] ROR edit_distance: 
--------------------------------------------------------------------------------
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
+ 48:             if (j > 0 and i < 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
--------------------------------------------------------------------------------
[0.07465 s] survived
   - [#  62] ROR edit_distance: 
--------------------------------------------------------------------------------
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
+ 48:             if (j > 0 and i >= 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
--------------------------------------------------------------------------------
[0.07527 s] survived
   - [#  63] ROR edit_distance: 
--------------------------------------------------------------------------------
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
+ 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] != str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
--------------------------------------------------------------------------------
[0.07369 s] survived
   - [#  64] ROR edit_distance: 
--------------------------------------------------------------------------------
  64:     
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
- 68:     while parent[current_pos[0]][current_pos[1]] != -1:
+ 68:     while parent[current_pos[0]][current_pos[1]] == -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
--------------------------------------------------------------------------------
[0.08245 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_1

def test_case_1():
        str_0 = ''
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' ', str2 = ' '

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  65] ROR edit_distance: 
--------------------------------------------------------------------------------
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
- 70:         if parent_val == 0:
+ 70:         if parent_val != 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
  73:                 pass
  74:             else:
--------------------------------------------------------------------------------
[0.07889 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  66] ROR edit_distance: 
--------------------------------------------------------------------------------
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
- 71:             if str2[current_pos[0]] == str1[current_pos[1]]:
+ 71:             if str2[current_pos[0]] != str1[current_pos[1]]:
  72:                 
  73:                 pass
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
--------------------------------------------------------------------------------
[0.07396 s] survived
   - [#  67] ROR edit_distance: 
--------------------------------------------------------------------------------
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
- 78:         elif parent_val == 1:
+ 78:         elif parent_val != 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
--------------------------------------------------------------------------------
[0.08340 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  68] SDL edit_distance: 
--------------------------------------------------------------------------------
   7: 
   8:     '''
   9:     
  10:     
- 11:     (MATCH, INSERT, DELETE) = (0, 1, 2)
+ 11:     pass
  12:     
  13:     
  14:     opt = [0, 0, 0]
  15:     
--------------------------------------------------------------------------------
[0.08105 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'DELETE' is not defined

edit_distance:27: NameError
   - [#  69] SDL edit_distance: 
--------------------------------------------------------------------------------
  10:     
  11:     (MATCH, INSERT, DELETE) = (0, 1, 2)
  12:     
  13:     
- 14:     opt = [0, 0, 0]
+ 14:     pass
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
--------------------------------------------------------------------------------
[0.08052 s] survived
   - [#  70] SDL edit_distance: 
--------------------------------------------------------------------------------
  13:     
  14:     opt = [0, 0, 0]
  15:     
  16:     
- 17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 17:     pass
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
--------------------------------------------------------------------------------
[0.08268 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'distance' is not defined

edit_distance:26: NameError
   - [#  71] SDL edit_distance: 
--------------------------------------------------------------------------------
  15:     
  16:     
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
- 19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
+ 19:     pass
  20:     
  21:     str1 = ' ' + str1
  22:     str2 = ' ' + str2
  23:     
--------------------------------------------------------------------------------
[0.08405 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'parent' is not defined

edit_distance:27: NameError
   - [#  72] SDL edit_distance: 
--------------------------------------------------------------------------------
  17:     distance = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
- 21:     str1 = ' ' + str1
+ 21:     pass
  22:     str2 = ' ' + str2
  23:     
  24:     
  25:     for i in range(len(str2)):
--------------------------------------------------------------------------------
[0.07550 s] survived
   - [#  73] SDL edit_distance: 
--------------------------------------------------------------------------------
  18:     
  19:     parent = [[0] * (len(str1) + 1) for _ in range(len(str2) + 1)]
  20:     
  21:     str1 = ' ' + str1
- 22:     str2 = ' ' + str2
+ 22:     pass
  23:     
  24:     
  25:     for i in range(len(str2)):
  26:         distance[i][0] = i
--------------------------------------------------------------------------------
[0.07320 s] survived
   - [#  74] SDL edit_distance: 
--------------------------------------------------------------------------------
  22:     str2 = ' ' + str2
  23:     
  24:     
  25:     for i in range(len(str2)):
- 26:         distance[i][0] = i
+ 26:         pass
  27:         parent[i][0] = DELETE
  28:     
  29:     
  30:     for j in range(len(str1)):
--------------------------------------------------------------------------------
[0.06955 s] survived
   - [#  75] SDL edit_distance: 
--------------------------------------------------------------------------------
  23:     
  24:     
  25:     for i in range(len(str2)):
  26:         distance[i][0] = i
- 27:         parent[i][0] = DELETE
+ 27:         pass
  28:     
  29:     
  30:     for j in range(len(str1)):
  31:         distance[0][j] = j
--------------------------------------------------------------------------------
[0.08277 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  76] SDL edit_distance: 
--------------------------------------------------------------------------------
  27:         parent[i][0] = DELETE
  28:     
  29:     
  30:     for j in range(len(str1)):
- 31:         distance[0][j] = j
+ 31:         pass
  32:         parent[0][j] = INSERT
  33:     
  34:     distance[0][0] = 0
  35:     parent[0][0] = -1
--------------------------------------------------------------------------------
[0.07398 s] survived
   - [#  77] SDL edit_distance: 
--------------------------------------------------------------------------------
  28:     
  29:     
  30:     for j in range(len(str1)):
  31:         distance[0][j] = j
- 32:         parent[0][j] = INSERT
+ 32:         pass
  33:     
  34:     distance[0][0] = 0
  35:     parent[0][0] = -1
  36:     
--------------------------------------------------------------------------------
[0.07267 s] survived
   - [#  78] SDL edit_distance: 
--------------------------------------------------------------------------------
  30:     for j in range(len(str1)):
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
  33:     
- 34:     distance[0][0] = 0
+ 34:     pass
  35:     parent[0][0] = -1
  36:     
  37:     
  38:     
--------------------------------------------------------------------------------
[0.07336 s] survived
   - [#  79] SDL edit_distance: 
--------------------------------------------------------------------------------
  31:         distance[0][j] = j
  32:         parent[0][j] = INSERT
  33:     
  34:     distance[0][0] = 0
- 35:     parent[0][0] = -1
+ 35:     pass
  36:     
  37:     
  38:     
  39:     for i in range(1, len(str2)):
--------------------------------------------------------------------------------
[0.08249 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [#  80] SDL edit_distance: 
--------------------------------------------------------------------------------
  37:     
  38:     
  39:     for i in range(1, len(str2)):
  40:         for j in range(1, len(str1)):
- 41:             opt = [0, 0, 0]
+ 41:             pass
  42:             
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
--------------------------------------------------------------------------------
[0.07301 s] survived
   - [#  81] SDL edit_distance: 
--------------------------------------------------------------------------------
  41:             opt = [0, 0, 0]
  42:             
  43:             
  44:             if j > 0:
- 45:                 opt[INSERT] = distance[i][j - 1] + 1
+ 45:                 pass
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
--------------------------------------------------------------------------------
[0.07383 s] survived
   - [#  82] SDL edit_distance: 
--------------------------------------------------------------------------------
  43:             
  44:             if j > 0:
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
- 47:                 opt[DELETE] = distance[i - 1][j] + 1
+ 47:                 pass
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
--------------------------------------------------------------------------------
[0.09428 s] survived
   - [#  83] SDL edit_distance: 
--------------------------------------------------------------------------------
  45:                 opt[INSERT] = distance[i][j - 1] + 1
  46:             if i > 0:
  47:                 opt[DELETE] = distance[i - 1][j] + 1
  48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
+ 49:                 pass
  50:             
  51:             
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
--------------------------------------------------------------------------------
[0.07443 s] survived
   - [#  84] SDL edit_distance: 
--------------------------------------------------------------------------------
  48:             if (j > 0 and i > 0):
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
- 52:             lowest_cost = min(opt)
+ 52:             pass
  53:             parent_opt = opt.index(lowest_cost)
  54:             
  55:             distance[i][j] = lowest_cost
  56:             parent[i][j] = parent_opt
--------------------------------------------------------------------------------
[0.08226 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'lowest_cost' is not defined

edit_distance:53: NameError
   - [#  85] SDL edit_distance: 
--------------------------------------------------------------------------------
  49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
  50:             
  51:             
  52:             lowest_cost = min(opt)
- 53:             parent_opt = opt.index(lowest_cost)
+ 53:             pass
  54:             
  55:             distance[i][j] = lowest_cost
  56:             parent[i][j] = parent_opt
  57:     
--------------------------------------------------------------------------------
[0.08304 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'parent_opt' is not defined

edit_distance:56: NameError
   - [#  86] SDL edit_distance: 
--------------------------------------------------------------------------------
  51:             
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
  54:             
- 55:             distance[i][j] = lowest_cost
+ 55:             pass
  56:             parent[i][j] = parent_opt
  57:     
  58:     
  59:     
--------------------------------------------------------------------------------
[0.07542 s] survived
   - [#  87] SDL edit_distance: 
--------------------------------------------------------------------------------
  52:             lowest_cost = min(opt)
  53:             parent_opt = opt.index(lowest_cost)
  54:             
  55:             distance[i][j] = lowest_cost
- 56:             parent[i][j] = parent_opt
+ 56:             pass
  57:     
  58:     
  59:     
  60:     
--------------------------------------------------------------------------------
[0.07831 s] survived
   - [#  88] SDL edit_distance: 
--------------------------------------------------------------------------------
  61:     
  62:     
  63:     
  64:     
- 65:     current_pos = (len(str2) - 1, len(str1) - 1)
+ 65:     pass
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
--------------------------------------------------------------------------------
[0.08230 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   UnboundLocalError: local variable 'current_pos' referenced before assignment

edit_distance:68: UnboundLocalError
   - [#  89] SDL edit_distance: 
--------------------------------------------------------------------------------
  62:     
  63:     
  64:     
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
- 66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
+ 66:     pass
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
--------------------------------------------------------------------------------
[0.08349 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   NameError: name 'S' is not defined

edit_distance:75: NameError
   - [#  90] SDL edit_distance: 
--------------------------------------------------------------------------------
  63:     
  64:     
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
- 67:     trace_stack = []
+ 67:     pass
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
  69:         parent_val = parent[current_pos[0]][current_pos[1]]
  70:         if parent_val == 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
--------------------------------------------------------------------------------
[0.08106 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'trace_stack' is not defined

edit_distance:86: NameError
   - [#  91] SDL edit_distance: 
--------------------------------------------------------------------------------
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
- 69:         parent_val = parent[current_pos[0]][current_pos[1]]
+ 69:         pass
  70:         if parent_val == 0:
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
  73:                 pass
--------------------------------------------------------------------------------
[0.10235 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_0

def test_case_0():
        str_0 = '|WvA'
>       var_0 = module_0.calculate_edit_distance(str_0, str_0)

ALL-SMART/test_edit_distance_MIO.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' |WvA', str2 = ' |WvA'

>   ???
E   NameError: name 'parent_val' is not defined

edit_distance:70: NameError
   - [#  92] SDL edit_distance: 
--------------------------------------------------------------------------------
  71:             if str2[current_pos[0]] == str1[current_pos[1]]:
  72:                 
  73:                 pass
  74:             else:
- 75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
+ 75:                 pass
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
--------------------------------------------------------------------------------
[0.07292 s] survived
   - [#  93] SDL edit_distance: 
--------------------------------------------------------------------------------
  73:                 pass
  74:             else:
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
- 77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
+ 77:             pass
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
--------------------------------------------------------------------------------
[5.00685 s] timeout
   - [#  94] SDL edit_distance: 
--------------------------------------------------------------------------------
  75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
- 79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
+ 79:             pass
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
--------------------------------------------------------------------------------
[0.07166 s] survived
   - [#  95] SDL edit_distance: 
--------------------------------------------------------------------------------
  76:             
  77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
  78:         elif parent_val == 1:
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
- 80:             current_pos = (current_pos[0], current_pos[1] - 1)
+ 80:             pass
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
--------------------------------------------------------------------------------
[5.00681 s] timeout
   - [#  96] SDL edit_distance: 
--------------------------------------------------------------------------------
  79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
- 83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
+ 83:             pass
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[0.07067 s] survived
   - [#  97] SDL edit_distance: 
--------------------------------------------------------------------------------
  80:             current_pos = (current_pos[0], current_pos[1] - 1)
  81:         else:
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
- 84:             current_pos = (current_pos[0] - 1, current_pos[1])
+ 84:             pass
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[5.00675 s] timeout
   - [#  98] SDL edit_distance: 
--------------------------------------------------------------------------------
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
- 86:     return trace_stack[::-1]
+ 86:     pass
--------------------------------------------------------------------------------
[0.07225 s] survived
   - [#  99] SIR edit_distance: 
--------------------------------------------------------------------------------
  82:             
  83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
  84:             current_pos = (current_pos[0] - 1, current_pos[1])
  85:     
- 86:     return trace_stack[::-1]
+ 86:     return trace_stack[:]
--------------------------------------------------------------------------------
[0.07428 s] survived
   - [# 100] ZIL edit_distance: 
--------------------------------------------------------------------------------
  22:     str2 = ' ' + str2
  23:     
  24:     
  25:     for i in range(len(str2)):
- 26:         distance[i][0] = i
- 27:         parent[i][0] = DELETE
+ 26:         break
+ 27:     
  28:     
  29:     
  30:     for j in range(len(str1)):
  31:         distance[0][j] = j
--------------------------------------------------------------------------------
[0.08179 s] killed by ALL-SMART/test_edit_distance_MIO.py::test_case_2

def test_case_2():
        str_0 = 'I'
        str_1 = '4#KB`8AG]/'
>       var_0 = module_0.calculate_edit_distance(str_0, str_1)

ALL-SMART/test_edit_distance_MIO.py:15: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

str1 = ' I', str2 = ' 4#KB`8AG]/'

>   ???
E   IndexError: list index out of range

edit_distance:68: IndexError
   - [# 101] ZIL edit_distance: 
--------------------------------------------------------------------------------
  27:         parent[i][0] = DELETE
  28:     
  29:     
  30:     for j in range(len(str1)):
- 31:         distance[0][j] = j
- 32:         parent[0][j] = INSERT
+ 31:         break
+ 32:     
  33:     
  34:     distance[0][0] = 0
  35:     parent[0][0] = -1
  36:     
--------------------------------------------------------------------------------
[0.07354 s] survived
   - [# 102] ZIL edit_distance: 
--------------------------------------------------------------------------------
  36:     
  37:     
  38:     
  39:     for i in range(1, len(str2)):
- 40:         for j in range(1, len(str1)):
- 41:             opt = [0, 0, 0]
- 42:             
- 43:             
- 44:             if j > 0:
- 45:                 opt[INSERT] = distance[i][j - 1] + 1
- 46:             if i > 0:
- 47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
- 50:             
- 51:             
- 52:             lowest_cost = min(opt)
- 53:             parent_opt = opt.index(lowest_cost)
- 54:             
- 55:             distance[i][j] = lowest_cost
- 56:             parent[i][j] = parent_opt
+ 40:         break
+ 41:     
+ 42:     
+ 43:     
+ 44:     
+ 45:     
+ 46:     
+ 47:     
+ 48:     
+ 49:     
+ 50:     
+ 51:     
+ 52:     
+ 53:     
+ 54:     
+ 55:     
+ 56:     
  57:     
  58:     
  59:     
  60:     
--------------------------------------------------------------------------------
[0.07188 s] survived
   - [# 103] ZIL edit_distance: 
--------------------------------------------------------------------------------
  37:     
  38:     
  39:     for i in range(1, len(str2)):
  40:         for j in range(1, len(str1)):
- 41:             opt = [0, 0, 0]
- 42:             
- 43:             
- 44:             if j > 0:
- 45:                 opt[INSERT] = distance[i][j - 1] + 1
- 46:             if i > 0:
- 47:                 opt[DELETE] = distance[i - 1][j] + 1
- 48:             if (j > 0 and i > 0):
- 49:                 opt[MATCH] = distance[i - 1][j - 1] + (0 if str1[j] == str2[i] else 1)
- 50:             
- 51:             
- 52:             lowest_cost = min(opt)
- 53:             parent_opt = opt.index(lowest_cost)
- 54:             
- 55:             distance[i][j] = lowest_cost
- 56:             parent[i][j] = parent_opt
+ 41:             break
+ 42:     
+ 43:     
+ 44:     
+ 45:     
+ 46:     
+ 47:     
+ 48:     
+ 49:     
+ 50:     
+ 51:     
+ 52:     
+ 53:     
+ 54:     
+ 55:     
+ 56:     
  57:     
  58:     
  59:     
  60:     
--------------------------------------------------------------------------------
[0.07251 s] survived
   - [# 104] ZIL edit_distance: 
--------------------------------------------------------------------------------
  65:     current_pos = (len(str2) - 1, len(str1) - 1)
  66:     (D, I, S) = ('Delete', 'Insert', 'Substitute')
  67:     trace_stack = []
  68:     while parent[current_pos[0]][current_pos[1]] != -1:
- 69:         parent_val = parent[current_pos[0]][current_pos[1]]
- 70:         if parent_val == 0:
- 71:             if str2[current_pos[0]] == str1[current_pos[1]]:
- 72:                 
- 73:                 pass
- 74:             else:
- 75:                 trace_stack.append((S + ' ') + str1[current_pos[1]])
- 76:             
- 77:             current_pos = (current_pos[0] - 1, current_pos[1] - 1)
- 78:         elif parent_val == 1:
- 79:             trace_stack.append((I + ' ') + str1[current_pos[1]])
- 80:             current_pos = (current_pos[0], current_pos[1] - 1)
- 81:         else:
- 82:             
- 83:             trace_stack.append((D + ' ') + str2[current_pos[0]])
- 84:             current_pos = (current_pos[0] - 1, current_pos[1])
+ 69:         break
+ 70:     
+ 71:     
+ 72:     
+ 73:     
+ 74:     
+ 75:     
+ 76:     
+ 77:     
+ 78:     
+ 79:     
+ 80:     
+ 81:     
+ 82:     
+ 83:     
+ 84:     
  85:     
  86:     return trace_stack[::-1]
--------------------------------------------------------------------------------
[0.07275 s] survived
[*] Mutation score [29.37565 s]: 44.4%
   - all: 104
   - killed: 37 (35.6%)
   - survived: 50 (48.1%)
   - incompetent: 14 (13.5%)
   - timeout: 3 (2.9%)
