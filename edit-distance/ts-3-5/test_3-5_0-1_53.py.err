import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for identical strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for strings with one character difference
    assert calculate_edit_distance("abc", "abd") == ['Substitute d']

    # Test case for strings with one character insertion
    assert calculate_edit_distance("abc", "abcd") == ['Insert d']

    # Test case for strings with one character deletion
    assert calculate_edit_distance("abcd", "abc") == ['Delete d']

    # Test case for strings with multiple differences
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute i', 'Substitute t', 'Insert t', 'Substitute e', 'Substitute n']

    # Test case for long strings with multiple differences
    assert calculate_edit_distance("This is a long string to test", "This is another long string to test") == ['Substitute a', 'Substitute n', 'Substitute o', 'Substitute t', 'Substitute h', 'Substitute e', 'Substitute r', 'Substitute a']

    # Test case for strings with no common characters
    assert calculate_edit_distance("1234", "5678") == ['Substitute 5', 'Substitute 6', 'Substitute 7', 'Substitute 8']

    # Test case for strings with all different characters
    assert calculate_edit_distance("abc", "def") == ['Substitute d', 'Substitute e', 'Substitute f']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "hello  world") == ['Insert  ', 'Insert w']

    # Test case for strings with special characters
    assert calculate_edit_distance("!@#$", "$#@!") == ['Substitute $', 'Substitute #', 'Substitute @', 'Substitute !']

    # Test case for strings with different lengths
    assert calculate_edit_distance("short", "this is a longer string") == ['Insert t', 'Insert h', 'Insert i', 'Insert s', 'Insert  ', 'Insert i', 'Insert s', 'Insert  ', 'Insert a', 'Insert  ', 'Insert l', 'Insert o', 'Insert n', 'Insert g', 'Insert e', 'Insert r', 'Insert  ', 'Insert s', 'Insert t', 'Insert r', 'Insert i', 'Insert n', 'Insert g']

    # Test case for strings with same characters but different order
    assert calculate_edit_distance("abc", "cab") == ['Substitute c', 'Substitute a', 'Substitute b']

    # Test case for strings with repeated characters
    assert calculate_edit_distance("aaabbb", "ababab") == ['Substitute b', 'Substitute a', 'Substitute b', 'Substitute a', 'Substitute b']

    # Test case for strings with numbers
    assert calculate_edit_distance("12345", "54321") == ['Substitute 5', 'Substitute 4', 'Substitute 3', 'Substitute 2', 'Substitute 1']

    # Test case for strings with mixed characters
    assert calculate_edit_distance("abc123!@#", "123!@#abc") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with upper and lower case characters
    assert calculate_edit_distance("AbCdEfG", "aBcDeFg") == ['Substitute a', 'Substitute B', 'Substitute c', 'Substitute D', 'Substitute e', 'Substitute F', 'Substitute g']

    # Test case for long strings with minimal differences
    assert calculate_edit_distance("abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyZ") == ['Substitute Z']

    # Test case for long strings with no differences
    assert calculate_edit_distance("Lorem ipsum dolor sit amet, consectetur adipiscing elit.", "Lorem ipsum dolor sit amet, consectetur adipiscing elit.") == []

    # Test case for strings with newline characters
    assert calculate_edit_distance("line1\nline2", "line1\nline3") == ['Substitute 3']

    # Test case for strings with tab characters
    assert calculate_edit_distance("tab\ttab", "tab\ttab\ttab") == ['Insert \t', 'Insert t', 'Insert a', 'Insert b']

    # Test case for strings with leading and trailing spaces
    assert calculate_edit_distance("  hello", "hello  ") == ['Delete  ', 'Delete  ']

    # Test case for strings with leading and trailing special characters
    assert calculate_edit_distance("!@#hello", "hello@#") == ['Substitute h', 'Substitute e', 'Substitute l', 'Substitute l', 'Substitute o', 'Substitute @', 'Substitute #']

    # Test case for strings with leading and trailing numbers
    assert calculate_edit_distance("123hello", "hello123") == ['Substitute h', 'Substitute e', 'Substitute l', 'Substitute l', 'Substitute o', 'Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with leading and trailing upper and lower case characters
    assert calculate_edit_distance("AbcDefG", "aBcDeFg") == ['Substitute a', 'Substitute B', 'Substitute c', 'Substitute D', 'Substitute e', 'Substitute F', 'Substitute g']

    # Test case for strings with leading and trailing mixed characters
    assert calculate_edit_distance("123abc!@#", "abc!@#123") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing numbers, special characters, and spaces
    assert calculate_edit_distance("123!@# hello", "hello  !@#123") == ['Substitute h', 'Substitute e', 'Substitute l', 'Substitute l', 'Substitute o', 'Substitute  ', 'Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with leading and trailing mixed characters and spaces
    assert calculate_edit_distance("abc 123", "123 abc") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters and special characters
    assert calculate_edit_distance("abc!@#", "!@#abc") == ['Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, and special characters
    assert calculate_edit_distance("abc123!@#", "!@#abc123") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces
    assert calculate_edit_distance("abc 123!@#", "!@#abc 123") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in different order
    assert calculate_edit_distance("123!@# abc", "abc 123!@#") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in reverse order
    assert calculate_edit_distance("cba 321!@#", "!@#321 abc") == ['Substitute 3', 'Substitute 2', 'Substitute 1', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in random order
    assert calculate_edit_distance("1a2b3c !@#", "!@# 3c2b1a") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 3c2b1a") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 2b3c1a") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5e6") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 4', 'Insert d', 'Insert 5', 'Insert e', 'Insert 6']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6e5d4") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert e', 'Insert 5', 'Insert d', 'Insert 4']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with extra characters
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6e5d4f") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert e', 'Insert 5', 'Insert d', 'Insert 4', 'Insert f']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing characters
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6e5") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert e', 'Insert 5']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6e5d4f") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert e', 'Insert 5', 'Insert d', 'Insert 4', 'Insert f']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and different order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6e5f4d") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert e', 'Insert 5', 'Insert f', 'Insert 4', 'Insert d']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6f5d4e") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert f', 'Insert 5', 'Insert d', 'Insert 4', 'Insert e']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5f6") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 4', 'Insert d', 'Insert 5', 'Insert f', 'Insert 6']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6f5d4") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert f', 'Insert 5', 'Insert d', 'Insert 4']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5f6") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 4', 'Insert d', 'Insert 5', 'Insert f', 'Insert 6']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6f5d4") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert f', 'Insert 5', 'Insert d', 'Insert 4']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5f6") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 4', 'Insert d', 'Insert 5', 'Insert f', 'Insert 6']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6f5d4") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert f', 'Insert 5', 'Insert d', 'Insert 4']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5f6") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 4', 'Insert d', 'Insert 5', 'Insert f', 'Insert 6']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6f5d4") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert f', 'Insert 5', 'Insert d', 'Insert 4']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5f6") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 4', 'Insert d', 'Insert 5', 'Insert f', 'Insert 6']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 6f5d4") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c', 'Insert 6', 'Insert f', 'Insert 5', 'Insert d', 'Insert 4']

    # Test case for strings with leading and trailing mixed characters, numbers, special characters, and spaces in completely different shuffled order with missing and extra characters and completely different shuffled order
    assert calculate_edit_distance("a1b2c3 !@#", "!@# 4d5f6") ==