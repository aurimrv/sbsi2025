import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test cases for calculate_edit_distance method

    # Test case 1: Empty strings
    assert calculate_edit_distance("", "") == []

    # Test case 2: Same strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case 3: Different strings with single substitution
    assert calculate_edit_distance("abc", "abd") == ['Substitute d']

    # Test case 4: Different strings with single insertion
    assert calculate_edit_distance("abc", "abcd") == ['Insert d']

    # Test case 5: Different strings with single deletion
    assert calculate_edit_distance("abcd", "abc") == ['Delete d']

    # Test case 6: Complex case with multiple operations
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute k', 'Substitute i', 'Substitute g', 'Insert g']

    # Test case 7: Strings of different lengths
    assert calculate_edit_distance("abc", "abcdef") == ['Insert d', 'Insert e', 'Insert f']

    # Test case 8: Strings with spaces
    assert calculate_edit_distance("hello world", "hello") == ['Delete w', 'Delete o', 'Delete r', 'Delete l', 'Delete l', 'Delete e', 'Delete h']

    # Test case 9: Strings with special characters
    assert calculate_edit_distance("!@#$", "!@#$%^") == ['Insert %', 'Insert ^']

    # Test case 10: Performance test with long strings
    assert calculate_edit_distance("a" * 100, "b" * 100) == ['Substitute b'] * 100