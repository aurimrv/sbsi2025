import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

# Test case for empty strings
def test_calculate_edit_distance_empty_strings():
    assert calculate_edit_distance("", "") == []

# Test case for strings with equal lengths
def test_calculate_edit_distance_equal_length():
    assert calculate_edit_distance("abc", "abc") == []

# Test case for one string being an empty string
def test_calculate_edit_distance_one_empty_string():
    assert calculate_edit_distance("abc", "") == ["Delete a", "Delete b", "Delete c"]

# Test case for completely different strings
def test_calculate_edit_distance_different_strings():
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute k', 'Substitute i', 'Substitute t', 'Substitute t', 'Insert t', 'Substitute e', 'Delete n']

# Test case for strings with some common characters
def test_calculate_edit_distance_common_characters():
    assert calculate_edit_distance("Saturday", "Sunday") == ['Substitute a', 'Insert u', 'Insert n']

# Test case for strings with only one character different
def test_calculate_edit_distance_one_char_difference():
    assert calculate_edit_distance("Python", "Pithon") == ['Substitute y']

# Test case for strings with multiple possible corrections
def test_calculate_edit_distance_multiple_corrections():
    assert calculate_edit_distance("abcd", "xyz") == ['Delete a', 'Delete b', 'Delete c', 'Delete d', 'Insert x', 'Insert y', 'Insert z']