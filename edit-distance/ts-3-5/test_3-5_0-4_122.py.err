import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

import pytest

def test_calculate_edit_distance():
    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for identical strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for strings with only insertions
    assert calculate_edit_distance("", "abc") == ['Insert a', 'Insert b', 'Insert c']

    # Test case for strings with only deletions
    assert calculate_edit_distance("abc", "") == ['Delete a', 'Delete b', 'Delete c']

    # Test case for strings with substitutions
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute i', 'Substitute t', 'Insert t', 'Substitute e', 'Substitute n']

    # Test case for strings with a mix of operations
    assert calculate_edit_distance("Saturday", "Sunday") == ['Substitute u', 'Substitute n', 'Substitute d', 'Substitute y', 'Insert y']

    # Test case for long strings
    assert calculate_edit_distance("This is a long string for testing", "This is a long string for testing purposes") == ['Insert  ', 'Insert p']

    # Test case for strings with special characters
    assert calculate_edit_distance("123!@#", "123$@#") == ['Substitute $']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "hello   world") == ['Insert  ', 'Insert  ', 'Insert  ']

    # Test case for strings with different lengths
    assert calculate_edit_distance("short", "a very long string") == ['Insert a', 'Insert  ', 'Insert v', 'Insert e', 'Insert r', 'Insert y', 'Insert  ', 'Insert l', 'Insert o', 'Insert n', 'Insert g', 'Insert  ', 'Insert s', 'Insert t', 'Insert r', 'Insert i', 'Insert n', 'Insert g']
