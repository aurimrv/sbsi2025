import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for identical strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for strings with one character difference
    assert calculate_edit_distance("abc", "abd") == ['Substitute d']

    # Test case for strings with one character addition
    assert calculate_edit_distance("abc", "abcd") == ['Insert d']

    # Test case for strings with one character deletion
    assert calculate_edit_distance("abcd", "abc") == ['Delete d']

    # Test case for strings with multiple differences
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute k', 'Substitute e', 'Insert g']

    # Test case for long strings with multiple operations
    assert calculate_edit_distance("intention", "execution") == ['Substitute e', 'Substitute x', 'Substitute u', 'Substitute n', 'Substitute c', 'Substitute i', 'Insert n']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "helllo worlld") == ['Substitute l', 'Substitute l']

    # Test case for strings with special characters
    assert calculate_edit_distance("123!@#", "123$@#") == ['Substitute $']

    # Test case for strings with different lengths
    assert calculate_edit_distance("short", "this is a longer string") == ['Insert t', 'Insert h', 'Insert i', 'Insert s', 'Insert ', 'Insert i', 'Insert s', 'Insert ', 'Insert a', 'Insert ', 'Insert l', 'Insert o', 'Insert n', 'Insert g']

    # Test case for strings with all different characters
    assert calculate_edit_distance("abcdefghijklmnopqrstuvwxyz", "1234567890") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute 4', 'Substitute 5', 'Substitute 6', 'Substitute 7', 'Substitute 8', 'Substitute 9', 'Substitute 0']

    # Test case for strings with no common characters
    assert calculate_edit_distance("abc", "def") == ['Substitute d', 'Insert e', 'Insert f']

    # Test case for strings with repeating characters
    assert calculate_edit_distance("aaabbbccc", "aabbbccc") == ['Delete a']

    # Test case for strings with multiple deletions
    assert calculate_edit_distance("abcdef", "f") == ['Delete a', 'Delete b', 'Delete c', 'Delete d', 'Delete e']

    # Test case for strings with multiple insertions
    assert calculate_edit_distance("f", "abcdef") == ['Insert a', 'Insert b', 'Insert c', 'Insert d', 'Insert e']