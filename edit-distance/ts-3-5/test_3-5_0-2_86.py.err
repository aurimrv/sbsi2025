import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for identical strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for single character difference
    assert calculate_edit_distance("abc", "abd") == ['Substitute d']

    # Test case for insertion
    assert calculate_edit_distance("abc", "abdc") == ['Insert d']

    # Test case for deletion
    assert calculate_edit_distance("abc", "ac") == ['Delete b']

    # Test case for multiple operations
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute i', 'Substitute t', 'Insert t', 'Substitute e', 'Substitute n']

    # Test case for long strings
    assert calculate_edit_distance("This is a long string", "This is a longer string") == ['Insert e', 'Insert r']

    # Test case for special characters
    assert calculate_edit_distance("123!@#", "12345@#") == ['Substitute 4']

    # Test case for spaces
    assert calculate_edit_distance("hello world", "hello  world") == ['Insert  ']

    # Test case for mixed case
    assert calculate_edit_distance("AbCdEfG", "aBcDeFg") == ['Substitute a', 'Substitute e', 'Substitute g']

    # Test case for numbers
    assert calculate_edit_distance("12345", "54321") == ['Substitute 5', 'Substitute 4', 'Substitute 3', 'Substitute 2', 'Substitute 1']

    # Test case for long similar strings
    assert calculate_edit_distance("aaaaaaaaaaaaaaaaaaaa", "aaaaaaaaaaaaaaaaaaab") == ['Insert b']

    # Test case for very different strings
    assert calculate_edit_distance("abc", "xyz") == ['Substitute x', 'Substitute y', 'Substitute z']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "hello  world") == ['Insert  ']