import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for identical strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for strings with one character difference
    assert calculate_edit_distance("abc", "abd") == ['Substitute d']

    # Test case for strings with one character addition
    assert calculate_edit_distance("abc", "abcd") == ['Insert d']

    # Test case for strings with one character deletion
    assert calculate_edit_distance("abcd", "abc") == ['Delete d']

    # Test case for longer strings with multiple edits
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute k', 'Substitute i', 'Insert g']

    # Test case for strings with no common characters
    assert calculate_edit_distance("abc", "def") == ['Substitute d', 'Substitute e', 'Substitute f']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "world hello") == ['Substitute w', 'Substitute o', 'Substitute r', 'Substitute l', 'Substitute d', 'Substitute h', 'Substitute e']

    # Test case for strings with special characters
    assert calculate_edit_distance("!@#$", "$#@!") == ['Substitute $', 'Substitute #', 'Substitute @', 'Substitute !']

    # Test case for long strings with no edits
    assert calculate_edit_distance("abcdefghijklmnopqrstuvwxyz", "abcdefghijklmnopqrstuvwxyz") == []

    # Test case for strings with all characters different
    assert calculate_edit_distance("12345", "67890") == ['Substitute 6', 'Substitute 7', 'Substitute 8', 'Substitute 9', 'Substitute 0']

    # Test case for strings with multiple edits
    assert calculate_edit_distance("abcde", "xyz") == ['Substitute x', 'Substitute y', 'Substitute z', 'Delete d', 'Delete e']

    # Test case for strings with multiple edits and additions
    assert calculate_edit_distance("abc", "xyz123") == ['Insert 1', 'Insert 2', 'Insert 3', 'Substitute x', 'Substitute y', 'Substitute z']

    # Test case for strings with multiple edits and deletions
    assert calculate_edit_distance("abcdef", "xyz") == ['Delete d', 'Delete e', 'Delete f', 'Substitute x', 'Substitute y', 'Substitute z']

    # Test case for strings with multiple edits, additions, and deletions
    assert calculate_edit_distance("abcdef", "xyz123") == ['Insert 1', 'Insert 2', 'Insert 3', 'Delete d', 'Delete e', 'Delete f', 'Substitute x', 'Substitute y', 'Substitute z']

    # Test case for strings with repeated characters
    assert calculate_edit_distance("aaabbbccc", "aaacccbbb") == ['Substitute c', 'Substitute c', 'Substitute b', 'Substitute b']

    # Test case for strings with different lengths
    assert calculate_edit_distance("short", "thisisaverylongstring") == ['Insert t', 'Insert h', 'Insert i', 'Insert s', 'Insert i', 'Insert s', 'Insert a', 'Insert v', 'Insert e', 'Insert r', 'Insert y', 'Insert l', 'Insert o', 'Insert n', 'Insert g']

    # Test case for strings with same characters but different order
    assert calculate_edit_distance("abc", "cab") == ['Substitute c', 'Substitute a', 'Substitute b']

    # Test case for strings with mixed characters and numbers
    assert calculate_edit_distance("abc123", "123abc") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with uppercase and lowercase characters
    assert calculate_edit_distance("AbC", "aBc") == ['Substitute a', 'Substitute B', 'Substitute C']

    # Test case for strings with leading and trailing spaces
    assert calculate_edit_distance("  abc", "abc  ") == ['Delete  ', 'Delete  ', 'Insert   ', 'Insert   ']

    # Test case for strings with newline characters
    assert calculate_edit_distance("abc\n123", "123\nabc") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with tab characters
    assert calculate_edit_distance("abc\t123", "123\tabc") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with special characters and numbers
    assert calculate_edit_distance("!@#$123", "123$#@!") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute $', 'Substitute #', 'Substitute @', 'Substitute !']

    # Test case for strings with emojis
    assert calculate_edit_distance("ðŸ˜ŠðŸ˜‚", "ðŸ˜‚ðŸ˜Š") == ['Substitute ðŸ˜‚', 'Substitute ðŸ˜Š']

    # Test case for strings with non-ASCII characters
    assert calculate_edit_distance("hÃ©llÃ¸", "hello") == ['Substitute h', 'Substitute e', 'Substitute Ã¸']

    # Test case for strings with mixed characters and symbols
    assert calculate_edit_distance("abc$%^", "^$%abc") == ['Substitute ^', 'Substitute $', 'Substitute %', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with multiple spaces
    assert calculate_edit_distance("a b c", "a   b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with multiple tabs
    assert calculate_edit_distance("a\tb\tc", "a\t\tb\tc") == ['Insert \t']

    # Test case for strings with multiple newlines
    assert calculate_edit_distance("a\nb\nc", "a\n\nb\nc") == ['Insert \n']

    # Test case for strings with mix of spaces, tabs, and newlines
    assert calculate_edit_distance("a \t\nb", "a \t\n\nb") == ['Insert \n']

    # Test case for strings with mix of special characters and symbols
    assert calculate_edit_distance("!@#$%^", "^$%@!") == ['Substitute ^', 'Substitute $', 'Substitute %', 'Substitute @', 'Substitute !']

    # Test case for strings with mix of uppercase and lowercase letters
    assert calculate_edit_distance("AbC", "aBc") == ['Substitute a', 'Substitute B', 'Substitute C']

    # Test case for strings with mix of letters and numbers
    assert calculate_edit_distance("abc123", "123abc") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with mix of letters, numbers, and symbols
    assert calculate_edit_distance("abc123!@#", "!@#123abc") == ['Substitute !', 'Substitute @', 'Substitute #', 'Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abcðŸ˜Š", "ðŸ˜Šabc") == ['Substitute ðŸ˜Š', 'Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("hÃ©llÃ¸", "hello") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\tb\tc") == ['Insert \t']

    # Test case for strings with mix of characters and newlines
    assert calculate_edit_distance("abc", "a\nb\nc") == ['Insert \n']

    # Test case for strings with mix of characters and symbols
    assert calculate_edit_distance("abc", "!@#") == ['Substitute !', 'Substitute @', 'Substitute #']

    # Test case for strings with mix of characters and numbers
    assert calculate_edit_distance("abc", "123") == ['Substitute 1', 'Substitute 2', 'Substitute 3']

    # Test case for strings with mix of characters and emojis
    assert calculate_edit_distance("abc", "ðŸ˜ŠðŸ˜‚") == ['Substitute ðŸ˜Š', 'Substitute ðŸ˜‚']

    # Test case for strings with mix of characters and non-ASCII characters
    assert calculate_edit_distance("abc", "hÃ©llÃ¸") == ['Substitute h', 'Substitute Ã©', 'Substitute l', 'Substitute Ã¸']

    # Test case for strings with mix of characters and spaces
    assert calculate_edit_distance("abc", "a b c") == ['Insert  ', 'Insert  ']

    # Test case for strings with mix of characters and tabs
    assert calculate_edit_distance("abc", "a\t