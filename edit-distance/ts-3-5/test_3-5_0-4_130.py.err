import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test cases for calculate_edit_distance method

    # Test case for matching strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for different lengths of strings
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute k', 'Substitute i', 'Substitute t', 'Substitute t', 'Insert g']

    # Test case for completely different strings
    assert calculate_edit_distance("hello", "world") == ['Substitute h', 'Substitute e', 'Substitute l', 'Substitute l', 'Substitute o', 'Insert w', 'Insert o', 'Insert r', 'Insert l', 'Insert d']

    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for one empty string
    assert calculate_edit_distance("abc", "") == ['Delete a', 'Delete b', 'Delete c']

    # Test case for one empty string
    assert calculate_edit_distance("", "abc") == ['Insert a', 'Insert b', 'Insert c']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "hello world") == []

    # Test case for strings with special characters
    assert calculate_edit_distance("!@#$%", "$#@!") == ['Substitute !', 'Substitute @', 'Substitute #', 'Substitute $', 'Substitute %']

    # Test case for long strings
    assert calculate_edit_distance("abcdefghijklmnopqrstuvwxyz", "zyxwvutsrqponmlkjihgfedcba") == ['Substitute a', 'Substitute b', 'Substitute c', 'Substitute d', 'Substitute e', 'Substitute f', 'Substitute g', 'Substitute h', 'Substitute i', 'Substitute j', 'Substitute k', 'Substitute l', 'Substitute m', 'Substitute n', 'Substitute o', 'Substitute p', 'Substitute q', 'Substitute r', 'Substitute s', 'Substitute t', 'Substitute u', 'Substitute v', 'Substitute w', 'Substitute x', 'Substitute y', 'Substitute z']

    # Test case for strings with numbers
    assert calculate_edit_distance("12345", "54321") == ['Substitute 1', 'Substitute 2', 'Substitute 3', 'Substitute 4', 'Substitute 5']

    # Test case for strings with uppercase and lowercase characters
    assert calculate_edit_distance("AbCdEfG", "aBcDeFg") == ['Substitute A', 'Substitute b', 'Substitute C', 'Substitute d', 'Substitute E', 'Substitute f', 'Substitute G']

    # Test case for strings with repeated characters
    assert calculate_edit_distance("aaabbb", "bbbaaa") == ['Substitute a', 'Substitute a', 'Substitute a', 'Substitute b', 'Substitute b', 'Substitute b']

    # Test case for strings with multiple edits
    assert calculate_edit_distance("abcde", "xyz") == ['Substitute a', 'Substitute b', 'Substitute c', 'Insert x', 'Insert y', 'Insert z']

    # Test case for strings with no edits
    assert calculate_edit_distance("same", "same") == []

    # Test case for strings with one character difference
    assert calculate_edit_distance("testing", "testin") == ['Delete g']

    # Test case for strings with multiple replacements
    assert calculate_edit_distance("abc", "def") == ['Substitute a', 'Substitute b', 'Substitute c']

    # Test case for strings with multiple deletions
    assert calculate_edit_distance("abcdef", "def") == ['Delete a', 'Delete b', 'Delete c']

    # Test case for strings with multiple insertions
    assert calculate_edit_distance("def", "abcdef") == ['Insert a', 'Insert b', 'Insert c']

    # Test case for strings with mix of operations
    assert calculate_edit_distance("abcdefg", "azcdef") == ['Substitute a', 'Delete b', 'Insert z', 'Substitute c', 'Substitute d', 'Substitute e', 'Substitute f', 'Delete g']
