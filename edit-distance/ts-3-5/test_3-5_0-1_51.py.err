import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from edit_distance import calculate_edit_distance

def test_calculate_edit_distance():
    # Test cases for calculate_edit_distance method

    # Test case for empty strings
    assert calculate_edit_distance("", "") == []

    # Test case for identical strings
    assert calculate_edit_distance("abc", "abc") == []

    # Test case for strings with one character difference
    assert calculate_edit_distance("abc", "abd") == ['Substitute d']

    # Test case for strings with one character addition
    assert calculate_edit_distance("abc", "abcd") == ['Insert d']

    # Test case for strings with one character deletion
    assert calculate_edit_distance("abcd", "abc") == ['Delete d']

    # Test case for strings with multiple differences
    assert calculate_edit_distance("kitten", "sitting") == ['Substitute s', 'Substitute i', 'Substitute t', 'Insert t', 'Substitute e', 'Substitute n']

    # Test case for long strings with multiple differences
    assert calculate_edit_distance("This is a long string", "Th1s 1s a l0ng str1ng") == ['Substitute 1', 'Substitute 1', 'Substitute 0', 'Substitute 1', 'Substitute 1']

    # Test case for strings with no common characters
    assert calculate_edit_distance("abc", "xyz") == ['Delete a', 'Delete b', 'Delete c', 'Insert x', 'Insert y', 'Insert z']

    # Test case for strings with spaces
    assert calculate_edit_distance("hello world", "hello  world") == ['Insert  ', 'Insert  ']

    # Test case for strings with special characters
    assert calculate_edit_distance("!@#$%", "%$#@!") == ['Substitute %', 'Substitute $', 'Substitute #', 'Substitute @']

    # Test case for strings with mixed cases
    assert calculate_edit_distance("AbCdEfG", "aBcDeFg") == ['Substitute a', 'Substitute b', 'Substitute c', 'Substitute d', 'Substitute e', 'Substitute f', 'Substitute g']
