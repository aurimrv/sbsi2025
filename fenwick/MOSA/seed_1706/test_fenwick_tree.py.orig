# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import fenwick_tree as module_0


def test_case_0():
    bytes_0 = b"\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J"
    fenwick_tree_0 = module_0.FenwickTree(bytes_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [
        0,
        241,
        209,
        53,
        226,
        32,
        203,
        255,
        195,
        169,
        209,
        74,
    ]
    assert fenwick_tree_0.tree == [
        0,
        241,
        450,
        53,
        729,
        32,
        235,
        255,
        1414,
        169,
        378,
        74,
    ]


def test_case_1():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    fenwick_tree_0 = module_0.FenwickTree(dict_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, False]
    assert fenwick_tree_0.tree == [0, 0]
    var_0 = fenwick_tree_0.sum_of_range(bool_0, bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_2():
    none_type_0 = None
    module_0.FenwickTree(none_type_0)


def test_case_3():
    bool_0 = False
    dict_0 = {bool_0: bool_0, bool_0: bool_0, bool_0: bool_0}
    fenwick_tree_0 = module_0.FenwickTree(dict_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, False]
    assert fenwick_tree_0.tree == [0, 0]
    var_0 = fenwick_tree_0.sum_of_n(bool_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_4():
    int_0 = -1075
    int_1 = 4
    bytes_0 = b"\x85:\xbfG\xd6"
    fenwick_tree_0 = module_0.FenwickTree(bytes_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, 133, 58, 191, 71, 214]
    assert fenwick_tree_0.tree == [0, 133, 191, 191, 453, 214]
    var_0 = fenwick_tree_0.sum_of_n(int_1)
    assert var_0 == 667
    var_0.update(int_0, int_0)
