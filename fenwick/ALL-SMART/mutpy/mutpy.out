[*] Start mutation process:
   - targets: fenwick_tree.py
   - tests: ./ALL-SMART
[*] 22 tests passed:
   - test_fenwick_tree_WHOLE_SUITE [0.05694 s]
   - test_fenwick_tree_MIO [0.04442 s]
   - test_fenwick_tree_DYNAMOSA [0.04499 s]
   - test_fenwick_tree_MOSA [0.04244 s]
[*] Start mutants generation and execution:
   - [#   1] AOD fenwick_tree: 
--------------------------------------------------------------------------------
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
- 16:             index += index & (-index)
+ 16:             index += index & index
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
--------------------------------------------------------------------------------
[0.08032 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#   2] AOD fenwick_tree: 
--------------------------------------------------------------------------------
  20:         index += 1
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
- 24:             index -= index & (-index)
+ 24:             index -= index & index
  25:         
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
--------------------------------------------------------------------------------
[0.08072 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_6

def test_case_6():
        float_0 = -1000.3163
        int_0 = 2
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
>       assert var_0 == -6063
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:65: AssertionError
   - [#   3] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
+  4:         self.nums = [0] / (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
--------------------------------------------------------------------------------
[0.07447 s] incompetent

TypeError: fenwick_tree:4: TypeError: unsupported operand type(s) for /: 'list' and 'int'

   - [#   4] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
+  4:         self.nums = [0] // (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
--------------------------------------------------------------------------------
[0.07719 s] incompetent

TypeError: fenwick_tree:4: TypeError: unsupported operand type(s) for //: 'list' and 'int'

   - [#   5] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
+  4:         self.nums = [0] ** (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
--------------------------------------------------------------------------------
[0.07868 s] incompetent

TypeError: fenwick_tree:4: TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

   - [#   6] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
+  4:         self.nums = [0] * (len(arr) - 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
--------------------------------------------------------------------------------
[0.08083 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5dfc0>, index = 10
value = 209

>   ???
E   IndexError: list index out of range

fenwick_tree:12: IndexError
   - [#   7] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
+  5:         self.tree = [0] / (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
--------------------------------------------------------------------------------
[0.07916 s] incompetent

TypeError: fenwick_tree:5: TypeError: unsupported operand type(s) for /: 'list' and 'int'

   - [#   8] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
+  5:         self.tree = [0] // (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
--------------------------------------------------------------------------------
[0.07700 s] incompetent

TypeError: fenwick_tree:5: TypeError: unsupported operand type(s) for //: 'list' and 'int'

   - [#   9] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
+  5:         self.tree = [0] ** (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
--------------------------------------------------------------------------------
[0.07825 s] incompetent

TypeError: fenwick_tree:5: TypeError: unsupported operand type(s) for ** or pow(): 'list' and 'int'

   - [#  10] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
+  5:         self.tree = [0] * (len(arr) - 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
--------------------------------------------------------------------------------
[0.07916 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  11] AOR fenwick_tree: 
--------------------------------------------------------------------------------
   8:             self.update(i, arr[i])
   9:     
  10:     def update(self, index, value):
  11:         index += 1
- 12:         delta = value - self.nums[index]
+ 12:         delta = value + self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
--------------------------------------------------------------------------------
[0.06754 s] survived
   - [#  12] AOR fenwick_tree: 
--------------------------------------------------------------------------------
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
+ 14:         while index <= len(self.tree) + 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
--------------------------------------------------------------------------------
[0.08007 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5fd90>, index = 12
value = 169

>   ???
E   IndexError: list index out of range

fenwick_tree:15: IndexError
   - [#  13] AOR fenwick_tree: 
--------------------------------------------------------------------------------
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
- 16:             index += index & (-index)
+ 16:             index += index & (+index)
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
--------------------------------------------------------------------------------
[0.08487 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  14] AOR fenwick_tree: 
--------------------------------------------------------------------------------
  20:         index += 1
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
- 24:             index -= index & (-index)
+ 24:             index -= index & (+index)
  25:         
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
--------------------------------------------------------------------------------
[0.08477 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_6

def test_case_6():
        float_0 = -1000.3163
        int_0 = 2
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
>       assert var_0 == -6063
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:65: AssertionError
   - [#  15] AOR fenwick_tree: 
--------------------------------------------------------------------------------
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
- 31:         return self.sum_of_n(end) - self.sum_of_n(start)
+ 31:         return self.sum_of_n(end) + self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.08168 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_6

def test_case_6():
        float_0 = -1000.3163
        int_0 = 2
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == -6063
        bool_0 = True
        var_1 = fenwick_tree_0.sum_of_range(bool_0, bool_0)
>       assert var_1 == -2021
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:68: AssertionError
   - [#  16] ASR fenwick_tree: 
--------------------------------------------------------------------------------
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
  10:     def update(self, index, value):
- 11:         index += 1
+ 11:         index -= 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
--------------------------------------------------------------------------------
[5.00652 s] timeout
   - [#  17] ASR fenwick_tree: 
--------------------------------------------------------------------------------
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
- 15:             self.tree[index] += delta
+ 15:             self.tree[index] -= delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
--------------------------------------------------------------------------------
[0.07876 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  18] ASR fenwick_tree: 
--------------------------------------------------------------------------------
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
- 16:             index += index & (-index)
+ 16:             index -= index & (-index)
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
--------------------------------------------------------------------------------
[5.00616 s] timeout
   - [#  19] ASR fenwick_tree: 
--------------------------------------------------------------------------------
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
- 20:         index += 1
+ 20:         index -= 1
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
  24:             index -= index & (-index)
--------------------------------------------------------------------------------
[0.08041 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
        var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)
>       assert var_1 == -1409
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:53: AssertionError
   - [#  20] ASR fenwick_tree: 
--------------------------------------------------------------------------------
  19:         s = 0
  20:         index += 1
  21:         
  22:         while index > 0:
- 23:             s += self.tree[index]
+ 23:             s -= self.tree[index]
  24:             index -= index & (-index)
  25:         
  26:         return s
  27:     
--------------------------------------------------------------------------------
[0.07984 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
        var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)
>       assert var_1 == -1409
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:53: AssertionError
   - [#  21] ASR fenwick_tree: 
--------------------------------------------------------------------------------
  20:         index += 1
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
- 24:             index -= index & (-index)
+ 24:             index += index & (-index)
  25:         
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
--------------------------------------------------------------------------------
[0.08106 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
>       var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:31: in sum_of_range
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5dc60>, index = 8

>   ???
E   IndexError: list index out of range

fenwick_tree:23: IndexError
   - [#  22] ASR fenwick_tree: 
--------------------------------------------------------------------------------
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
- 30:         start -= 1
+ 30:         start += 1
  31:         return self.sum_of_n(end) - self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.08342 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
        var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)
>       assert var_1 == -1409
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:53: AssertionError
   - [#  23] CDI fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
-  3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
-  6:         
-  7:         for i in range(len(arr)):
-  8:             self.update(i, arr[i])
-  9:     
+  3:     @classmethod
+  4:     def __init__(self, arr):
+  5:         self.nums = [0] * (len(arr) + 1)
+  6:         self.tree = [0] * (len(arr) + 1)
+  7:         
+  8:         for i in range(len(arr)):
+  9:             self.update(i, arr[i])
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
--------------------------------------------------------------------------------
[0.07673 s] incompetent

TypeError: fenwick_tree:9: TypeError: FenwickTree.update() missing 1 required positional argument: 'value'

   - [#  24] CDI fenwick_tree: 
--------------------------------------------------------------------------------
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
- 10:     def update(self, index, value):
- 11:         index += 1
- 12:         delta = value - self.nums[index]
- 13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
- 15:             self.tree[index] += delta
- 16:             index += index & (-index)
- 17:     
+ 10:     @classmethod
+ 11:     def update(self, index, value):
+ 12:         index += 1
+ 13:         delta = value - self.nums[index]
+ 14:         self.nums[index] = value
+ 15:         while index <= len(self.tree) - 1:
+ 16:             self.tree[index] += delta
+ 17:             index += index & (-index)
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
  21:         
--------------------------------------------------------------------------------
[0.07810 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'fenwick_tree.FenwickTree'>, index = 1, value = 241

>   ???
E   AttributeError: type object 'FenwickTree' has no attribute 'nums'

fenwick_tree:13: AttributeError
   - [#  25] CDI fenwick_tree: 
--------------------------------------------------------------------------------
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
- 18:     def sum_of_n(self, index):
- 19:         s = 0
- 20:         index += 1
- 21:         
- 22:         while index > 0:
- 23:             s += self.tree[index]
- 24:             index -= index & (-index)
- 25:         
- 26:         return s
- 27:     
+ 18:     @classmethod
+ 19:     def sum_of_n(self, index):
+ 20:         s = 0
+ 21:         index += 1
+ 22:         
+ 23:         while index > 0:
+ 24:             s += self.tree[index]
+ 25:             index -= index & (-index)
+ 26:         
+ 27:         return s
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
  31:         return self.sum_of_n(end) - self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.08062 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
>       var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:31: in sum_of_range
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'fenwick_tree.FenwickTree'>, index = 1

>   ???
E   AttributeError: type object 'FenwickTree' has no attribute 'tree'

fenwick_tree:24: AttributeError
   - [#  26] CDI fenwick_tree: 
--------------------------------------------------------------------------------
  24:             index -= index & (-index)
  25:         
  26:         return s
  27:     
- 28:     def sum_of_range(self, start, end):
- 29:         
- 30:         start -= 1
- 31:         return self.sum_of_n(end) - self.sum_of_n(start)
+ 28:     @classmethod
+ 29:     def sum_of_range(self, start, end):
+ 30:         
+ 31:         start -= 1
+ 32:         return self.sum_of_n(end) - self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.09320 s] incompetent

TypeError: fenwick_tree:32: TypeError: FenwickTree.sum_of_n() missing 1 required positional argument: 'index'

   - [#  27] COI fenwick_tree: 
--------------------------------------------------------------------------------
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
+ 14:         while not (index <= len(self.tree) - 1):
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
--------------------------------------------------------------------------------
[0.08009 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  28] COI fenwick_tree: 
--------------------------------------------------------------------------------
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
  21:         
- 22:         while index > 0:
+ 22:         while not (index > 0):
  23:             s += self.tree[index]
  24:             index -= index & (-index)
  25:         
  26:         return s
--------------------------------------------------------------------------------
[0.07858 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_1

def test_case_1():
        none_type_0 = None
        int_0 = -1409
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
>       var_0 = fenwick_tree_0.sum_of_n(int_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5fb50>, index = -1408

>   ???
E   IndexError: list index out of range

fenwick_tree:23: IndexError
   - [#  29] LOR fenwick_tree: 
--------------------------------------------------------------------------------
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
- 16:             index += index & (-index)
+ 16:             index += index | (-index)
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
--------------------------------------------------------------------------------
[5.00681 s] timeout
   - [#  30] LOR fenwick_tree: 
--------------------------------------------------------------------------------
  20:         index += 1
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
- 24:             index -= index & (-index)
+ 24:             index -= index | (-index)
  25:         
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
--------------------------------------------------------------------------------
[0.08009 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
>       var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:31: in sum_of_range
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985e14fd0>, index = 8

>   ???
E   IndexError: list index out of range

fenwick_tree:23: IndexError
   - [#  31] OIL fenwick_tree: 
--------------------------------------------------------------------------------
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
-  9:     
+  9:             break
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
--------------------------------------------------------------------------------
[0.07686 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
>       assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:9: AssertionError
   - [#  32] OIL fenwick_tree: 
--------------------------------------------------------------------------------
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
- 17:     
+ 17:             break
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
  21:         
--------------------------------------------------------------------------------
[0.08129 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  33] OIL fenwick_tree: 
--------------------------------------------------------------------------------
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
  24:             index -= index & (-index)
- 25:         
+ 25:             break
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
--------------------------------------------------------------------------------
[0.08129 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_6

def test_case_6():
        float_0 = -1000.3163
        int_0 = 2
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
>       assert var_0 == -6063
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:65: AssertionError
   - [#  34] RIL fenwick_tree: 
--------------------------------------------------------------------------------
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
-  7:         for i in range(len(arr)):
+  7:         for i in reversed(range(len(arr))):
   8:             self.update(i, arr[i])
   9:     
  10:     def update(self, index, value):
  11:         index += 1
--------------------------------------------------------------------------------
[0.06923 s] survived
   - [#  35] ROR fenwick_tree: 
--------------------------------------------------------------------------------
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
+ 14:         while index >= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
--------------------------------------------------------------------------------
[0.07836 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985e170a0>, index = 12
value = 74

>   ???
E   IndexError: list index out of range

fenwick_tree:15: IndexError
   - [#  36] ROR fenwick_tree: 
--------------------------------------------------------------------------------
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
+ 14:         while index < len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
--------------------------------------------------------------------------------
[0.08171 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  37] ROR fenwick_tree: 
--------------------------------------------------------------------------------
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
  21:         
- 22:         while index > 0:
+ 22:         while index < 0:
  23:             s += self.tree[index]
  24:             index -= index & (-index)
  25:         
  26:         return s
--------------------------------------------------------------------------------
[0.07916 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_1

def test_case_1():
        none_type_0 = None
        int_0 = -1409
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
>       var_0 = fenwick_tree_0.sum_of_n(int_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5fc10>, index = -1408

>   ???
E   IndexError: list index out of range

fenwick_tree:23: IndexError
   - [#  38] ROR fenwick_tree: 
--------------------------------------------------------------------------------
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
  21:         
- 22:         while index > 0:
+ 22:         while index >= 0:
  23:             s += self.tree[index]
  24:             index -= index & (-index)
  25:         
  26:         return s
--------------------------------------------------------------------------------
[5.00674 s] timeout
   - [#  39] SDI fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
-  3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
-  6:         
-  7:         for i in range(len(arr)):
-  8:             self.update(i, arr[i])
-  9:     
+  3:     @staticmethod
+  4:     def __init__(self, arr):
+  5:         self.nums = [0] * (len(arr) + 1)
+  6:         self.tree = [0] * (len(arr) + 1)
+  7:         
+  8:         for i in range(len(arr)):
+  9:             self.update(i, arr[i])
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
--------------------------------------------------------------------------------
[0.07597 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/fenwick/ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: TypeError: FenwickTree.__init__() missing 1 required positional argument: 'arr'

   - [#  40] SDI fenwick_tree: 
--------------------------------------------------------------------------------
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
- 10:     def update(self, index, value):
- 11:         index += 1
- 12:         delta = value - self.nums[index]
- 13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
- 15:             self.tree[index] += delta
- 16:             index += index & (-index)
- 17:     
+ 10:     @staticmethod
+ 11:     def update(self, index, value):
+ 12:         index += 1
+ 13:         delta = value - self.nums[index]
+ 14:         self.nums[index] = value
+ 15:         while index <= len(self.tree) - 1:
+ 16:             self.tree[index] += delta
+ 17:             index += index & (-index)
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
  21:         
--------------------------------------------------------------------------------
[0.07733 s] incompetent

TypeError: fenwick_tree:8: TypeError: FenwickTree.update() missing 1 required positional argument: 'value'

   - [#  41] SDI fenwick_tree: 
--------------------------------------------------------------------------------
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
- 18:     def sum_of_n(self, index):
- 19:         s = 0
- 20:         index += 1
- 21:         
- 22:         while index > 0:
- 23:             s += self.tree[index]
- 24:             index -= index & (-index)
- 25:         
- 26:         return s
- 27:     
+ 18:     @staticmethod
+ 19:     def sum_of_n(self, index):
+ 20:         s = 0
+ 21:         index += 1
+ 22:         
+ 23:         while index > 0:
+ 24:             s += self.tree[index]
+ 25:             index -= index & (-index)
+ 26:         
+ 27:         return s
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
  31:         return self.sum_of_n(end) - self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.08035 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/fenwick/ALL-SMART/test_fenwick_tree_DYNAMOSA.py:21: TypeError: FenwickTree.sum_of_n() missing 1 required positional argument: 'index'

   - [#  42] SDI fenwick_tree: 
--------------------------------------------------------------------------------
  24:             index -= index & (-index)
  25:         
  26:         return s
  27:     
- 28:     def sum_of_range(self, start, end):
- 29:         
- 30:         start -= 1
- 31:         return self.sum_of_n(end) - self.sum_of_n(start)
+ 28:     @staticmethod
+ 29:     def sum_of_range(self, start, end):
+ 30:         
+ 31:         start -= 1
+ 32:         return self.sum_of_n(end) - self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.08203 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/fenwick/ALL-SMART/test_fenwick_tree_DYNAMOSA.py:50: TypeError: FenwickTree.sum_of_range() missing 1 required positional argument: 'end'

   - [#  43] SDL fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
+  4:         pass
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
--------------------------------------------------------------------------------
[0.07906 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985e156f0>, index = 1
value = 241

>   ???
E   AttributeError: 'FenwickTree' object has no attribute 'nums'

fenwick_tree:12: AttributeError
   - [#  44] SDL fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
+  5:         pass
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
--------------------------------------------------------------------------------
[0.07881 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985ea3790>, index = 1
value = 241

>   ???
E   AttributeError: 'FenwickTree' object has no attribute 'tree'

fenwick_tree:14: AttributeError
   - [#  45] SDL fenwick_tree: 
--------------------------------------------------------------------------------
   4:         self.nums = [0] * (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
-  8:             self.update(i, arr[i])
+  8:             pass
   9:     
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
--------------------------------------------------------------------------------
[0.07762 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
>       assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:9: AssertionError
   - [#  46] SDL fenwick_tree: 
--------------------------------------------------------------------------------
   8:             self.update(i, arr[i])
   9:     
  10:     def update(self, index, value):
  11:         index += 1
- 12:         delta = value - self.nums[index]
+ 12:         pass
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
--------------------------------------------------------------------------------
[0.07867 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5dc00>, index = 1
value = 241

>   ???
E   NameError: name 'delta' is not defined

fenwick_tree:15: NameError
   - [#  47] SDL fenwick_tree: 
--------------------------------------------------------------------------------
   9:     
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
- 13:         self.nums[index] = value
+ 13:         pass
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
--------------------------------------------------------------------------------
[0.07902 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
>       assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:9: AssertionError
   - [#  48] SDL fenwick_tree: 
--------------------------------------------------------------------------------
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
- 19:         s = 0
+ 19:         pass
  20:         index += 1
  21:         
  22:         while index > 0:
  23:             s += self.tree[index]
--------------------------------------------------------------------------------
[0.07719 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_1

def test_case_1():
        none_type_0 = None
        int_0 = -1409
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
>       var_0 = fenwick_tree_0.sum_of_n(int_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985dda2f0>, index = -1408

>   ???
E   UnboundLocalError: local variable 's' referenced before assignment

fenwick_tree:26: UnboundLocalError
   - [#  49] SDL fenwick_tree: 
--------------------------------------------------------------------------------
  22:         while index > 0:
  23:             s += self.tree[index]
  24:             index -= index & (-index)
  25:         
- 26:         return s
+ 26:         pass
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
--------------------------------------------------------------------------------
[0.08214 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_1

def test_case_1():
        none_type_0 = None
        int_0 = -1409
        int_1 = -2021
        list_0 = [int_1, int_1, int_1, int_1]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -2021, -2021, -2021, -2021]
        assert fenwick_tree_0.tree == [0, -2021, -4042, -2021, -8084]
        var_0 = fenwick_tree_0.sum_of_n(int_0)
>       assert var_0 == 0
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:22: AssertionError
   - [#  50] SDL fenwick_tree: 
--------------------------------------------------------------------------------
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
- 31:         return self.sum_of_n(end) - self.sum_of_n(start)
+ 31:         pass
--------------------------------------------------------------------------------
[0.07988 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
>       assert var_0 == 0
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:51: AssertionError
   - [#  51] SVD fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
-  4:         self.nums = [0] * (len(arr) + 1)
+  4:         nums = [0] * (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  52] SVD fenwick_tree: 
--------------------------------------------------------------------------------
   1: class FenwickTree:
   2:     
   3:     def __init__(self, arr):
   4:         self.nums = [0] * (len(arr) + 1)
-  5:         self.tree = [0] * (len(arr) + 1)
+  5:         tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
   8:             self.update(i, arr[i])
   9:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  53] SVD fenwick_tree: 
--------------------------------------------------------------------------------
   4:         self.nums = [0] * (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
-  8:             self.update(i, arr[i])
+  8:             update(i, arr[i])
   9:     
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
--------------------------------------------------------------------------------
[0.07807 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985eaf8b0>
arr = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'

>   ???
E   NameError: name 'update' is not defined

fenwick_tree:8: NameError
   - [#  54] SVD fenwick_tree: 
--------------------------------------------------------------------------------
   8:             self.update(i, arr[i])
   9:     
  10:     def update(self, index, value):
  11:         index += 1
- 12:         delta = value - self.nums[index]
+ 12:         delta = value - nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
--------------------------------------------------------------------------------
[0.07796 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2986177b20>, index = 1
value = 241

>   ???
E   NameError: name 'nums' is not defined

fenwick_tree:12: NameError
   - [#  55] SVD fenwick_tree: 
--------------------------------------------------------------------------------
   9:     
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
- 13:         self.nums[index] = value
+ 13:         nums[index] = value
  14:         while index <= len(self.tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
--------------------------------------------------------------------------------
[0.07813 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985eae320>, index = 1
value = 241

>   ???
E   NameError: name 'nums' is not defined

fenwick_tree:13: NameError
   - [#  56] SVD fenwick_tree: 
--------------------------------------------------------------------------------
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
- 14:         while index <= len(self.tree) - 1:
+ 14:         while index <= len(tree) - 1:
  15:             self.tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
--------------------------------------------------------------------------------
[0.07863 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985ddb370>, index = 1
value = 241

>   ???
E   NameError: name 'tree' is not defined

fenwick_tree:14: NameError
   - [#  57] SVD fenwick_tree: 
--------------------------------------------------------------------------------
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
- 15:             self.tree[index] += delta
+ 15:             tree[index] += delta
  16:             index += index & (-index)
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
--------------------------------------------------------------------------------
[0.08122 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
>       fenwick_tree_0 = module_0.FenwickTree(bytes_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:8: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985ddb760>, index = 1
value = 241

>   ???
E   NameError: name 'tree' is not defined

fenwick_tree:15: NameError
   - [#  58] SVD fenwick_tree: 
--------------------------------------------------------------------------------
  19:         s = 0
  20:         index += 1
  21:         
  22:         while index > 0:
- 23:             s += self.tree[index]
+ 23:             s += tree[index]
  24:             index -= index & (-index)
  25:         
  26:         return s
  27:     
--------------------------------------------------------------------------------
[0.08618 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
>       var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:52: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
fenwick_tree:31: in sum_of_range
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985eaf310>, index = 1

>   ???
E   NameError: name 'tree' is not defined

fenwick_tree:23: NameError
   - [#  59] SVD fenwick_tree: 
--------------------------------------------------------------------------------
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
- 31:         return self.sum_of_n(end) - self.sum_of_n(start)
+ 31:         return sum_of_n(end) - self.sum_of_n(start)
--------------------------------------------------------------------------------
[0.08408 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
>       var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985f5f250>, start = -1001.3163
end = -1409

>   ???
E   NameError: name 'sum_of_n' is not defined

fenwick_tree:31: NameError
   - [#  60] SVD fenwick_tree: 
--------------------------------------------------------------------------------
  27:     
  28:     def sum_of_range(self, start, end):
  29:         
  30:         start -= 1
- 31:         return self.sum_of_n(end) - self.sum_of_n(start)
+ 31:         return self.sum_of_n(end) - sum_of_n(start)
--------------------------------------------------------------------------------
[0.08044 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
>       var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <fenwick_tree.FenwickTree object at 0x7b2985eac100>, start = -1001.3163
end = -1409

>   ???
E   NameError: name 'sum_of_n' is not defined

fenwick_tree:31: NameError
   - [#  61] ZIL fenwick_tree: 
--------------------------------------------------------------------------------
   4:         self.nums = [0] * (len(arr) + 1)
   5:         self.tree = [0] * (len(arr) + 1)
   6:         
   7:         for i in range(len(arr)):
-  8:             self.update(i, arr[i])
+  8:             break
   9:     
  10:     def update(self, index, value):
  11:         index += 1
  12:         delta = value - self.nums[index]
--------------------------------------------------------------------------------
[0.07988 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
>       assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:9: AssertionError
   - [#  62] ZIL fenwick_tree: 
--------------------------------------------------------------------------------
  11:         index += 1
  12:         delta = value - self.nums[index]
  13:         self.nums[index] = value
  14:         while index <= len(self.tree) - 1:
- 15:             self.tree[index] += delta
- 16:             index += index & (-index)
+ 15:             break
+ 16:     
  17:     
  18:     def sum_of_n(self, index):
  19:         s = 0
  20:         index += 1
--------------------------------------------------------------------------------
[0.08056 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_0

def test_case_0():
        bytes_0 = b'\xf1\xd15\xe2 \xcb\xff\xc3\xa9\xd1J'
        fenwick_tree_0 = module_0.FenwickTree(bytes_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, 241, 209, 53, 226, 32, 203, 255, 195, 169, 209, 74]
>       assert fenwick_tree_0.tree == [0, 241, 450, 53, 729, 32, 235, 255, 1414, 169, 378, 74]
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:10: AssertionError
   - [#  63] ZIL fenwick_tree: 
--------------------------------------------------------------------------------
  19:         s = 0
  20:         index += 1
  21:         
  22:         while index > 0:
- 23:             s += self.tree[index]
- 24:             index -= index & (-index)
+ 23:             break
+ 24:         
  25:         
  26:         return s
  27:     
  28:     def sum_of_range(self, start, end):
--------------------------------------------------------------------------------
[0.08234 s] killed by ALL-SMART/test_fenwick_tree_DYNAMOSA.py::test_case_5

def test_case_5():
        float_0 = -1000.3163
        int_0 = -1409
        list_0 = [int_0, int_0, int_0, int_0]
        fenwick_tree_0 = module_0.FenwickTree(list_0)
        assert f'{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}' == 'fenwick_tree.FenwickTree'
        assert fenwick_tree_0.nums == [0, -1409, -1409, -1409, -1409]
        assert fenwick_tree_0.tree == [0, -1409, -2818, -1409, -5636]
        var_0 = fenwick_tree_0.sum_of_range(float_0, int_0)
        assert var_0 == 0
        var_1 = fenwick_tree_0.sum_of_range(var_0, var_0)
>       assert var_1 == -1409
E       AssertionError

ALL-SMART/test_fenwick_tree_DYNAMOSA.py:53: AssertionError
[*] Mutation score [26.11612 s]: 95.9%
   - all: 63
   - killed: 43 (68.3%)
   - survived: 2 (3.2%)
   - incompetent: 14 (22.2%)
   - timeout: 4 (6.3%)
