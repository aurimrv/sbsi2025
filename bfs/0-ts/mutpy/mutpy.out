[34m[*][0m Start mutation process:
[36m   -[0m targets: breadth_first_search.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 4 tests passed:
[36m   -[0m test_2d_bfs [0.17966 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] + 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11287 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_complex

def test_bfs_complex():
>       assert (7,0) == breadth_first_search(make_complex_grid(), (7, 4), 111)
E       AssertionError

0-ts/test_2d_bfs.py:26: AssertionError
[36m   -[0m [#   2] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] + 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.13471 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#   3] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] - 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.10780 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#   4] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] - 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11226 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#   5] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width + 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12929 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#   6] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height + 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.09746 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#   7] BCR breadth_first_search: 
--------------------------------------------------------------------------------
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
[34m- 37:                 continue[0m
[32m+ 37:                 break[0m
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
  41:             elif coor not in visited:
--------------------------------------------------------------------------------
[0.12740 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#   8] BCR breadth_first_search: 
--------------------------------------------------------------------------------
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
[34m- 65:                 continue[0m
[32m+ 65:                 break[0m
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
--------------------------------------------------------------------------------
[0.11306 s] [31msurvived[0m
[36m   -[0m [#   9] COD breadth_first_search: 
--------------------------------------------------------------------------------
  11:     Returns:
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
  14:     height = len(grid)
[34m- 15:     if not height:[0m
[32m+ 15:     if height:[0m
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
--------------------------------------------------------------------------------
[0.13005 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  10] COD breadth_first_search: 
--------------------------------------------------------------------------------
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
[34m- 41:             elif coor not in visited:[0m
[32m+ 41:             elif coor in visited:[0m
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
  44:     return None
  45: 
--------------------------------------------------------------------------------
[0.12760 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  11] COI breadth_first_search: 
--------------------------------------------------------------------------------
  11:     Returns:
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
  14:     height = len(grid)
[34m- 15:     if not height:[0m
[32m+ 15:     if not ((not height)):[0m
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
--------------------------------------------------------------------------------
[0.12753 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  12] COI breadth_first_search: 
--------------------------------------------------------------------------------
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
  22:     
[34m- 23:     if grid[y_start][x_start] == target:[0m
[32m+ 23:     if not (grid[y_start][x_start] == target):[0m
  24:         return (x_start, y_start)
  25:     
  26:     visited = set()
  27:     
--------------------------------------------------------------------------------
[0.12963 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  13] COI breadth_first_search: 
--------------------------------------------------------------------------------
  27:     
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
[34m- 31:     while queue:[0m
[32m+ 31:     while not queue:[0m
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
--------------------------------------------------------------------------------
[0.09728 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  14] COI breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if not ((coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1)):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.15508 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#  15] COI breadth_first_search: 
--------------------------------------------------------------------------------
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
[34m- 38:             if grid[coor[1]][coor[0]] == target:[0m
[32m+ 38:             if not (grid[coor[1]][coor[0]] == target):[0m
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
--------------------------------------------------------------------------------
[0.12507 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  16] COI breadth_first_search: 
--------------------------------------------------------------------------------
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
[34m- 41:             elif coor not in visited:[0m
[32m+ 41:             elif not (coor not in visited):[0m
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
  44:     return None
  45: 
--------------------------------------------------------------------------------
[0.09650 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  17] COI breadth_first_search: 
--------------------------------------------------------------------------------
  56:     '''
  57:     visited = set([head])
  58:     queue = [head]
  59:     
[34m- 60:     while queue:[0m
[32m+ 60:     while not queue:[0m
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
--------------------------------------------------------------------------------
[0.08329 s] [31msurvived[0m
[36m   -[0m [#  18] COI breadth_first_search: 
--------------------------------------------------------------------------------
  60:     while queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
[34m- 64:             if adjacent in visited:[0m
[32m+ 64:             if not (adjacent in visited):[0m
  65:                 continue
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
--------------------------------------------------------------------------------
[0.11137 s] [31msurvived[0m
[36m   -[0m [#  19] COI breadth_first_search: 
--------------------------------------------------------------------------------
  60:     while queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
[34m- 64:             if adjacent in visited:[0m
[32m+ 64:             if adjacent not in visited:[0m
  65:                 continue
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
--------------------------------------------------------------------------------
[0.11148 s] [31msurvived[0m
[36m   -[0m [#  20] COI breadth_first_search: 
--------------------------------------------------------------------------------
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
  65:                 continue
  66:             
[34m- 67:             if adjacent.val == target:[0m
[32m+ 67:             if not (adjacent.val == target):[0m
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
--------------------------------------------------------------------------------
[0.10920 s] [31msurvived[0m
[36m   -[0m [#  21] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  13:     '''
  14:     height = len(grid)
  15:     if not height:
  16:         return None
[34m- 17:     width = len(grid[0])[0m
[32m+ 17:     width = len(grid[1])[0m
  18:     
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
--------------------------------------------------------------------------------
[0.10999 s] [31msurvived[0m
[36m   -[0m [#  22] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  15:     if not height:
  16:         return None
  17:     width = len(grid[0])
  18:     
[34m- 19:     x_start = start[0][0m
[32m+ 19:     x_start = start[1][0m
  20:     y_start = start[1]
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
--------------------------------------------------------------------------------
[0.12540 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  23] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
[34m- 20:     y_start = start[1][0m
[32m+ 20:     y_start = start[2][0m
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
  24:         return (x_start, y_start)
--------------------------------------------------------------------------------
[0.12813 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:20: IndexError
[36m   -[0m [#  24] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[1], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12300 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#  25] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[2] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12991 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:35: IndexError
[36m   -[0m [#  26] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 2), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12494 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#  27] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[1] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12989 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  28] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 2, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11233 s] [31msurvived[0m
[36m   -[0m [#  29] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[2]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12052 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:35: IndexError
[36m   -[0m [#  30] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[1] + 1, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11244 s] [31msurvived[0m
[36m   -[0m [#  31] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 2, current[1]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11977 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#  32] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[2]), (current[0], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12682 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:35: IndexError
[36m   -[0m [#  33] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[1], current[1] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.10378 s] [31msurvived[0m
[36m   -[0m [#  34] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[2] + 1)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.13095 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:35: IndexError
[36m   -[0m [#  35] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 2)]:[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.08731 s] [31msurvived[0m
[36m   -[0m [#  36] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[1] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.10266 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#  37] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 1 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.10929 s] [31msurvived[0m
[36m   -[0m [#  38] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[1] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.10493 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#  39] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 2 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.09910 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#  40] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[2] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.11985 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:36: IndexError
[36m   -[0m [#  41] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 1 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.14103 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
        assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
>       assert (2,0) == breadth_first_search(make_simple_grid(), (0, 0), 3)
E       AssertionError

0-ts/test_2d_bfs.py:23: AssertionError
[36m   -[0m [#  42] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[2] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.13259 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:36: IndexError
[36m   -[0m [#  43] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 2):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12042 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  44] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
[34m- 38:             if grid[coor[1]][coor[0]] == target:[0m
[32m+ 38:             if grid[coor[2]][coor[0]] == target:[0m
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
--------------------------------------------------------------------------------
[0.13266 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: tuple index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#  45] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
[34m- 38:             if grid[coor[1]][coor[0]] == target:[0m
[32m+ 38:             if grid[coor[1]][coor[1]] == target:[0m
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
--------------------------------------------------------------------------------
[0.13262 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  46] CRP breadth_first_search: 
--------------------------------------------------------------------------------
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
[34m- 70:                 queue.insert(0, adjacent)[0m
[32m+ 70:                 queue.insert(1, adjacent)[0m
  71:                 visited.add(adjacent)
  72:     return None
--------------------------------------------------------------------------------
[0.11793 s] [31msurvived[0m
[36m   -[0m [#  47] LCR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 and coor[0] > width - 1 and coor[1] < 0 and coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.15825 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#  48] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
[34m- 43:                 visited.add(current)[0m
[32m+ 43:                 visited.add(current)break[0m
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.13010 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  49] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
[34m- 43:                 visited.add(current)[0m
[32m+ 43:                 visited.add(current)break[0m
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.10292 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  50] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
[34m- 71:                 visited.add(adjacent)[0m
[32m+ 71:                 visited.add(adjacent)break[0m
  72:     return None
--------------------------------------------------------------------------------
[0.11216 s] [31msurvived[0m
[36m   -[0m [#  51] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
[34m- 71:                 visited.add(adjacent)[0m
[32m+ 71:                 visited.add(adjacent)break[0m
  72:     return None
--------------------------------------------------------------------------------
[0.08794 s] [31msurvived[0m
[36m   -[0m [#  52] RIL breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[32m+ 35:         for coor in reversed([(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]):[0m
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.10400 s] [31msurvived[0m
[36m   -[0m [#  53] RIL breadth_first_search: 
--------------------------------------------------------------------------------
  59:     
  60:     while queue:
  61:         current = queue.pop()
  62:         
[34m- 63:         for adjacent in current.adjacent_list:[0m
[32m+ 63:         for adjacent in reversed(current.adjacent_list):[0m
  64:             if adjacent in visited:
  65:                 continue
  66:             
  67:             if adjacent.val == target:
--------------------------------------------------------------------------------
[0.08283 s] [31msurvived[0m
[36m   -[0m [#  54] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
  22:     
[34m- 23:     if grid[y_start][x_start] == target:[0m
[32m+ 23:     if grid[y_start][x_start] != target:[0m
  24:         return (x_start, y_start)
  25:     
  26:     visited = set()
  27:     
--------------------------------------------------------------------------------
[0.12638 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  55] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] > 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12815 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  56] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] <= 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.11363 s] [31msurvived[0m
[36m   -[0m [#  57] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] < width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12087 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
[36m   -[0m [#  58] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] >= width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12057 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
>       assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
E       AssertionError

0-ts/test_2d_bfs.py:22: AssertionError
[36m   -[0m [#  59] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] > 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.11723 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  60] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] <= 0 or coor[1] > height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.13410 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
        assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
        assert (3,2) == breadth_first_search(make_simple_grid(), (0, 2), 3)
>       assert (2,0) == breadth_first_search(make_simple_grid(), (0, 0), 3)
E       AssertionError

0-ts/test_2d_bfs.py:23: AssertionError
[36m   -[0m [#  61] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] < height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12124 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  62] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[32m+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] >= height - 1):[0m
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12351 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  63] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
[34m- 38:             if grid[coor[1]][coor[0]] == target:[0m
[32m+ 38:             if grid[coor[1]][coor[0]] != target:[0m
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
--------------------------------------------------------------------------------
[0.14612 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  64] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
  65:                 continue
  66:             
[34m- 67:             if adjacent.val == target:[0m
[32m+ 67:             if adjacent.val != target:[0m
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
--------------------------------------------------------------------------------
[0.10558 s] [31msurvived[0m
[36m   -[0m [#  65] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  10:         target: the target value to find in the grid
  11:     Returns:
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
[34m- 14:     height = len(grid)[0m
[32m+ 14:     pass[0m
  15:     if not height:
  16:         return None
  17:     width = len(grid[0])
  18:     
--------------------------------------------------------------------------------
[0.13074 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'height' is not defined

breadth_first_search:15: NameError
[36m   -[0m [#  66] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
  14:     height = len(grid)
  15:     if not height:
[34m- 16:         return None[0m
[32m+ 16:         pass[0m
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
  20:     y_start = start[1]
--------------------------------------------------------------------------------
[0.13795 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_empty

def test_bfs_empty():
>       assert None == breadth_first_search([], (0,1), 0)

0-ts/test_2d_bfs.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [], start = (0, 1), target = 0

>   ???
E   IndexError: list index out of range

breadth_first_search:17: IndexError
[36m   -[0m [#  67] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  13:     '''
  14:     height = len(grid)
  15:     if not height:
  16:         return None
[34m- 17:     width = len(grid[0])[0m
[32m+ 17:     pass[0m
  18:     
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
--------------------------------------------------------------------------------
[0.14247 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'width' is not defined

breadth_first_search:36: NameError
[36m   -[0m [#  68] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  15:     if not height:
  16:         return None
  17:     width = len(grid[0])
  18:     
[34m- 19:     x_start = start[0][0m
[32m+ 19:     pass[0m
  20:     y_start = start[1]
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
--------------------------------------------------------------------------------
[0.13358 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'x_start' is not defined

breadth_first_search:23: NameError
[36m   -[0m [#  69] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
[34m- 20:     y_start = start[1][0m
[32m+ 20:     pass[0m
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
  24:         return (x_start, y_start)
--------------------------------------------------------------------------------
[0.10745 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'y_start' is not defined

breadth_first_search:23: NameError
[36m   -[0m [#  70] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  20:     y_start = start[1]
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
[34m- 24:         return (x_start, y_start)[0m
[32m+ 24:         pass[0m
  25:     
  26:     visited = set()
  27:     
  28:     queue = deque([(x_start, y_start)])
--------------------------------------------------------------------------------
[0.12998 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_complex

def test_bfs_complex():
        assert (7,0) == breadth_first_search(make_complex_grid(), (7, 4), 111)
>       assert (0,4) == breadth_first_search(make_complex_grid(), (0, 4), 8)
E       AssertionError

0-ts/test_2d_bfs.py:27: AssertionError
[36m   -[0m [#  71] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  22:     
  23:     if grid[y_start][x_start] == target:
  24:         return (x_start, y_start)
  25:     
[34m- 26:     visited = set()[0m
[32m+ 26:     pass[0m
  27:     
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
--------------------------------------------------------------------------------
[0.12423 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'visited' is not defined

breadth_first_search:29: NameError
[36m   -[0m [#  72] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  24:         return (x_start, y_start)
  25:     
  26:     visited = set()
  27:     
[34m- 28:     queue = deque([(x_start, y_start)])[0m
[32m+ 28:     pass[0m
  29:     visited.add((x_start, y_start))
  30:     
  31:     while queue:
  32:         current = queue.pop()
--------------------------------------------------------------------------------
[0.12763 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'queue' is not defined

breadth_first_search:31: NameError
[36m   -[0m [#  73] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  25:     
  26:     visited = set()
  27:     
  28:     queue = deque([(x_start, y_start)])
[34m- 29:     visited.add((x_start, y_start))[0m
[32m+ 29:     pass[0m
  30:     
  31:     while queue:
  32:         current = queue.pop()
  33:         
--------------------------------------------------------------------------------
[0.11765 s] [31msurvived[0m
[36m   -[0m [#  74] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
  31:     while queue:
[34m- 32:         current = queue.pop()[0m
[32m+ 32:         pass[0m
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
--------------------------------------------------------------------------------
[0.11501 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)

0-ts/test_2d_bfs.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 0, 3, 4], [5, 6, 2, 6], [8, 8, 1, 3]], start = (3, 0), target = 8

>   ???
E   NameError: name 'current' is not defined

breadth_first_search:35: NameError
[36m   -[0m [#  75] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
[34m- 39:                 return coor[0m
[32m+ 39:                 pass[0m
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
--------------------------------------------------------------------------------
[0.10655 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  76] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
  41:             elif coor not in visited:
[34m- 42:                 queue.appendleft(coor)[0m
[32m+ 42:                 pass[0m
  43:                 visited.add(current)
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
--------------------------------------------------------------------------------
[0.11153 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  77] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
[34m- 43:                 visited.add(current)[0m
[32m+ 43:                 pass[0m
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[5.00694 s] [33mtimeout[0m
[36m   -[0m [#  78] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
[34m- 44:     return None[0m
[32m+ 44:     pass[0m
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
  48:     Search a graph for a target value.
--------------------------------------------------------------------------------
[0.13722 s] [31msurvived[0m
[36m   -[0m [#  79] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  53:     
  54:     Returns:
  55:         Node which has value = target.
  56:     '''
[34m- 57:     visited = set([head])[0m
[32m+ 57:     pass[0m
  58:     queue = [head]
  59:     
  60:     while queue:
  61:         current = queue.pop()
--------------------------------------------------------------------------------
[0.11838 s] [31msurvived[0m
[36m   -[0m [#  80] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  54:     Returns:
  55:         Node which has value = target.
  56:     '''
  57:     visited = set([head])
[34m- 58:     queue = [head][0m
[32m+ 58:     pass[0m
  59:     
  60:     while queue:
  61:         current = queue.pop()
  62:         
--------------------------------------------------------------------------------
[0.10204 s] [31msurvived[0m
[36m   -[0m [#  81] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  57:     visited = set([head])
  58:     queue = [head]
  59:     
  60:     while queue:
[34m- 61:         current = queue.pop()[0m
[32m+ 61:         pass[0m
  62:         
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
  65:                 continue
--------------------------------------------------------------------------------
[0.10263 s] [31msurvived[0m
[36m   -[0m [#  82] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  64:             if adjacent in visited:
  65:                 continue
  66:             
  67:             if adjacent.val == target:
[34m- 68:                 return adjacent[0m
[32m+ 68:                 pass[0m
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
  72:     return None
--------------------------------------------------------------------------------
[0.10529 s] [31msurvived[0m
[36m   -[0m [#  83] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
[34m- 70:                 queue.insert(0, adjacent)[0m
[32m+ 70:                 pass[0m
  71:                 visited.add(adjacent)
  72:     return None
--------------------------------------------------------------------------------
[0.11005 s] [31msurvived[0m
[36m   -[0m [#  84] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
[34m- 71:                 visited.add(adjacent)[0m
[32m+ 71:                 pass[0m
  72:     return None
--------------------------------------------------------------------------------
[0.11039 s] [31msurvived[0m
[36m   -[0m [#  85] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
[34m- 72:     return None[0m
[32m+ 72:     pass[0m
--------------------------------------------------------------------------------
[0.10311 s] [31msurvived[0m
[36m   -[0m [#  86] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
  31:     while queue:
[34m- 32:         current = queue.pop()[0m
[34m- 33:         [0m
[34m- 34:         [0m
[34m- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:[0m
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[34m- 37:                 continue[0m
[34m- 38:             if grid[coor[1]][coor[0]] == target:[0m
[34m- 39:                 return coor[0m
[34m- 40:             [0m
[34m- 41:             elif coor not in visited:[0m
[34m- 42:                 queue.appendleft(coor)[0m
[34m- 43:                 visited.add(current)[0m
[32m+ 32:         break[0m
[32m+ 33:     [0m
[32m+ 34:     [0m
[32m+ 35:     [0m
[32m+ 36:     [0m
[32m+ 37:     [0m
[32m+ 38:     [0m
[32m+ 39:     [0m
[32m+ 40:     [0m
[32m+ 41:     [0m
[32m+ 42:     [0m
[32m+ 43:     [0m
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.09865 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  87] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
[34m- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):[0m
[34m- 37:                 continue[0m
[34m- 38:             if grid[coor[1]][coor[0]] == target:[0m
[34m- 39:                 return coor[0m
[34m- 40:             [0m
[34m- 41:             elif coor not in visited:[0m
[34m- 42:                 queue.appendleft(coor)[0m
[34m- 43:                 visited.add(current)[0m
[32m+ 36:             break[0m
[32m+ 37:     [0m
[32m+ 38:     [0m
[32m+ 39:     [0m
[32m+ 40:     [0m
[32m+ 41:     [0m
[32m+ 42:     [0m
[32m+ 43:     [0m
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.12832 s] [32mkilled[0m by 0-ts/test_2d_bfs.py::test_bfs_basic

def test_bfs_basic():
>       assert (1,2) == breadth_first_search(make_simple_grid(), (3, 0), 8)
E       AssertionError

0-ts/test_2d_bfs.py:21: AssertionError
[36m   -[0m [#  88] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  57:     visited = set([head])
  58:     queue = [head]
  59:     
  60:     while queue:
[34m- 61:         current = queue.pop()[0m
[34m- 62:         [0m
[34m- 63:         for adjacent in current.adjacent_list:[0m
[34m- 64:             if adjacent in visited:[0m
[34m- 65:                 continue[0m
[34m- 66:             [0m
[34m- 67:             if adjacent.val == target:[0m
[34m- 68:                 return adjacent[0m
[34m- 69:             else:[0m
[34m- 70:                 queue.insert(0, adjacent)[0m
[34m- 71:                 visited.add(adjacent)[0m
[32m+ 61:         break[0m
[32m+ 62:     [0m
[32m+ 63:     [0m
[32m+ 64:     [0m
[32m+ 65:     [0m
[32m+ 66:     [0m
[32m+ 67:     [0m
[32m+ 68:     [0m
[32m+ 69:     [0m
[32m+ 70:     [0m
[32m+ 71:     [0m
  72:     return None
--------------------------------------------------------------------------------
[0.11143 s] [31msurvived[0m
[36m   -[0m [#  89] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  60:     while queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
[34m- 64:             if adjacent in visited:[0m
[34m- 65:                 continue[0m
[34m- 66:             [0m
[34m- 67:             if adjacent.val == target:[0m
[34m- 68:                 return adjacent[0m
[34m- 69:             else:[0m
[34m- 70:                 queue.insert(0, adjacent)[0m
[34m- 71:                 visited.add(adjacent)[0m
[32m+ 64:             break[0m
[32m+ 65:     [0m
[32m+ 66:     [0m
[32m+ 67:     [0m
[32m+ 68:     [0m
[32m+ 69:     [0m
[32m+ 70:     [0m
[32m+ 71:     [0m
  72:     return None
--------------------------------------------------------------------------------
[0.10073 s] [31msurvived[0m
[34m[*][0m Mutation score [20.13697 s]: [1m[34m67.4%[0m
[36m   -[0m all: 89
[36m   -[0m killed: 59 (66.3%)
[36m   -[0m survived: 29 (32.6%)
[36m   -[0m incompetent: 0 (0.0%)
[36m   -[0m timeout: 1 (1.1%)
