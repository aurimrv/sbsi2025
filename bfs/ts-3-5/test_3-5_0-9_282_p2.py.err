import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from breadth_first_search import breadth_first_search, breadth_first_search_graph

def test_bfs_empty_grid():
    grid = []
    start = (0, 0)
    target = 5
    assert breadth_first_search(grid, start, target) == None

def test_bfs_target_at_start():
    grid = [[4, 1], [2, 3]]
    start = (0, 0)
    target = 4
    assert breadth_first_search(grid, start, target) == (0, 0)

def test_bfs_target_found():
    grid = [[4, 1], [2, 3]]
    start = (0, 0)
    target = 3
    assert breadth_first_search(grid, start, target) == (1, 1)

def test_bfs_target_not_found():
    grid = [[4, 1], [2, 3]]
    start = (0, 0)
    target = 5
    assert breadth_first_search(grid, start, target) == None

class Node:
    def __init__(self, val):
        self.val = val
        self.adjacent_list = []

def test_bfsg_target_at_head():
    head = Node(5)
    target = 5
    assert breadth_first_search_graph(head, target) == head

def test_bfsg_target_found():
    head = Node(5)
    node1 = Node(8)
    node2 = Node(9)
    head.adjacent_list = [node1, node2]
    target = 9
    assert breadth_first_search_graph(head, target) == node2

def test_bfsg_target_not_found():
    head = Node(5)
    node1 = Node(8)
    node2 = Node(9)
    head.adjacent_list = [node1, node2]
    target = 10
    assert breadth_first_search_graph(head, target) == None