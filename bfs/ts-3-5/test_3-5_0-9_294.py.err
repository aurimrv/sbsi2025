import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from breadth_first_search import breadth_first_search, breadth_first_search_graph

# Test cases for breadth_first_search method
def test_bfs_grid_target_found():
    # Initialize a simple grid for testing
    grid = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]
    start = (0, 0)
    target = 5
    assert breadth_first_search(grid, start, target) == (1, 1)

def test_bfs_grid_target_not_found():
    grid = [[1, 2, 3],
            [4, 5, 6],
            [7, 8, 9]]
    start = (0, 0)
    target = 10
    assert breadth_first_search(grid, start, target) is None

def test_bfs_empty_grid():
    grid = []
    start = (0, 0)
    target = 5
    assert breadth_first_search(grid, start, target) is None

# Test cases for breadth_first_search_graph method
class Node:
    def __init__(self, val, adjacent_list=None):
        self.val = val
        self.adjacent_list = adjacent_list if adjacent_list else []

def test_bfs_graph_target_found():
    # Create a graph with target value = 5
    node1 = Node(1)
    node2 = Node(2)
    node3 = Node(3, [node2])
    node4 = Node(4, [node3])
    node5 = Node(5, [node4])

    assert breadth_first_search_graph(node5, 5) == node5

def test_bfs_graph_target_not_found():
    # Create a graph with target value = 10
    node1 = Node(1)
    node2 = Node(2)
    node3 = Node(3, [node2])
    node4 = Node(4, [node3])
    node5 = Node(5, [node4])

    assert breadth_first_search_graph(node5, 10) is None