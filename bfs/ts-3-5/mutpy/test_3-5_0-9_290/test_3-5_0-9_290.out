[*] Start mutation process:
   - targets: breadth_first_search.py
   - tests: ts-3-5/test_3-5_0-9_290.py
[*] 4 tests passed:
   - test_3-5_0-9_290 [0.14206 s]
[*] Start mutants generation and execution:
   - [#   1] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 35:         for coor in [(current[0], current[1] + 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.13088 s] survived
   - [#   2] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 35:         for coor in [(current[0], current[1] - 1), (current[0] + 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12136 s] survived
   - [#   3] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] - 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11957 s] survived
   - [#   4] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] - 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.11754 s] survived
   - [#   5] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] > width + 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.14394 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
   - [#   6] AOR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height + 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.15032 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
   - [#   7] BCR breadth_first_search: 
--------------------------------------------------------------------------------
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
- 37:                 continue
+ 37:                 break
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
  41:             elif coor not in visited:
--------------------------------------------------------------------------------
[0.11712 s] survived
   - [#   8] BCR breadth_first_search: 
--------------------------------------------------------------------------------
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
- 65:                 continue
+ 65:                 break
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
--------------------------------------------------------------------------------
[0.11790 s] survived
   - [#   9] COD breadth_first_search: 
--------------------------------------------------------------------------------
  11:     Returns:
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
  14:     height = len(grid)
- 15:     if not height:
+ 15:     if height:
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
--------------------------------------------------------------------------------
[0.14768 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_in_grid

def test_bfs_search_target_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
>       assert breadth_first_search(grid, start, target) == (1, 1)
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:16: AssertionError
   - [#  10] COD breadth_first_search: 
--------------------------------------------------------------------------------
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
- 41:             elif coor not in visited:
+ 41:             elif coor in visited:
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
  44:     return None
  45: 
--------------------------------------------------------------------------------
[0.11762 s] survived
   - [#  11] COI breadth_first_search: 
--------------------------------------------------------------------------------
  11:     Returns:
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
  14:     height = len(grid)
- 15:     if not height:
+ 15:     if not ((not height)):
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
--------------------------------------------------------------------------------
[0.13768 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_in_grid

def test_bfs_search_target_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
>       assert breadth_first_search(grid, start, target) == (1, 1)
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:16: AssertionError
   - [#  12] COI breadth_first_search: 
--------------------------------------------------------------------------------
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
  22:     
- 23:     if grid[y_start][x_start] == target:
+ 23:     if not (grid[y_start][x_start] == target):
  24:         return (x_start, y_start)
  25:     
  26:     visited = set()
  27:     
--------------------------------------------------------------------------------
[0.14263 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:22: AssertionError
   - [#  13] COI breadth_first_search: 
--------------------------------------------------------------------------------
  27:     
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
- 31:     while queue:
+ 31:     while not queue:
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
--------------------------------------------------------------------------------
[0.12125 s] survived
   - [#  14] COI breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if not ((coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1)):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.14696 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
   - [#  15] COI breadth_first_search: 
--------------------------------------------------------------------------------
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
- 38:             if grid[coor[1]][coor[0]] == target:
+ 38:             if not (grid[coor[1]][coor[0]] == target):
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
--------------------------------------------------------------------------------
[0.14596 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:22: AssertionError
   - [#  16] COI breadth_first_search: 
--------------------------------------------------------------------------------
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
- 41:             elif coor not in visited:
+ 41:             elif not (coor not in visited):
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
  44:     return None
  45: 
--------------------------------------------------------------------------------
[0.13671 s] survived
   - [#  17] COI breadth_first_search: 
--------------------------------------------------------------------------------
  56:     '''
  57:     visited = set([head])
  58:     queue = [head]
  59:     
- 60:     while queue:
+ 60:     while not queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
--------------------------------------------------------------------------------
[0.16111 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  18] COI breadth_first_search: 
--------------------------------------------------------------------------------
  60:     while queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
- 64:             if adjacent in visited:
+ 64:             if not (adjacent in visited):
  65:                 continue
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
--------------------------------------------------------------------------------
[0.14469 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  19] COI breadth_first_search: 
--------------------------------------------------------------------------------
  60:     while queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
- 64:             if adjacent in visited:
+ 64:             if adjacent not in visited:
  65:                 continue
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
--------------------------------------------------------------------------------
[0.14751 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  20] COI breadth_first_search: 
--------------------------------------------------------------------------------
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
  65:                 continue
  66:             
- 67:             if adjacent.val == target:
+ 67:             if not (adjacent.val == target):
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
--------------------------------------------------------------------------------
[0.14447 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  21] LCR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 and coor[0] > width - 1 and coor[1] < 0 and coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.15019 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
   - [#  22] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
- 43:                 visited.add(current)
+ 43:                 visited.add(current)break
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.11853 s] survived
   - [#  23] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
- 43:                 visited.add(current)
+ 43:                 visited.add(current)break
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.11267 s] survived
   - [#  24] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
- 71:                 visited.add(adjacent)
+ 71:                 visited.add(adjacent)break
  72:     return None
--------------------------------------------------------------------------------
[0.11842 s] survived
   - [#  25] OIL breadth_first_search: 
--------------------------------------------------------------------------------
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
- 71:                 visited.add(adjacent)
+ 71:                 visited.add(adjacent)break
  72:     return None
--------------------------------------------------------------------------------
[0.12045 s] survived
   - [#  26] RIL breadth_first_search: 
--------------------------------------------------------------------------------
  31:     while queue:
  32:         current = queue.pop()
  33:         
  34:         
- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
+ 35:         for coor in reversed([(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]):
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
--------------------------------------------------------------------------------
[0.12406 s] survived
   - [#  27] RIL breadth_first_search: 
--------------------------------------------------------------------------------
  59:     
  60:     while queue:
  61:         current = queue.pop()
  62:         
- 63:         for adjacent in current.adjacent_list:
+ 63:         for adjacent in reversed(current.adjacent_list):
  64:             if adjacent in visited:
  65:                 continue
  66:             
  67:             if adjacent.val == target:
--------------------------------------------------------------------------------
[0.11789 s] survived
   - [#  28] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
  22:     
- 23:     if grid[y_start][x_start] == target:
+ 23:     if grid[y_start][x_start] != target:
  24:         return (x_start, y_start)
  25:     
  26:     visited = set()
  27:     
--------------------------------------------------------------------------------
[0.14539 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:22: AssertionError
   - [#  29] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] > 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.16454 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
   - [#  30] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] <= 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12031 s] survived
   - [#  31] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] < width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.13862 s] survived
   - [#  32] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] >= width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12142 s] survived
   - [#  33] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] > 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.15344 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   IndexError: list index out of range

breadth_first_search:38: IndexError
   - [#  34] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] <= 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.12518 s] survived
   - [#  35] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] < height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.11692 s] survived
   - [#  36] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
+ 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] >= height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
--------------------------------------------------------------------------------
[0.11364 s] survived
   - [#  37] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
- 38:             if grid[coor[1]][coor[0]] == target:
+ 38:             if grid[coor[1]][coor[0]] != target:
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
--------------------------------------------------------------------------------
[0.14359 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:22: AssertionError
   - [#  38] ROR breadth_first_search: 
--------------------------------------------------------------------------------
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
  65:                 continue
  66:             
- 67:             if adjacent.val == target:
+ 67:             if adjacent.val != target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
--------------------------------------------------------------------------------
[0.14565 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  39] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  10:         target: the target value to find in the grid
  11:     Returns:
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
- 14:     height = len(grid)
+ 14:     pass
  15:     if not height:
  16:         return None
  17:     width = len(grid[0])
  18:     
--------------------------------------------------------------------------------
[0.14599 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_in_grid

def test_bfs_search_target_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
>       assert breadth_first_search(grid, start, target) == (1, 1)

ts-3-5/test_3-5_0-9_290.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (1, 1), target = 5

>   ???
E   NameError: name 'height' is not defined

breadth_first_search:15: NameError
   - [#  40] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  12:         Coordinate of the target. Or None if cannot be found. 
  13:     '''
  14:     height = len(grid)
  15:     if not height:
- 16:         return None
+ 16:         pass
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
  20:     y_start = start[1]
--------------------------------------------------------------------------------
[0.11989 s] survived
   - [#  41] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  13:     '''
  14:     height = len(grid)
  15:     if not height:
  16:         return None
- 17:     width = len(grid[0])
+ 17:     pass
  18:     
  19:     x_start = start[0]
  20:     y_start = start[1]
  21:     
--------------------------------------------------------------------------------
[0.14487 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   NameError: name 'width' is not defined

breadth_first_search:36: NameError
   - [#  42] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  15:     if not height:
  16:         return None
  17:     width = len(grid[0])
  18:     
- 19:     x_start = start[0]
+ 19:     pass
  20:     y_start = start[1]
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
--------------------------------------------------------------------------------
[0.14517 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_in_grid

def test_bfs_search_target_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
>       assert breadth_first_search(grid, start, target) == (1, 1)

ts-3-5/test_3-5_0-9_290.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (1, 1), target = 5

>   ???
E   NameError: name 'x_start' is not defined

breadth_first_search:23: NameError
   - [#  43] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  16:         return None
  17:     width = len(grid[0])
  18:     
  19:     x_start = start[0]
- 20:     y_start = start[1]
+ 20:     pass
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
  24:         return (x_start, y_start)
--------------------------------------------------------------------------------
[0.14538 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_in_grid

def test_bfs_search_target_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (1, 1)
        target = 5
>       assert breadth_first_search(grid, start, target) == (1, 1)

ts-3-5/test_3-5_0-9_290.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (1, 1), target = 5

>   ???
E   NameError: name 'y_start' is not defined

breadth_first_search:23: NameError
   - [#  44] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  20:     y_start = start[1]
  21:     
  22:     
  23:     if grid[y_start][x_start] == target:
- 24:         return (x_start, y_start)
+ 24:         pass
  25:     
  26:     visited = set()
  27:     
  28:     queue = deque([(x_start, y_start)])
--------------------------------------------------------------------------------
[0.12266 s] survived
   - [#  45] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  22:     
  23:     if grid[y_start][x_start] == target:
  24:         return (x_start, y_start)
  25:     
- 26:     visited = set()
+ 26:     pass
  27:     
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
--------------------------------------------------------------------------------
[0.14624 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   NameError: name 'visited' is not defined

breadth_first_search:29: NameError
   - [#  46] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  24:         return (x_start, y_start)
  25:     
  26:     visited = set()
  27:     
- 28:     queue = deque([(x_start, y_start)])
+ 28:     pass
  29:     visited.add((x_start, y_start))
  30:     
  31:     while queue:
  32:         current = queue.pop()
--------------------------------------------------------------------------------
[0.17069 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   NameError: name 'queue' is not defined

breadth_first_search:31: NameError
   - [#  47] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  25:     
  26:     visited = set()
  27:     
  28:     queue = deque([(x_start, y_start)])
- 29:     visited.add((x_start, y_start))
+ 29:     pass
  30:     
  31:     while queue:
  32:         current = queue.pop()
  33:         
--------------------------------------------------------------------------------
[0.13876 s] survived
   - [#  48] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
  31:     while queue:
- 32:         current = queue.pop()
+ 32:         pass
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
--------------------------------------------------------------------------------
[0.13853 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_search_target_not_in_grid

def test_bfs_search_target_not_in_grid():
        grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
        start = (0, 0)
        target = 10
>       assert breadth_first_search(grid, start, target) is None

ts-3-5/test_3-5_0-9_290.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

grid = [[1, 2, 3], [4, 5, 6], [7, 8, 9]], start = (0, 0), target = 10

>   ???
E   NameError: name 'current' is not defined

breadth_first_search:35: NameError
   - [#  49] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
  36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
  37:                 continue
  38:             if grid[coor[1]][coor[0]] == target:
- 39:                 return coor
+ 39:                 pass
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
--------------------------------------------------------------------------------
[0.11973 s] survived
   - [#  50] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  38:             if grid[coor[1]][coor[0]] == target:
  39:                 return coor
  40:             
  41:             elif coor not in visited:
- 42:                 queue.appendleft(coor)
+ 42:                 pass
  43:                 visited.add(current)
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
--------------------------------------------------------------------------------
[0.12012 s] survived
   - [#  51] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  39:                 return coor
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
- 43:                 visited.add(current)
+ 43:                 pass
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[5.00609 s] timeout
   - [#  52] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  40:             
  41:             elif coor not in visited:
  42:                 queue.appendleft(coor)
  43:                 visited.add(current)
- 44:     return None
+ 44:     pass
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
  48:     Search a graph for a target value.
--------------------------------------------------------------------------------
[0.11440 s] survived
   - [#  53] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  53:     
  54:     Returns:
  55:         Node which has value = target.
  56:     '''
- 57:     visited = set([head])
+ 57:     pass
  58:     queue = [head]
  59:     
  60:     while queue:
  61:         current = queue.pop()
--------------------------------------------------------------------------------
[0.14120 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3

ts-3-5/test_3-5_0-9_290.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

head = <test_3-5_0-9_290.Node object at 0x74e8de443310>, target = 3

>   ???
E   NameError: name 'visited' is not defined

breadth_first_search:64: NameError
   - [#  54] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  54:     Returns:
  55:         Node which has value = target.
  56:     '''
  57:     visited = set([head])
- 58:     queue = [head]
+ 58:     pass
  59:     
  60:     while queue:
  61:         current = queue.pop()
  62:         
--------------------------------------------------------------------------------
[0.14420 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3

ts-3-5/test_3-5_0-9_290.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

head = <test_3-5_0-9_290.Node object at 0x74e8de0a5690>, target = 3

>   ???
E   NameError: name 'queue' is not defined

breadth_first_search:60: NameError
   - [#  55] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  57:     visited = set([head])
  58:     queue = [head]
  59:     
  60:     while queue:
- 61:         current = queue.pop()
+ 61:         pass
  62:         
  63:         for adjacent in current.adjacent_list:
  64:             if adjacent in visited:
  65:                 continue
--------------------------------------------------------------------------------
[0.14745 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3

ts-3-5/test_3-5_0-9_290.py:38: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

head = <test_3-5_0-9_290.Node object at 0x74e8de26a470>, target = 3

>   ???
E   NameError: name 'current' is not defined

breadth_first_search:63: NameError
   - [#  56] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  64:             if adjacent in visited:
  65:                 continue
  66:             
  67:             if adjacent.val == target:
- 68:                 return adjacent
+ 68:                 pass
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
  72:     return None
--------------------------------------------------------------------------------
[0.14514 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  57] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  66:             
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
- 70:                 queue.insert(0, adjacent)
+ 70:                 pass
  71:                 visited.add(adjacent)
  72:     return None
--------------------------------------------------------------------------------
[0.11983 s] survived
   - [#  58] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  67:             if adjacent.val == target:
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
- 71:                 visited.add(adjacent)
+ 71:                 pass
  72:     return None
--------------------------------------------------------------------------------
[0.12041 s] survived
   - [#  59] SDL breadth_first_search: 
--------------------------------------------------------------------------------
  68:                 return adjacent
  69:             else:
  70:                 queue.insert(0, adjacent)
  71:                 visited.add(adjacent)
- 72:     return None
+ 72:     pass
--------------------------------------------------------------------------------
[0.12128 s] survived
   - [#  60] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  28:     queue = deque([(x_start, y_start)])
  29:     visited.add((x_start, y_start))
  30:     
  31:     while queue:
- 32:         current = queue.pop()
- 33:         
- 34:         
- 35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
- 37:                 continue
- 38:             if grid[coor[1]][coor[0]] == target:
- 39:                 return coor
- 40:             
- 41:             elif coor not in visited:
- 42:                 queue.appendleft(coor)
- 43:                 visited.add(current)
+ 32:         break
+ 33:     
+ 34:     
+ 35:     
+ 36:     
+ 37:     
+ 38:     
+ 39:     
+ 40:     
+ 41:     
+ 42:     
+ 43:     
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.12135 s] survived
   - [#  61] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  32:         current = queue.pop()
  33:         
  34:         
  35:         for coor in [(current[0], current[1] - 1), (current[0] - 1, current[1]), (current[0] + 1, current[1]), (current[0], current[1] + 1)]:
- 36:             if (coor[0] < 0 or coor[0] > width - 1 or coor[1] < 0 or coor[1] > height - 1):
- 37:                 continue
- 38:             if grid[coor[1]][coor[0]] == target:
- 39:                 return coor
- 40:             
- 41:             elif coor not in visited:
- 42:                 queue.appendleft(coor)
- 43:                 visited.add(current)
+ 36:             break
+ 37:     
+ 38:     
+ 39:     
+ 40:     
+ 41:     
+ 42:     
+ 43:     
  44:     return None
  45: 
  46: def breadth_first_search_graph(head, target):
  47:     '''
--------------------------------------------------------------------------------
[0.12095 s] survived
   - [#  62] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  57:     visited = set([head])
  58:     queue = [head]
  59:     
  60:     while queue:
- 61:         current = queue.pop()
- 62:         
- 63:         for adjacent in current.adjacent_list:
- 64:             if adjacent in visited:
- 65:                 continue
- 66:             
- 67:             if adjacent.val == target:
- 68:                 return adjacent
- 69:             else:
- 70:                 queue.insert(0, adjacent)
- 71:                 visited.add(adjacent)
+ 61:         break
+ 62:     
+ 63:     
+ 64:     
+ 65:     
+ 66:     
+ 67:     
+ 68:     
+ 69:     
+ 70:     
+ 71:     
  72:     return None
--------------------------------------------------------------------------------
[0.16674 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
   - [#  63] ZIL breadth_first_search: 
--------------------------------------------------------------------------------
  60:     while queue:
  61:         current = queue.pop()
  62:         
  63:         for adjacent in current.adjacent_list:
- 64:             if adjacent in visited:
- 65:                 continue
- 66:             
- 67:             if adjacent.val == target:
- 68:                 return adjacent
- 69:             else:
- 70:                 queue.insert(0, adjacent)
- 71:                 visited.add(adjacent)
+ 64:             break
+ 65:     
+ 66:     
+ 67:     
+ 68:     
+ 69:     
+ 70:     
+ 71:     
  72:     return None
--------------------------------------------------------------------------------
[0.16220 s] killed by ts-3-5/test_3-5_0-9_290.py::test_bfs_graph_search_target_in_graph

def test_bfs_graph_search_target_in_graph():
        node1 = Node(1)
        node2 = Node(2)
        node3 = Node(3)
    
        node1.adjacent_list = [node2, node3]
        node2.adjacent_list = [node3]
    
>       assert breadth_first_search_graph(node1, 3) == node3
E       AssertionError

ts-3-5/test_3-5_0-9_290.py:38: AssertionError
[*] Mutation score [15.83039 s]: 49.2%
   - all: 63
   - killed: 30 (47.6%)
   - survived: 32 (50.8%)
   - incompetent: 0 (0.0%)
   - timeout: 1 (1.6%)
