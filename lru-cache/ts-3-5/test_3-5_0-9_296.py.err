import os
import sys
from lru_cache import ListNode, LruCache

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import pytest

@pytest.fixture
def lru_cache():
    return LruCache(2)

def test_list_node_init():
    node = ListNode(1, 'a')
    assert node.key == 1
    assert node.val == 'a'
    assert node.next is None
    assert node.prev is None

def test_lru_cache_init():
    lru = LruCache(3)
    assert lru.capacity == 3
    assert lru.head.key == lru.terminal_value
    assert lru.tail.val == lru.terminal_value

def test_lru_cache_put(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) == 'b'

def test_lru_cache_put_capacity_exceeded(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    assert lru_cache.get(1) == -1

def test_lru_cache_get(lru_cache):
    lru_cache.put(1, 'a')
    assert lru_cache.get(1) == 'a'

def test_lru_cache_get_missing_key(lru_cache):
    lru_cache.put(1, 'a')
    assert lru_cache.get(2) == -1

def test_lru_cache_remove(lru_cache):
    lru_cache.put(1, 'a')
    node = lru_cache.lookup_map[1]
    assert lru_cache.lookup_map[1] is node
    lru_cache._remove(node)
    assert 1 not in lru_cache.lookup_map
    assert node.prev is None
    assert node.next is None