import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

class TestLruCache:
    def test_put_get_single_element(self):
        cache = LruCache(1)
        cache.put(1, 'a')
        assert cache.get(1) == 'a'

    def test_put_get_multiple_elements(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        assert cache.get(1) == 'a'
        assert cache.get(2) == 'b'

    def test_put_capacity_reached(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        cache.put(3, 'c')  # Capacity reached, 'a' should be dropped
        assert cache.get(1) == -1

    def test_get_nonexistent_key(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        assert cache.get(2) == -1

    def test_put_same_key_updates_value(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(1, 'b')  # Update value for key 1
        assert cache.get(1) == 'b'

    def test_put_same_key_does_not_increase_capacity(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(1, 'b')
        cache.put(2, 'c')
        assert cache.get(1) == 'b'  # Capacity should still be 2

    def test_put_same_key_refreshes_order(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        cache.get(1)  # '1' should be moved to the end
        cache.put(3, 'c')  # Capacity reached, '2' should be dropped
        assert cache.get(2) == -1

    def test_get_updates_order(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        cache.get(1)  # '1' should be moved to the end
        cache.put(3, 'c')  # Capacity reached, '2' should be dropped
        assert cache.get(2) == -1

    def test_put_invalid_capacity(self):
        with pytest.raises(ValueError):
            cache = LruCache(0)  # Capacity must be >= 1

    def test_get_from_empty_cache(self):
        cache = LruCache(2)
        assert cache.get(1) == -1