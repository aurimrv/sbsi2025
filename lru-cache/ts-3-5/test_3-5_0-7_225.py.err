import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

@pytest.fixture
def lru_cache():
    return LruCache(3)

def test_put_get(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    
    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) == 'b'
    assert lru_cache.get(3) == 'c'

def test_put_capacity_exceeded(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    lru_cache.put(4, 'd')  # Exceeds capacity, should drop least recently used
    
    assert lru_cache.get(1) == -1
    assert lru_cache.get(2) == 'b'
    assert lru_cache.get(3) == 'c'
    assert lru_cache.get(4) == 'd'

def test_get_key_not_found(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    
    assert lru_cache.get(3) == -1

def test_put_existing_key(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(1, 'updated')  # Update existing key
    
    assert lru_cache.get(1) == 'updated'
    assert lru_cache.get(2) == 'b'

def test_put_get_multiple_times(lru_cache):
    for i in range(10):
        lru_cache.put(i, str(i))
    
    for i in range(5):
        assert lru_cache.get(i) == str(i)