import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

@pytest.fixture
def create_cache():
    return LruCache(4)

def test_put(create_cache):
    cache = create_cache
    cache.put(1, 'a')
    assert cache.get(1) == 'a'

    cache.put(2, 'b')
    assert cache.get(2) == 'b'

def test_get_existing_key(create_cache):
    cache = create_cache
    cache.put(1, 'a')
    cache.put(2, 'b')
    assert cache.get(1) == 'a'

def test_get_non_existing_key(create_cache):
    cache = create_cache
    cache.put(1, 'a')
    cache.put(2, 'b')
    assert cache.get(3) == -1

def test_put_capacity_exceeded(create_cache):
    cache = create_cache
    cache.put(1, 'val1')
    cache.put(2, 'val2')
    cache.put(3, 'val3')
    cache.put(4, 'val4')
    cache.put(5, 'val5')
    assert cache.get(1) == -1

def test_put_existing_key(create_cache):
    cache = create_cache
    cache.put(1, 'val1')
    cache.put(2, 'val2')
    cache.put(1, 'new_val')
    assert cache.get(1) == 'new_val'

def test_remove_head_tail(create_cache):
    cache = create_cache
    cache._remove(cache.tail)
    cache._remove(cache.head)
    assert cache.head.next == cache.tail and cache.tail.prev == cache.head

def test_add_node(create_cache):
    cache = create_cache
    node = ListNode(1, 'a')
    cache._add(node)
    assert cache.head.next == node and cache.tail.prev == node

def test_remove_node(create_cache):
    cache = create_cache
    node = ListNode(1, 'a')
    cache._add(node)
    cache._remove(node)
    assert cache.head.next == cache.tail and cache.tail.prev == cache.head