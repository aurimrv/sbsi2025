import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

import pytest

class TestLruCache:

    def test_put_get_single_element(self):
        lru_cache = LruCache(1)
        lru_cache.put(1, 'a')
        assert lru_cache.get(1) == 'a'

    def test_put_get_multiple_elements(self):
        lru_cache = LruCache(2)
        lru_cache.put(1, 'a')
        lru_cache.put(2, 'b')
        assert lru_cache.get(1) == 'a'
        assert lru_cache.get(2) == 'b'

    def test_put_capacity_reached(self):
        lru_cache = LruCache(2)
        lru_cache.put(1, 'a')
        lru_cache.put(2, 'b')
        lru_cache.put(3, 'c')  # This should remove the least recently used node
        assert lru_cache.get(1) == -1
        assert lru_cache.get(2) == 'b'
        assert lru_cache.get(3) == 'c'

    def test_get_non_existing_key(self):
        lru_cache = LruCache(2)
        lru_cache.put(1, 'a')
        assert lru_cache.get(2) == -1

    def test_put_same_key_updates_value(self):
        lru_cache = LruCache(2)
        lru_cache.put(1, 'a')
        lru_cache.put(1, 'b')
        assert lru_cache.get(1) == 'b'

    def test_put_same_key_does_not_increase_capacity(self):
        lru_cache = LruCache(2)
        lru_cache.put(1, 'a')
        lru_cache.put(1, 'b')
        lru_cache.put(2, 'c')
        assert len(lru_cache.lookup_map) == 2

    def test_put_invalid_capacity_raises_error(self):
        with pytest.raises(ValueError):
            LruCache(0)

    def test_remove_method(self):
        lru_cache = LruCache(2)
        node = ListNode(1, 'a')
        lru_cache._add(node)
        lru_cache._remove(node)
        assert node.prev is None
        assert node.next is None

    def test_add_method(self):
        lru_cache = LruCache(2)
        node = ListNode(1, 'a')
        lru_cache._add(node)
        assert lru_cache.head.next == node
        assert lru_cache.tail.prev == node