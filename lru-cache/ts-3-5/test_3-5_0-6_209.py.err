import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

import pytest

# Test cases for ListNode class
def test_list_node_init():
    node = ListNode(1, "a")
    assert node.key == 1
    assert node.val == "a"
    assert node.next is None
    assert node.prev is None

def test_list_node_init_different_values():
    node = ListNode("key", 123)
    assert node.key == "key"
    assert node.val == 123

# Test cases for LruCache class
def test_lru_cache_init():
    cache = LruCache(5)
    assert cache.capacity == 5
    assert cache.head.key == cache.terminal_value
    assert cache.tail.val == cache.terminal_value
    assert len(cache.lookup_map) == 0

def test_lru_cache_put():
    cache = LruCache(3)
    cache.put(1, "a")
    assert len(cache.lookup_map) == 1
    assert cache.head.next.key == 1

def test_lru_cache_put_capacity_reached():
    cache = LruCache(2)
    cache.put(1, "a")
    cache.put(2, "b")
    cache.put(3, "c")
    assert len(cache.lookup_map) == 2
    assert cache.head.next.key == 3

def test_lru_cache_get():
    cache = LruCache(3)
    cache.put(1, "a")
    cache.put(2, "b")
    cache.put(3, "c")
    assert cache.get(2) == "b"
    assert cache.head.next.key == 2

def test_lru_cache_get_key_not_found():
    cache = LruCache(3)
    cache.put(1, "a")
    cache.put(2, "b")
    cache.put(3, "c")
    assert cache.get(4) == -1
    assert cache.head.next.key == 3

def test_lru_cache_add():
    cache = LruCache(3)
    node = ListNode(4, "d")
    cache._add(node)
    assert cache.head.next.key == 4
    assert cache.tail.prev.key == 4

def test_lru_cache_remove():
    cache = LruCache(3)
    node = ListNode(5, "e")
    cache._add(node)
    cache._remove(node)
    assert len(cache.lookup_map) == 0
    assert cache.head.next == cache.tail
    assert cache.tail.prev == cache.head