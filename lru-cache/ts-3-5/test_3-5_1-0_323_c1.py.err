import os
import sys
import pytest
from lru_cache import ListNode, LruCache

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

@pytest.fixture
def lru_cache():
    return LruCache(2)

def test_node_initialization():
    node = ListNode(1, "value")
    assert node.key == 1
    assert node.val == "value"

def test_lru_cache_initialization():
    cache = LruCache(2)
    assert cache.capacity == 2
    assert cache.head.next == cache.tail
    assert cache.tail.prev == cache.head

def test_put_method(lru_cache):
    lru_cache.put(1, "value1")
    assert lru_cache.lookup_map[1].val == "value1"
    lru_cache.put(2, "value2")
    assert lru_cache.lookup_map[2].val == "value2"

def test_get_method(lru_cache):
    lru_cache.put(1, "value1")
    lru_cache.put(2, "value2")
    assert lru_cache.get(1) == "value1"
    assert lru_cache.get(2) == "value2"
    assert lru_cache.get(3) == -1

def test_remove_method(lru_cache):
    lru_cache.put(1, "value1")
    lru_cache.put(2, "value2")
    lru_cache.put(3, "value3")
    assert len(lru_cache.lookup_map) == 2
    assert lru_cache.head.next.key == 1
    assert lru_cache.head.next.val == "value1"

def test_add_method(lru_cache):
    node = ListNode(3, "value3")
    lru_cache._add(node)
    assert lru_cache.head.next == node
    assert lru_cache.tail.prev == node

def test_remove_method(lru_cache):
    node = ListNode(4, "value4")
    lru_cache._add(node)
    lru_cache._remove(node)
    assert lru_cache.head.next.key != 4
    assert lru_cache.tail.prev.key != 4