import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

@pytest.fixture
def lru_cache():
    return LruCache(3)

def test_put(lru_cache):
    lru_cache.put(1, 'a')
    assert lru_cache.get(1) == 'a'

def test_get_existing_key(lru_cache):
    lru_cache.put(1, 'a')
    assert lru_cache.get(1) == 'a'

def test_get_non_existing_key(lru_cache):
    assert lru_cache.get(2) == -1

def test_put_capacity_exceeded(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    lru_cache.put(4, 'd')
    assert lru_cache.get(1) == -1

def test_get_existing_key_refreshes_order(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    assert lru_cache.get(1) == 'a'
    lru_cache.put(3, 'c')
    assert lru_cache.get(2) == -1

def test_put_existing_key_updates_value(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(1, 'updated')
    assert lru_cache.get(1) == 'updated'

def test_put_existing_key_does_not_increase_capacity(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(1, 'updated')
    lru_cache.put(2, 'b')
    assert lru_cache.get(1) == 'updated'
    assert lru_cache.get(2) == 'b'

def test_get_invalid_key(lru_cache):
    lru_cache.put(1, 'a')
    assert lru_cache.get(2) == -1

def test_remove(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    assert lru_cache.get(1) == 'a'
    lru_cache._remove(lru_cache.lookup_map[1])
    assert lru_cache.get(1) == -1

def test_add(lru_cache):
    node = ListNode(1, 'a')
    lru_cache._add(node)
    assert lru_cache.get(1) == 'a'
