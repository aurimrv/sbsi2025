import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

import pytest

def test_list_node_init():
    node = ListNode(1, 'test')
    assert node.key == 1
    assert node.val == 'test'
    assert node.next is None
    assert node.prev is None

def test_list_node_update():
    node = ListNode(1, 'test')
    node.key = 2
    node.val = 'updated'
    assert node.key == 2
    assert node.val == 'updated'

def test_lru_cache_init():
    cache = LruCache(3)
    assert cache.capacity == 3
    assert cache.head.key == cache.terminal_value
    assert cache.tail.key == cache.terminal_value
    assert cache.head.next == cache.tail
    assert cache.tail.prev == cache.head
    assert len(cache.lookup_map) == 0

def test_lru_cache_put():
    cache = LruCache(3)
    cache.put(1, 'one')
    cache.put(2, 'two')
    assert len(cache.lookup_map) == 2
    cache.put(3, 'three')
    assert len(cache.lookup_map) == 3
    cache.put(4, 'four')
    assert 1 not in cache.lookup_map

def test_lru_cache_get():
    cache = LruCache(3)
    cache.put(1, 'one')
    cache.put(2, 'two')
    cache.put(3, 'three')
    assert cache.get(1) == 'one'
    assert cache.get(2) == 'two'
    assert cache.get(4) == -1

def test_lru_cache_add_remove():
    cache = LruCache(3)
    node = ListNode(1, 'test')
    cache._add(node)
    assert cache.head.next == node
    assert cache.tail.prev == node
    cache._remove(node)
    assert cache.head.next == cache.tail
    assert cache.tail.prev == cache.head
    assert node.prev is None
    assert node.next is None