import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

class TestListNode:
    def test_list_node_initialization(self):
        node = ListNode(1, "test")
        assert node.key == 1
        assert node.val == "test"
        assert node.next is None
        assert node.prev is None

class TestLruCache:
    def test_lru_cache_capacity(self):
        with pytest.raises(ValueError):
            LruCache(0)

    def test_lru_cache_put_get_single_element(self):
        cache = LruCache(1)
        cache.put(1, 'one')
        assert cache.get(1) == 'one'

    def test_lru_cache_put_get_multiple_elements(self):
        cache = LruCache(2)
        cache.put(1, 'one')
        cache.put(2, 'two')
        assert cache.get(1) == 'one'
        assert cache.get(2) == 'two'

    def test_lru_cache_put_capacity_reached(self):
        cache = LruCache(2)
        cache.put(1, 'one')
        cache.put(2, 'two')
        cache.put(3, 'three')  # This should remove least recently used element 'one'
        assert cache.get(1) == -1
        assert cache.get(2) == 'two'
        assert cache.get(3) == 'three'

    def test_lru_cache_get_key_not_found(self):
        cache = LruCache(2)
        cache.put(1, 'one')
        assert cache.get(2) == -1

    def test_lru_cache_put_same_key(self):
        cache = LruCache(2)
        cache.put(1, 'one')
        cache.put(1, 'updated_one')  # Update the value of key 1
        assert cache.get(1) == 'updated_one'

    def test_lru_cache_put_get_large_capacity(self):
        cache = LruCache(5)
        cache.put(1, 'one')
        cache.put(2, 'two')
        cache.put(3, 'three')
        cache.put(4, 'four')
        cache.put(5, 'five')
        assert cache.get(1) == 'one'
        assert cache.get(3) == 'three'
        assert cache.get(5) == 'five'

    def test_lru_cache_put_get_same_key_multiple_times(self):
        cache = LruCache(2)
        cache.put(1, 'one')
        cache.put(2, 'two')
        cache.get(1)  # Get key 1 to update its position in cache
        cache.put(3, 'three')  # This should remove least recently used element 'two'
        assert cache.get(1) == 'one'
        assert cache.get(2) == -1
        assert cache.get(3) == 'three'