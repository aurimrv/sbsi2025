import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

class TestListNode:
    def test_node_initialization(self):
        node = ListNode(1, 'a')
        assert node.key == 1
        assert node.val == 'a'
        assert node.next is None
        assert node.prev is None

class TestLruCache:
    def test_cache_capacity_greater_than_one(self):
        with pytest.raises(ValueError):
            LruCache(0)

    def test_put_and_get_single_element(self):
        cache = LruCache(1)
        cache.put(1, 'a')
        assert cache.get(1) == 'a'

    def test_put_and_get_multiple_elements(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        assert cache.get(1) == 'a'
        cache.put(3, 'c')  # This should evict 'b'
        assert cache.get(2) == -1

    def test_put_same_key_multiple_times(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(1, 'updated')
        assert cache.get(1) == 'updated'

    def test_get_non_existent_key(self):
        cache = LruCache(2)
        assert cache.get(1) == -1

    def test_put_capacity_exceeded(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        cache.put(3, 'c')  # This should evict 'a'
        assert cache.get(1) == -1

    def test_put_same_key_multiple_times_capacity_exceeded(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        cache.put(1, 'updated')  # This should keep '1' in cache
        cache.put(3, 'c')  # This should evict 'b'
        assert cache.get(2) == -1

    def test_get_existing_key_updates_order(self):
        cache = LruCache(2)
        cache.put(1, 'a')
        cache.put(2, 'b')
        cache.get(1)  # This should move '1' to the end
        cache.put(3, 'c')  # This should evict 'b'
        assert cache.get(2) == -1