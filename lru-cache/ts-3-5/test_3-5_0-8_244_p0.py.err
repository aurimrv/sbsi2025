import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from lru_cache import ListNode, LruCache

@pytest.fixture
def lru_cache():
    return LruCache(3)

def test_put_get(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')

    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) == 'b'
    assert lru_cache.get(3) == 'c'

def test_put_replace(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')

    lru_cache.put(2, 'new_b')

    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) == 'new_b'
    assert lru_cache.get(3) == 'c'

def test_put_capacity_exceeded(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    lru_cache.put(4, 'd')

    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) is None
    assert lru_cache.get(3) == 'c'
    assert lru_cache.get(4) == 'd'

def test_put_multiple_replace_capacity_exceeded(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')
    lru_cache.put(4, 'd')
    lru_cache.put(5, 'e')
    
    lru_cache.put(2, 'new_b')
    lru_cache.put(3, 'new_c')
    lru_cache.put(6, 'f')

    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) == 'new_b'
    assert lru_cache.get(3) == 'new_c'
    assert lru_cache.get(4) is None
    assert lru_cache.get(5) is None
    assert lru_cache.get(6) == 'f'

def test_get_non_existing_key(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')

    assert lru_cache.get(3) is None

def test_put_same_key(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(1, 'new_a')

    assert lru_cache.get(1) == 'new_a'

def test_put_get_multiple(lru_cache):
    lru_cache.put(1, 'a')
    lru_cache.put(2, 'b')
    lru_cache.put(3, 'c')

    assert lru_cache.get(1) == 'a'
    assert lru_cache.get(2) == 'b'
    assert lru_cache.get(3) == 'c'

    lru_cache.put(4, 'd')
    lru_cache.put(5, 'e')

    assert lru_cache.get(1) is None
    assert lru_cache.get(2) == 'b'
    assert lru_cache.get(3) == 'c'
    assert lru_cache.get(4) == 'd'
    assert lru_cache.get(5) == 'e'