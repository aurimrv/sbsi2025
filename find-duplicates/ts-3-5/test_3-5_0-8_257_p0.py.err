import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from find_duplicates import duplicates_linear, duplicates_pre_sorted, duplicates_bin_search
from binary_search import binary_search

import pytest

@pytest.mark.parametrize("arr1, arr2, expected_output", [
    ([1, 2, 3, 4, 5], [6, 7, 3, 8, 2], [2, 3]),
    ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], []),
    ([1, 2, 3, 4, 5], [], []),
    ([], [6, 7, 8, 9, 10], []),
    ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5])
])
def test_duplicates_linear(arr1, arr2, expected_output):
    assert set(duplicates_linear(arr1, arr2)) == set(expected_output)

@pytest.mark.parametrize("arr1, arr2, expected_output", [
    ([1, 2, 3, 4, 5], [2, 3, 7, 8, 9], [2, 3]),
    ([1, 2, 3, 4, 8], [3, 8, 9, 10], [3, 8]),
    ([1, 2, 3, 4, 5], [], []),
    ([], [6, 7, 8, 9, 10], []),
    ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5])
])
def test_duplicates_pre_sorted(arr1, arr2, expected_output):
    assert set(duplicates_pre_sorted(arr1, arr2)) == set(expected_output)

@pytest.mark.parametrize("arr1, arr2, expected_output", [
    ([1, 2, 3, 4, 5], [2, 3, 7, 8, 9], [2, 3]),
    ([1, 2, 3, 4, 8], [3, 8, 9, 10], [3, 8]),
    ([1, 2, 3, 4, 5], [], []),
    ([], [6, 7, 8, 9, 10], []),
    ([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5])
])
def test_duplicates_bin_search(arr1, arr2, expected_output):
    assert set(duplicates_bin_search(arr1, arr2)) == set(expected_output)