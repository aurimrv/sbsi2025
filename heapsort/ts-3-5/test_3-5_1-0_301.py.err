import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from heapsort import heap_sort, max_heap_sort, custom_heap_sort

# Tests for heap_sort method
def test_heap_sort_empty_list():
    assert heap_sort([]) == []

def test_heap_sort_single_element():
    assert heap_sort([5]) == [5]

def test_heap_sort_sorted_list():
    assert heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

# Tests for max_heap_sort method
def test_max_heap_sort_empty_list():
    assert max_heap_sort([]) == []

def test_max_heap_sort_single_element():
    assert max_heap_sort([5]) == [5]

def test_max_heap_sort_reverse_sorted_list():
    assert max_heap_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

# Tests for custom_heap_sort method with 'min' sorting
def test_custom_heap_sort_min_empty_list():
    assert custom_heap_sort([], sort='min') == []

def test_custom_heap_sort_min_single_element():
    assert custom_heap_sort([5], sort='min') == [5]

def test_custom_heap_sort_min_unsorted_list():
    assert custom_heap_sort([3, 1, 4, 2, 5], sort='min') == [1, 2, 3, 4, 5]

# Tests for custom_heap_sort method with 'max' sorting
def test_custom_heap_sort_max_empty_list():
    assert custom_heap_sort([], sort='max') == []

def test_custom_heap_sort_max_single_element():
    assert custom_heap_sort([5], sort='max') == [5]

def test_custom_heap_sort_max_unsorted_list():
    assert custom_heap_sort([3, 1, 4, 2, 5], sort='max') == [5, 4, 3, 2, 1]