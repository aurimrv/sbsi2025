import os
import sys
from copy import deepcopy
from heapq import heapify, heappop
from heap import Heap

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import heapsort

def test_heap_sort():
    # Test heap_sort function with empty list
    assert heapsort.heap_sort([]) == []

    # Test heap_sort function with a sorted list
    assert heapsort.heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]

    # Test heap_sort function with a reverse sorted list
    assert heapsort.heap_sort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]

def test_max_heap_sort():
    # Test max_heap_sort function with empty list
    assert heapsort.max_heap_sort([]) == []

    # Test max_heap_sort function with a sorted list
    assert heapsort.max_heap_sort([5, 4, 3, 2, 1]) == [5, 4, 3, 2, 1]

    # Test max_heap_sort function with a reverse sorted list
    assert heapsort.max_heap_sort([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]

def test_custom_heap_sort():
    # Test custom_heap_sort function with empty list and default sort
    assert heapsort.custom_heap_sort([], sort='min') == []

    # Test custom_heap_sort function with a sorted list and default sort
    assert heapsort.custom_heap_sort([1, 2, 3, 4, 5], sort='min') == [1, 2, 3, 4, 5]

    # Test custom_heap_sort function with a reverse sorted list and max sort
    assert heapsort.custom_heap_sort([5, 4, 3, 2, 1], sort='max') == [5, 4, 3, 2, 1]

    # Test custom_heap_sort function with duplicate elements and default sort
    assert heapsort.custom_heap_sort([3, 2, 4, 1, 3, 2], sort='min') == [1, 2, 2, 3, 3, 4]

    # Test custom_heap_sort function with negative numbers and max sort
    assert heapsort.custom_heap_sort([-5, -3, -2, -4, -1], sort='max') == [-1, -2, -3, -4, -5]