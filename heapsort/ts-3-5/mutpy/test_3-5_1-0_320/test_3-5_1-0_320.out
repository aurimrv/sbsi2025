[*] Start mutation process:
   - targets: heapsort.py
   - tests: ts-3-5/test_3-5_1-0_320.py
[*] 3 tests passed:
   - test_3-5_1-0_320 [0.17944 s]
[*] Start mutants generation and execution:
   - [#   1] AOD heapsort: 
--------------------------------------------------------------------------------
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
- 13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 13:     copy_list = list(map((lambda x: (x * 1)), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
--------------------------------------------------------------------------------
[0.19395 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#   2] AOD heapsort: 
--------------------------------------------------------------------------------
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
- 16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 16:     copy_list = list(map((lambda x: (x * 1)), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.20607 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#   3] AOD heapsort: 
--------------------------------------------------------------------------------
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
- 22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 22:         copy_list = list(map((lambda x: (x * 1)), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
--------------------------------------------------------------------------------
[0.19954 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#   4] AOD heapsort: 
--------------------------------------------------------------------------------
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
- 27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
+ 27:         sorted_list = list(map((lambda x: (x * 1)), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.19315 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#   5] AOR heapsort: 
--------------------------------------------------------------------------------
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
- 13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 13:     copy_list = list(map((lambda x: (x / (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
--------------------------------------------------------------------------------
[0.17764 s] survived
   - [#   6] AOR heapsort: 
--------------------------------------------------------------------------------
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
- 13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 13:     copy_list = list(map((lambda x: (x // (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
--------------------------------------------------------------------------------
[0.16299 s] survived
   - [#   7] AOR heapsort: 
--------------------------------------------------------------------------------
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
- 13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 13:     copy_list = list(map((lambda x: (x ** (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
--------------------------------------------------------------------------------
[0.20260 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#   8] AOR heapsort: 
--------------------------------------------------------------------------------
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
- 13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 13:     copy_list = list(map((lambda x: (x * (+1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
--------------------------------------------------------------------------------
[0.20090 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#   9] AOR heapsort: 
--------------------------------------------------------------------------------
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
- 16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 16:     copy_list = list(map((lambda x: (x / (-1))), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.17255 s] survived
   - [#  10] AOR heapsort: 
--------------------------------------------------------------------------------
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
- 16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 16:     copy_list = list(map((lambda x: (x // (-1))), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.17275 s] survived
   - [#  11] AOR heapsort: 
--------------------------------------------------------------------------------
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
- 16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 16:     copy_list = list(map((lambda x: (x ** (-1))), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.19762 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#  12] AOR heapsort: 
--------------------------------------------------------------------------------
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
- 16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 16:     copy_list = list(map((lambda x: (x * (+1))), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.20255 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#  13] AOR heapsort: 
--------------------------------------------------------------------------------
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
- 22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 22:         copy_list = list(map((lambda x: (x / (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
--------------------------------------------------------------------------------
[0.17292 s] survived
   - [#  14] AOR heapsort: 
--------------------------------------------------------------------------------
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
- 22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 22:         copy_list = list(map((lambda x: (x // (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
--------------------------------------------------------------------------------
[0.15788 s] survived
   - [#  15] AOR heapsort: 
--------------------------------------------------------------------------------
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
- 22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 22:         copy_list = list(map((lambda x: (x ** (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
--------------------------------------------------------------------------------
[0.19481 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#  16] AOR heapsort: 
--------------------------------------------------------------------------------
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
- 22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 22:         copy_list = list(map((lambda x: (x * (+1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
--------------------------------------------------------------------------------
[0.19788 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#  17] AOR heapsort: 
--------------------------------------------------------------------------------
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
- 27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
+ 27:         sorted_list = list(map((lambda x: (x / (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.17191 s] survived
   - [#  18] AOR heapsort: 
--------------------------------------------------------------------------------
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
- 27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
+ 27:         sorted_list = list(map((lambda x: (x // (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.17444 s] survived
   - [#  19] AOR heapsort: 
--------------------------------------------------------------------------------
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
- 27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
+ 27:         sorted_list = list(map((lambda x: (x ** (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.21447 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#  20] AOR heapsort: 
--------------------------------------------------------------------------------
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
- 27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
+ 27:         sorted_list = list(map((lambda x: (x * (+1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.20090 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#  21] COI heapsort: 
--------------------------------------------------------------------------------
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
- 21:     if sort == 'max':
+ 21:     if not (sort == 'max'):
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
--------------------------------------------------------------------------------
[0.19268 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:38: AssertionError
   - [#  22] COI heapsort: 
--------------------------------------------------------------------------------
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
- 26:     if sort == 'max':
+ 26:     if not (sort == 'max'):
  27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.18885 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:38: AssertionError
   - [#  23] ROR heapsort: 
--------------------------------------------------------------------------------
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
- 21:     if sort == 'max':
+ 21:     if sort != 'max':
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
--------------------------------------------------------------------------------
[0.19907 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:38: AssertionError
   - [#  24] ROR heapsort: 
--------------------------------------------------------------------------------
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
- 26:     if sort == 'max':
+ 26:     if sort != 'max':
  27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.20027 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:38: AssertionError
   - [#  25] SDL heapsort: 
--------------------------------------------------------------------------------
   2: from heapq import heapify, heappop
   3: from heap import Heap
   4: 
   5: def heap_sort(lst: list):
-  6:     copy_list = deepcopy(lst)
+  6:     pass
   7:     heapify(copy_list)
   8:     return [heappop(copy_list) for i in range(len(copy_list))]
   9: 
  10: def max_heap_sort(lst: list):
--------------------------------------------------------------------------------
[0.20931 s] killed by ts-3-5/test_3-5_1-0_320.py::test_heap_sort

def test_heap_sort():
        # Test case for an empty list
>       assert heap_sort([]) == []

ts-3-5/test_3-5_1-0_320.py:12: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = []

>   ???
E   NameError: name 'copy_list' is not defined

heapsort:7: NameError
   - [#  26] SDL heapsort: 
--------------------------------------------------------------------------------
   3: from heap import Heap
   4: 
   5: def heap_sort(lst: list):
   6:     copy_list = deepcopy(lst)
-  7:     heapify(copy_list)
+  7:     pass
   8:     return [heappop(copy_list) for i in range(len(copy_list))]
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.20780 s] killed by ts-3-5/test_3-5_1-0_320.py::test_heap_sort

def test_heap_sort():
        # Test case for an empty list
        assert heap_sort([]) == []
    
        # Test case for a list with one element
        assert heap_sort([5]) == [5]
    
        # Test case for a list with multiple elements
>       assert heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:18: AssertionError
   - [#  27] SDL heapsort: 
--------------------------------------------------------------------------------
   4: 
   5: def heap_sort(lst: list):
   6:     copy_list = deepcopy(lst)
   7:     heapify(copy_list)
-  8:     return [heappop(copy_list) for i in range(len(copy_list))]
+  8:     pass
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
--------------------------------------------------------------------------------
[0.20101 s] killed by ts-3-5/test_3-5_1-0_320.py::test_heap_sort

def test_heap_sort():
        # Test case for an empty list
>       assert heap_sort([]) == []
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:12: AssertionError
   - [#  28] SDL heapsort: 
--------------------------------------------------------------------------------
   7:     heapify(copy_list)
   8:     return [heappop(copy_list) for i in range(len(copy_list))]
   9: 
  10: def max_heap_sort(lst: list):
- 11:     copy_list = deepcopy(lst)
+ 11:     pass
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
--------------------------------------------------------------------------------
[0.19762 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
>       assert max_heap_sort([]) == []

ts-3-5/test_3-5_1-0_320.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = []

>   ???
E   UnboundLocalError: local variable 'copy_list' referenced before assignment

heapsort:13: UnboundLocalError
   - [#  29] SDL heapsort: 
--------------------------------------------------------------------------------
   9: 
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
- 13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 13:     pass
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
--------------------------------------------------------------------------------
[0.18751 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#  30] SDL heapsort: 
--------------------------------------------------------------------------------
  10: def max_heap_sort(lst: list):
  11:     copy_list = deepcopy(lst)
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
- 14:     heapify(copy_list)
+ 14:     pass
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
  18: 
--------------------------------------------------------------------------------
[0.20281 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
        assert max_heap_sort([3]) == [3]
    
        # Test case for a list with multiple elements
>       assert max_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:28: AssertionError
   - [#  31] SDL heapsort: 
--------------------------------------------------------------------------------
  11:     copy_list = deepcopy(lst)
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
- 15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
+ 15:     pass
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
--------------------------------------------------------------------------------
[0.19858 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
        assert max_heap_sort([3]) == [3]
    
        # Test case for a list with multiple elements
>       assert max_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5]) == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:28: AssertionError
   - [#  32] SDL heapsort: 
--------------------------------------------------------------------------------
  12:     
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
- 16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 16:     pass
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
--------------------------------------------------------------------------------
[0.19552 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
        assert max_heap_sort([]) == []
    
        # Test case for a list with one element
>       assert max_heap_sort([3]) == [3]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:25: AssertionError
   - [#  33] SDL heapsort: 
--------------------------------------------------------------------------------
  13:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  14:     heapify(copy_list)
  15:     copy_list = [heappop(copy_list) for i in range(len(copy_list))]
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
- 17:     return copy_list
+ 17:     pass
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
--------------------------------------------------------------------------------
[0.19571 s] killed by ts-3-5/test_3-5_1-0_320.py::test_max_heap_sort

def test_max_heap_sort():
        # Test case for an empty list
>       assert max_heap_sort([]) == []
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:22: AssertionError
   - [#  34] SDL heapsort: 
--------------------------------------------------------------------------------
  16:     copy_list = list(map((lambda x: (x * (-1))), copy_list))
  17:     return copy_list
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
- 20:     copy_list = deepcopy(lst)
+ 20:     pass
  21:     if sort == 'max':
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
--------------------------------------------------------------------------------
[0.19863 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
>       assert custom_heap_sort([], 'min') == []

ts-3-5/test_3-5_1-0_320.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = [], sort = 'min'

>   ???
E   UnboundLocalError: local variable 'copy_list' referenced before assignment

heapsort:24: UnboundLocalError
   - [#  35] SDL heapsort: 
--------------------------------------------------------------------------------
  18: 
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
- 22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
+ 22:         pass
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
--------------------------------------------------------------------------------
[0.20026 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#  36] SDL heapsort: 
--------------------------------------------------------------------------------
  19: def custom_heap_sort(lst: list, sort='min'):
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
- 23:     heap = Heap()
+ 23:     pass
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
  27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
--------------------------------------------------------------------------------
[0.19400 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
>       assert custom_heap_sort([], 'min') == []

ts-3-5/test_3-5_1-0_320.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = [], sort = 'min'

>   ???
E   NameError: name 'heap' is not defined

heapsort:24: NameError
   - [#  37] SDL heapsort: 
--------------------------------------------------------------------------------
  20:     copy_list = deepcopy(lst)
  21:     if sort == 'max':
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
- 24:     heap.build(copy_list)
+ 24:     pass
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
  27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.19502 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
>       assert custom_heap_sort([0], 'min') == [0]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:35: AssertionError
   - [#  38] SDL heapsort: 
--------------------------------------------------------------------------------
  21:     if sort == 'max':
  22:         copy_list = list(map((lambda x: (x * (-1))), copy_list))
  23:     heap = Heap()
  24:     heap.build(copy_list)
- 25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
+ 25:     pass
  26:     if sort == 'max':
  27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.19911 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
>       assert custom_heap_sort([], 'min') == []

ts-3-5/test_3-5_1-0_320.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

lst = [], sort = 'min'

>   ???
E   UnboundLocalError: local variable 'sorted_list' referenced before assignment

heapsort:28: UnboundLocalError
   - [#  39] SDL heapsort: 
--------------------------------------------------------------------------------
  23:     heap = Heap()
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
- 27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
+ 27:         pass
  28:     return sorted_list
--------------------------------------------------------------------------------
[0.19475 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
        assert custom_heap_sort([], 'min') == []
    
        # Test case for a list with one element and min sort
        assert custom_heap_sort([0], 'min') == [0]
    
        # Test case for a list with multiple elements and min sort
        assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'min') == [1, 1, 2, 3, 3, 4, 5, 5, 5, 6, 9]
    
        # Test case for a list with multiple elements and max sort
>       assert custom_heap_sort([3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5], 'max') == [9, 6, 5, 5, 5, 4, 3, 3, 2, 1, 1]
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:41: AssertionError
   - [#  40] SDL heapsort: 
--------------------------------------------------------------------------------
  24:     heap.build(copy_list)
  25:     sorted_list = [heap.delete_min() for i in range(heap.size())]
  26:     if sort == 'max':
  27:         sorted_list = list(map((lambda x: (x * (-1))), sorted_list))
- 28:     return sorted_list
+ 28:     pass
--------------------------------------------------------------------------------
[0.19665 s] killed by ts-3-5/test_3-5_1-0_320.py::test_custom_heap_sort

def test_custom_heap_sort():
        # Test case for an empty list with min sort
>       assert custom_heap_sort([], 'min') == []
E       AssertionError

ts-3-5/test_3-5_1-0_320.py:32: AssertionError
[*] Mutation score [8.91722 s]: 80.0%
   - all: 40
   - killed: 32 (80.0%)
   - survived: 8 (20.0%)
   - incompetent: 0 (0.0%)
   - timeout: 0 (0.0%)
