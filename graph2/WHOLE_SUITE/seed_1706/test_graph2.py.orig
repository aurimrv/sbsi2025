# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import graph2 as module_0


def test_case_0():
    pass


@pytest.mark.xfail(strict=True)
def test_case_1():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    bool_0 = True
    bool_1 = True
    list_0 = [bool_1, bool_1]
    none_type_0 = None
    var_0 = graph_0.edges()
    var_1 = graph_0.has_node(none_type_0)
    assert var_1 is False
    graph_0.add_edge(list_0, bool_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.edges()
    var_0.neighbors(list_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.nodes()
    var_1 = graph_0.has_node(graph_0)
    assert var_1 is False
    graph_0.add_node(var_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    none_type_0 = None
    var_0 = graph_0.add_node(none_type_0)
    var_1 = graph_0.add_node(graph_0)
    var_2 = graph_0.del_node(none_type_0)
    graph_0.neighbors(none_type_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    int_0 = 3801
    set_0 = {int_0, int_0, int_0, int_0}
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    graph_0.del_edge(set_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    str_0 = "\nl7vR-\tt>fm1d,uq("
    complex_0 = 4055 - 1344j
    str_1 = "=@@\x0cQ$U"
    graph_0 = module_0.Graph(str_1)
    assert graph_0.graph == {
        "=": {*()},
        "@": {*()},
        "\x0c": {*()},
        "Q": {*()},
        "$": {*()},
        "U": {*()},
    }
    var_0 = graph_0.add_edge(complex_0, str_0)
    assert graph_0.graph == {
        "=": {*()},
        "@": {*()},
        "\x0c": {*()},
        "Q": {*()},
        "$": {*()},
        "U": {*()},
        (4055 - 1344j): {"\nl7vR-\tt>fm1d,uq("},
        "\nl7vR-\tt>fm1d,uq(": {*()},
    }
    var_1 = graph_0.edges()
    var_1.del_edge(complex_0, complex_0)


@pytest.mark.xfail(strict=True)
def test_case_7():
    int_0 = 991
    float_0 = 1076.4163
    bytes_0 = b"\xdd\xb6\xe8\x96\x8e\x80CMc\xe5\xcf\x14"
    none_type_0 = None
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.add_edge(int_0, float_0)
    graph_1 = module_0.Graph(none_type_0)
    graph_1.adjacent(none_type_0, bytes_0)
