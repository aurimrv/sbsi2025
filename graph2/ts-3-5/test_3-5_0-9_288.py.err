import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

# Test cases for the Graph class methods
class TestGraph:
    
    def test_nodes_method(self):
        graph = Graph([1, 2, 3])
        assert set(graph.nodes()) == {1, 2, 3}
        
    def test_edges_method(self):
        graph = Graph([1, 2, 3])
        graph.add_edge(1, 2)
        graph.add_edge(2, 3)
        assert set(graph.edges()) == {(1, 2), (2, 3)}
        
    def test_add_node_method(self):
        graph = Graph()
        graph.add_node(1)
        assert graph.nodes() == [1]
        
    def test_add_edge_method(self):
        graph = Graph()
        graph.add_node(1)
        graph.add_node(2)
        graph.add_edge(1, 2)
        assert graph.edges() == [(1, 2)]
        
    def test_del_node_method(self):
        graph = Graph([1, 2, 3])
        graph.del_node(2)
        assert graph.nodes() == [1, 3]
        
    def test_del_edge_method(self):
        graph = Graph()
        graph.add_node(1)
        graph.add_node(2)
        graph.add_edge(1, 2)
        graph.del_edge(1, 2)
        assert graph.edges() == []
        
    def test_has_node_method(self):
        graph = Graph([1, 2, 3])
        assert graph.has_node(2) == True
        
    def test_neighbors_method(self):
        graph = Graph()
        graph.add_node(1)
        graph.add_node(2)
        graph.add_edge(1, 2)
        assert graph.neighbors(1) == {2}
        
    def test_adjacent_method(self):
        graph = Graph()
        graph.add_node(1)
        graph.add_node(2)
        graph.add_edge(1, 2)
        assert graph.adjacent(1, 2) == True