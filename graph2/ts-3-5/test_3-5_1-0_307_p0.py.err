import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

def test_nodes_method():
    g = Graph(['A', 'B', 'C'])
    assert len(g.nodes()) == 3
    assert 'A' in g.nodes()
    assert 'D' not in g.nodes()

def test_edges_method():
    g = Graph()
    g.add_edge('A', 'B')
    g.add_edge('B', 'C')
    assert len(g.edges()) == 2
    assert ('A', 'B') in g.edges()
    assert ('B', 'C') in g.edges()

def test_add_node_method():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    assert 'A' in g.nodes()
    assert 'B' in g.nodes()

def test_add_edge_method():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    g.add_edge('A', 'B')
    assert ('A', 'B') in g.edges()
    assert ('B', 'A') in g.edges()
    
def test_del_node_method():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    g.add_edge('A', 'B')
    g.del_node('A')
    assert 'A' not in g.nodes()
    assert 'A' not in g.graph

def test_del_edge_method():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    g.add_edge('A', 'B')
    g.del_edge('A', 'B')
    assert ('A', 'B') not in g.edges()
    assert ('B', 'A') not in g.edges()

def test_has_node_method():
    g = Graph()
    g.add_node('A')
    assert g.has_node('A') == True
    assert g.has_node('B') == False

def test_neighbors_method():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    g.add_edge('A', 'B')
    assert 'B' in g.neighbors('A')

def test_adjacent_method():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    g.add_edge('A', 'B')
    assert g.adjacent('A', 'B') == True
    assert g.adjacent('B', 'A') == True