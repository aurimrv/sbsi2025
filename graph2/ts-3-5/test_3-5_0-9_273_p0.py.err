import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

import pytest

@pytest.fixture
def graph():
    return Graph()

def test_nodes_empty(graph):
    assert graph.nodes() == []

def test_nodes_with_data(graph):
    data = [1, 2, 3]
    graph = Graph(data)
    assert graph.nodes() == data

def test_edges_empty(graph):
    assert graph.edges() == []

def test_add_node(graph):
    graph.add_node(1)
    assert 1 in graph.nodes()
    assert graph.nodes() == [1]

def test_add_edge(graph):
    graph.add_node(1)
    graph.add_node(2)
    graph.add_edge(1, 2)
    assert graph.edges() == [(1, 2)]

def test_del_node(graph):
    graph.add_node(1)
    graph.del_node(1)
    assert graph.nodes() == []
    assert not graph.has_node(1)

def test_del_edge(graph):
    graph.add_node(1)
    graph.add_node(2)
    graph.add_edge(1, 2)
    graph.del_edge(1, 2)
    assert graph.edges() == []

def test_has_node(graph):
    graph.add_node(1)
    assert graph.has_node(1)
    assert not graph.has_node(2)

def test_neighbors(graph):
    graph.add_node(1)
    graph.add_node(2)
    graph.add_edge(1, 2)
    assert graph.neighbors(1) == {2}
    assert graph.neighbors(2) == set()

def test_adjacent_true(graph):
    graph.add_node(1)
    graph.add_node(2)
    graph.add_edge(1, 2)
    assert graph.adjacent(1, 2)
    assert not graph.adjacent(2, 1)

def test_adjacent_error(graph):
    with pytest.raises(KeyError):
        graph.adjacent(3, 1)

    with pytest.raises(KeyError):
        graph.adjacent(1, 3)