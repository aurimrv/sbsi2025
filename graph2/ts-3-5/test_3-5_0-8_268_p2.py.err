import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def graph_with_data():
    return Graph([1, 2, 3])

def test_nodes_empty(empty_graph):
    assert empty_graph.nodes() == []

def test_nodes_with_data(graph_with_data):
    assert set(graph_with_data.nodes()) == {1, 2, 3}

def test_edges_empty(empty_graph):
    assert empty_graph.edges() == []

def test_edges_with_data(graph_with_data):
    assert graph_with_data.edges() == []

def test_add_node(empty_graph):
    empty_graph.add_node(1)
    assert empty_graph.nodes() == [1]

def test_add_edge(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_del_node(graph_with_data):
    graph_with_data.del_node(2)
    assert set(graph_with_data.nodes()) == {1, 3}

def test_del_edge(graph_with_data):
    with pytest.raises(KeyError):
        graph_with_data.del_edge(1, 3)

def test_has_node_true(graph_with_data):
    assert graph_with_data.has_node(2) is True

def test_has_node_false(graph_with_data):
    assert graph_with_data.has_node(4) is False

def test_neighbors(graph_with_data):
    assert graph_with_data.neighbors(1) == set()

def test_adjacent_true(graph_with_data):
    assert graph_with_data.adjacent(1, 2) is False

def test_adjacent_false(graph_with_data):
    assert graph_with_data.adjacent(1, 3) is False