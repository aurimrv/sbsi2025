import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def sample_graph():
    g = Graph(['A', 'B', 'C'])
    g.add_edge('A', 'B')
    g.add_edge('B', 'C')
    return g

def test_nodes_empty(empty_graph):
    assert empty_graph.nodes() == []

def test_nodes_sample(sample_graph):
    assert set(sample_graph.nodes()) == {'A', 'B', 'C'}

def test_edges_empty(empty_graph):
    assert empty_graph.edges() == []

def test_edges_sample(sample_graph):
    assert set(sample_graph.edges()) == {('A', 'B'), ('B', 'C')}

def test_add_node(empty_graph):
    empty_graph.add_node('D')
    assert 'D' in empty_graph.nodes()

def test_add_edge(empty_graph):
    empty_graph.add_node('E')
    empty_graph.add_edge('D', 'E')
    assert ('D', 'E') in empty_graph.edges()

def test_del_node(sample_graph):
    sample_graph.del_node('B')
    assert 'B' not in sample_graph.nodes()
    assert ('A', 'B') not in sample_graph.edges()

def test_del_edge(sample_graph):
    sample_graph.del_edge('B', 'C')
    assert ('B', 'C') not in sample_graph.edges()

def test_has_node(sample_graph):
    assert sample_graph.has_node('A') == True
    assert sample_graph.has_node('D') == False

def test_neighbors(sample_graph):
    assert sample_graph.neighbors('B') == {'A', 'C'}

def test_adjacent(sample_graph):
    assert sample_graph.adjacent('A', 'B') == True
    assert sample_graph.adjacent('A', 'C') == False