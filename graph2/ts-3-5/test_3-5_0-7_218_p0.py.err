import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

import pytest

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def initialized_graph():
    return Graph([1, 2, 3])

def test_nodes_empty_graph(empty_graph):
    assert empty_graph.nodes() == []

def test_nodes_initialized_graph(initialized_graph):
    assert initialized_graph.nodes() == [1, 2, 3]

def test_edges_empty_graph(empty_graph):
    assert empty_graph.edges() == []

def test_edges_initialized_graph(initialized_graph):
    assert initialized_graph.edges() == []

def test_add_node(empty_graph):
    empty_graph.add_node(4)
    assert empty_graph.nodes() == [4]

def test_add_edge(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_del_node(initialized_graph):
    initialized_graph.del_node(2)
    assert initialized_graph.nodes() == [1, 3]

def test_del_edge(initialized_graph):
    initialized_graph.add_edge(1, 2)
    initialized_graph.del_edge(1, 2)
    assert initialized_graph.edges() == []

def test_has_node(initialized_graph):
    assert initialized_graph.has_node(1) == True
    assert initialized_graph.has_node(4) == False

def test_neighbors(initialized_graph):
    initialized_graph.add_edge(1, 2)
    initialized_graph.add_edge(1, 3)
    assert initialized_graph.neighbors(1) == {2, 3}

def test_adjacent(initialized_graph):
    initialized_graph.add_edge(1, 2)
    assert initialized_graph.adjacent(1, 2) == True
    assert initialized_graph.adjacent(2, 1) == False