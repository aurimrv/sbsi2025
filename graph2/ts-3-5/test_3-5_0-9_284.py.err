import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def example_graph():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    return g

def test_nodes(example_graph):
    nodes = example_graph.nodes()
    assert len(nodes) == 2
    assert 1 in nodes
    assert 2 in nodes

def test_edges(example_graph):
    edges = example_graph.edges()
    assert len(edges) == 1
    assert (1, 2) in edges

def test_add_node():
    g = Graph()
    g.add_node(1)
    assert 1 in g.nodes()

def test_add_edge():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    assert (1, 2) in g.edges()

def test_del_node():
    g = Graph()
    g.add_node(1)
    g.del_node(1)
    assert 1 not in g.nodes()

def test_del_edge():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    g.del_edge(1, 2)
    assert (1, 2) not in g.edges()

def test_has_node():
    g = Graph()
    g.add_node(1)
    assert g.has_node(1)
    assert not g.has_node(2)

def test_neighbors():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    neighbors = g.neighbors(1)
    assert len(neighbors) == 1
    assert 2 in neighbors

def test_adjacent():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    assert g.adjacent(1, 2)
    assert not g.adjacent(2, 1)