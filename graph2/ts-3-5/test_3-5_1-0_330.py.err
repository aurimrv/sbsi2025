import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def sample_graph():
    test_graph = Graph()
    test_graph.add_node('A')
    test_graph.add_node('B')
    test_graph.add_node('C')
    test_graph.add_edge('A', 'B')
    return test_graph

def test_nodes(sample_graph):
    assert 'A' in sample_graph.nodes()
    assert 'B' in sample_graph.nodes()
    assert 'C' in sample_graph.nodes()
    assert len(sample_graph.nodes()) == 3

def test_edges(sample_graph):
    assert ('A', 'B') in sample_graph.edges()
    assert len(sample_graph.edges()) == 1

def test_add_node(sample_graph):
    sample_graph.add_node('D')
    assert 'D' in sample_graph.nodes()

def test_add_edge(sample_graph):
    sample_graph.add_edge('B', 'C')
    assert ('B', 'C') in sample_graph.edges()

def test_del_node(sample_graph):
    sample_graph.del_node('C')
    assert 'C' not in sample_graph.nodes()

def test_del_edge(sample_graph):
    sample_graph.del_edge('A', 'B')
    assert ('A', 'B') not in sample_graph.edges()

def test_has_node(sample_graph):
    assert sample_graph.has_node('A')
    assert not sample_graph.has_node('Z')

def test_neighbors(sample_graph):
    assert sample_graph.neighbors('A') == {'B'}

def test_adjacent(sample_graph):
    assert sample_graph.adjacent('A', 'B')
    assert not sample_graph.adjacent('A', 'C')
    assert not sample_graph.adjacent('B', 'A')