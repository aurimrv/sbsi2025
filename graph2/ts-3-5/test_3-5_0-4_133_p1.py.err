import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def sample_graph():
    g = Graph([1, 2, 3])
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

def test_nodes_empty(empty_graph):
    assert empty_graph.nodes() == []

def test_nodes_sample(sample_graph):
    assert set(sample_graph.nodes()) == {1, 2, 3}

def test_edges_empty(empty_graph):
    assert empty_graph.edges() == []

def test_edges_sample(sample_graph):
    assert set(sample_graph.edges()) == {(1, 2), (2, 3)}

def test_add_node(empty_graph):
    empty_graph.add_node(4)
    assert set(empty_graph.nodes()) == {4}

def test_add_edge(empty_graph):
    empty_graph.add_edge(4, 5)
    assert set(empty_graph.edges()) == {(4, 5)}

def test_del_node(sample_graph):
    sample_graph.del_node(1)
    assert set(sample_graph.nodes()) == {2, 3}

def test_del_edge(sample_graph):
    sample_graph.del_edge(2, 3)
    assert set(sample_graph.edges()) == {(1, 2)}

def test_has_node(sample_graph):
    assert sample_graph.has_node(2) == True
    assert sample_graph.has_node(4) == False

def test_neighbors(sample_graph):
    assert set(sample_graph.neighbors(2)) == {1, 3}

def test_adjacent(sample_graph):
    assert sample_graph.adjacent(1, 2) == True
    assert sample_graph.adjacent(1, 3) == False