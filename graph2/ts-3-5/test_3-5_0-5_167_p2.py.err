import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def graph_instance():
    return Graph()

def test_nodes_empty_graph(graph_instance):
    assert graph_instance.nodes() == []

def test_nodes_with_nodes(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    assert set(graph_instance.nodes()) == {'A', 'B'}

def test_edges_empty_graph(graph_instance):
    assert graph_instance.edges() == []

def test_edges_with_edges(graph_instance):
    graph_instance.add_edge('A', 'B')
    graph_instance.add_edge('B', 'C')
    assert set(graph_instance.edges()) == {('A', 'B'), ('B', 'C')}

def test_add_node(graph_instance):
    graph_instance.add_node('A')
    assert 'A' in graph_instance.graph

def test_add_edge(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    assert 'B' in graph_instance.graph['A']

def test_del_node(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    graph_instance.del_node('A')
    assert 'A' not in graph_instance.graph
    assert 'B' not in graph_instance.graph.get('A', [])

def test_del_edge(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    graph_instance.del_edge('A', 'B')
    assert 'B' not in graph_instance.graph.get('A', [])

def test_has_node_true(graph_instance):
    graph_instance.add_node('A')
    assert graph_instance.has_node('A') is True

def test_has_node_false(graph_instance):
    graph_instance.add_node('A')
    assert graph_instance.has_node('B') is False

def test_neighbors(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    assert graph_instance.neighbors('A') == {'B'}

def test_adjacent_true(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    assert graph_instance.adjacent('A', 'B') is True

def test_adjacent_false(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    assert graph_instance.adjacent('A', 'B') is False