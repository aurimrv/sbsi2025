import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def graph():
    return Graph()

def test_nodes_empty(graph):
    assert graph.nodes() == []

def test_nodes_with_nodes(graph):
    graph.add_node('A')
    graph.add_node('B')
    graph.add_node('C')
    assert set(graph.nodes()) == {'A', 'B', 'C'}

def test_edges_empty(graph):
    assert graph.edges() == []

def test_edges_with_edges(graph):
    graph.add_edge('A', 'B')
    graph.add_edge('B', 'C')
    assert set(graph.edges()) == {('A', 'B'), ('B', 'C')}

def test_add_node(graph):
    graph.add_node('A')
    assert 'A' in graph.nodes()

def test_add_edge(graph):
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    assert ('A', 'B') in graph.edges()

def test_del_node(graph):
    graph.add_node('A')
    graph.add_node('B')
    graph.add_node('C')
    graph.add_edge('A', 'B')
    graph.add_edge('B', 'C')
    graph.del_node('B')
    assert 'B' not in graph.nodes()
    assert ('A', 'B') not in graph.edges()
    assert ('B', 'C') not in graph.edges()

def test_del_edge(graph):
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    graph.del_edge('A', 'B')
    assert ('A', 'B') not in graph.edges()

def test_has_node(graph):
    graph.add_node('A')
    assert graph.has_node('A')
    assert not graph.has_node('B')

def test_neighbors(graph):
    graph.add_node('A')
    graph.add_node('B')
    graph.add_node('C')
    graph.add_edge('A', 'B')
    graph.add_edge('B', 'C')
    assert graph.neighbors('A') == {'B'}
    assert graph.neighbors('B') == {'A', 'C'}

def test_adjacent(graph):
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    assert graph.adjacent('A', 'B')
    assert not graph.adjacent('B', 'A')