import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def graph_with_data():
    return Graph([1, 2, 3, 4])

def test_nodes(empty_graph, graph_with_data):
    assert empty_graph.nodes() == []
    assert graph_with_data.nodes() == [1, 2, 3, 4]

def test_edges(empty_graph, graph_with_data):
    assert empty_graph.edges() == []
    assert graph_with_data.edges() == []

def test_add_node(empty_graph, graph_with_data):
    empty_graph.add_node(5)
    assert empty_graph.nodes() == [5]
    
    graph_with_data.add_node(5)
    assert graph_with_data.nodes() == [1, 2, 3, 4, 5]

def test_add_edge(empty_graph, graph_with_data):
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]
    
    graph_with_data.add_edge(3, 4)
    assert graph_with_data.edges() == [(3, 4)]

def test_del_node(empty_graph, graph_with_data):
    with pytest.raises(KeyError):
        empty_graph.del_node(1)
    
    graph_with_data.del_node(2)
    assert graph_with_data.nodes() == [1, 3, 4]

def test_del_edge(empty_graph, graph_with_data):
    with pytest.raises(KeyError):
        empty_graph.del_edge(1, 2)
    
    graph_with_data.del_edge(3, 4)
    assert graph_with_data.edges() == []

def test_has_node(empty_graph, graph_with_data):
    assert empty_graph.has_node(1) == False
    assert graph_with_data.has_node(3) == True

def test_neighbors(empty_graph, graph_with_data):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.neighbors(1) == {2}
    
    graph_with_data.add_edge(2, 4)
    assert graph_with_data.neighbors(2) == {4}

def test_adjacent(empty_graph, graph_with_data):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.adjacent(1, 2) == True
    assert empty_graph.adjacent(2, 1) == False
    
    graph_with_data.add_edge(2, 3)
    assert graph_with_data.adjacent(2, 3) == True
    assert graph_with_data.adjacent(3, 2) == False