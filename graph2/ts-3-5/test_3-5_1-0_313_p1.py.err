import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def sample_graph():
    g = Graph([1, 2, 3])
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

def test_empty_graph_nodes(empty_graph):
    assert empty_graph.nodes() == []

def test_empty_graph_edges(empty_graph):
    assert empty_graph.edges() == []

def test_sample_graph_nodes(sample_graph):
    assert 1 in sample_graph.nodes()
    assert 2 in sample_graph.nodes()
    assert 3 in sample_graph.nodes()

def test_sample_graph_edges(sample_graph):
    assert (1, 2) in sample_graph.edges()
    assert (2, 3) in sample_graph.edges()

def test_add_node():
    g = Graph()
    g.add_node(1)
    assert 1 in g.nodes()

def test_add_edge():
    g = Graph()
    g.add_edge(1, 2)
    assert (1, 2) in g.edges()

def test_del_node():
    g = Graph([1, 2])
    g.add_edge(1, 2)
    g.del_node(1)
    assert 1 not in g.nodes()
    assert (1, 2) not in g.edges()

def test_del_edge():
    g = Graph()
    g.add_edge(1, 2)
    g.del_edge(1, 2)
    assert (1, 2) not in g.edges()

def test_has_node():
    g = Graph([1, 2])
    assert g.has_node(1)
    assert not g.has_node(3)

def test_neighbors():
    g = Graph()
    g.add_edge(1, 2)
    g.add_edge(1, 3)
    assert 2 in g.neighbors(1)
    assert 3 in g.neighbors(1)

def test_adjacent_true():
    g = Graph()
    g.add_edge(1, 2)
    assert g.adjacent(1, 2)

def test_adjacent_false():
    g = Graph()
    g.add_edge(1, 2)
    assert not g.adjacent(2, 1)