[*] Start mutation process:
   - targets: graph2.py
   - tests: ts-3-5/test_3-5_0-5_173.py
[*] 7 tests passed:
   - test_3-5_0-5_173 [0.19555 s]
[*] Start mutants generation and execution:
   - [#   1] CDI graph2: 
--------------------------------------------------------------------------------
  22:     adjacent(n1, n2): returns True if there is an edge connecting n1 and n2,
  23:     False if not, raises an error if either of the supplied nodes are not in g.
  24:     """
  25:     
- 26:     def __init__(self, data=None):
- 27:         '''Initialize graph.'''
- 28:         self.graph = {}
- 29:         if data:
- 30:             for i in data:
- 31:                 self.add_node(i)
- 32:     
+ 26:     @classmethod
+ 27:     def __init__(self, data=None):
+ 28:         '''Initialize graph.'''
+ 29:         self.graph = {}
+ 30:         if data:
+ 31:             for i in data:
+ 32:                 self.add_node(i)
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
  36:     
--------------------------------------------------------------------------------
[0.17985 s] survived
   - [#   2] CDI graph2: 
--------------------------------------------------------------------------------
  29:         if data:
  30:             for i in data:
  31:                 self.add_node(i)
  32:     
- 33:     def nodes(self):
- 34:         '''Return a list of all nodes in the graph.'''
- 35:         return list(self.graph.keys())
- 36:     
+ 33:     @classmethod
+ 34:     def nodes(self):
+ 35:         '''Return a list of all nodes in the graph.'''
+ 36:         return list(self.graph.keys())
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
  39:         return [edge for edges in self.graph.values() for edge in edges]
  40:     
--------------------------------------------------------------------------------
[0.21652 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_node

empty_graph = <graph2.Graph object at 0x7074098f7dc0>

    def test_add_node(empty_graph):
        empty_graph.add_node('A')
>       assert 'A' in empty_graph.nodes()

ts-3-5/test_3-5_0-5_173.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:36: AttributeError
   - [#   3] CDI graph2: 
--------------------------------------------------------------------------------
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
  36:     
- 37:     def edges(self):
- 38:         '''Return a list of all edges in the graph.'''
- 39:         return [edge for edges in self.graph.values() for edge in edges]
- 40:     
+ 37:     @classmethod
+ 38:     def edges(self):
+ 39:         '''Return a list of all edges in the graph.'''
+ 40:         return [edge for edges in self.graph.values() for edge in edges]
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
  43:         self.graph.setdefault(n, set())
  44:     
--------------------------------------------------------------------------------
[0.18884 s] survived
   - [#   4] CDI graph2: 
--------------------------------------------------------------------------------
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
  39:         return [edge for edges in self.graph.values() for edge in edges]
  40:     
- 41:     def add_node(self, n):
- 42:         '''Add a new node to the graph.'''
- 43:         self.graph.setdefault(n, set())
- 44:     
+ 41:     @classmethod
+ 42:     def add_node(self, n):
+ 43:         '''Add a new node to the graph.'''
+ 44:         self.graph.setdefault(n, set())
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
--------------------------------------------------------------------------------
[0.19044 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_node

empty_graph = <graph2.Graph object at 0x707409949060>

    def test_add_node(empty_graph):
>       empty_graph.add_node('A')

ts-3-5/test_3-5_0-5_173.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>, n = 'A'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:44: AttributeError
   - [#   5] CDI graph2: 
--------------------------------------------------------------------------------
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
  43:         self.graph.setdefault(n, set())
  44:     
- 45:     def add_edge(self, n1, n2):
- 46:         '''Add new edge to the graph.'''
- 47:         self.graph.setdefault(n1, set([n2]))
- 48:         self.graph.setdefault(n2, set())
- 49:         self.graph[n1].add(n2)
- 50:     
+ 45:     @classmethod
+ 46:     def add_edge(self, n1, n2):
+ 47:         '''Add new edge to the graph.'''
+ 48:         self.graph.setdefault(n1, set([n2]))
+ 49:         self.graph.setdefault(n2, set())
+ 50:         self.graph[n1].add(n2)
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
  54:         for k in self.graph:
--------------------------------------------------------------------------------
[0.20447 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x70740966c3d0>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
>       empty_graph.add_edge('A', 'B')

ts-3-5/test_3-5_0-5_173.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>, n1 = 'A', n2 = 'B'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:48: AttributeError
   - [#   6] CDI graph2: 
--------------------------------------------------------------------------------
  47:         self.graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
  49:         self.graph[n1].add(n2)
  50:     
- 51:     def del_node(self, n):
- 52:         """Delete the node 'n' from the graph."""
- 53:         del self.graph[n]
- 54:         for k in self.graph:
- 55:             self.graph[k].discard(n)
- 56:     
+ 51:     @classmethod
+ 52:     def del_node(self, n):
+ 53:         """Delete the node 'n' from the graph."""
+ 54:         del self.graph[n]
+ 55:         for k in self.graph:
+ 56:             self.graph[k].discard(n)
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
  60:     
--------------------------------------------------------------------------------
[0.20582 s] killed by ts-3-5/test_3-5_0-5_173.py::test_del_node

empty_graph = <graph2.Graph object at 0x707409949b40>

    def test_del_node(empty_graph):
        empty_graph.add_node('A')
>       empty_graph.del_node('A')

ts-3-5/test_3-5_0-5_173.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>, n = 'A'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:54: AttributeError
   - [#   7] CDI graph2: 
--------------------------------------------------------------------------------
  53:         del self.graph[n]
  54:         for k in self.graph:
  55:             self.graph[k].discard(n)
  56:     
- 57:     def del_edge(self, n1, n2):
- 58:         '''Delete the edge connecting n1 and n2.'''
- 59:         self.graph[n1].remove(n2)
- 60:     
+ 57:     @classmethod
+ 58:     def del_edge(self, n1, n2):
+ 59:         '''Delete the edge connecting n1 and n2.'''
+ 60:         self.graph[n1].remove(n2)
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
  63:         return n in self.graph
  64:     
--------------------------------------------------------------------------------
[0.22352 s] killed by ts-3-5/test_3-5_0-5_173.py::test_del_edge

empty_graph = <graph2.Graph object at 0x7074098b6410>

    def test_del_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       empty_graph.del_edge('A', 'B')

ts-3-5/test_3-5_0-5_173.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>, n1 = 'A', n2 = 'B'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:60: AttributeError
   - [#   8] CDI graph2: 
--------------------------------------------------------------------------------
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
  60:     
- 61:     def has_node(self, n):
- 62:         """Return boolean if 'n' is in the graph."""
- 63:         return n in self.graph
- 64:     
+ 61:     @classmethod
+ 62:     def has_node(self, n):
+ 63:         """Return boolean if 'n' is in the graph."""
+ 64:         return n in self.graph
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
  68:     
--------------------------------------------------------------------------------
[0.20619 s] killed by ts-3-5/test_3-5_0-5_173.py::test_has_node

empty_graph = <graph2.Graph object at 0x7074098f6950>

    def test_has_node(empty_graph):
        empty_graph.add_node('A')
>       assert empty_graph.has_node('A') == True

ts-3-5/test_3-5_0-5_173.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>, n = 'A'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:64: AttributeError
   - [#   9] CDI graph2: 
--------------------------------------------------------------------------------
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
  63:         return n in self.graph
  64:     
- 65:     def neighbors(self, n):
- 66:         '''Return the list of all nodes connected to n by edges.'''
- 67:         return self.graph[n]
- 68:     
+ 65:     @classmethod
+ 66:     def neighbors(self, n):
+ 67:         '''Return the list of all nodes connected to n by edges.'''
+ 68:         return self.graph[n]
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
  71:         return n2 in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.21364 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x707409b783a0>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       assert 'B' in empty_graph.neighbors('A')

ts-3-5/test_3-5_0-5_173.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'graph2.Graph'>, n = 'A'

>   ???
E   AttributeError: type object 'Graph' has no attribute 'graph'

graph2:68: AttributeError
   - [#  10] CDI graph2: 
--------------------------------------------------------------------------------
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
  68:     
- 69:     def adjacent(self, n1, n2):
- 70:         '''Return boolean if there is an edge connecting n1 and n2.'''
- 71:         return n2 in self.neighbors(n1)
+ 69:     @classmethod
+ 70:     def adjacent(self, n1, n2):
+ 71:         '''Return boolean if there is an edge connecting n1 and n2.'''
+ 72:         return n2 in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.22089 s] incompetent

TypeError: graph2:72: TypeError: Graph.neighbors() missing 1 required positional argument: 'n'

   - [#  11] COI graph2: 
--------------------------------------------------------------------------------
  25:     
  26:     def __init__(self, data=None):
  27:         '''Initialize graph.'''
  28:         self.graph = {}
- 29:         if data:
+ 29:         if not data:
  30:             for i in data:
  31:                 self.add_node(i)
  32:     
  33:     def nodes(self):
--------------------------------------------------------------------------------
[0.21054 s] incompetent

TypeError: graph2:30: TypeError: 'NoneType' object is not iterable

   - [#  12] COI graph2: 
--------------------------------------------------------------------------------
  59:         self.graph[n1].remove(n2)
  60:     
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
- 63:         return n in self.graph
+ 63:         return n not in self.graph
  64:     
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
--------------------------------------------------------------------------------
[0.20974 s] killed by ts-3-5/test_3-5_0-5_173.py::test_has_node

empty_graph = <graph2.Graph object at 0x707409759f60>

    def test_has_node(empty_graph):
        empty_graph.add_node('A')
>       assert empty_graph.has_node('A') == True
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:39: AssertionError
   - [#  13] COI graph2: 
--------------------------------------------------------------------------------
  67:         return self.graph[n]
  68:     
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
- 71:         return n2 in self.neighbors(n1)
+ 71:         return n2 not in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.20636 s] killed by ts-3-5/test_3-5_0-5_173.py::test_adjacent

empty_graph = <graph2.Graph object at 0x707409945090>

    def test_adjacent(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       assert empty_graph.adjacent('A', 'B') == True
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:51: AssertionError
   - [#  14] OIL graph2: 
--------------------------------------------------------------------------------
  28:         self.graph = {}
  29:         if data:
  30:             for i in data:
  31:                 self.add_node(i)
- 32:     
+ 32:                 break
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
  36:     
--------------------------------------------------------------------------------
[0.18399 s] survived
   - [#  15] OIL graph2: 
--------------------------------------------------------------------------------
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
  54:         for k in self.graph:
  55:             self.graph[k].discard(n)
- 56:     
+ 56:             break
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
  60:     
--------------------------------------------------------------------------------
[0.18877 s] survived
   - [#  16] RIL graph2: 
--------------------------------------------------------------------------------
  26:     def __init__(self, data=None):
  27:         '''Initialize graph.'''
  28:         self.graph = {}
  29:         if data:
- 30:             for i in data:
+ 30:             for i in reversed(data):
  31:                 self.add_node(i)
  32:     
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
--------------------------------------------------------------------------------
[0.17059 s] survived
   - [#  17] RIL graph2: 
--------------------------------------------------------------------------------
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
- 54:         for k in self.graph:
+ 54:         for k in reversed(self.graph):
  55:             self.graph[k].discard(n)
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
--------------------------------------------------------------------------------
[0.18261 s] survived
   - [#  18] SDI graph2: 
--------------------------------------------------------------------------------
  22:     adjacent(n1, n2): returns True if there is an edge connecting n1 and n2,
  23:     False if not, raises an error if either of the supplied nodes are not in g.
  24:     """
  25:     
- 26:     def __init__(self, data=None):
- 27:         '''Initialize graph.'''
- 28:         self.graph = {}
- 29:         if data:
- 30:             for i in data:
- 31:                 self.add_node(i)
- 32:     
+ 26:     @staticmethod
+ 27:     def __init__(self, data=None):
+ 28:         '''Initialize graph.'''
+ 29:         self.graph = {}
+ 30:         if data:
+ 31:             for i in data:
+ 32:                 self.add_node(i)
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
  36:     
--------------------------------------------------------------------------------
[0.20899 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:13: TypeError: Graph.__init__() missing 1 required positional argument: 'self'

   - [#  19] SDI graph2: 
--------------------------------------------------------------------------------
  29:         if data:
  30:             for i in data:
  31:                 self.add_node(i)
  32:     
- 33:     def nodes(self):
- 34:         '''Return a list of all nodes in the graph.'''
- 35:         return list(self.graph.keys())
- 36:     
+ 33:     @staticmethod
+ 34:     def nodes(self):
+ 35:         '''Return a list of all nodes in the graph.'''
+ 36:         return list(self.graph.keys())
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
  39:         return [edge for edges in self.graph.values() for edge in edges]
  40:     
--------------------------------------------------------------------------------
[0.20965 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:17: TypeError: Graph.nodes() missing 1 required positional argument: 'self'

   - [#  20] SDI graph2: 
--------------------------------------------------------------------------------
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
  36:     
- 37:     def edges(self):
- 38:         '''Return a list of all edges in the graph.'''
- 39:         return [edge for edges in self.graph.values() for edge in edges]
- 40:     
+ 37:     @staticmethod
+ 38:     def edges(self):
+ 39:         '''Return a list of all edges in the graph.'''
+ 40:         return [edge for edges in self.graph.values() for edge in edges]
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
  43:         self.graph.setdefault(n, set())
  44:     
--------------------------------------------------------------------------------
[0.18350 s] survived
   - [#  21] SDI graph2: 
--------------------------------------------------------------------------------
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
  39:         return [edge for edges in self.graph.values() for edge in edges]
  40:     
- 41:     def add_node(self, n):
- 42:         '''Add a new node to the graph.'''
- 43:         self.graph.setdefault(n, set())
- 44:     
+ 41:     @staticmethod
+ 42:     def add_node(self, n):
+ 43:         '''Add a new node to the graph.'''
+ 44:         self.graph.setdefault(n, set())
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
--------------------------------------------------------------------------------
[0.20899 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:16: TypeError: Graph.add_node() missing 1 required positional argument: 'n'

   - [#  22] SDI graph2: 
--------------------------------------------------------------------------------
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
  43:         self.graph.setdefault(n, set())
  44:     
- 45:     def add_edge(self, n1, n2):
- 46:         '''Add new edge to the graph.'''
- 47:         self.graph.setdefault(n1, set([n2]))
- 48:         self.graph.setdefault(n2, set())
- 49:         self.graph[n1].add(n2)
- 50:     
+ 45:     @staticmethod
+ 46:     def add_edge(self, n1, n2):
+ 47:         '''Add new edge to the graph.'''
+ 48:         self.graph.setdefault(n1, set([n2]))
+ 49:         self.graph.setdefault(n2, set())
+ 50:         self.graph[n1].add(n2)
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
  54:         for k in self.graph:
--------------------------------------------------------------------------------
[0.20267 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:22: TypeError: Graph.add_edge() missing 1 required positional argument: 'n2'

   - [#  23] SDI graph2: 
--------------------------------------------------------------------------------
  47:         self.graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
  49:         self.graph[n1].add(n2)
  50:     
- 51:     def del_node(self, n):
- 52:         """Delete the node 'n' from the graph."""
- 53:         del self.graph[n]
- 54:         for k in self.graph:
- 55:             self.graph[k].discard(n)
- 56:     
+ 51:     @staticmethod
+ 52:     def del_node(self, n):
+ 53:         """Delete the node 'n' from the graph."""
+ 54:         del self.graph[n]
+ 55:         for k in self.graph:
+ 56:             self.graph[k].discard(n)
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
  60:     
--------------------------------------------------------------------------------
[0.20298 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:27: TypeError: Graph.del_node() missing 1 required positional argument: 'n'

   - [#  24] SDI graph2: 
--------------------------------------------------------------------------------
  53:         del self.graph[n]
  54:         for k in self.graph:
  55:             self.graph[k].discard(n)
  56:     
- 57:     def del_edge(self, n1, n2):
- 58:         '''Delete the edge connecting n1 and n2.'''
- 59:         self.graph[n1].remove(n2)
- 60:     
+ 57:     @staticmethod
+ 58:     def del_edge(self, n1, n2):
+ 59:         '''Delete the edge connecting n1 and n2.'''
+ 60:         self.graph[n1].remove(n2)
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
  63:         return n in self.graph
  64:     
--------------------------------------------------------------------------------
[0.20231 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:34: TypeError: Graph.del_edge() missing 1 required positional argument: 'n2'

   - [#  25] SDI graph2: 
--------------------------------------------------------------------------------
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
  60:     
- 61:     def has_node(self, n):
- 62:         """Return boolean if 'n' is in the graph."""
- 63:         return n in self.graph
- 64:     
+ 61:     @staticmethod
+ 62:     def has_node(self, n):
+ 63:         """Return boolean if 'n' is in the graph."""
+ 64:         return n in self.graph
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
  68:     
--------------------------------------------------------------------------------
[0.21038 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:39: TypeError: Graph.has_node() missing 1 required positional argument: 'n'

   - [#  26] SDI graph2: 
--------------------------------------------------------------------------------
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
  63:         return n in self.graph
  64:     
- 65:     def neighbors(self, n):
- 66:         '''Return the list of all nodes connected to n by edges.'''
- 67:         return self.graph[n]
- 68:     
+ 65:     @staticmethod
+ 66:     def neighbors(self, n):
+ 67:         '''Return the list of all nodes connected to n by edges.'''
+ 68:         return self.graph[n]
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
  71:         return n2 in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.20415 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:23: TypeError: Graph.neighbors() missing 1 required positional argument: 'n'

   - [#  27] SDI graph2: 
--------------------------------------------------------------------------------
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
  68:     
- 69:     def adjacent(self, n1, n2):
- 70:         '''Return boolean if there is an edge connecting n1 and n2.'''
- 71:         return n2 in self.neighbors(n1)
+ 69:     @staticmethod
+ 70:     def adjacent(self, n1, n2):
+ 71:         '''Return boolean if there is an edge connecting n1 and n2.'''
+ 72:         return n2 in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.21253 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:51: TypeError: Graph.adjacent() missing 1 required positional argument: 'n2'

   - [#  28] SDL graph2: 
--------------------------------------------------------------------------------
  24:     """
  25:     
  26:     def __init__(self, data=None):
  27:         '''Initialize graph.'''
- 28:         self.graph = {}
+ 28:         pass
  29:         if data:
  30:             for i in data:
  31:                 self.add_node(i)
  32:     
--------------------------------------------------------------------------------
[0.20999 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_node

empty_graph = <graph2.Graph object at 0x70740966f130>

    def test_add_node(empty_graph):
>       empty_graph.add_node('A')

ts-3-5/test_3-5_0-5_173.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x70740966f130>, n = 'A'

>   ???
E   AttributeError: 'Graph' object has no attribute 'graph'

graph2:43: AttributeError
   - [#  29] SDL graph2: 
--------------------------------------------------------------------------------
  27:         '''Initialize graph.'''
  28:         self.graph = {}
  29:         if data:
  30:             for i in data:
- 31:                 self.add_node(i)
+ 31:                 pass
  32:     
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
--------------------------------------------------------------------------------
[0.20733 s] survived
   - [#  30] SDL graph2: 
--------------------------------------------------------------------------------
  31:                 self.add_node(i)
  32:     
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
- 35:         return list(self.graph.keys())
+ 35:         pass
  36:     
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
  39:         return [edge for edges in self.graph.values() for edge in edges]
--------------------------------------------------------------------------------
[0.21651 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:17: TypeError: argument of type 'NoneType' is not iterable

   - [#  31] SDL graph2: 
--------------------------------------------------------------------------------
  35:         return list(self.graph.keys())
  36:     
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
- 39:         return [edge for edges in self.graph.values() for edge in edges]
+ 39:         pass
  40:     
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
  43:         self.graph.setdefault(n, set())
--------------------------------------------------------------------------------
[0.18623 s] survived
   - [#  32] SDL graph2: 
--------------------------------------------------------------------------------
  39:         return [edge for edges in self.graph.values() for edge in edges]
  40:     
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
- 43:         self.graph.setdefault(n, set())
+ 43:         pass
  44:     
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
--------------------------------------------------------------------------------
[0.20892 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_node

empty_graph = <graph2.Graph object at 0x707409a0ff10>

    def test_add_node(empty_graph):
        empty_graph.add_node('A')
>       assert 'A' in empty_graph.nodes()
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:17: AssertionError
   - [#  33] SDL graph2: 
--------------------------------------------------------------------------------
  43:         self.graph.setdefault(n, set())
  44:     
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
- 47:         self.graph.setdefault(n1, set([n2]))
+ 47:         pass
  48:         self.graph.setdefault(n2, set())
  49:         self.graph[n1].add(n2)
  50:     
  51:     def del_node(self, n):
--------------------------------------------------------------------------------
[0.18943 s] survived
   - [#  34] SDL graph2: 
--------------------------------------------------------------------------------
  44:     
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
- 48:         self.graph.setdefault(n2, set())
+ 48:         pass
  49:         self.graph[n1].add(n2)
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
--------------------------------------------------------------------------------
[0.19252 s] survived
   - [#  35] SDL graph2: 
--------------------------------------------------------------------------------
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
- 49:         self.graph[n1].add(n2)
+ 49:         pass
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
--------------------------------------------------------------------------------
[0.20938 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x70740995d510>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       assert 'B' in empty_graph.neighbors('A')
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:23: AssertionError
   - [#  36] SDL graph2: 
--------------------------------------------------------------------------------
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
  54:         for k in self.graph:
- 55:             self.graph[k].discard(n)
+ 55:             pass
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
--------------------------------------------------------------------------------
[0.16575 s] survived
   - [#  37] SDL graph2: 
--------------------------------------------------------------------------------
  55:             self.graph[k].discard(n)
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
- 59:         self.graph[n1].remove(n2)
+ 59:         pass
  60:     
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
  63:         return n in self.graph
--------------------------------------------------------------------------------
[0.21342 s] killed by ts-3-5/test_3-5_0-5_173.py::test_del_edge

empty_graph = <graph2.Graph object at 0x7074096eb100>

    def test_del_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
        empty_graph.del_edge('A', 'B')
>       assert 'B' not in empty_graph.neighbors('A')
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:35: AssertionError
   - [#  38] SDL graph2: 
--------------------------------------------------------------------------------
  59:         self.graph[n1].remove(n2)
  60:     
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
- 63:         return n in self.graph
+ 63:         pass
  64:     
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
--------------------------------------------------------------------------------
[0.21565 s] killed by ts-3-5/test_3-5_0-5_173.py::test_has_node

empty_graph = <graph2.Graph object at 0x707409697cd0>

    def test_has_node(empty_graph):
        empty_graph.add_node('A')
>       assert empty_graph.has_node('A') == True
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:39: AssertionError
   - [#  39] SDL graph2: 
--------------------------------------------------------------------------------
  63:         return n in self.graph
  64:     
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
- 67:         return self.graph[n]
+ 67:         pass
  68:     
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
  71:         return n2 in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.21269 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/graph2/ts-3-5/test_3-5_0-5_173.py:23: TypeError: argument of type 'NoneType' is not iterable

   - [#  40] SDL graph2: 
--------------------------------------------------------------------------------
  67:         return self.graph[n]
  68:     
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
- 71:         return n2 in self.neighbors(n1)
+ 71:         pass
--------------------------------------------------------------------------------
[0.20653 s] killed by ts-3-5/test_3-5_0-5_173.py::test_adjacent

empty_graph = <graph2.Graph object at 0x7074096b4eb0>

    def test_adjacent(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       assert empty_graph.adjacent('A', 'B') == True
E       AssertionError

ts-3-5/test_3-5_0-5_173.py:51: AssertionError
   - [#  41] SVD graph2: 
--------------------------------------------------------------------------------
  24:     """
  25:     
  26:     def __init__(self, data=None):
  27:         '''Initialize graph.'''
- 28:         self.graph = {}
+ 28:         graph = {}
  29:         if data:
  30:             for i in data:
  31:                 self.add_node(i)
  32:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  42] SVD graph2: 
--------------------------------------------------------------------------------
  27:         '''Initialize graph.'''
  28:         self.graph = {}
  29:         if data:
  30:             for i in data:
- 31:                 self.add_node(i)
+ 31:                 add_node(i)
  32:     
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
--------------------------------------------------------------------------------
[0.19347 s] survived
   - [#  43] SVD graph2: 
--------------------------------------------------------------------------------
  31:                 self.add_node(i)
  32:     
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
- 35:         return list(self.graph.keys())
+ 35:         return list(graph.keys())
  36:     
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
  39:         return [edge for edges in self.graph.values() for edge in edges]
--------------------------------------------------------------------------------
[0.22236 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_node

empty_graph = <graph2.Graph object at 0x7074096d4f40>

    def test_add_node(empty_graph):
        empty_graph.add_node('A')
>       assert 'A' in empty_graph.nodes()

ts-3-5/test_3-5_0-5_173.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x7074096d4f40>

>   ???
E   NameError: name 'graph' is not defined

graph2:35: NameError
   - [#  44] SVD graph2: 
--------------------------------------------------------------------------------
  35:         return list(self.graph.keys())
  36:     
  37:     def edges(self):
  38:         '''Return a list of all edges in the graph.'''
- 39:         return [edge for edges in self.graph.values() for edge in edges]
+ 39:         return [edge for edges in graph.values() for edge in edges]
  40:     
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
  43:         self.graph.setdefault(n, set())
--------------------------------------------------------------------------------
[0.17800 s] survived
   - [#  45] SVD graph2: 
--------------------------------------------------------------------------------
  39:         return [edge for edges in self.graph.values() for edge in edges]
  40:     
  41:     def add_node(self, n):
  42:         '''Add a new node to the graph.'''
- 43:         self.graph.setdefault(n, set())
+ 43:         graph.setdefault(n, set())
  44:     
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
--------------------------------------------------------------------------------
[0.20816 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_node

empty_graph = <graph2.Graph object at 0x70740995da80>

    def test_add_node(empty_graph):
>       empty_graph.add_node('A')

ts-3-5/test_3-5_0-5_173.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x70740995da80>, n = 'A'

>   ???
E   NameError: name 'graph' is not defined

graph2:43: NameError
   - [#  46] SVD graph2: 
--------------------------------------------------------------------------------
  43:         self.graph.setdefault(n, set())
  44:     
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
- 47:         self.graph.setdefault(n1, set([n2]))
+ 47:         graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
  49:         self.graph[n1].add(n2)
  50:     
  51:     def del_node(self, n):
--------------------------------------------------------------------------------
[0.21078 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x7074098f41f0>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
>       empty_graph.add_edge('A', 'B')

ts-3-5/test_3-5_0-5_173.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x7074098f41f0>, n1 = 'A', n2 = 'B'

>   ???
E   NameError: name 'graph' is not defined

graph2:47: NameError
   - [#  47] SVD graph2: 
--------------------------------------------------------------------------------
  44:     
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
- 48:         self.graph.setdefault(n2, set())
+ 48:         graph.setdefault(n2, set())
  49:         self.graph[n1].add(n2)
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
--------------------------------------------------------------------------------
[0.20983 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x7074096d44c0>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
>       empty_graph.add_edge('A', 'B')

ts-3-5/test_3-5_0-5_173.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x7074096d44c0>, n1 = 'A', n2 = 'B'

>   ???
E   NameError: name 'graph' is not defined

graph2:48: NameError
   - [#  48] SVD graph2: 
--------------------------------------------------------------------------------
  45:     def add_edge(self, n1, n2):
  46:         '''Add new edge to the graph.'''
  47:         self.graph.setdefault(n1, set([n2]))
  48:         self.graph.setdefault(n2, set())
- 49:         self.graph[n1].add(n2)
+ 49:         graph[n1].add(n2)
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
--------------------------------------------------------------------------------
[0.20782 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x707409a95150>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
>       empty_graph.add_edge('A', 'B')

ts-3-5/test_3-5_0-5_173.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x707409a95150>, n1 = 'A', n2 = 'B'

>   ???
E   NameError: name 'graph' is not defined

graph2:49: NameError
   - [#  49] SVD graph2: 
--------------------------------------------------------------------------------
  49:         self.graph[n1].add(n2)
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
- 53:         del self.graph[n]
+ 53:         del graph[n]
  54:         for k in self.graph:
  55:             self.graph[k].discard(n)
  56:     
  57:     def del_edge(self, n1, n2):
--------------------------------------------------------------------------------
[0.21647 s] killed by ts-3-5/test_3-5_0-5_173.py::test_del_node

empty_graph = <graph2.Graph object at 0x707409a94520>

    def test_del_node(empty_graph):
        empty_graph.add_node('A')
>       empty_graph.del_node('A')

ts-3-5/test_3-5_0-5_173.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x707409a94520>, n = 'A'

>   ???
E   NameError: name 'graph' is not defined

graph2:53: NameError
   - [#  50] SVD graph2: 
--------------------------------------------------------------------------------
  50:     
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
- 54:         for k in self.graph:
+ 54:         for k in graph:
  55:             self.graph[k].discard(n)
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
--------------------------------------------------------------------------------
[0.20432 s] killed by ts-3-5/test_3-5_0-5_173.py::test_del_node

empty_graph = <graph2.Graph object at 0x7074098f4b20>

    def test_del_node(empty_graph):
        empty_graph.add_node('A')
>       empty_graph.del_node('A')

ts-3-5/test_3-5_0-5_173.py:27: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x7074098f4b20>, n = 'A'

>   ???
E   NameError: name 'graph' is not defined

graph2:54: NameError
   - [#  51] SVD graph2: 
--------------------------------------------------------------------------------
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
  54:         for k in self.graph:
- 55:             self.graph[k].discard(n)
+ 55:             graph[k].discard(n)
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
--------------------------------------------------------------------------------
[0.20066 s] survived
   - [#  52] SVD graph2: 
--------------------------------------------------------------------------------
  55:             self.graph[k].discard(n)
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
- 59:         self.graph[n1].remove(n2)
+ 59:         graph[n1].remove(n2)
  60:     
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
  63:         return n in self.graph
--------------------------------------------------------------------------------
[0.20379 s] killed by ts-3-5/test_3-5_0-5_173.py::test_del_edge

empty_graph = <graph2.Graph object at 0x707409a97190>

    def test_del_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       empty_graph.del_edge('A', 'B')

ts-3-5/test_3-5_0-5_173.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x707409a97190>, n1 = 'A', n2 = 'B'

>   ???
E   NameError: name 'graph' is not defined

graph2:59: NameError
   - [#  53] SVD graph2: 
--------------------------------------------------------------------------------
  59:         self.graph[n1].remove(n2)
  60:     
  61:     def has_node(self, n):
  62:         """Return boolean if 'n' is in the graph."""
- 63:         return n in self.graph
+ 63:         return n in graph
  64:     
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
  67:         return self.graph[n]
--------------------------------------------------------------------------------
[0.22216 s] killed by ts-3-5/test_3-5_0-5_173.py::test_has_node

empty_graph = <graph2.Graph object at 0x70740966f7f0>

    def test_has_node(empty_graph):
        empty_graph.add_node('A')
>       assert empty_graph.has_node('A') == True

ts-3-5/test_3-5_0-5_173.py:39: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x70740966f7f0>, n = 'A'

>   ???
E   NameError: name 'graph' is not defined

graph2:63: NameError
   - [#  54] SVD graph2: 
--------------------------------------------------------------------------------
  63:         return n in self.graph
  64:     
  65:     def neighbors(self, n):
  66:         '''Return the list of all nodes connected to n by edges.'''
- 67:         return self.graph[n]
+ 67:         return graph[n]
  68:     
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
  71:         return n2 in self.neighbors(n1)
--------------------------------------------------------------------------------
[0.21185 s] killed by ts-3-5/test_3-5_0-5_173.py::test_add_edge

empty_graph = <graph2.Graph object at 0x7074098f61d0>

    def test_add_edge(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       assert 'B' in empty_graph.neighbors('A')

ts-3-5/test_3-5_0-5_173.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x7074098f61d0>, n = 'A'

>   ???
E   NameError: name 'graph' is not defined

graph2:67: NameError
   - [#  55] SVD graph2: 
--------------------------------------------------------------------------------
  67:         return self.graph[n]
  68:     
  69:     def adjacent(self, n1, n2):
  70:         '''Return boolean if there is an edge connecting n1 and n2.'''
- 71:         return n2 in self.neighbors(n1)
+ 71:         return n2 in neighbors(n1)
--------------------------------------------------------------------------------
[0.21360 s] killed by ts-3-5/test_3-5_0-5_173.py::test_adjacent

empty_graph = <graph2.Graph object at 0x7074096d4880>

    def test_adjacent(empty_graph):
        empty_graph.add_node('A')
        empty_graph.add_node('B')
        empty_graph.add_edge('A', 'B')
>       assert empty_graph.adjacent('A', 'B') == True

ts-3-5/test_3-5_0-5_173.py:51: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <graph2.Graph object at 0x7074096d4880>, n1 = 'A', n2 = 'B'

>   ???
E   NameError: name 'neighbors' is not defined

graph2:71: NameError
   - [#  56] ZIL graph2: 
--------------------------------------------------------------------------------
  27:         '''Initialize graph.'''
  28:         self.graph = {}
  29:         if data:
  30:             for i in data:
- 31:                 self.add_node(i)
+ 31:                 break
  32:     
  33:     def nodes(self):
  34:         '''Return a list of all nodes in the graph.'''
  35:         return list(self.graph.keys())
--------------------------------------------------------------------------------
[0.19440 s] survived
   - [#  57] ZIL graph2: 
--------------------------------------------------------------------------------
  51:     def del_node(self, n):
  52:         """Delete the node 'n' from the graph."""
  53:         del self.graph[n]
  54:         for k in self.graph:
- 55:             self.graph[k].discard(n)
+ 55:             break
  56:     
  57:     def del_edge(self, n1, n2):
  58:         '''Delete the edge connecting n1 and n2.'''
  59:         self.graph[n1].remove(n2)
--------------------------------------------------------------------------------
[0.18498 s] survived
[*] Mutation score [13.27642 s]: 60.5%
   - all: 57
   - killed: 26 (45.6%)
   - survived: 17 (29.8%)
   - incompetent: 14 (24.6%)
   - timeout: 0 (0.0%)
