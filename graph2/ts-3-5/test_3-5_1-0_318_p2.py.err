import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

import pytest

@pytest.fixture
def empty_graph():
    return Graph()

def test_init():
    data = [1, 2, 3]
    g = Graph(data)
    assert g.nodes() == data

def test_nodes(empty_graph):
    assert empty_graph.nodes() == []

def test_edges(empty_graph):
    assert empty_graph.edges() == []

def test_add_node(empty_graph):
    empty_graph.add_node(1)
    assert empty_graph.nodes() == [1]

    empty_graph.add_node(2)
    assert empty_graph.nodes() == [1, 2]

def test_add_edge(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_del_node(empty_graph):
    empty_graph.add_node(1)
    empty_graph.del_node(1)
    assert empty_graph.nodes() == []

def test_del_edge(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    empty_graph.del_edge(1, 2)
    assert empty_graph.edges() == []

def test_has_node(empty_graph):
    empty_graph.add_node(1)
    assert empty_graph.has_node(1) == True
    assert empty_graph.has_node(2) == False

def test_neighbors(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.neighbors(1) == {2}

def test_adjacent(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.adjacent(1, 2) == True
    assert empty_graph.adjacent(2, 1) == False