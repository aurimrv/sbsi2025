import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def initialized_graph():
    return Graph([1, 2, 3])

def test_nodes_empty_graph(empty_graph):
    assert empty_graph.nodes() == []

def test_edges_empty_graph(empty_graph):
    assert empty_graph.edges() == []

def test_add_node(empty_graph):
    empty_graph.add_node(1)
    assert empty_graph.nodes() == [1]

def test_add_node_duplicate(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(1)
    assert empty_graph.nodes() == [1]

def test_add_edge(empty_graph):
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_add_edge_existing_nodes(empty_graph):
    empty_graph.add_node(1)
    empty_graph.add_node(2)
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_del_node(initialized_graph):
    initialized_graph.del_node(1)
    assert initialized_graph.nodes() == [2, 3]

def test_del_node_not_exist(initialized_graph):
    with pytest.raises(KeyError):
        initialized_graph.del_node(4)

def test_del_edge(initialized_graph):
    initialized_graph.del_edge(1, 2)
    assert initialized_graph.edges() == []

def test_del_edge_not_exist(initialized_graph):
    with pytest.raises(KeyError):
        initialized_graph.del_edge(1, 4)

def test_has_node(initialized_graph):
    assert initialized_graph.has_node(1)

def test_neighbors(initialized_graph):
    assert initialized_graph.neighbors(1) == set([])

def test_adjacent(initialized_graph):
    assert initialized_graph.adjacent(1, 2) == False

def test_adjacent_true(initialized_graph):
    initialized_graph.add_edge(1, 2)
    assert initialized_graph.adjacent(1, 2) == True