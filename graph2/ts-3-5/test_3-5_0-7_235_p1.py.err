import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def graph_instance():
    graph = Graph()
    return graph

def test_add_node(graph_instance):
    graph_instance.add_node('A')
    assert 'A' in graph_instance.nodes()

def test_add_edge(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    assert ('A', 'B') in graph_instance.edges()

def test_del_node(graph_instance):
    graph_instance.add_node('A')
    graph_instance.del_node('A')
    assert 'A' not in graph_instance.nodes()

def test_del_edge(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    graph_instance.del_edge('A', 'B')
    assert ('A', 'B') not in graph_instance.edges()

def test_has_node(graph_instance):
    graph_instance.add_node('A')
    assert graph_instance.has_node('A') == True

def test_neighbors(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    assert 'B' in graph_instance.neighbors('A')

def test_adjacent(graph_instance):
    graph_instance.add_node('A')
    graph_instance.add_node('B')
    graph_instance.add_edge('A', 'B')
    assert graph_instance.adjacent('A', 'B') == True