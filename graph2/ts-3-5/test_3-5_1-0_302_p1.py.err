import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def sample_graph():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    return g

def test_nodes(sample_graph):
    assert sample_graph.nodes() == [1, 2]

def test_edges(sample_graph):
    assert sample_graph.edges() == [(1, 2)]

def test_add_node():
    g = Graph()
    g.add_node(1)
    assert g.nodes() == [1]

def test_add_edge():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    assert g.edges() == [(1, 2)]

def test_del_node():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    g.del_node(1)
    assert g.nodes() == [2]
    assert g.edges() == []

def test_del_edge():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_edge(1, 2)
    g.del_edge(1, 2)
    assert g.edges() == []

def test_has_node(sample_graph):
    assert sample_graph.has_node(1) == True
    assert sample_graph.has_node(3) == False

def test_neighbors(sample_graph):
    assert sample_graph.neighbors(1) == {2}

def test_adjacent(sample_graph):
    assert sample_graph.adjacent(1, 2) == True
    assert sample_graph.adjacent(2, 1) == False