import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def filled_graph():
    data = ['A', 'B', 'C']
    return Graph(data)

def test_nodes_method(empty_graph, filled_graph):
    nodes_empty = empty_graph.nodes()
    assert nodes_empty == []

    nodes_filled = filled_graph.nodes()
    assert nodes_filled == ['A', 'B', 'C']

def test_edges_method(empty_graph, filled_graph):
    edges_empty = empty_graph.edges()
    assert edges_empty == []

    filled_graph.add_edge('A', 'B')
    filled_graph.add_edge('B', 'C')
    edges_filled = filled_graph.edges()
    assert ('A', 'B') in edges_filled
    assert ('B', 'C') in edges_filled

def test_add_node_method(empty_graph, filled_graph):
    empty_graph.add_node('X')
    nodes_empty = empty_graph.nodes()
    assert 'X' in nodes_empty

    filled_graph.add_node('D')
    nodes_filled = filled_graph.nodes()
    assert 'D' in nodes_filled

def test_add_edge_method(filled_graph):
    filled_graph.add_edge('A', 'C')
    assert filled_graph.edges() == [('A', 'B'), ('B', 'C'), ('A', 'C')]

def test_del_node_method(filled_graph):
    filled_graph.del_node('B')
    assert 'B' not in filled_graph.nodes()
    assert ('A', 'B') not in filled_graph.edges()
    assert ('B', 'C') not in filled_graph.edges()

def test_del_edge_method(filled_graph):
    filled_graph.del_edge('A', 'B')
    assert ('A', 'B') not in filled_graph.edges()

def test_has_node_method(filled_graph):
    assert filled_graph.has_node('A') == True
    assert filled_graph.has_node('X') == False

def test_neighbors_method(filled_graph):
    filled_graph.add_edge('A', 'C')
    assert filled_graph.neighbors('A') == set(['B', 'C'])

def test_adjacent_method(filled_graph):
    assert filled_graph.adjacent('A', 'B') == True
    assert filled_graph.adjacent('A', 'C') == True
    assert filled_graph.adjacent('C', 'A') == False