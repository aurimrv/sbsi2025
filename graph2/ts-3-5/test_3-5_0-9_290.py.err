import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def graph():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_node(3)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

def test_nodes(graph):
    assert len(graph.nodes()) == 3
    assert 1 in graph.nodes()
    assert 2 in graph.nodes()
    assert 3 in graph.nodes()

def test_edges(graph):
    assert len(graph.edges()) == 2
    assert (1, 2) in graph.edges()
    assert (2, 3) in graph.edges()

def test_add_node(graph):
    graph.add_node(4)
    assert len(graph.nodes()) == 4
    assert 4 in graph.nodes()

def test_add_edge(graph):
    graph.add_edge(1, 3)
    assert (1, 3) in graph.edges()
    assert graph.neighbors(1) == {2, 3}

def test_del_node(graph):
    graph.del_node(2)
    assert len(graph.nodes()) == 2
    assert 2 not in graph.nodes()
    assert {1} == graph.neighbors(3)

def test_del_edge(graph):
    graph.del_edge(1, 2)
    assert (1, 2) not in graph.edges()
    assert 2 not in graph.neighbors(1)

def test_has_node(graph):
    assert graph.has_node(1)
    assert not graph.has_node(5)

def test_neighbors(graph):
    assert graph.neighbors(2) == {1, 3}
    with pytest.raises(KeyError):
        graph.neighbors(5)

def test_adjacent(graph):
    assert graph.adjacent(1, 2)
    assert not graph.adjacent(1, 3)
    with pytest.raises(KeyError):
        graph.adjacent(1, 5)