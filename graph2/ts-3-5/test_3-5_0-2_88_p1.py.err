import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

@pytest.fixture
def graph_with_data():
    return Graph([1, 2, 3])

def test_nodes_empty_graph(empty_graph):
    assert empty_graph.nodes() == []

def test_nodes_graph_with_data(graph_with_data):
    assert set(graph_with_data.nodes()) == {1, 2, 3}

def test_edges_empty_graph(empty_graph):
    assert empty_graph.edges() == []

def test_edges_graph_with_data(graph_with_data):
    assert graph_with_data.edges() == []

def test_add_node(empty_graph):
    empty_graph.add_node(4)
    assert set(empty_graph.nodes()) == {4}

def test_add_edge(empty_graph):
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_del_node(graph_with_data):
    graph_with_data.del_node(2)
    assert set(graph_with_data.nodes()) == {1, 3}

def test_del_edge(graph_with_data):
    graph_with_data.add_edge(1, 2)
    graph_with_data.del_edge(1, 2)
    assert graph_with_data.edges() == []

def test_has_node(graph_with_data):
    assert graph_with_data.has_node(2) == True
    assert graph_with_data.has_node(4) == False

def test_neighbors(graph_with_data):
    graph_with_data.add_edge(1, 2)
    assert graph_with_data.neighbors(1) == {2}

def test_adjacent(graph_with_data):
    graph_with_data.add_edge(1, 2)
    assert graph_with_data.adjacent(1, 2) == True
    assert graph_with_data.adjacent(2, 1) == False