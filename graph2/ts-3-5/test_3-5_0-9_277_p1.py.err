import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def sample_graph():
    g = Graph()
    g.add_node(1)
    g.add_node(2)
    g.add_node(3)
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

def test_nodes_method(sample_graph):
    assert sample_graph.nodes() == [1, 2, 3]

def test_edges_method(sample_graph):
    assert sample_graph.edges() == [(1, 2), (2, 3)]

def test_add_node_method(sample_graph):
    sample_graph.add_node(4)
    assert sample_graph.nodes() == [1, 2, 3, 4]

def test_add_edge_method(sample_graph):
    sample_graph.add_edge(1, 3)
    assert sample_graph.edges() == [(1, 2), (2, 3), (1, 3)]

def test_del_node_method(sample_graph):
    sample_graph.del_node(2)
    assert sample_graph.nodes() == [1, 3]
    with pytest.raises(KeyError):
        sample_graph.del_node(5)

def test_del_edge_method(sample_graph):
    sample_graph.del_edge(1, 2)
    assert sample_graph.edges() == [(2, 3)]
    with pytest.raises(KeyError):
        sample_graph.del_edge(1, 3)

def test_has_node_method(sample_graph):
    assert sample_graph.has_node(1)
    assert not sample_graph.has_node(4)

def test_neighbors_method(sample_graph):
    assert sample_graph.neighbors(2) == {1, 3}
    with pytest.raises(KeyError):
        sample_graph.neighbors(4)

def test_adjacent_method(sample_graph):
    assert sample_graph.adjacent(1, 2)
    assert not sample_graph.adjacent(1, 3)
    with pytest.raises(KeyError):
        sample_graph.adjacent(1, 4)