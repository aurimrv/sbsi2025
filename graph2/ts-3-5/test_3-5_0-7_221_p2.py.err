import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

import graph2

@pytest.fixture
def empty_graph():
    return graph2.Graph()

@pytest.fixture
def sample_graph():
    g = graph2.Graph([1, 2, 3])
    g.add_edge(1, 2)
    g.add_edge(2, 3)
    return g

def test_nodes_method_empty_graph(empty_graph):
    assert empty_graph.nodes() == []

def test_nodes_method_sample_graph(sample_graph):
    assert sample_graph.nodes() == [1, 2, 3]

def test_edges_method_empty_graph(empty_graph):
    assert empty_graph.edges() == []

def test_edges_method_sample_graph(sample_graph):
    assert sample_graph.edges() == [(1, 2), (2, 3)]

def test_add_node_method_empty_graph(empty_graph):
    empty_graph.add_node(1)
    assert empty_graph.nodes() == [1]

def test_add_node_method_sample_graph(sample_graph):
    sample_graph.add_node(4)
    assert sample_graph.nodes() == [1, 2, 3, 4]

def test_add_edge_method(empty_graph):
    empty_graph.add_edge(1, 2)
    assert empty_graph.edges() == [(1, 2)]

def test_del_node_method(sample_graph):
    sample_graph.del_node(2)
    assert sample_graph.nodes() == [1, 3]

def test_del_edge_method(sample_graph):
    sample_graph.del_edge(2, 3)
    assert sample_graph.edges() == [(1, 2)]

def test_has_node_method_empty_graph(empty_graph):
    assert not empty_graph.has_node(1)

def test_has_node_method_sample_graph(sample_graph):
    assert sample_graph.has_node(2)

def test_neighbors_method_empty_graph(empty_graph):
    with pytest.raises(KeyError):
        empty_graph.neighbors(1)

def test_neighbors_method_sample_graph(sample_graph):
    assert sample_graph.neighbors(2) == {1, 3}

def test_adjacent_method_empty_graph(empty_graph):
    with pytest.raises(KeyError):
        empty_graph.adjacent(1, 2)

def test_adjacent_method_sample_graph(sample_graph):
    assert sample_graph.adjacent(1, 2)
    assert not sample_graph.adjacent(1, 3)