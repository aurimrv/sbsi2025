import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def empty_graph():
    return Graph()

def test_add_node(empty_graph):
    empty_graph.add_node('A')
    assert 'A' in empty_graph.nodes()

def test_nodes_method():
    graph = Graph(['A', 'B', 'C'])
    assert graph.nodes() == ['A', 'B', 'C']

def test_add_edge():
    graph = Graph()
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    assert graph.edges() == [('A', 'B')]

def test_del_node():
    graph = Graph(['A', 'B', 'C'])
    graph.del_node('A')
    assert 'A' not in graph.nodes()

def test_del_edge():
    graph = Graph()
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    graph.del_edge('A', 'B')
    assert graph.edges() == []

def test_has_node():
    graph = Graph(['A', 'B', 'C'])
    assert graph.has_node('B') == True

def test_neighbors():
    graph = Graph()
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    assert graph.neighbors('A') == {'B'}

def test_adjacent():
    graph = Graph()
    graph.add_node('A')
    graph.add_node('B')
    graph.add_edge('A', 'B')
    assert graph.adjacent('A', 'B') == True