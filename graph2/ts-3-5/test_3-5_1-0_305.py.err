import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from graph2 import Graph

@pytest.fixture
def sample_graph():
    g = Graph()
    g.add_node('A')
    g.add_node('B')
    g.add_node('C')
    g.add_edge('A', 'B')
    g.add_edge('A', 'C')
    return g

def test_nodes(sample_graph):
    assert sample_graph.nodes() == ['A', 'B', 'C']

def test_edges(sample_graph):
    assert len(sample_graph.edges()) == 2

def test_add_node(sample_graph):
    sample_graph.add_node('D')
    assert 'D' in sample_graph.nodes()

def test_add_edge(sample_graph):
    sample_graph.add_edge('B', 'C')
    assert sample_graph.edges() == [('A', 'B'), ('A', 'C'), ('B', 'C')]

def test_del_node(sample_graph):
    sample_graph.del_node('B')
    assert 'B' not in sample_graph.nodes()
    assert ('A', 'B') not in sample_graph.edges()

def test_del_edge(sample_graph):
    sample_graph.del_edge('A', 'C')
    assert ('A', 'C') not in sample_graph.edges()

def test_has_node(sample_graph):
    assert sample_graph.has_node('A') == True
    assert sample_graph.has_node('D') == False

def test_neighbors(sample_graph):
    assert sample_graph.neighbors('A') == {'B', 'C'}

def test_adjacent(sample_graph):
    assert sample_graph.adjacent('A', 'B') == True