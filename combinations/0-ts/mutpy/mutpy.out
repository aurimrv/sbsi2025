[34m[*][0m Start mutation process:
[36m   -[0m targets: combinations.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 2 tests passed:
[36m   -[0m test_combinations [0.16146 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
[34m-  9:         for j in range(i + 1, len(string)):[0m
[32m+  9:         for j in range(i - 1, len(string)):[0m
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.12068 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#   2] AOR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+ 10:             output.append(string[i:j - 1])[0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.12924 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#   3] AOR combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
[34m- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]][0m
[32m+ 41:             temp = temp - [output + letter for letter in phone_mapper[string[i]]][0m
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.10041 s] [36mincompetent[0m

TypeError: combinations:41: TypeError: unsupported operand type(s) for -: 'list' and 'list'

[36m   -[0m [#   4] AOR combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
[34m- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]][0m
[32m+ 41:             temp = temp + [output - letter for letter in phone_mapper[string[i]]][0m
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.12643 s] [36mincompetent[0m

TypeError: combinations:41: TypeError: unsupported operand type(s) for -: 'str' and 'str'

[36m   -[0m [#   5] CRP combinations: 
--------------------------------------------------------------------------------
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
   6:     output = []
[34m-  7:     for i in range(0, len(string)):[0m
[32m+  7:     for i in range(1, len(string)):[0m
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
--------------------------------------------------------------------------------
[0.11937 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#   6] CRP combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
[34m-  9:         for j in range(i + 1, len(string)):[0m
[32m+  9:         for j in range(i + 2, len(string)):[0m
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.09674 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#   7] CRP combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+ 10:             output.append(string[i:j + 2])[0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.12646 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#   8] CRP combinations: 
--------------------------------------------------------------------------------
  21:     full length using all input numbers in the string.
  22: 
  23:     """
  24:     phone_mapper = {\
[34m- 25:         '1': [], \[0m
[32m+ 25:         'mutpy': [], \[0m
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
--------------------------------------------------------------------------------
[0.09994 s] [31msurvived[0m
[36m   -[0m [#   9] CRP combinations: 
--------------------------------------------------------------------------------
  21:     full length using all input numbers in the string.
  22: 
  23:     """
  24:     phone_mapper = {\
[34m- 25:         '1': [], \[0m
[32m+ 25:         '': [], \[0m
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
--------------------------------------------------------------------------------
[0.09854 s] [31msurvived[0m
[36m   -[0m [#  10] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         'mutpy': ['a', 'b', 'c'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.11588 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   KeyError: '2'

combinations:41: KeyError
[36m   -[0m [#  11] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '': ['a', 'b', 'c'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.12923 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   KeyError: '2'

combinations:41: KeyError
[36m   -[0m [#  12] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         'mutpy': ['d', 'e', 'f'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.10002 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   KeyError: '3'

combinations:36: KeyError
[36m   -[0m [#  13] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '': ['d', 'e', 'f'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.12596 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   KeyError: '3'

combinations:36: KeyError
[36m   -[0m [#  14] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         'mutpy': ['g', 'h', 'i'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.10725 s] [31msurvived[0m
[36m   -[0m [#  15] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '': ['g', 'h', 'i'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.10906 s] [31msurvived[0m
[36m   -[0m [#  16] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         'mutpy': ['j', 'k', 'l'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10687 s] [31msurvived[0m
[36m   -[0m [#  17] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '': ['j', 'k', 'l'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.11050 s] [31msurvived[0m
[36m   -[0m [#  18] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         'mutpy': ['m', 'n', 'o'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.07677 s] [31msurvived[0m
[36m   -[0m [#  19] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '': ['m', 'n', 'o'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.08424 s] [31msurvived[0m
[36m   -[0m [#  20] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         'mutpy': ['p', 'q', 'r', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10123 s] [31msurvived[0m
[36m   -[0m [#  21] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '': ['p', 'q', 'r', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10464 s] [31msurvived[0m
[36m   -[0m [#  22] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         'mutpy': ['t', 'u', 'v'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.10242 s] [31msurvived[0m
[36m   -[0m [#  23] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '': ['t', 'u', 'v'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.10748 s] [31msurvived[0m
[36m   -[0m [#  24] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         'mutpy': ['w', 'x', 'y', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.10714 s] [31msurvived[0m
[36m   -[0m [#  25] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '': ['w', 'x', 'y', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.12568 s] [31msurvived[0m
[36m   -[0m [#  26] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '2': ['mutpy', 'b', 'c'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.14763 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  27] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '2': ['', 'b', 'c'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.11663 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  28] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '2': ['a', 'mutpy', 'c'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.12270 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  29] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '2': ['a', '', 'c'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.09876 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  30] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '2': ['a', 'b', 'mutpy'], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.09957 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  31] CRP combinations: 
--------------------------------------------------------------------------------
  22: 
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[32m+ 26:         '2': ['a', 'b', ''], \[0m
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
--------------------------------------------------------------------------------
[0.10508 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  32] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '3': ['mutpy', 'e', 'f'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.09926 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  33] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '3': ['', 'e', 'f'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.12423 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  34] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '3': ['d', 'mutpy', 'f'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.12202 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  35] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '3': ['d', '', 'f'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.11903 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  36] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '3': ['d', 'e', 'mutpy'], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.12575 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  37] CRP combinations: 
--------------------------------------------------------------------------------
  23:     """
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[32m+ 27:         '3': ['d', 'e', ''], \[0m
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
--------------------------------------------------------------------------------
[0.12730 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  38] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '4': ['mutpy', 'h', 'i'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.10851 s] [31msurvived[0m
[36m   -[0m [#  39] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '4': ['', 'h', 'i'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.09955 s] [31msurvived[0m
[36m   -[0m [#  40] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '4': ['g', 'mutpy', 'i'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.09785 s] [31msurvived[0m
[36m   -[0m [#  41] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '4': ['g', '', 'i'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.10831 s] [31msurvived[0m
[36m   -[0m [#  42] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '4': ['g', 'h', 'mutpy'], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.10529 s] [31msurvived[0m
[36m   -[0m [#  43] CRP combinations: 
--------------------------------------------------------------------------------
  24:     phone_mapper = {\
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[32m+ 28:         '4': ['g', 'h', ''], \[0m
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
--------------------------------------------------------------------------------
[0.10773 s] [31msurvived[0m
[36m   -[0m [#  44] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '5': ['mutpy', 'k', 'l'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10024 s] [31msurvived[0m
[36m   -[0m [#  45] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '5': ['', 'k', 'l'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10778 s] [31msurvived[0m
[36m   -[0m [#  46] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '5': ['j', 'mutpy', 'l'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10077 s] [31msurvived[0m
[36m   -[0m [#  47] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '5': ['j', '', 'l'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10575 s] [31msurvived[0m
[36m   -[0m [#  48] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '5': ['j', 'k', 'mutpy'], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10723 s] [31msurvived[0m
[36m   -[0m [#  49] CRP combinations: 
--------------------------------------------------------------------------------
  25:         '1': [], \
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[32m+ 29:         '5': ['j', 'k', ''], \[0m
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
--------------------------------------------------------------------------------
[0.10686 s] [31msurvived[0m
[36m   -[0m [#  50] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '6': ['mutpy', 'n', 'o'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.09903 s] [31msurvived[0m
[36m   -[0m [#  51] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '6': ['', 'n', 'o'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.09987 s] [31msurvived[0m
[36m   -[0m [#  52] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '6': ['m', 'mutpy', 'o'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.07852 s] [31msurvived[0m
[36m   -[0m [#  53] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '6': ['m', '', 'o'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.13215 s] [31msurvived[0m
[36m   -[0m [#  54] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '6': ['m', 'n', 'mutpy'], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.13275 s] [31msurvived[0m
[36m   -[0m [#  55] CRP combinations: 
--------------------------------------------------------------------------------
  26:         '2': ['a', 'b', 'c'], \
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[32m+ 30:         '6': ['m', 'n', ''], \[0m
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
--------------------------------------------------------------------------------
[0.11872 s] [31msurvived[0m
[36m   -[0m [#  56] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['mutpy', 'q', 'r', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10749 s] [31msurvived[0m
[36m   -[0m [#  57] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['', 'q', 'r', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.07950 s] [31msurvived[0m
[36m   -[0m [#  58] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['p', 'mutpy', 'r', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10675 s] [31msurvived[0m
[36m   -[0m [#  59] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['p', '', 'r', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10981 s] [31msurvived[0m
[36m   -[0m [#  60] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['p', 'q', 'mutpy', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10559 s] [31msurvived[0m
[36m   -[0m [#  61] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['p', 'q', '', 's'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.10743 s] [31msurvived[0m
[36m   -[0m [#  62] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['p', 'q', 'r', 'mutpy'], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.07888 s] [31msurvived[0m
[36m   -[0m [#  63] CRP combinations: 
--------------------------------------------------------------------------------
  27:         '3': ['d', 'e', 'f'], \
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[32m+ 31:         '7': ['p', 'q', 'r', ''], \[0m
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
--------------------------------------------------------------------------------
[0.08072 s] [31msurvived[0m
[36m   -[0m [#  64] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '8': ['mutpy', 'u', 'v'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.07958 s] [31msurvived[0m
[36m   -[0m [#  65] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '8': ['', 'u', 'v'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.08464 s] [31msurvived[0m
[36m   -[0m [#  66] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '8': ['t', 'mutpy', 'v'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.10811 s] [31msurvived[0m
[36m   -[0m [#  67] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '8': ['t', '', 'v'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.10823 s] [31msurvived[0m
[36m   -[0m [#  68] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '8': ['t', 'u', 'mutpy'], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.07723 s] [31msurvived[0m
[36m   -[0m [#  69] CRP combinations: 
--------------------------------------------------------------------------------
  28:         '4': ['g', 'h', 'i'], \
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[32m+ 32:         '8': ['t', 'u', ''], \[0m
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
--------------------------------------------------------------------------------
[0.10742 s] [31msurvived[0m
[36m   -[0m [#  70] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['mutpy', 'x', 'y', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.10558 s] [31msurvived[0m
[36m   -[0m [#  71] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['', 'x', 'y', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.09950 s] [31msurvived[0m
[36m   -[0m [#  72] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['w', 'mutpy', 'y', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.10599 s] [31msurvived[0m
[36m   -[0m [#  73] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['w', '', 'y', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.11093 s] [31msurvived[0m
[36m   -[0m [#  74] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['w', 'x', 'mutpy', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.10606 s] [31msurvived[0m
[36m   -[0m [#  75] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['w', 'x', '', 'z']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.10901 s] [31msurvived[0m
[36m   -[0m [#  76] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['w', 'x', 'y', 'mutpy']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.07984 s] [31msurvived[0m
[36m   -[0m [#  77] CRP combinations: 
--------------------------------------------------------------------------------
  29:         '5': ['j', 'k', 'l'], \
  30:         '6': ['m', 'n', 'o'], \
  31:         '7': ['p', 'q', 'r', 's'], \
  32:         '8': ['t', 'u', 'v'], \
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 33:         '9': ['w', 'x', 'y', '']}[0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.07998 s] [31msurvived[0m
[36m   -[0m [#  78] CRP combinations: 
--------------------------------------------------------------------------------
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
[34m- 36:     outputs = [letter for letter in phone_mapper[string[0]]][0m
[32m+ 36:     outputs = [letter for letter in phone_mapper[string[1]]][0m
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
--------------------------------------------------------------------------------
[0.12562 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  79] CRP combinations: 
--------------------------------------------------------------------------------
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
[34m- 38:     for i in range(1, len(string)):[0m
[32m+ 38:     for i in range(2, len(string)):[0m
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
--------------------------------------------------------------------------------
[0.12918 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  80] OIL combinations: 
--------------------------------------------------------------------------------
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
[34m- 11:     [0m
[32m+ 11:         break[0m
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
--------------------------------------------------------------------------------
[0.14303 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  81] OIL combinations: 
--------------------------------------------------------------------------------
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
[34m- 11:     [0m
[32m+ 11:             break[0m
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
--------------------------------------------------------------------------------
[0.14998 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  82] OIL combinations: 
--------------------------------------------------------------------------------
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
[34m- 43:     [0m
[32m+ 43:         break[0m
  44:     return outputs
--------------------------------------------------------------------------------
[0.10720 s] [31msurvived[0m
[36m   -[0m [#  83] OIL combinations: 
--------------------------------------------------------------------------------
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
[34m- 42:         outputs = temp[0m
[34m- 43:     [0m
[32m+ 42:             break[0m
[32m+ 43:         outputs = temp[0m
  44:     return outputs
--------------------------------------------------------------------------------
[0.12900 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  84] RIL combinations: 
--------------------------------------------------------------------------------
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
   6:     output = []
[34m-  7:     for i in range(0, len(string)):[0m
[32m+  7:     for i in reversed(range(0, len(string))):[0m
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
--------------------------------------------------------------------------------
[0.12724 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  85] RIL combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
[34m-  9:         for j in range(i + 1, len(string)):[0m
[32m+  9:         for j in reversed(range(i + 1, len(string))):[0m
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.09451 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  86] RIL combinations: 
--------------------------------------------------------------------------------
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
[34m- 38:     for i in range(1, len(string)):[0m
[32m+ 38:     for i in reversed(range(1, len(string))):[0m
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
--------------------------------------------------------------------------------
[0.11123 s] [31msurvived[0m
[36m   -[0m [#  87] RIL combinations: 
--------------------------------------------------------------------------------
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
[34m- 40:         for output in outputs:[0m
[32m+ 40:         for output in reversed(outputs):[0m
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.12591 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  88] SDL combinations: 
--------------------------------------------------------------------------------
   2:     '''
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
[34m-  6:     output = [][0m
[32m+  6:     pass[0m
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
--------------------------------------------------------------------------------
[0.12898 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']

0-ts/test_combinations.py:8: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = 'two'

>   ???
E   NameError: name 'output' is not defined

combinations:8: NameError
[36m   -[0m [#  89] SDL combinations: 
--------------------------------------------------------------------------------
   4: 
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
[34m-  8:         output.append(string[i])[0m
[32m+  8:         pass[0m
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
--------------------------------------------------------------------------------
[0.11914 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  90] SDL combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+ 10:             pass[0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.12309 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  91] SDL combinations: 
--------------------------------------------------------------------------------
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
[34m- 12:     return output[0m
[32m+ 12:     pass[0m
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
  16:     Find all permutations of phone numbers in an input of numbers.
--------------------------------------------------------------------------------
[0.12520 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  92] SDL combinations: 
--------------------------------------------------------------------------------
  20:     contain all combinations possible.  Only combinations that are
  21:     full length using all input numbers in the string.
  22: 
  23:     """
[34m- 24:     phone_mapper = {\[0m
[34m- 25:         '1': [], \[0m
[34m- 26:         '2': ['a', 'b', 'c'], \[0m
[34m- 27:         '3': ['d', 'e', 'f'], \[0m
[34m- 28:         '4': ['g', 'h', 'i'], \[0m
[34m- 29:         '5': ['j', 'k', 'l'], \[0m
[34m- 30:         '6': ['m', 'n', 'o'], \[0m
[34m- 31:         '7': ['p', 'q', 'r', 's'], \[0m
[34m- 32:         '8': ['t', 'u', 'v'], \[0m
[34m- 33:         '9': ['w', 'x', 'y', 'z']}[0m
[32m+ 24:     pass[0m
[32m+ 25:     [0m
[32m+ 26:     [0m
[32m+ 27:     [0m
[32m+ 28:     [0m
[32m+ 29:     [0m
[32m+ 30:     [0m
[32m+ 31:     [0m
[32m+ 32:     [0m
[32m+ 33:     [0m
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.13510 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   NameError: name 'phone_mapper' is not defined

combinations:36: NameError
[36m   -[0m [#  93] SDL combinations: 
--------------------------------------------------------------------------------
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
[34m- 36:     outputs = [letter for letter in phone_mapper[string[0]]][0m
[32m+ 36:     pass[0m
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
--------------------------------------------------------------------------------
[0.09821 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   UnboundLocalError: local variable 'outputs' referenced before assignment

combinations:40: UnboundLocalError
[36m   -[0m [#  94] SDL combinations: 
--------------------------------------------------------------------------------
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
[34m- 39:         temp = [][0m
[32m+ 39:         pass[0m
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
--------------------------------------------------------------------------------
[0.12483 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']

0-ts/test_combinations.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '32'

>   ???
E   UnboundLocalError: local variable 'temp' referenced before assignment

combinations:41: UnboundLocalError
[36m   -[0m [#  95] SDL combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
[34m- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]][0m
[32m+ 41:             pass[0m
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.12010 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  96] SDL combinations: 
--------------------------------------------------------------------------------
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
[34m- 42:         outputs = temp[0m
[32m+ 42:         pass[0m
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.12835 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  97] SDL combinations: 
--------------------------------------------------------------------------------
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
[34m- 44:     return outputs[0m
[32m+ 44:     pass[0m
--------------------------------------------------------------------------------
[0.12076 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [#  98] SIR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+ 10:             output.append(string[:j + 1])[0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.10238 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [#  99] SIR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+ 10:             output.append(string[i:])[0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.09663 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [# 100] ZIL combinations: 
--------------------------------------------------------------------------------
   4: 
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
[34m-  8:         output.append(string[i])[0m
[34m-  9:         for j in range(i + 1, len(string)):[0m
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+  8:         break[0m
[32m+  9:     [0m
[32m+ 10:     [0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.12621 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [# 101] ZIL combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
[34m- 10:             output.append(string[i:j + 1])[0m
[32m+ 10:             break[0m
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.12322 s] [32mkilled[0m by 0-ts/test_combinations.py::test_combinations

def test_combinations():
>       assert combinations_of_word('two') == ['t', 'tw', 'two', 'w', 'wo', 'o']
E       AssertionError

0-ts/test_combinations.py:8: AssertionError
[36m   -[0m [# 102] ZIL combinations: 
--------------------------------------------------------------------------------
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
[34m- 39:         temp = [][0m
[34m- 40:         for output in outputs:[0m
[34m- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]][0m
[34m- 42:         outputs = temp[0m
[32m+ 39:         break[0m
[32m+ 40:     [0m
[32m+ 41:     [0m
[32m+ 42:     [0m
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.10876 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[36m   -[0m [# 103] ZIL combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
[34m- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]][0m
[32m+ 41:             break[0m
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.12221 s] [32mkilled[0m by 0-ts/test_combinations.py::test_phone_combo_simple

def test_phone_combo_simple():
>       assert combinations_of_phone_input('32') == ['da', 'db', 'dc', 'ea', 'eb', 'ec', 'fa', 'fb', 'fc']
E       AssertionError

0-ts/test_combinations.py:5: AssertionError
[34m[*][0m Mutation score [16.31252 s]: [1m[34m44.6%[0m
[36m   -[0m all: 103
[36m   -[0m killed: 45 (43.7%)
[36m   -[0m survived: 56 (54.4%)
[36m   -[0m incompetent: 2 (1.9%)
[36m   -[0m timeout: 0 (0.0%)
