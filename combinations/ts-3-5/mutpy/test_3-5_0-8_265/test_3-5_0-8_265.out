[*] Start mutation process:
   - targets: combinations.py
   - tests: ts-3-5/test_3-5_0-8_265.py
[*] 6 tests passed:
   - test_3-5_0-8_265 [0.14762 s]
[*] Start mutants generation and execution:
   - [#   1] AOR combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
-  9:         for j in range(i + 1, len(string)):
+  9:         for j in range(i - 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.16359 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_single_character

def test_combinations_of_word_single_character():
>       assert combinations_of_word("a") == ["a"]
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:17: AssertionError
   - [#   2] AOR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             output.append(string[i:j - 1])
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.16909 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#   3] AOR combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             temp = temp - [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.16199 s] incompetent

TypeError: combinations:41: TypeError: unsupported operand type(s) for -: 'list' and 'list'

   - [#   4] AOR combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             temp = temp + [output - letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.16043 s] incompetent

TypeError: combinations:41: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   5] OIL combinations: 
--------------------------------------------------------------------------------
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
- 11:     
+ 11:         break
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
--------------------------------------------------------------------------------
[0.16318 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#   6] OIL combinations: 
--------------------------------------------------------------------------------
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
- 11:     
+ 11:             break
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
--------------------------------------------------------------------------------
[0.15626 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#   7] OIL combinations: 
--------------------------------------------------------------------------------
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
- 43:     
+ 43:         break
  44:     return outputs
--------------------------------------------------------------------------------
[0.15718 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_repeated_digits

def test_combinations_of_phone_input_repeated_digits():
>       assert combinations_of_phone_input("222") == ['aaa', 'aab', 'aac', 'aba', 'abb', 'abc', 'aca', 'acb', 'acc', 'baa', 'bab', 'bac', 'bba', 'bbb', 'bbc', 'bca', 'bcb', 'bcc', 'caa', 'cab', 'cac', 'cba', 'cbb', 'cbc', 'cca', 'ccb', 'ccc']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:31: AssertionError
   - [#   8] OIL combinations: 
--------------------------------------------------------------------------------
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
- 42:         outputs = temp
- 43:     
+ 42:             break
+ 43:         outputs = temp
  44:     return outputs
--------------------------------------------------------------------------------
[0.16609 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:28: AssertionError
   - [#   9] RIL combinations: 
--------------------------------------------------------------------------------
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
   6:     output = []
-  7:     for i in range(0, len(string)):
+  7:     for i in reversed(range(0, len(string))):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
--------------------------------------------------------------------------------
[0.15835 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#  10] RIL combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
-  9:         for j in range(i + 1, len(string)):
+  9:         for j in reversed(range(i + 1, len(string))):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.15917 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#  11] RIL combinations: 
--------------------------------------------------------------------------------
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
- 38:     for i in range(1, len(string)):
+ 38:     for i in reversed(range(1, len(string))):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
--------------------------------------------------------------------------------
[0.14296 s] survived
   - [#  12] RIL combinations: 
--------------------------------------------------------------------------------
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
- 40:         for output in outputs:
+ 40:         for output in reversed(outputs):
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.16692 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:28: AssertionError
   - [#  13] SDL combinations: 
--------------------------------------------------------------------------------
   2:     '''
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
-  6:     output = []
+  6:     pass
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
--------------------------------------------------------------------------------
[0.16037 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_empty_string

def test_combinations_of_word_empty_string():
>       assert combinations_of_word("") == []

ts-3-5/test_3-5_0-8_265.py:14: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = ''

>   ???
E   NameError: name 'output' is not defined

combinations:12: NameError
   - [#  14] SDL combinations: 
--------------------------------------------------------------------------------
   4: 
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
-  8:         output.append(string[i])
+  8:         pass
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
--------------------------------------------------------------------------------
[0.16334 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_single_character

def test_combinations_of_word_single_character():
>       assert combinations_of_word("a") == ["a"]
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:17: AssertionError
   - [#  15] SDL combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             pass
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.16632 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#  16] SDL combinations: 
--------------------------------------------------------------------------------
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
- 12:     return output
+ 12:     pass
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
  16:     Find all permutations of phone numbers in an input of numbers.
--------------------------------------------------------------------------------
[0.16120 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_empty_string

def test_combinations_of_word_empty_string():
>       assert combinations_of_word("") == []
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:14: AssertionError
   - [#  17] SDL combinations: 
--------------------------------------------------------------------------------
  20:     contain all combinations possible.  Only combinations that are
  21:     full length using all input numbers in the string.
  22: 
  23:     """
- 24:     phone_mapper = {\
- 25:         '1': [], \
- 26:         '2': ['a', 'b', 'c'], \
- 27:         '3': ['d', 'e', 'f'], \
- 28:         '4': ['g', 'h', 'i'], \
- 29:         '5': ['j', 'k', 'l'], \
- 30:         '6': ['m', 'n', 'o'], \
- 31:         '7': ['p', 'q', 'r', 's'], \
- 32:         '8': ['t', 'u', 'v'], \
- 33:         '9': ['w', 'x', 'y', 'z']}
+ 24:     pass
+ 25:     
+ 26:     
+ 27:     
+ 28:     
+ 29:     
+ 30:     
+ 31:     
+ 32:     
+ 33:     
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.16210 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_single_digit

def test_combinations_of_phone_input_single_digit():
>       assert combinations_of_phone_input("2") == ['a', 'b', 'c']

ts-3-5/test_3-5_0-8_265.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '2'

>   ???
E   NameError: name 'phone_mapper' is not defined

combinations:36: NameError
   - [#  18] SDL combinations: 
--------------------------------------------------------------------------------
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
- 36:     outputs = [letter for letter in phone_mapper[string[0]]]
+ 36:     pass
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
--------------------------------------------------------------------------------
[0.15570 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_single_digit

def test_combinations_of_phone_input_single_digit():
>       assert combinations_of_phone_input("2") == ['a', 'b', 'c']

ts-3-5/test_3-5_0-8_265.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '2'

>   ???
E   UnboundLocalError: local variable 'outputs' referenced before assignment

combinations:44: UnboundLocalError
   - [#  19] SDL combinations: 
--------------------------------------------------------------------------------
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
- 39:         temp = []
+ 39:         pass
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
--------------------------------------------------------------------------------
[0.15779 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']

ts-3-5/test_3-5_0-8_265.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '23'

>   ???
E   UnboundLocalError: local variable 'temp' referenced before assignment

combinations:41: UnboundLocalError
   - [#  20] SDL combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             pass
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.15473 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:28: AssertionError
   - [#  21] SDL combinations: 
--------------------------------------------------------------------------------
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
- 42:         outputs = temp
+ 42:         pass
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.16822 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:28: AssertionError
   - [#  22] SDL combinations: 
--------------------------------------------------------------------------------
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
- 44:     return outputs
+ 44:     pass
--------------------------------------------------------------------------------
[0.16044 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_single_digit

def test_combinations_of_phone_input_single_digit():
>       assert combinations_of_phone_input("2") == ['a', 'b', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:25: AssertionError
   - [#  23] SIR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             output.append(string[:j + 1])
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.15514 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#  24] SIR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             output.append(string[i:])
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.15408 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#  25] ZIL combinations: 
--------------------------------------------------------------------------------
   4: 
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
-  8:         output.append(string[i])
-  9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+  8:         break
+  9:     
+ 10:     
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.15671 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_single_character

def test_combinations_of_word_single_character():
>       assert combinations_of_word("a") == ["a"]
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:17: AssertionError
   - [#  26] ZIL combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             break
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.16653 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_word_multiple_characters

def test_combinations_of_word_multiple_characters():
>       assert combinations_of_word("abc") == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:20: AssertionError
   - [#  27] ZIL combinations: 
--------------------------------------------------------------------------------
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
- 39:         temp = []
- 40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
- 42:         outputs = temp
+ 39:         break
+ 40:     
+ 41:     
+ 42:     
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.17214 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:28: AssertionError
   - [#  28] ZIL combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             break
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.15734 s] killed by ts-3-5/test_3-5_0-8_265.py::test_combinations_of_phone_input_multiple_digits

def test_combinations_of_phone_input_multiple_digits():
>       assert combinations_of_phone_input("23") == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
E       AssertionError

ts-3-5/test_3-5_0-8_265.py:28: AssertionError
[*] Mutation score [5.38228 s]: 96.2%
   - all: 28
   - killed: 25 (89.3%)
   - survived: 1 (3.6%)
   - incompetent: 2 (7.1%)
   - timeout: 0 (0.0%)
