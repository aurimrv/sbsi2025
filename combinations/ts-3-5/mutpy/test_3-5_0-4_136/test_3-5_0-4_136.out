[*] Start mutation process:
   - targets: combinations.py
   - tests: ts-3-5/test_3-5_0-4_136.py
[*] 2 tests passed:
   - test_3-5_0-4_136 [0.14849 s]
[*] Start mutants generation and execution:
   - [#   1] AOR combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
-  9:         for j in range(i + 1, len(string)):
+  9:         for j in range(i - 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.18274 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
>       assert combinations_of_word('a') == ['a']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:16: AssertionError
   - [#   2] AOR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             output.append(string[i:j - 1])
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.16689 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#   3] AOR combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             temp = temp - [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.15503 s] incompetent

TypeError: combinations:41: TypeError: unsupported operand type(s) for -: 'list' and 'list'

   - [#   4] AOR combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             temp = temp + [output - letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.16863 s] incompetent

TypeError: combinations:41: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#   5] OIL combinations: 
--------------------------------------------------------------------------------
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
- 11:     
+ 11:         break
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
--------------------------------------------------------------------------------
[0.14663 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#   6] OIL combinations: 
--------------------------------------------------------------------------------
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
- 11:     
+ 11:             break
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
--------------------------------------------------------------------------------
[0.15493 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#   7] OIL combinations: 
--------------------------------------------------------------------------------
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
- 43:     
+ 43:         break
  44:     return outputs
--------------------------------------------------------------------------------
[0.15694 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
        assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
    
        # Test input with different digits
        assert combinations_of_phone_input('23') == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
    
        # Test input with more than two digits
>       assert combinations_of_phone_input('234') == ['adg', 'adh', 'adi', 'aeg', 'aeh', 'aei', 'afg', 'afh', 'afi', 'bdg', 'bdh', 'bdi', 'beg', 'beh', 'bei', 'bfg', 'bfh', 'bfi', 'cdg', 'cdh', 'cdi', 'ceg', 'ceh', 'cei', 'cfg', 'cfh', 'cfi']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:32: AssertionError
   - [#   8] OIL combinations: 
--------------------------------------------------------------------------------
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
- 42:         outputs = temp
- 43:     
+ 42:             break
+ 43:         outputs = temp
  44:     return outputs
--------------------------------------------------------------------------------
[0.15676 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:26: AssertionError
   - [#   9] RIL combinations: 
--------------------------------------------------------------------------------
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
   6:     output = []
-  7:     for i in range(0, len(string)):
+  7:     for i in reversed(range(0, len(string))):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
--------------------------------------------------------------------------------
[0.15708 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#  10] RIL combinations: 
--------------------------------------------------------------------------------
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
-  9:         for j in range(i + 1, len(string)):
+  9:         for j in reversed(range(i + 1, len(string))):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
  13: 
--------------------------------------------------------------------------------
[0.16050 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#  11] RIL combinations: 
--------------------------------------------------------------------------------
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
- 38:     for i in range(1, len(string)):
+ 38:     for i in reversed(range(1, len(string))):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
--------------------------------------------------------------------------------
[0.14926 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
        assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
    
        # Test input with different digits
        assert combinations_of_phone_input('23') == ['ad', 'ae', 'af', 'bd', 'be', 'bf', 'cd', 'ce', 'cf']
    
        # Test input with more than two digits
>       assert combinations_of_phone_input('234') == ['adg', 'adh', 'adi', 'aeg', 'aeh', 'aei', 'afg', 'afh', 'afi', 'bdg', 'bdh', 'bdi', 'beg', 'beh', 'bei', 'bfg', 'bfh', 'bfi', 'cdg', 'cdh', 'cdi', 'ceg', 'ceh', 'cei', 'cfg', 'cfh', 'cfi']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:32: AssertionError
   - [#  12] RIL combinations: 
--------------------------------------------------------------------------------
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
- 40:         for output in outputs:
+ 40:         for output in reversed(outputs):
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.16604 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:26: AssertionError
   - [#  13] SDL combinations: 
--------------------------------------------------------------------------------
   2:     '''
   3:     Find all combinations of letters in a word.
   4: 
   5:     '''
-  6:     output = []
+  6:     pass
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
--------------------------------------------------------------------------------
[0.16027 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
>       assert combinations_of_word('') == []

ts-3-5/test_3-5_0-4_136.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = ''

>   ???
E   NameError: name 'output' is not defined

combinations:12: NameError
   - [#  14] SDL combinations: 
--------------------------------------------------------------------------------
   4: 
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
-  8:         output.append(string[i])
+  8:         pass
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
  12:     return output
--------------------------------------------------------------------------------
[0.15630 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
>       assert combinations_of_word('a') == ['a']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:16: AssertionError
   - [#  15] SDL combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             pass
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.17110 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#  16] SDL combinations: 
--------------------------------------------------------------------------------
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
  10:             output.append(string[i:j + 1])
  11:     
- 12:     return output
+ 12:     pass
  13: 
  14: def combinations_of_phone_input(string: str):
  15:     """
  16:     Find all permutations of phone numbers in an input of numbers.
--------------------------------------------------------------------------------
[0.15640 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
>       assert combinations_of_word('') == []
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:13: AssertionError
   - [#  17] SDL combinations: 
--------------------------------------------------------------------------------
  20:     contain all combinations possible.  Only combinations that are
  21:     full length using all input numbers in the string.
  22: 
  23:     """
- 24:     phone_mapper = {\
- 25:         '1': [], \
- 26:         '2': ['a', 'b', 'c'], \
- 27:         '3': ['d', 'e', 'f'], \
- 28:         '4': ['g', 'h', 'i'], \
- 29:         '5': ['j', 'k', 'l'], \
- 30:         '6': ['m', 'n', 'o'], \
- 31:         '7': ['p', 'q', 'r', 's'], \
- 32:         '8': ['t', 'u', 'v'], \
- 33:         '9': ['w', 'x', 'y', 'z']}
+ 24:     pass
+ 25:     
+ 26:     
+ 27:     
+ 28:     
+ 29:     
+ 30:     
+ 31:     
+ 32:     
+ 33:     
  34:     
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
--------------------------------------------------------------------------------
[0.15931 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
>       assert combinations_of_phone_input('2') == ['a', 'b', 'c']

ts-3-5/test_3-5_0-4_136.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '2'

>   ???
E   NameError: name 'phone_mapper' is not defined

combinations:36: NameError
   - [#  18] SDL combinations: 
--------------------------------------------------------------------------------
  32:         '8': ['t', 'u', 'v'], \
  33:         '9': ['w', 'x', 'y', 'z']}
  34:     
  35:     
- 36:     outputs = [letter for letter in phone_mapper[string[0]]]
+ 36:     pass
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
--------------------------------------------------------------------------------
[0.16002 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
>       assert combinations_of_phone_input('2') == ['a', 'b', 'c']

ts-3-5/test_3-5_0-4_136.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '2'

>   ???
E   UnboundLocalError: local variable 'outputs' referenced before assignment

combinations:44: UnboundLocalError
   - [#  19] SDL combinations: 
--------------------------------------------------------------------------------
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
- 39:         temp = []
+ 39:         pass
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
--------------------------------------------------------------------------------
[0.15757 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']

ts-3-5/test_3-5_0-4_136.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

string = '22'

>   ???
E   UnboundLocalError: local variable 'temp' referenced before assignment

combinations:41: UnboundLocalError
   - [#  20] SDL combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             pass
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.15744 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:26: AssertionError
   - [#  21] SDL combinations: 
--------------------------------------------------------------------------------
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
- 42:         outputs = temp
+ 42:         pass
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.15852 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:26: AssertionError
   - [#  22] SDL combinations: 
--------------------------------------------------------------------------------
  40:         for output in outputs:
  41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
  42:         outputs = temp
  43:     
- 44:     return outputs
+ 44:     pass
--------------------------------------------------------------------------------
[0.14770 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
>       assert combinations_of_phone_input('2') == ['a', 'b', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:23: AssertionError
   - [#  23] SIR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             output.append(string[:j + 1])
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.15489 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#  24] SIR combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             output.append(string[i:])
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.16644 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#  25] ZIL combinations: 
--------------------------------------------------------------------------------
   4: 
   5:     '''
   6:     output = []
   7:     for i in range(0, len(string)):
-  8:         output.append(string[i])
-  9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+  8:         break
+  9:     
+ 10:     
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.15693 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
>       assert combinations_of_word('a') == ['a']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:16: AssertionError
   - [#  26] ZIL combinations: 
--------------------------------------------------------------------------------
   6:     output = []
   7:     for i in range(0, len(string)):
   8:         output.append(string[i])
   9:         for j in range(i + 1, len(string)):
- 10:             output.append(string[i:j + 1])
+ 10:             break
  11:     
  12:     return output
  13: 
  14: def combinations_of_phone_input(string: str):
--------------------------------------------------------------------------------
[0.16978 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_word

def test_combinations_of_word():
        # Test empty string
        assert combinations_of_word('') == []
    
        # Test single character string
        assert combinations_of_word('a') == ['a']
    
        # Test string with multiple characters
>       assert combinations_of_word('abc') == ['a', 'ab', 'abc', 'b', 'bc', 'c']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:19: AssertionError
   - [#  27] ZIL combinations: 
--------------------------------------------------------------------------------
  35:     
  36:     outputs = [letter for letter in phone_mapper[string[0]]]
  37:     
  38:     for i in range(1, len(string)):
- 39:         temp = []
- 40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
- 42:         outputs = temp
+ 39:         break
+ 40:     
+ 41:     
+ 42:     
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.17011 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:26: AssertionError
   - [#  28] ZIL combinations: 
--------------------------------------------------------------------------------
  37:     
  38:     for i in range(1, len(string)):
  39:         temp = []
  40:         for output in outputs:
- 41:             temp = temp + [output + letter for letter in phone_mapper[string[i]]]
+ 41:             break
  42:         outputs = temp
  43:     
  44:     return outputs
--------------------------------------------------------------------------------
[0.17000 s] killed by ts-3-5/test_3-5_0-4_136.py::test_combinations_of_phone_input

def test_combinations_of_phone_input():
        # Test single digit input
        assert combinations_of_phone_input('2') == ['a', 'b', 'c']
    
        # Test input with repeating digits
>       assert combinations_of_phone_input('22') == ['aa', 'ab', 'ac', 'ba', 'bb', 'bc', 'ca', 'cb', 'cc']
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:26: AssertionError
[*] Mutation score [5.39603 s]: 100.0%
   - all: 28
   - killed: 26 (92.9%)
   - survived: 0 (0.0%)
   - incompetent: 2 (7.1%)
   - timeout: 0 (0.0%)
