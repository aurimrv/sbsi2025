import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)
sys.setrecursionlimit(15000)

from quicksort import quicksort

def test_quicksort():
    # Test quicksort with empty list
    assert quicksort([]) == []
    
    # Test quicksort with already sorted list
    assert quicksort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]
    
    # Test quicksort with a list in descending order
    assert quicksort([5, 4, 3, 2, 1]) == [1, 2, 3, 4, 5]
    
    # Test quicksort with list containing duplicate elements
    assert quicksort([5, 2, 7, 2, 3]) == [2, 2, 3, 5, 7]
    
    # Test quicksort with list of negative numbers
    assert quicksort([-5, -2, -7, -3, -1]) == [-7, -5, -3, -2, -1]

def test_sort():
    # Test sort method with empty list
    lst = []
    quicksort.sort(lst, 0, len(lst)-1)
    assert lst == []
    
    # Test sort method with single element list
    lst = [1]
    quicksort.sort(lst, 0, len(lst)-1)
    assert lst == [1]
    
    # Test sort method with already sorted list
    lst = [1, 2, 3, 4, 5]
    quicksort.sort(lst, 0, len(lst)-1)
    assert lst == [1, 2, 3, 4, 5]
    
    # Test sort method with list in descending order
    lst = [5, 4, 3, 2, 1]
    quicksort.sort(lst, 0, len(lst)-1)
    assert lst == [1, 2, 3, 4, 5]

def test_partition():
    # Test partition method with empty list
    lst = []
    assert quicksort.partition(lst, 0, len(lst)-1) == 0
    
    # Test partition method with single element list
    lst = [5]
    assert quicksort.partition(lst, 0, len(lst)-1) == 0
    
    # Test partition method with generic list
    lst = [4, 8, 2, 6, 3]
    assert quicksort.partition(lst, 0, len(lst)-1) == 2
    
    # Test partition method with list of identical elements
    lst = [7, 7, 7, 7, 7]
    assert quicksort.partition(lst, 0, len(lst)-1) == 4