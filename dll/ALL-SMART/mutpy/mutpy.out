[*] Start mutation process:
   - targets: dll.py
   - tests: ./ALL-SMART
[*] 67 tests passed:
   - test_dll_DYNAMOSA [0.06453 s]
   - test_dll_MOSA [0.05024 s]
   - test_dll_MIO [0.05092 s]
   - test_dll_WHOLE_SUITE [0.05279 s]
[*] Start mutants generation and execution:
   - [#   1] ASR dll: 
--------------------------------------------------------------------------------
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
-  50:         self._length += 1
+  50:         self._length -= 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
--------------------------------------------------------------------------------
[0.08778 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
>       var_0 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0ea410f0>

>   ???
E   IndexError: Cannot shift from an empty list.

dll:81: IndexError
   - [#   2] ASR dll: 
--------------------------------------------------------------------------------
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
-  62:         self._length -= 1
+  62:         self._length += 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
--------------------------------------------------------------------------------
[0.11606 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
        var_3 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:154: AssertionError
   - [#   3] ASR dll: 
--------------------------------------------------------------------------------
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
-  75:         self._length += 1
+  75:         self._length -= 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
--------------------------------------------------------------------------------
[0.08942 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e7b3e50>

>   ???
E   IndexError: Cannot shift from an empty list.

dll:81: IndexError
   - [#   4] ASR dll: 
--------------------------------------------------------------------------------
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
-  87:         self._length -= 1
+  87:         self._length += 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
--------------------------------------------------------------------------------
[0.10755 s] survived
   - [#   5] ASR dll: 
--------------------------------------------------------------------------------
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
+ 105:                 self._length += 1
  106:                 return
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.09569 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
        var_3 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:154: AssertionError
   - [#   6] BCR dll: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 continue
  120:         return l
--------------------------------------------------------------------------------
[0.10289 s] survived
   - [#   7] CDI dll: 
--------------------------------------------------------------------------------
    3: 
    4: class Node(object):
    5:     '''Node class for data storage.'''
    6:     
-   7:     def __init__(self, data=None, next_node=None, prev=None):
-   8:         '''Initialize Node.'''
-   9:         self.data = data
-  10:         self.next = next_node
-  11:         self.prev = prev
-  12:     
+   7:     @classmethod
+   8:     def __init__(self, data=None, next_node=None, prev=None):
+   9:         '''Initialize Node.'''
+  10:         self.data = data
+  11:         self.next = next_node
+  12:         self.prev = prev
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
   16: 
--------------------------------------------------------------------------------
[0.09561 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
>       assert var_0 == 'T'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:34: AssertionError
   - [#   8] CDI dll: 
--------------------------------------------------------------------------------
    9:         self.data = data
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
-  13:     def __repr__(self):
-  14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
-  16: 
+  13:     @classmethod
+  14:     def __repr__(self):
+  15:         '''String representation.'''
+  16:         return 'Value: {}'.format(self.data)
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
   20: 
--------------------------------------------------------------------------------
[0.12030 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_0

def test_case_0():
        none_type_0 = None
        node_0 = module_0.Node(prev=none_type_0)
>       var_0 = node_0.__repr__()

ALL-SMART/test_dll_WHOLE_SUITE.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'dll.Node'>

>   ???
E   AttributeError: type object 'Node' has no attribute 'data'

dll:16: AttributeError
   - [#   9] CDI dll: 
--------------------------------------------------------------------------------
   26:     remove(val) - will remove the first instance of (val) found in the list,
   27:     starting from the head.
   28:     '''
   29:     
-  30:     def __init__(self, data=None):
-  31:         '''Initialize list.'''
-  32:         self.head = None
-  33:         self.tail = None
-  34:         self._length = 0
-  35:         try:
-  36:             for val in data:
-  37:                 self.push(val)
-  38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
-  41:     
+  30:     @classmethod
+  31:     def __init__(self, data=None):
+  32:         '''Initialize list.'''
+  33:         self.head = None
+  34:         self.tail = None
+  35:         self._length = 0
+  36:         try:
+  37:             for val in data:
+  38:                 self.push(val)
+  39:         except TypeError:
+  40:             if data:
+  41:                 self.push(data)
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
--------------------------------------------------------------------------------
[0.09023 s] incompetent

TypeError: dll:41: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

   - [#  10] CDI dll: 
--------------------------------------------------------------------------------
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
-  42:     def push(self, val):
-  43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
-  46:         if old_head:
-  47:             old_head.prev = self.head
-  48:         if not (self.tail):
-  49:             self.tail = self.head
-  50:         self._length += 1
-  51:     
+  42:     @classmethod
+  43:     def push(self, val):
+  44:         '''Add val to the head of the list.'''
+  45:         old_head = self.head
+  46:         self.head = Node(val, next_node=old_head)
+  47:         if old_head:
+  48:             old_head.prev = self.head
+  49:         if not (self.tail):
+  50:             self.tail = self.head
+  51:         self._length += 1
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
   55:         if self._length < 1:
--------------------------------------------------------------------------------
[0.08929 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'dll.DoubleLinkedList'>, val = 'T'

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

dll:45: AttributeError
   - [#  11] CDI dll: 
--------------------------------------------------------------------------------
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
-  52:     def pop(self):
-  53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
-  55:         if self._length < 1:
-  56:             raise IndexError('Cannot pop from an empty list.')
-  57:         
-  58:         new_head = self.head.next
-  59:         if new_head:
-  60:             new_head.prev = None
-  61:         self.head = new_head
-  62:         self._length -= 1
-  63:         if self._length < 1:
-  64:             self.tail = None
-  65:         return to_return.data
-  66:     
+  52:     @classmethod
+  53:     def pop(self):
+  54:         '''Remove the val from the head of the list.'''
+  55:         to_return = self.head
+  56:         if self._length < 1:
+  57:             raise IndexError('Cannot pop from an empty list.')
+  58:         
+  59:         new_head = self.head.next
+  60:         if new_head:
+  61:             new_head.prev = None
+  62:         self.head = new_head
+  63:         self._length -= 1
+  64:         if self._length < 1:
+  65:             self.tail = None
+  66:         return to_return.data
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
--------------------------------------------------------------------------------
[0.09326 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_3

def test_case_3():
        none_type_0 = None
        double_linked_list_0 = module_0.DoubleLinkedList(none_type_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        with pytest.raises(IndexError):
>           double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'dll.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

dll:55: AttributeError
   - [#  12] CDI dll: 
--------------------------------------------------------------------------------
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
-  67:     def append(self, val):
-  68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
-  71:         if old_tail:
-  72:             old_tail.next = self.tail
-  73:         if self._length < 1:
-  74:             self.head = self.tail
-  75:         self._length += 1
-  76:     
+  67:     @classmethod
+  68:     def append(self, val):
+  69:         '''Add val to the tail of the list.'''
+  70:         old_tail = self.tail
+  71:         self.tail = Node(val, prev=old_tail)
+  72:         if old_tail:
+  73:             old_tail.next = self.tail
+  74:         if self._length < 1:
+  75:             self.head = self.tail
+  76:         self._length += 1
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
   80:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09003 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'dll.DoubleLinkedList'>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

dll:70: AttributeError
   - [#  13] CDI dll: 
--------------------------------------------------------------------------------
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
-  77:     def shift(self):
-  78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
-  80:         if self._length < 1:
-  81:             raise IndexError('Cannot shift from an empty list.')
-  82:         
-  83:         new_tail = self.tail.prev
-  84:         if new_tail:
-  85:             new_tail.next = None
-  86:         self.tail = new_tail
-  87:         self._length -= 1
-  88:         if self._length < 1:
-  89:             self.tail = None
-  90:         return to_return.data
-  91:     
+  77:     @classmethod
+  78:     def shift(self):
+  79:         '''Remove the val from the tail of the list.'''
+  80:         to_return = self.tail
+  81:         if self._length < 1:
+  82:             raise IndexError('Cannot shift from an empty list.')
+  83:         
+  84:         new_tail = self.tail.prev
+  85:         if new_tail:
+  86:             new_tail.next = None
+  87:         self.tail = new_tail
+  88:         self._length -= 1
+  89:         if self._length < 1:
+  90:             self.tail = None
+  91:         return to_return.data
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
--------------------------------------------------------------------------------
[0.09002 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'dll.DoubleLinkedList'>

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'tail'

dll:80: AttributeError
   - [#  14] CDI dll: 
--------------------------------------------------------------------------------
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
-  92:     def remove(self, val):
-  93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
-  95:         while curr:
-  96:             if curr.data is val:
-  97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
- 106:                 return
- 107:             curr = curr.next
- 108:         
- 109:         raise ValueError('{} is not in the list'.format(val))
- 110:     
+  92:     @classmethod
+  93:     def remove(self, val):
+  94:         '''Remove first occurance of val from list.'''
+  95:         curr = self.head
+  96:         while curr:
+  97:             if curr.data is val:
+  98:                 if self._length == 1:
+  99:                     (self.head, self.tail) = (None, None)
+ 100:                 elif (curr is not self.head and curr is not self.tail):
+ 101:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 102:                 elif curr is self.head:
+ 103:                     (self.head, curr.next.prev) = (curr.next, None)
+ 104:                 elif curr is self.tail:
+ 105:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 106:                 self._length -= 1
+ 107:                 return
+ 108:             curr = curr.next
+ 109:         
+ 110:         raise ValueError('{} is not in the list'.format(val))
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
--------------------------------------------------------------------------------
[0.09512 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
        assert var_0 == 'T'
        with pytest.raises(ValueError):
>           double_linked_list_0.remove(str_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'dll.DoubleLinkedList'>, val = "4'L`\x0bAeH"

>   ???
E   AttributeError: type object 'DoubleLinkedList' has no attribute 'head'

dll:95: AttributeError
   - [#  15] CDI dll: 
--------------------------------------------------------------------------------
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
- 111:     def _repr(self):
- 112:         '''Return list representation of dll.'''
- 113:         l = []
- 114:         while True:
- 115:             try:
- 116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
- 118:             except IndexError:
- 119:                 break
- 120:         return l
+ 111:     @classmethod
+ 112:     def _repr(self):
+ 113:         '''Return list representation of dll.'''
+ 114:         l = []
+ 115:         while True:
+ 116:             try:
+ 117:                 popped_data = self.pop()
+ 118:                 l.append(popped_data)
+ 119:             except IndexError:
+ 120:                 break
+ 121:         return l
--------------------------------------------------------------------------------
[0.10289 s] survived
   - [#  16] COD dll: 
--------------------------------------------------------------------------------
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
-  48:         if not (self.tail):
+  48:         if self.tail:
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
--------------------------------------------------------------------------------
[0.11047 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:32: AssertionError
   - [#  17] COI dll: 
--------------------------------------------------------------------------------
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
-  39:             if data:
+  39:             if not data:
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
--------------------------------------------------------------------------------
[0.08969 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:17: AssertionError
   - [#  18] COI dll: 
--------------------------------------------------------------------------------
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
-  46:         if old_head:
+  46:         if not old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
--------------------------------------------------------------------------------
[0.09114 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e30e260>, val = 'T'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:47: AttributeError
   - [#  19] COI dll: 
--------------------------------------------------------------------------------
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
-  48:         if not (self.tail):
+  48:         if not ((not (self.tail))):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
--------------------------------------------------------------------------------
[0.09121 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:32: AssertionError
   - [#  20] COI dll: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if not (self._length < 1):
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[0.09512 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_3

def test_case_3():
        none_type_0 = None
        double_linked_list_0 = module_0.DoubleLinkedList(none_type_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        with pytest.raises(IndexError):
>           double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e6896c0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

dll:58: AttributeError
   - [#  21] COI dll: 
--------------------------------------------------------------------------------
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
-  59:         if new_head:
+  59:         if not new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09202 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
>       var_3 = double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e725390>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:60: AttributeError
   - [#  22] COI dll: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if not (self._length < 1):
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[0.09131 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_6.head).__module__}.{type(var_6.head).__qualname__}' == 'dll.Node'
>       assert f'{type(var_6.tail).__module__}.{type(var_6.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:68: AssertionError
   - [#  23] COI dll: 
--------------------------------------------------------------------------------
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
-  71:         if old_tail:
+  71:         if not old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
--------------------------------------------------------------------------------
[0.09106 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e736fb0>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

dll:72: AttributeError
   - [#  24] COI dll: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if not (self._length < 1):
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[0.09053 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:20: AssertionError
   - [#  25] COI dll: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if not (self._length < 1):
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[0.10917 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e513df0>

>   ???
E   IndexError: Cannot shift from an empty list.

dll:81: IndexError
   - [#  26] COI dll: 
--------------------------------------------------------------------------------
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
-  84:         if new_tail:
+  84:         if not new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
--------------------------------------------------------------------------------
[0.08957 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e57ce20>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

dll:85: AttributeError
   - [#  27] COI dll: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if not (self._length < 1):
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[0.09225 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_6.head).__module__}.{type(var_6.head).__qualname__}' == 'dll.Node'
        assert f'{type(var_6.tail).__module__}.{type(var_6.tail).__qualname__}' == 'dll.Node'
        var_7 = double_linked_list_0.shift()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_7.head).__module__}.{type(var_7.head).__qualname__}' == 'dll.Node'
>       assert f'{type(var_7.tail).__module__}.{type(var_7.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:72: AssertionError
   - [#  28] COI dll: 
--------------------------------------------------------------------------------
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
-  95:         while curr:
+  95:         while not curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
--------------------------------------------------------------------------------
[0.09457 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_6.head).__module__}.{type(var_6.head).__qualname__}' == 'dll.Node'
        assert f'{type(var_6.tail).__module__}.{type(var_6.tail).__qualname__}' == 'dll.Node'
        var_7 = double_linked_list_0.shift()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_7.head).__module__}.{type(var_7.head).__qualname__}' == 'dll.Node'
        assert f'{type(var_7.tail).__module__}.{type(var_7.tail).__qualname__}' == 'dll.Node'
        var_8 = double_linked_list_0.shift()
        assert var_8 == b'<'
        assert double_linked_list_0.tail is None
        assert var_6.tail is None
        assert var_7.tail is None
        double_linked_list_2 = module_0.DoubleLinkedList()
        assert double_linked_list_2.head is None
        assert double_linked_list_2.tail is None
        with pytest.raises(ValueError):
>           double_linked_list_2.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e88d9c0>
val = <dll.DoubleLinkedList object at 0x7d9a0e88e110>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'data'

dll:96: AttributeError
   - [#  29] COI dll: 
--------------------------------------------------------------------------------
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
-  96:             if curr.data is val:
+  96:             if not (curr.data is val):
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
--------------------------------------------------------------------------------
[0.09090 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
        assert var_0 == 'T'
>       with pytest.raises(ValueError):
E       Failed: DID NOT RAISE <class 'ValueError'>

ALL-SMART/test_dll_WHOLE_SUITE.py:35: Failed
   - [#  30] COI dll: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if not (self._length == 1):
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.09439 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_0 = double_linked_list_1.push(double_linked_list_1)
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_1.push(none_type_0)
>       var_2 = double_linked_list_0.remove(float_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e43a2c0>, val = -674.0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:102: AttributeError
   - [#  31] COI dll: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif not ((curr is not self.head and curr is not self.tail)):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.09534 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e60aa40>
val = <dll.DoubleLinkedList object at 0x7d9a0e60aa40>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:100: AttributeError
   - [#  32] COI dll: 
--------------------------------------------------------------------------------
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
+ 101:                 elif not (curr is self.head):
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
--------------------------------------------------------------------------------
[0.11877 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e734190>
val = <dll.DoubleLinkedList object at 0x7d9a0e734190>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:102: AttributeError
   - [#  33] COI dll: 
--------------------------------------------------------------------------------
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
+ 103:                 elif not (curr is self.tail):
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
--------------------------------------------------------------------------------
[0.09482 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
        var_3 = double_linked_list_0.pop()
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:153: AssertionError
   - [#  34] COI dll: 
--------------------------------------------------------------------------------
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
- 114:         while True:
+ 114:         while not True:
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
--------------------------------------------------------------------------------
[0.12519 s] survived
   - [#  35] EHD dll: 
--------------------------------------------------------------------------------
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
+  39:             raise
+  40:     
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[0.08597 s] incompetent

TypeError: dll:36: TypeError: 'NoneType' object is not iterable

   - [#  36] EHD dll: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 raise
  120:         return l
--------------------------------------------------------------------------------
[0.10317 s] survived
   - [#  37] EXS dll: 
--------------------------------------------------------------------------------
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
+  39:             pass
+  40:     
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[0.09458 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:120: AssertionError
   - [#  38] EXS dll: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 pass
  120:         return l
--------------------------------------------------------------------------------
[0.10389 s] survived
   - [#  39] LCR dll: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif (curr is not self.head or curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.09315 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e544b50>
val = <dll.DoubleLinkedList object at 0x7d9a0e544b50>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:100: AttributeError
   - [#  40] OIL dll: 
--------------------------------------------------------------------------------
   34:         self._length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
-  38:         except TypeError:
+  38:                 breakexcept TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
--------------------------------------------------------------------------------
[0.10746 s] killed by ALL-SMART/test_dll_MIO.py::test_case_4

def test_case_4():
        bytes_0 = b"'T\t\xa4\xe0\x1dR4^\x86\xa4\xe3"
        double_linked_list_0 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.pop()
>       assert var_0 == 227
E       AssertionError

ALL-SMART/test_dll_MIO.py:43: AssertionError
   - [#  41] OIL dll: 
--------------------------------------------------------------------------------
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
- 108:         
+ 108:             break
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
--------------------------------------------------------------------------------
[0.09451 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e57ffa0>
val = <dll.DoubleLinkedList object at 0x7d9a0e57ffa0>

>   ???
E   ValueError: <dll.DoubleLinkedList object at 0x7d9a0e57ffa0> is not in the list

dll:109: ValueError
   - [#  42] OIL dll: 
--------------------------------------------------------------------------------
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
- 119:                 break
+ 119:                 breakbreak
  120:         return l
--------------------------------------------------------------------------------
[0.10358 s] survived
   - [#  43] RIL dll: 
--------------------------------------------------------------------------------
   32:         self.head = None
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
-  36:             for val in data:
+  36:             for val in reversed(data):
   37:                 self.push(val)
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
--------------------------------------------------------------------------------
[0.09076 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
>       assert var_0 == 'T'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:34: AssertionError
   - [#  44] ROR dll: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if self._length > 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[0.09432 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_3

def test_case_3():
        none_type_0 = None
        double_linked_list_0 = module_0.DoubleLinkedList(none_type_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        with pytest.raises(IndexError):
>           double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e63f5b0>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

dll:58: AttributeError
   - [#  45] ROR dll: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if self._length <= 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[0.09710 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
>       var_3 = double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:152: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e514550>

>   ???
E   IndexError: Cannot pop from an empty list.

dll:56: IndexError
   - [#  46] ROR dll: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if self._length > 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[0.09457 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_6.head).__module__}.{type(var_6.head).__qualname__}' == 'dll.Node'
>       assert f'{type(var_6.tail).__module__}.{type(var_6.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:68: AssertionError
   - [#  47] ROR dll: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if self._length <= 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[0.12185 s] killed by ALL-SMART/test_dll_DYNAMOSA.py::test_case_14

def test_case_14():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.push(double_linked_list_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        str_0 = 'iB]J,<H@[W2@NJ(~'
        none_type_0 = None
        var_2 = double_linked_list_0.pop()
        assert f'{type(var_2).__module__}.{type(var_2).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_2.head).__module__}.{type(var_2.head).__qualname__}' == 'dll.Node'
>       assert f'{type(var_2.tail).__module__}.{type(var_2.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_DYNAMOSA.py:194: AssertionError
   - [#  48] ROR dll: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if self._length > 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[0.08699 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:20: AssertionError
   - [#  49] ROR dll: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if self._length <= 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[0.11583 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_5

def test_case_5():
        str_0 = 'fYzrco`K}IYz^;u.A'
        int_0 = -217
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.push(str_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        str_1 = "%9\x0b'w)=W\rFi'W3OxN#"
        var_1 = double_linked_list_0.append(str_1)
        var_2 = var_1.__repr__()
        var_3 = double_linked_list_0.pop()
>       assert var_3 == 'fYzrco`K}IYz^;u.A'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:97: AssertionError
   - [#  50] ROR dll: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if self._length > 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[0.09090 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
>       var_0 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:33: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e6b3b20>

>   ???
E   IndexError: Cannot shift from an empty list.

dll:81: IndexError
   - [#  51] ROR dll: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if self._length <= 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[0.09017 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e88d390>

>   ???
E   IndexError: Cannot shift from an empty list.

dll:81: IndexError
   - [#  52] ROR dll: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if self._length > 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[0.10428 s] survived
   - [#  53] ROR dll: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if self._length <= 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[0.09267 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_6.head).__module__}.{type(var_6.head).__qualname__}' == 'dll.Node'
        assert f'{type(var_6.tail).__module__}.{type(var_6.tail).__qualname__}' == 'dll.Node'
        var_7 = double_linked_list_0.shift()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_7.head).__module__}.{type(var_7.head).__qualname__}' == 'dll.Node'
>       assert f'{type(var_7.tail).__module__}.{type(var_7.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:72: AssertionError
   - [#  54] ROR dll: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if self._length != 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.09335 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_0 = double_linked_list_1.push(double_linked_list_1)
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_1.push(none_type_0)
>       var_2 = double_linked_list_0.remove(float_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e8cce50>, val = -674.0

>   ???
E   AttributeError: 'NoneType' object has no attribute 'prev'

dll:102: AttributeError
   - [#  55] SDI dll: 
--------------------------------------------------------------------------------
    3: 
    4: class Node(object):
    5:     '''Node class for data storage.'''
    6:     
-   7:     def __init__(self, data=None, next_node=None, prev=None):
-   8:         '''Initialize Node.'''
-   9:         self.data = data
-  10:         self.next = next_node
-  11:         self.prev = prev
-  12:     
+   7:     @staticmethod
+   8:     def __init__(self, data=None, next_node=None, prev=None):
+   9:         '''Initialize Node.'''
+  10:         self.data = data
+  11:         self.next = next_node
+  12:         self.prev = prev
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
   16: 
--------------------------------------------------------------------------------
[0.08948 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:8: TypeError: Node.__init__() missing 1 required positional argument: 'self'

   - [#  56] SDI dll: 
--------------------------------------------------------------------------------
    9:         self.data = data
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
-  13:     def __repr__(self):
-  14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
-  16: 
+  13:     @staticmethod
+  14:     def __repr__(self):
+  15:         '''String representation.'''
+  16:         return 'Value: {}'.format(self.data)
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
   20: 
--------------------------------------------------------------------------------
[0.09019 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:9: TypeError: Node.__repr__() missing 1 required positional argument: 'self'

   - [#  57] SDI dll: 
--------------------------------------------------------------------------------
   26:     remove(val) - will remove the first instance of (val) found in the list,
   27:     starting from the head.
   28:     '''
   29:     
-  30:     def __init__(self, data=None):
-  31:         '''Initialize list.'''
-  32:         self.head = None
-  33:         self.tail = None
-  34:         self._length = 0
-  35:         try:
-  36:             for val in data:
-  37:                 self.push(val)
-  38:         except TypeError:
-  39:             if data:
-  40:                 self.push(data)
-  41:     
+  30:     @staticmethod
+  31:     def __init__(self, data=None):
+  32:         '''Initialize list.'''
+  33:         self.head = None
+  34:         self.tail = None
+  35:         self._length = 0
+  36:         try:
+  37:             for val in data:
+  38:                 self.push(val)
+  39:         except TypeError:
+  40:             if data:
+  41:                 self.push(data)
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
--------------------------------------------------------------------------------
[0.09092 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:15: TypeError: DoubleLinkedList.__init__() missing 1 required positional argument: 'self'

   - [#  58] SDI dll: 
--------------------------------------------------------------------------------
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
-  42:     def push(self, val):
-  43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
-  46:         if old_head:
-  47:             old_head.prev = self.head
-  48:         if not (self.tail):
-  49:             self.tail = self.head
-  50:         self._length += 1
-  51:     
+  42:     @staticmethod
+  43:     def push(self, val):
+  44:         '''Add val to the head of the list.'''
+  45:         old_head = self.head
+  46:         self.head = Node(val, next_node=old_head)
+  47:         if old_head:
+  48:             old_head.prev = self.head
+  49:         if not (self.tail):
+  50:             self.tail = self.head
+  51:         self._length += 1
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
   55:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09065 s] incompetent

TypeError: dll:40: TypeError: DoubleLinkedList.push() missing 1 required positional argument: 'val'

   - [#  59] SDI dll: 
--------------------------------------------------------------------------------
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
-  52:     def pop(self):
-  53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
-  55:         if self._length < 1:
-  56:             raise IndexError('Cannot pop from an empty list.')
-  57:         
-  58:         new_head = self.head.next
-  59:         if new_head:
-  60:             new_head.prev = None
-  61:         self.head = new_head
-  62:         self._length -= 1
-  63:         if self._length < 1:
-  64:             self.tail = None
-  65:         return to_return.data
-  66:     
+  52:     @staticmethod
+  53:     def pop(self):
+  54:         '''Remove the val from the head of the list.'''
+  55:         to_return = self.head
+  56:         if self._length < 1:
+  57:             raise IndexError('Cannot pop from an empty list.')
+  58:         
+  59:         new_head = self.head.next
+  60:         if new_head:
+  61:             new_head.prev = None
+  62:         self.head = new_head
+  63:         self._length -= 1
+  64:         if self._length < 1:
+  65:             self.tail = None
+  66:         return to_return.data
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
--------------------------------------------------------------------------------
[0.09756 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:45: TypeError: DoubleLinkedList.pop() missing 1 required positional argument: 'self'

   - [#  60] SDI dll: 
--------------------------------------------------------------------------------
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
-  67:     def append(self, val):
-  68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
-  71:         if old_tail:
-  72:             old_tail.next = self.tail
-  73:         if self._length < 1:
-  74:             self.head = self.tail
-  75:         self._length += 1
-  76:     
+  67:     @staticmethod
+  68:     def append(self, val):
+  69:         '''Add val to the tail of the list.'''
+  70:         old_tail = self.tail
+  71:         self.tail = Node(val, prev=old_tail)
+  72:         if old_tail:
+  73:             old_tail.next = self.tail
+  74:         if self._length < 1:
+  75:             self.head = self.tail
+  76:         self._length += 1
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
   80:         if self._length < 1:
--------------------------------------------------------------------------------
[0.09130 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:19: TypeError: DoubleLinkedList.append() missing 1 required positional argument: 'val'

   - [#  61] SDI dll: 
--------------------------------------------------------------------------------
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
-  77:     def shift(self):
-  78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
-  80:         if self._length < 1:
-  81:             raise IndexError('Cannot shift from an empty list.')
-  82:         
-  83:         new_tail = self.tail.prev
-  84:         if new_tail:
-  85:             new_tail.next = None
-  86:         self.tail = new_tail
-  87:         self._length -= 1
-  88:         if self._length < 1:
-  89:             self.tail = None
-  90:         return to_return.data
-  91:     
+  77:     @staticmethod
+  78:     def shift(self):
+  79:         '''Remove the val from the tail of the list.'''
+  80:         to_return = self.tail
+  81:         if self._length < 1:
+  82:             raise IndexError('Cannot shift from an empty list.')
+  83:         
+  84:         new_tail = self.tail.prev
+  85:         if new_tail:
+  86:             new_tail.next = None
+  87:         self.tail = new_tail
+  88:         self._length -= 1
+  89:         if self._length < 1:
+  90:             self.tail = None
+  91:         return to_return.data
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
--------------------------------------------------------------------------------
[0.08926 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:21: TypeError: DoubleLinkedList.shift() missing 1 required positional argument: 'self'

   - [#  62] SDI dll: 
--------------------------------------------------------------------------------
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
-  92:     def remove(self, val):
-  93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
-  95:         while curr:
-  96:             if curr.data is val:
-  97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
- 106:                 return
- 107:             curr = curr.next
- 108:         
- 109:         raise ValueError('{} is not in the list'.format(val))
- 110:     
+  92:     @staticmethod
+  93:     def remove(self, val):
+  94:         '''Remove first occurance of val from list.'''
+  95:         curr = self.head
+  96:         while curr:
+  97:             if curr.data is val:
+  98:                 if self._length == 1:
+  99:                     (self.head, self.tail) = (None, None)
+ 100:                 elif (curr is not self.head and curr is not self.tail):
+ 101:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 102:                 elif curr is self.head:
+ 103:                     (self.head, curr.next.prev) = (curr.next, None)
+ 104:                 elif curr is self.tail:
+ 105:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 106:                 self._length -= 1
+ 107:                 return
+ 108:             curr = curr.next
+ 109:         
+ 110:         raise ValueError('{} is not in the list'.format(val))
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
--------------------------------------------------------------------------------
[0.09057 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/dll/ALL-SMART/test_dll_WHOLE_SUITE.py:36: TypeError: DoubleLinkedList.remove() missing 1 required positional argument: 'val'

   - [#  63] SDI dll: 
--------------------------------------------------------------------------------
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
- 111:     def _repr(self):
- 112:         '''Return list representation of dll.'''
- 113:         l = []
- 114:         while True:
- 115:             try:
- 116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
- 118:             except IndexError:
- 119:                 break
- 120:         return l
+ 111:     @staticmethod
+ 112:     def _repr(self):
+ 113:         '''Return list representation of dll.'''
+ 114:         l = []
+ 115:         while True:
+ 116:             try:
+ 117:                 popped_data = self.pop()
+ 118:                 l.append(popped_data)
+ 119:             except IndexError:
+ 120:                 break
+ 121:         return l
--------------------------------------------------------------------------------
[0.10220 s] survived
   - [#  64] SDL dll: 
--------------------------------------------------------------------------------
    5:     '''Node class for data storage.'''
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
-   9:         self.data = data
+   9:         pass
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
--------------------------------------------------------------------------------
[0.09079 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_0

def test_case_0():
        none_type_0 = None
        node_0 = module_0.Node(prev=none_type_0)
>       var_0 = node_0.__repr__()

ALL-SMART/test_dll_WHOLE_SUITE.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[AttributeError("'Node' object has no attribute 'data'") raised in repr()] Node object at 0x7d9a0e702350>

>   ???
E   AttributeError: 'Node' object has no attribute 'data'

dll:15: AttributeError
   - [#  65] SDL dll: 
--------------------------------------------------------------------------------
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
-  10:         self.next = next_node
+  10:         pass
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
--------------------------------------------------------------------------------
[0.11565 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
        assert var_0 == 'T'
        with pytest.raises(ValueError):
>           double_linked_list_0.remove(str_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e7e0580>, val = "4'L`\x0bAeH"

>   ???
E   AttributeError: 'Node' object has no attribute 'next'

dll:107: AttributeError
   - [#  66] SDL dll: 
--------------------------------------------------------------------------------
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
   10:         self.next = next_node
-  11:         self.prev = prev
+  11:         pass
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.10759 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e5646d0>

>   ???
E   AttributeError: 'Node' object has no attribute 'prev'

dll:83: AttributeError
   - [#  67] SDL dll: 
--------------------------------------------------------------------------------
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
+  15:         pass
   16: 
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.09229 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_0

def test_case_0():
        none_type_0 = None
        node_0 = module_0.Node(prev=none_type_0)
        var_0 = node_0.__repr__()
>       assert var_0 == 'Value: None'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:10: AssertionError
   - [#  68] SDL dll: 
--------------------------------------------------------------------------------
   28:     '''
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
-  32:         self.head = None
+  32:         pass
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
--------------------------------------------------------------------------------
[0.08972 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert double_linked_list_0.head is None
E       AttributeError: 'DoubleLinkedList' object has no attribute 'head'

ALL-SMART/test_dll_WHOLE_SUITE.py:17: AttributeError
   - [#  69] SDL dll: 
--------------------------------------------------------------------------------
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
-  33:         self.tail = None
+  33:         pass
   34:         self._length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
--------------------------------------------------------------------------------
[0.09174 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AttributeError: 'DoubleLinkedList' object has no attribute 'tail'

ALL-SMART/test_dll_WHOLE_SUITE.py:18: AttributeError
   - [#  70] SDL dll: 
--------------------------------------------------------------------------------
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
   33:         self.tail = None
-  34:         self._length = 0
+  34:         pass
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
--------------------------------------------------------------------------------
[0.09260 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0eae2cb0>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   AttributeError: 'DoubleLinkedList' object has no attribute '_length'

dll:73: AttributeError
   - [#  71] SDL dll: 
--------------------------------------------------------------------------------
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
-  37:                 self.push(val)
+  37:                 pass
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
--------------------------------------------------------------------------------
[0.09110 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:31: AssertionError
   - [#  72] SDL dll: 
--------------------------------------------------------------------------------
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
   39:             if data:
-  40:                 self.push(data)
+  40:                 pass
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[0.10013 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:120: AssertionError
   - [#  73] SDL dll: 
--------------------------------------------------------------------------------
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
+  44:         pass
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
--------------------------------------------------------------------------------
[0.09556 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e7b2a10>, val = 'T'

>   ???
E   NameError: name 'old_head' is not defined

dll:45: NameError
   - [#  74] SDL dll: 
--------------------------------------------------------------------------------
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
+  45:         pass
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
--------------------------------------------------------------------------------
[0.09230 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:31: AssertionError
   - [#  75] SDL dll: 
--------------------------------------------------------------------------------
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
-  47:             old_head.prev = self.head
+  47:             pass
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
--------------------------------------------------------------------------------
[0.09776 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_10

def test_case_10():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(double_linked_list_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_1 = double_linked_list_0.push(set_0)
        var_2 = double_linked_list_0.append(double_linked_list_0)
>       var_3 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:180: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e7e1000>
val = <dll.DoubleLinkedList object at 0x7d9a0e7e1000>

>   ???
E   AttributeError: 'NoneType' object has no attribute 'next'

dll:100: AttributeError
   - [#  76] SDL dll: 
--------------------------------------------------------------------------------
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
-  49:             self.tail = self.head
+  49:             pass
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.08743 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:32: AssertionError
   - [#  77] SDL dll: 
--------------------------------------------------------------------------------
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
+  54:         pass
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
--------------------------------------------------------------------------------
[0.09260 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
>       var_6 = double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e8ccfa0>

>   ???
E   NameError: name 'to_return' is not defined

dll:65: NameError
   - [#  78] SDL dll: 
--------------------------------------------------------------------------------
   54:         to_return = self.head
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
-  58:         new_head = self.head.next
+  58:         pass
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
--------------------------------------------------------------------------------
[0.09287 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
>       var_6 = double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e75dab0>

>   ???
E   NameError: name 'new_head' is not defined

dll:59: NameError
   - [#  79] SDL dll: 
--------------------------------------------------------------------------------
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
-  60:             new_head.prev = None
+  60:             pass
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
--------------------------------------------------------------------------------
[0.10343 s] survived
   - [#  80] SDL dll: 
--------------------------------------------------------------------------------
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
-  61:         self.head = new_head
+  61:         pass
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
--------------------------------------------------------------------------------
[0.09515 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
        var_3 = double_linked_list_0.pop()
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:153: AssertionError
   - [#  81] SDL dll: 
--------------------------------------------------------------------------------
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
-  64:             self.tail = None
+  64:             pass
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.09880 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
        var_3 = double_linked_list_0.pop()
        assert double_linked_list_0.head is None
>       assert double_linked_list_0.tail is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:154: AssertionError
   - [#  82] SDL dll: 
--------------------------------------------------------------------------------
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
-  65:         return to_return.data
+  65:         pass
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
--------------------------------------------------------------------------------
[0.09367 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
>       assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:66: AssertionError
   - [#  83] SDL dll: 
--------------------------------------------------------------------------------
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
+  69:         pass
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
--------------------------------------------------------------------------------
[0.11094 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e592350>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   NameError: name 'old_tail' is not defined

dll:70: NameError
   - [#  84] SDL dll: 
--------------------------------------------------------------------------------
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
+  70:         pass
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
--------------------------------------------------------------------------------
[0.08996 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:20: AssertionError
   - [#  85] SDL dll: 
--------------------------------------------------------------------------------
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
-  72:             old_tail.next = self.tail
+  72:             pass
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
--------------------------------------------------------------------------------
[0.09475 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e513a00>
val = <dll.DoubleLinkedList object at 0x7d9a0e513a00>

>   ???
E   ValueError: <dll.DoubleLinkedList object at 0x7d9a0e513a00> is not in the list

dll:109: ValueError
   - [#  86] SDL dll: 
--------------------------------------------------------------------------------
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
-  74:             self.head = self.tail
+  74:             pass
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.09138 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:20: AssertionError
   - [#  87] SDL dll: 
--------------------------------------------------------------------------------
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
+  79:         pass
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[0.09257 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e57cbb0>

>   ???
E   NameError: name 'to_return' is not defined

dll:90: NameError
   - [#  88] SDL dll: 
--------------------------------------------------------------------------------
   79:         to_return = self.tail
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
-  83:         new_tail = self.tail.prev
+  83:         pass
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
--------------------------------------------------------------------------------
[0.09113 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0eaee7d0>

>   ???
E   NameError: name 'new_tail' is not defined

dll:84: NameError
   - [#  89] SDL dll: 
--------------------------------------------------------------------------------
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
-  85:             new_tail.next = None
+  85:             pass
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
--------------------------------------------------------------------------------
[0.10504 s] survived
   - [#  90] SDL dll: 
--------------------------------------------------------------------------------
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
-  86:         self.tail = new_tail
+  86:         pass
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
--------------------------------------------------------------------------------
[0.09328 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
        var_6 = double_linked_list_0.pop()
        assert f'{type(var_6).__module__}.{type(var_6).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_6.head).__module__}.{type(var_6.head).__qualname__}' == 'dll.Node'
        assert f'{type(var_6.tail).__module__}.{type(var_6.tail).__qualname__}' == 'dll.Node'
        var_7 = double_linked_list_0.shift()
        assert f'{type(var_7).__module__}.{type(var_7).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(var_7.head).__module__}.{type(var_7.head).__qualname__}' == 'dll.Node'
        assert f'{type(var_7.tail).__module__}.{type(var_7.tail).__qualname__}' == 'dll.Node'
        var_8 = double_linked_list_0.shift()
>       assert var_8 == b'<'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:74: AssertionError
   - [#  91] SDL dll: 
--------------------------------------------------------------------------------
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
-  89:             self.tail = None
+  89:             pass
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.10212 s] survived
   - [#  92] SDL dll: 
--------------------------------------------------------------------------------
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
-  90:         return to_return.data
+  90:         pass
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
--------------------------------------------------------------------------------
[0.11018 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.shift()
>       assert var_1 == b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:22: AssertionError
   - [#  93] SDL dll: 
--------------------------------------------------------------------------------
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
+  94:         pass
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[0.09318 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
        assert var_0 == 'T'
        with pytest.raises(ValueError):
>           double_linked_list_0.remove(str_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e6b4280>, val = "4'L`\x0bAeH"

>   ???
E   UnboundLocalError: local variable 'curr' referenced before assignment

dll:95: UnboundLocalError
   - [#  94] SDL dll: 
--------------------------------------------------------------------------------
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
+  98:                     pass
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.09520 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_0 = double_linked_list_1.push(double_linked_list_1)
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_1.push(none_type_0)
        var_2 = double_linked_list_0.remove(float_0)
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:129: AssertionError
   - [#  95] SDL dll: 
--------------------------------------------------------------------------------
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
+ 100:                     pass
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
--------------------------------------------------------------------------------
[0.10412 s] survived
   - [#  96] SDL dll: 
--------------------------------------------------------------------------------
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
+ 102:                     pass
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
--------------------------------------------------------------------------------
[0.11170 s] killed by ALL-SMART/test_dll_DYNAMOSA.py::test_case_2

def test_case_2():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        none_type_0 = None
        var_0 = double_linked_list_0.push(none_type_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        none_type_1 = None
        var_1 = double_linked_list_0.push(none_type_1)
        var_2 = double_linked_list_0.remove(none_type_1)
        double_linked_list_1 = module_0.DoubleLinkedList()
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_3 = double_linked_list_0.pop()
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART/test_dll_DYNAMOSA.py:41: AssertionError
   - [#  97] SDL dll: 
--------------------------------------------------------------------------------
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 104:                     pass
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
--------------------------------------------------------------------------------
[0.09474 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
        var_2 = double_linked_list_0.remove(double_linked_list_0)
        var_3 = double_linked_list_0.pop()
>       assert double_linked_list_0.head is None
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:153: AssertionError
   - [#  98] SDL dll: 
--------------------------------------------------------------------------------
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
- 106:                 return
+ 106:                 pass
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
--------------------------------------------------------------------------------
[0.09588 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_0 = double_linked_list_1.push(double_linked_list_1)
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_1.push(none_type_0)
>       var_2 = double_linked_list_0.remove(float_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e591db0>, val = -674.0

>   ???
E   ValueError: -674.0 is not in the list

dll:109: ValueError
   - [#  99] SDL dll: 
--------------------------------------------------------------------------------
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
- 107:             curr = curr.next
+ 107:             pass
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
--------------------------------------------------------------------------------
[5.00340 s] timeout
   - [# 100] SDL dll: 
--------------------------------------------------------------------------------
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
- 113:         l = []
+ 113:         pass
  114:         while True:
  115:             try:
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
--------------------------------------------------------------------------------
[0.10528 s] survived
   - [# 101] SDL dll: 
--------------------------------------------------------------------------------
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
  115:             try:
- 116:                 popped_data = self.pop()
+ 116:                 pass
  117:                 l.append(popped_data)
  118:             except IndexError:
  119:                 break
  120:         return l
--------------------------------------------------------------------------------
[0.12209 s] survived
   - [# 102] SDL dll: 
--------------------------------------------------------------------------------
  113:         l = []
  114:         while True:
  115:             try:
  116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
+ 117:                 pass
  118:             except IndexError:
  119:                 break
  120:         return l
--------------------------------------------------------------------------------
[0.10323 s] survived
   - [# 103] SDL dll: 
--------------------------------------------------------------------------------
  116:                 popped_data = self.pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
  119:                 break
- 120:         return l
+ 120:         pass
--------------------------------------------------------------------------------
[0.10284 s] survived
   - [# 104] SVD dll: 
--------------------------------------------------------------------------------
    5:     '''Node class for data storage.'''
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
-   9:         self.data = data
+   9:         data = data
   10:         self.next = next_node
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 105] SVD dll: 
--------------------------------------------------------------------------------
    6:     
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
-  10:         self.next = next_node
+  10:         next = next_node
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 106] SVD dll: 
--------------------------------------------------------------------------------
    7:     def __init__(self, data=None, next_node=None, prev=None):
    8:         '''Initialize Node.'''
    9:         self.data = data
   10:         self.next = next_node
-  11:         self.prev = prev
+  11:         prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
   15:         return 'Value: {}'.format(self.data)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 107] SVD dll: 
--------------------------------------------------------------------------------
   11:         self.prev = prev
   12:     
   13:     def __repr__(self):
   14:         '''String representation.'''
-  15:         return 'Value: {}'.format(self.data)
+  15:         return 'Value: {}'.format(data)
   16: 
   17: 
   18: class DoubleLinkedList(object):
   19:     '''Double linked list impplementation.
--------------------------------------------------------------------------------
[0.09055 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_0

def test_case_0():
        none_type_0 = None
        node_0 = module_0.Node(prev=none_type_0)
>       var_0 = node_0.__repr__()

ALL-SMART/test_dll_WHOLE_SUITE.py:9: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <[NameError("name 'data' is not defined") raised in repr()] Node object at 0x7d9a0e75d690>

>   ???
E   NameError: name 'data' is not defined

dll:15: NameError
   - [# 108] SVD dll: 
--------------------------------------------------------------------------------
   28:     '''
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
-  32:         self.head = None
+  32:         head = None
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 109] SVD dll: 
--------------------------------------------------------------------------------
   29:     
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
-  33:         self.tail = None
+  33:         tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 110] SVD dll: 
--------------------------------------------------------------------------------
   30:     def __init__(self, data=None):
   31:         '''Initialize list.'''
   32:         self.head = None
   33:         self.tail = None
-  34:         self._length = 0
+  34:         _length = 0
   35:         try:
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 111] SVD dll: 
--------------------------------------------------------------------------------
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
-  37:                 self.push(val)
+  37:                 push(val)
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
--------------------------------------------------------------------------------
[0.09176 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0eabe230>
data = 'TB@nM.Y\tPr^e:f@n8'

>   ???
E   NameError: name 'push' is not defined

dll:37: NameError
   - [# 112] SVD dll: 
--------------------------------------------------------------------------------
   36:             for val in data:
   37:                 self.push(val)
   38:         except TypeError:
   39:             if data:
-  40:                 self.push(data)
+  40:                 push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
--------------------------------------------------------------------------------
[0.09507 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

self = <dll.DoubleLinkedList object at 0x7d9a0eac4310>, data = -674.0

>   ???
E   TypeError: 'float' object is not iterable

dll:36: TypeError

During handling of the above exception, another exception occurred:

    def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
>       double_linked_list_0 = module_0.DoubleLinkedList(float_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:118: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0eac4310>, data = -674.0

>   ???
E   NameError: name 'push' is not defined

dll:40: NameError
   - [# 113] SVD dll: 
--------------------------------------------------------------------------------
   40:                 self.push(data)
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
-  44:         old_head = self.head
+  44:         old_head = head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
--------------------------------------------------------------------------------
[0.08861 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e8ccf40>, val = 'T'

>   ???
E   NameError: name 'head' is not defined

dll:44: NameError
   - [# 114] SVD dll: 
--------------------------------------------------------------------------------
   41:     
   42:     def push(self, val):
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
-  45:         self.head = Node(val, next_node=old_head)
+  45:         head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 115] SVD dll: 
--------------------------------------------------------------------------------
   43:         '''Add val to the head of the list.'''
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
-  47:             old_head.prev = self.head
+  47:             old_head.prev = head
   48:         if not (self.tail):
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
--------------------------------------------------------------------------------
[0.09247 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e88fb50>, val = 'B'

>   ???
E   NameError: name 'head' is not defined

dll:47: NameError
   - [# 116] SVD dll: 
--------------------------------------------------------------------------------
   44:         old_head = self.head
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
-  48:         if not (self.tail):
+  48:         if not tail:
   49:             self.tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
--------------------------------------------------------------------------------
[0.09290 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e60a080>, val = 'T'

>   ???
E   NameError: name 'tail' is not defined

dll:48: NameError
   - [# 117] SVD dll: 
--------------------------------------------------------------------------------
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
-  49:             self.tail = self.head
+  49:             tail = self.head
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 118] SVD dll: 
--------------------------------------------------------------------------------
   45:         self.head = Node(val, next_node=old_head)
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
-  49:             self.tail = self.head
+  49:             self.tail = head
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
--------------------------------------------------------------------------------
[0.09320 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
>       double_linked_list_0 = module_0.DoubleLinkedList(str_1)

ALL-SMART/test_dll_WHOLE_SUITE.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
dll:37: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e52b010>, val = 'T'

>   ???
E   NameError: name 'head' is not defined

dll:49: NameError
   - [# 119] SVD dll: 
--------------------------------------------------------------------------------
   46:         if old_head:
   47:             old_head.prev = self.head
   48:         if not (self.tail):
   49:             self.tail = self.head
-  50:         self._length += 1
+  50:         _length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 120] SVD dll: 
--------------------------------------------------------------------------------
   50:         self._length += 1
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
-  54:         to_return = self.head
+  54:         to_return = head
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
--------------------------------------------------------------------------------
[0.09164 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_3

def test_case_3():
        none_type_0 = None
        double_linked_list_0 = module_0.DoubleLinkedList(none_type_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        with pytest.raises(IndexError):
>           double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e545090>

>   ???
E   NameError: name 'head' is not defined

dll:54: NameError
   - [# 121] SVD dll: 
--------------------------------------------------------------------------------
   51:     
   52:     def pop(self):
   53:         '''Remove the val from the head of the list.'''
   54:         to_return = self.head
-  55:         if self._length < 1:
+  55:         if _length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
--------------------------------------------------------------------------------
[0.09585 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_3

def test_case_3():
        none_type_0 = None
        double_linked_list_0 = module_0.DoubleLinkedList(none_type_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        with pytest.raises(IndexError):
>           double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0ead5e40>

>   ???
E   NameError: name '_length' is not defined

dll:55: NameError
   - [# 122] SVD dll: 
--------------------------------------------------------------------------------
   54:         to_return = self.head
   55:         if self._length < 1:
   56:             raise IndexError('Cannot pop from an empty list.')
   57:         
-  58:         new_head = self.head.next
+  58:         new_head = head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
--------------------------------------------------------------------------------
[0.09378 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
>       var_6 = double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e60b7c0>

>   ???
E   NameError: name 'head' is not defined

dll:58: NameError
   - [# 123] SVD dll: 
--------------------------------------------------------------------------------
   57:         
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
-  61:         self.head = new_head
+  61:         head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 124] SVD dll: 
--------------------------------------------------------------------------------
   58:         new_head = self.head.next
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
-  62:         self._length -= 1
+  62:         _length -= 1
   63:         if self._length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 125] SVD dll: 
--------------------------------------------------------------------------------
   59:         if new_head:
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
-  63:         if self._length < 1:
+  63:         if _length < 1:
   64:             self.tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
--------------------------------------------------------------------------------
[0.09019 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
        var_3 = double_linked_list_0.append(double_linked_list_0)
        var_4 = var_3.__repr__()
        var_5 = var_4.__repr__()
>       var_6 = double_linked_list_0.pop()

ALL-SMART/test_dll_WHOLE_SUITE.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0eabffa0>

>   ???
E   NameError: name '_length' is not defined

dll:63: NameError
   - [# 126] SVD dll: 
--------------------------------------------------------------------------------
   60:             new_head.prev = None
   61:         self.head = new_head
   62:         self._length -= 1
   63:         if self._length < 1:
-  64:             self.tail = None
+  64:             tail = None
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 127] SVD dll: 
--------------------------------------------------------------------------------
   65:         return to_return.data
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
-  69:         old_tail = self.tail
+  69:         old_tail = tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
--------------------------------------------------------------------------------
[0.08801 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0eabd990>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   NameError: name 'tail' is not defined

dll:69: NameError
   - [# 128] SVD dll: 
--------------------------------------------------------------------------------
   66:     
   67:     def append(self, val):
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
-  70:         self.tail = Node(val, prev=old_tail)
+  70:         tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 129] SVD dll: 
--------------------------------------------------------------------------------
   68:         '''Add val to the tail of the list.'''
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
-  72:             old_tail.next = self.tail
+  72:             old_tail.next = tail
   73:         if self._length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
--------------------------------------------------------------------------------
[0.09027 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_4

def test_case_4():
        bytes_0 = b'<'
        node_0 = module_0.Node(bytes_0)
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(bytes_0)
        assert f'{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.push(double_linked_list_0)
        var_2 = double_linked_list_1.push(node_0)
>       var_3 = double_linked_list_0.append(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e734760>
val = <dll.DoubleLinkedList object at 0x7d9a0e734760>

>   ???
E   NameError: name 'tail' is not defined

dll:72: NameError
   - [# 130] SVD dll: 
--------------------------------------------------------------------------------
   69:         old_tail = self.tail
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
-  73:         if self._length < 1:
+  73:         if _length < 1:
   74:             self.head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
--------------------------------------------------------------------------------
[0.08804 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e88f3a0>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   NameError: name '_length' is not defined

dll:73: NameError
   - [# 131] SVD dll: 
--------------------------------------------------------------------------------
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
-  74:             self.head = self.tail
+  74:             head = self.tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 132] SVD dll: 
--------------------------------------------------------------------------------
   70:         self.tail = Node(val, prev=old_tail)
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
-  74:             self.head = self.tail
+  74:             self.head = tail
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
--------------------------------------------------------------------------------
[0.08856 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
>       var_0 = double_linked_list_0.append(bytes_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:19: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e547dc0>
val = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'

>   ???
E   NameError: name 'tail' is not defined

dll:74: NameError
   - [# 133] SVD dll: 
--------------------------------------------------------------------------------
   71:         if old_tail:
   72:             old_tail.next = self.tail
   73:         if self._length < 1:
   74:             self.head = self.tail
-  75:         self._length += 1
+  75:         _length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 134] SVD dll: 
--------------------------------------------------------------------------------
   75:         self._length += 1
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
-  79:         to_return = self.tail
+  79:         to_return = tail
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
--------------------------------------------------------------------------------
[0.08913 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e5e6d70>

>   ???
E   NameError: name 'tail' is not defined

dll:79: NameError
   - [# 135] SVD dll: 
--------------------------------------------------------------------------------
   76:     
   77:     def shift(self):
   78:         '''Remove the val from the tail of the list.'''
   79:         to_return = self.tail
-  80:         if self._length < 1:
+  80:         if _length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
--------------------------------------------------------------------------------
[0.09202 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e6b6290>

>   ???
E   NameError: name '_length' is not defined

dll:80: NameError
   - [# 136] SVD dll: 
--------------------------------------------------------------------------------
   79:         to_return = self.tail
   80:         if self._length < 1:
   81:             raise IndexError('Cannot shift from an empty list.')
   82:         
-  83:         new_tail = self.tail.prev
+  83:         new_tail = tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
--------------------------------------------------------------------------------
[0.09166 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e61d180>

>   ???
E   NameError: name 'tail' is not defined

dll:83: NameError
   - [# 137] SVD dll: 
--------------------------------------------------------------------------------
   82:         
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
-  86:         self.tail = new_tail
+  86:         tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 138] SVD dll: 
--------------------------------------------------------------------------------
   83:         new_tail = self.tail.prev
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
-  87:         self._length -= 1
+  87:         _length -= 1
   88:         if self._length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 139] SVD dll: 
--------------------------------------------------------------------------------
   84:         if new_tail:
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
-  88:         if self._length < 1:
+  88:         if _length < 1:
   89:             self.tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
--------------------------------------------------------------------------------
[0.08706 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bytes_0 = b'qk\xbdA\xf4\xdd\x05D\xdd\xca\x13\x87\xbe\xd8=-\x9dF'
        node_0 = module_0.Node()
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        var_0 = double_linked_list_0.append(bytes_0)
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
>       var_1 = double_linked_list_0.shift()

ALL-SMART/test_dll_WHOLE_SUITE.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e545720>

>   ???
E   NameError: name '_length' is not defined

dll:88: NameError
   - [# 140] SVD dll: 
--------------------------------------------------------------------------------
   85:             new_tail.next = None
   86:         self.tail = new_tail
   87:         self._length -= 1
   88:         if self._length < 1:
-  89:             self.tail = None
+  89:             tail = None
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 141] SVD dll: 
--------------------------------------------------------------------------------
   90:         return to_return.data
   91:     
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
-  94:         curr = self.head
+  94:         curr = head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
--------------------------------------------------------------------------------
[0.09421 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_0 = double_linked_list_0.shift()
        assert var_0 == 'T'
        with pytest.raises(ValueError):
>           double_linked_list_0.remove(str_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e6c6620>, val = "4'L`\x0bAeH"

>   ???
E   NameError: name 'head' is not defined

dll:94: NameError
   - [# 142] SVD dll: 
--------------------------------------------------------------------------------
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
-  97:                 if self._length == 1:
+  97:                 if _length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
--------------------------------------------------------------------------------
[0.09457 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_0 = double_linked_list_1.push(double_linked_list_1)
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_1.push(none_type_0)
>       var_2 = double_linked_list_0.remove(float_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e73eec0>, val = -674.0

>   ???
E   NameError: name '_length' is not defined

dll:97: NameError
   - [# 143] SVD dll: 
--------------------------------------------------------------------------------
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
+  98:                     (head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 144] SVD dll: 
--------------------------------------------------------------------------------
   94:         curr = self.head
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
+  98:                     (self.head, tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 145] SVD dll: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif (curr is not head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.11317 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e88ceb0>
val = <dll.DoubleLinkedList object at 0x7d9a0e88ceb0>

>   ???
E   NameError: name 'head' is not defined

dll:99: NameError
   - [# 146] SVD dll: 
--------------------------------------------------------------------------------
   95:         while curr:
   96:             if curr.data is val:
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
+  99:                 elif (curr is not self.head and curr is not tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
--------------------------------------------------------------------------------
[0.09426 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e736c50>
val = <dll.DoubleLinkedList object at 0x7d9a0e736c50>

>   ???
E   NameError: name 'tail' is not defined

dll:99: NameError
   - [# 147] SVD dll: 
--------------------------------------------------------------------------------
   97:                 if self._length == 1:
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
+ 101:                 elif curr is head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
--------------------------------------------------------------------------------
[0.09587 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e63c490>
val = <dll.DoubleLinkedList object at 0x7d9a0e63c490>

>   ???
E   NameError: name 'head' is not defined

dll:101: NameError
   - [# 148] SVD dll: 
--------------------------------------------------------------------------------
   98:                     (self.head, self.tail) = (None, None)
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
+ 102:                     (head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 149] SVD dll: 
--------------------------------------------------------------------------------
   99:                 elif (curr is not self.head and curr is not self.tail):
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
+ 103:                 elif curr is tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
--------------------------------------------------------------------------------
[0.09463 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_8

def test_case_8():
        double_linked_list_0 = module_0.DoubleLinkedList()
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert double_linked_list_0.head is None
        assert double_linked_list_0.tail is None
        set_0 = {double_linked_list_0, double_linked_list_0, double_linked_list_0, double_linked_list_0}
        var_0 = double_linked_list_0.push(set_0)
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_0.append(double_linked_list_0)
>       var_2 = double_linked_list_0.remove(double_linked_list_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:151: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e5e79d0>
val = <dll.DoubleLinkedList object at 0x7d9a0e5e79d0>

>   ???
E   NameError: name 'tail' is not defined

dll:103: NameError
   - [# 150] SVD dll: 
--------------------------------------------------------------------------------
  100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
+ 104:                     (tail, curr.prev.next) = (curr.prev, None)
  105:                 self._length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 151] SVD dll: 
--------------------------------------------------------------------------------
  101:                 elif curr is self.head:
  102:                     (self.head, curr.next.prev) = (curr.next, None)
  103:                 elif curr is self.tail:
  104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
+ 105:                 _length -= 1
  106:                 return
  107:             curr = curr.next
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [# 152] SVD dll: 
--------------------------------------------------------------------------------
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
  115:             try:
- 116:                 popped_data = self.pop()
+ 116:                 popped_data = pop()
  117:                 l.append(popped_data)
  118:             except IndexError:
  119:                 break
  120:         return l
--------------------------------------------------------------------------------
[0.10845 s] survived
   - [# 153] ZIL dll: 
--------------------------------------------------------------------------------
   33:         self.tail = None
   34:         self._length = 0
   35:         try:
   36:             for val in data:
-  37:                 self.push(val)
+  37:                 break
   38:         except TypeError:
   39:             if data:
   40:                 self.push(data)
   41:     
--------------------------------------------------------------------------------
[0.08808 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_2

def test_case_2():
        object_0 = module_1.object()
        str_0 = "4'L`\x0bAeH"
        str_1 = 'TB@nM.Y\tPr^e:f@n8'
        double_linked_list_0 = module_0.DoubleLinkedList(str_1)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
>       assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
E       AssertionError

ALL-SMART/test_dll_WHOLE_SUITE.py:31: AssertionError
   - [# 154] ZIL dll: 
--------------------------------------------------------------------------------
   92:     def remove(self, val):
   93:         '''Remove first occurance of val from list.'''
   94:         curr = self.head
   95:         while curr:
-  96:             if curr.data is val:
-  97:                 if self._length == 1:
-  98:                     (self.head, self.tail) = (None, None)
-  99:                 elif (curr is not self.head and curr is not self.tail):
- 100:                     (curr.next.prev, curr.prev.next) = (curr.prev, curr.next)
- 101:                 elif curr is self.head:
- 102:                     (self.head, curr.next.prev) = (curr.next, None)
- 103:                 elif curr is self.tail:
- 104:                     (self.tail, curr.prev.next) = (curr.prev, None)
- 105:                 self._length -= 1
- 106:                 return
- 107:             curr = curr.next
+  96:             break
+  97:         
+  98:         
+  99:         
+ 100:         
+ 101:         
+ 102:         
+ 103:         
+ 104:         
+ 105:         
+ 106:         
+ 107:         
  108:         
  109:         raise ValueError('{} is not in the list'.format(val))
  110:     
  111:     def _repr(self):
--------------------------------------------------------------------------------
[0.11775 s] killed by ALL-SMART/test_dll_WHOLE_SUITE.py::test_case_7

def test_case_7():
        float_0 = -674.0
        none_type_0 = None
        node_0 = module_0.Node(float_0, none_type_0)
        double_linked_list_0 = module_0.DoubleLinkedList(float_0)
        assert f'{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}' == 'dll.DoubleLinkedList'
        assert f'{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}' == 'dll.Node'
        assert f'{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}' == 'dll.Node'
        double_linked_list_1 = module_0.DoubleLinkedList(none_type_0)
        assert double_linked_list_1.head is None
        assert double_linked_list_1.tail is None
        var_0 = double_linked_list_1.push(double_linked_list_1)
        assert f'{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}' == 'dll.Node'
        var_1 = double_linked_list_1.push(none_type_0)
>       var_2 = double_linked_list_0.remove(float_0)

ALL-SMART/test_dll_WHOLE_SUITE.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <dll.DoubleLinkedList object at 0x7d9a0e56df60>, val = -674.0

>   ???
E   ValueError: -674.0 is not in the list

dll:109: ValueError
   - [# 155] ZIL dll: 
--------------------------------------------------------------------------------
  111:     def _repr(self):
  112:         '''Return list representation of dll.'''
  113:         l = []
  114:         while True:
- 115:             try:
- 116:                 popped_data = self.pop()
- 117:                 l.append(popped_data)
- 118:             except IndexError:
- 119:                 break
+ 115:             break
+ 116:         
+ 117:         
+ 118:         
+ 119:         
  120:         return l
--------------------------------------------------------------------------------
[0.10253 s] survived
[*] Mutation score [27.12516 s]: 84.4%
   - all: 155
   - killed: 102 (65.8%)
   - survived: 19 (12.3%)
   - incompetent: 33 (21.3%)
   - timeout: 1 (0.6%)
