import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dll import Node, DoubleLinkedList

# Node class tests
def test_node_creation():
    node = Node(5)
    assert node.data == 5
    assert node.next is None
    assert node.prev is None

def test_node_repr():
    node = Node(10)
    assert repr(node) == "Value: 10"

# DoubleLinkedList class tests
def test_double_linked_list_initialization_with_data():
    dll = DoubleLinkedList([1, 2, 3])
    assert dll.head.data == 1
    assert dll.tail.data == 3
    assert dll._length == 3

def test_double_linked_list_initialization_without_data():
    dll = DoubleLinkedList()
    assert dll.head is None
    assert dll.tail is None
    assert dll._length == 0

def test_double_linked_list_push():
    dll = DoubleLinkedList()
    dll.push(1)
    dll.push(2)
    assert dll.head.data == 2
    assert dll.tail.data == 1
    assert dll._length == 2

def test_double_linked_list_pop():
    dll = DoubleLinkedList([1, 2, 3])
    assert dll.pop() == 1
    assert dll.head.data == 2
    assert dll._length == 2

def test_double_linked_list_append():
    dll = DoubleLinkedList([1, 2])
    dll.append(3)
    assert dll.tail.data == 3
    assert dll.head.data == 1
    assert dll._length == 3

def test_double_linked_list_shift():
    dll = DoubleLinkedList([1, 2, 3])
    assert dll.shift() == 3
    assert dll.tail.data == 2
    assert dll._length == 2

def test_double_linked_list_remove_existing_value():
    dll = DoubleLinkedList([1, 2, 3])
    dll.remove(2)
    assert dll.head.data == 1
    assert dll.tail.data == 3
    assert dll._length == 2

def test_double_linked_list_remove_non_existing_value():
    dll = DoubleLinkedList([1, 2, 3])
    with pytest.raises(ValueError):
        dll.remove(4)

def test_double_linked_list_remove_value_from_empty_list():
    dll = DoubleLinkedList()
    with pytest.raises(ValueError):
        dll.remove(1)