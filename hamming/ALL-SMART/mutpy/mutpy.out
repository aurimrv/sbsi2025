[*] Start mutation process:
   - targets: hamming_ops.py
   - tests: ./ALL-SMART
[*] 17 tests passed:
   - test_hamming_ops_DYNAMOSA [0.05739 s]
   - test_hamming_ops_MOSA [0.04322 s]
   - test_hamming_ops_WHOLE_SUITE [0.04635 s]
   - test_hamming_ops_MIO [0.04269 s]
[*] Start mutants generation and execution:
   - [#   1] AOR hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
- 34:         x &= x - 1
+ 34:         x &= x + 1
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[5.00696 s] timeout
   - [#   2] ASR hamming_ops: 
--------------------------------------------------------------------------------
  31:     count = 0
  32:     while x:
  33:         
  34:         x &= x - 1
- 35:         count += 1
+ 35:         count -= 1
  36:     return count
--------------------------------------------------------------------------------
[0.07384 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bool_0 = False
        var_0 = module_0.hamming_weight(bool_0)
        assert var_0 == 0
        bool_1 = False
        var_1 = module_0.hamming_distance(var_0, bool_1)
        assert var_1 == 0
        var_2 = module_0.hamming_weight(var_1)
        assert var_2 == 0
        var_3 = module_0.hamming_distance(var_0, bool_0)
        assert var_3 == 0
        int_0 = 3359
        var_4 = module_0.hamming_distance(int_0, var_0)
>       assert var_4 == 8
E       AssertionError

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:24: AssertionError
   - [#   3] COI hamming_ops: 
--------------------------------------------------------------------------------
  28:         Integer representing the number of bits
  29:         that are on (1).
  30:     '''
  31:     count = 0
- 32:     while x:
+ 32:     while not x:
  33:         
  34:         x &= x - 1
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[0.07228 s] incompetent

TypeError: hamming_ops:34: TypeError: unsupported operand type(s) for -: 'NoneType' and 'int'

   - [#   4] LOR hamming_ops: 
--------------------------------------------------------------------------------
  10:         An integer representing the number of bits that are different
  11:         in the two args.
  12:     '''
  13:     
- 14:     xor = x ^ y
+ 14:     xor = x & y
  15:     
  16:     
  17:     return hamming_weight(xor)
  18: 
--------------------------------------------------------------------------------
[0.07975 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bool_0 = False
        var_0 = module_0.hamming_weight(bool_0)
        assert var_0 == 0
        bool_1 = False
        var_1 = module_0.hamming_distance(var_0, bool_1)
        assert var_1 == 0
        var_2 = module_0.hamming_weight(var_1)
        assert var_2 == 0
        var_3 = module_0.hamming_distance(var_0, bool_0)
        assert var_3 == 0
        int_0 = 3359
        var_4 = module_0.hamming_distance(int_0, var_0)
>       assert var_4 == 8
E       AssertionError

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:24: AssertionError
   - [#   5] LOR hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
- 34:         x &= x - 1
+ 34:         x |= x - 1
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[5.00568 s] timeout
   - [#   6] OIL hamming_ops: 
--------------------------------------------------------------------------------
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
- 36:     return count
+ 36:         break
+ 37:     return count
--------------------------------------------------------------------------------
[0.07610 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bool_0 = False
        var_0 = module_0.hamming_weight(bool_0)
        assert var_0 == 0
        bool_1 = False
        var_1 = module_0.hamming_distance(var_0, bool_1)
        assert var_1 == 0
        var_2 = module_0.hamming_weight(var_1)
        assert var_2 == 0
        var_3 = module_0.hamming_distance(var_0, bool_0)
        assert var_3 == 0
        int_0 = 3359
        var_4 = module_0.hamming_distance(int_0, var_0)
>       assert var_4 == 8
E       AssertionError

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:24: AssertionError
   - [#   7] SDL hamming_ops: 
--------------------------------------------------------------------------------
  10:         An integer representing the number of bits that are different
  11:         in the two args.
  12:     '''
  13:     
- 14:     xor = x ^ y
+ 14:     pass
  15:     
  16:     
  17:     return hamming_weight(xor)
  18: 
--------------------------------------------------------------------------------
[0.07598 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bool_0 = False
        var_0 = module_0.hamming_weight(bool_0)
        assert var_0 == 0
        bool_1 = False
>       var_1 = module_0.hamming_distance(var_0, bool_1)

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 0, y = False

>   ???
E   NameError: name 'xor' is not defined

hamming_ops:17: NameError
   - [#   8] SDL hamming_ops: 
--------------------------------------------------------------------------------
  13:     
  14:     xor = x ^ y
  15:     
  16:     
- 17:     return hamming_weight(xor)
+ 17:     pass
  18: 
  19: 
  20: def hamming_weight(x: int):
  21:     '''
--------------------------------------------------------------------------------
[0.07612 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bool_0 = False
        var_0 = module_0.hamming_weight(bool_0)
        assert var_0 == 0
        bool_1 = False
        var_1 = module_0.hamming_distance(var_0, bool_1)
>       assert var_1 == 0
E       AssertionError

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:17: AssertionError
   - [#   9] SDL hamming_ops: 
--------------------------------------------------------------------------------
  27:     Returns:
  28:         Integer representing the number of bits
  29:         that are on (1).
  30:     '''
- 31:     count = 0
+ 31:     pass
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
--------------------------------------------------------------------------------
[0.07793 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_0

def test_case_0():
        none_type_0 = None
>       var_0 = module_0.hamming_weight(none_type_0)

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:7: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = None

>   ???
E   UnboundLocalError: local variable 'count' referenced before assignment

hamming_ops:36: UnboundLocalError
   - [#  10] SDL hamming_ops: 
--------------------------------------------------------------------------------
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
- 36:     return count
+ 36:     pass
--------------------------------------------------------------------------------
[0.07674 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_0

def test_case_0():
        none_type_0 = None
        var_0 = module_0.hamming_weight(none_type_0)
>       assert var_0 == 0
E       AssertionError

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:8: AssertionError
   - [#  11] ZIL hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
- 34:         x &= x - 1
- 35:         count += 1
+ 34:         break
+ 35:     
  36:     return count
--------------------------------------------------------------------------------
[0.07862 s] killed by ALL-SMART/test_hamming_ops_WHOLE_SUITE.py::test_case_1

def test_case_1():
        bool_0 = False
        var_0 = module_0.hamming_weight(bool_0)
        assert var_0 == 0
        bool_1 = False
        var_1 = module_0.hamming_distance(var_0, bool_1)
        assert var_1 == 0
        var_2 = module_0.hamming_weight(var_1)
        assert var_2 == 0
        var_3 = module_0.hamming_distance(var_0, bool_0)
        assert var_3 == 0
        int_0 = 3359
        var_4 = module_0.hamming_distance(int_0, var_0)
>       assert var_4 == 8
E       AssertionError

ALL-SMART/test_hamming_ops_WHOLE_SUITE.py:24: AssertionError
[*] Mutation score [11.02956 s]: 100.0%
   - all: 11
   - killed: 8 (72.7%)
   - survived: 0 (0.0%)
   - incompetent: 1 (9.1%)
   - timeout: 2 (18.2%)
