[34m[*][0m Start mutation process:
[36m   -[0m targets: hamming_ops.py
[36m   -[0m tests: ./0-ts
[34m[*][0m 2 tests passed:
[36m   -[0m test_hamming [0.15877 s]
[34m[*][0m Start mutants generation and execution:
[36m   -[0m [#   1] AOR hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
[34m- 34:         x &= x - 1[0m
[32m+ 34:         x &= x + 1[0m
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[5.00660 s] [33mtimeout[0m
[36m   -[0m [#   2] ASR hamming_ops: 
--------------------------------------------------------------------------------
  31:     count = 0
  32:     while x:
  33:         
  34:         x &= x - 1
[34m- 35:         count += 1[0m
[32m+ 35:         count -= 1[0m
  36:     return count
--------------------------------------------------------------------------------
[0.11695 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[36m   -[0m [#   3] COI hamming_ops: 
--------------------------------------------------------------------------------
  28:         Integer representing the number of bits
  29:         that are on (1).
  30:     '''
  31:     count = 0
[34m- 32:     while x:[0m
[32m+ 32:     while not x:[0m
  33:         
  34:         x &= x - 1
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[0.11631 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[36m   -[0m [#   4] CRP hamming_ops: 
--------------------------------------------------------------------------------
  27:     Returns:
  28:         Integer representing the number of bits
  29:         that are on (1).
  30:     '''
[34m- 31:     count = 0[0m
[32m+ 31:     count = 1[0m
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
--------------------------------------------------------------------------------
[0.12521 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[36m   -[0m [#   5] CRP hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
[34m- 34:         x &= x - 1[0m
[32m+ 34:         x &= x - 2[0m
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[5.00766 s] [33mtimeout[0m
[36m   -[0m [#   6] CRP hamming_ops: 
--------------------------------------------------------------------------------
  31:     count = 0
  32:     while x:
  33:         
  34:         x &= x - 1
[34m- 35:         count += 1[0m
[32m+ 35:         count += 2[0m
  36:     return count
--------------------------------------------------------------------------------
[0.11674 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[36m   -[0m [#   7] LOR hamming_ops: 
--------------------------------------------------------------------------------
  10:         An integer representing the number of bits that are different
  11:         in the two args.
  12:     '''
  13:     
[34m- 14:     xor = x ^ y[0m
[32m+ 14:     xor = x & y[0m
  15:     
  16:     
  17:     return hamming_weight(xor)
  18: 
--------------------------------------------------------------------------------
[0.12997 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_distance

def test_hamming_distance():
        # 1 and 10 -> distance = 2
>       assert hamming_distance(1,2) == 2
E       AssertionError

0-ts/test_hamming.py:13: AssertionError
[36m   -[0m [#   8] LOR hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
[34m- 34:         x &= x - 1[0m
[32m+ 34:         x |= x - 1[0m
  35:         count += 1
  36:     return count
--------------------------------------------------------------------------------
[5.00788 s] [33mtimeout[0m
[36m   -[0m [#   9] OIL hamming_ops: 
--------------------------------------------------------------------------------
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
[34m- 36:     return count[0m
[32m+ 36:         break[0m
[32m+ 37:     return count[0m
--------------------------------------------------------------------------------
[0.11660 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[36m   -[0m [#  10] SDL hamming_ops: 
--------------------------------------------------------------------------------
  10:         An integer representing the number of bits that are different
  11:         in the two args.
  12:     '''
  13:     
[34m- 14:     xor = x ^ y[0m
[32m+ 14:     pass[0m
  15:     
  16:     
  17:     return hamming_weight(xor)
  18: 
--------------------------------------------------------------------------------
[0.09896 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_distance

def test_hamming_distance():
        # 1 and 10 -> distance = 2
>       assert hamming_distance(1,2) == 2

0-ts/test_hamming.py:13: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 1, y = 2

>   ???
E   NameError: name 'xor' is not defined

hamming_ops:17: NameError
[36m   -[0m [#  11] SDL hamming_ops: 
--------------------------------------------------------------------------------
  13:     
  14:     xor = x ^ y
  15:     
  16:     
[34m- 17:     return hamming_weight(xor)[0m
[32m+ 17:     pass[0m
  18: 
  19: 
  20: def hamming_weight(x: int):
  21:     '''
--------------------------------------------------------------------------------
[0.12606 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_distance

def test_hamming_distance():
        # 1 and 10 -> distance = 2
>       assert hamming_distance(1,2) == 2
E       AssertionError

0-ts/test_hamming.py:13: AssertionError
[36m   -[0m [#  12] SDL hamming_ops: 
--------------------------------------------------------------------------------
  27:     Returns:
  28:         Integer representing the number of bits
  29:         that are on (1).
  30:     '''
[34m- 31:     count = 0[0m
[32m+ 31:     pass[0m
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
--------------------------------------------------------------------------------
[0.09875 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2

0-ts/test_hamming.py:6: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

x = 4

>   ???
E   UnboundLocalError: local variable 'count' referenced before assignment

hamming_ops:35: UnboundLocalError
[36m   -[0m [#  13] SDL hamming_ops: 
--------------------------------------------------------------------------------
  32:     while x:
  33:         
  34:         x &= x - 1
  35:         count += 1
[34m- 36:     return count[0m
[32m+ 36:     pass[0m
--------------------------------------------------------------------------------
[0.12363 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[36m   -[0m [#  14] ZIL hamming_ops: 
--------------------------------------------------------------------------------
  30:     '''
  31:     count = 0
  32:     while x:
  33:         
[34m- 34:         x &= x - 1[0m
[34m- 35:         count += 1[0m
[32m+ 34:         break[0m
[32m+ 35:     [0m
  36:     return count
--------------------------------------------------------------------------------
[0.09622 s] [32mkilled[0m by 0-ts/test_hamming.py::test_hamming_weight

def test_hamming_weight():
        # 5 = 101, hamming weight = 2
>       assert hamming_weight(5) == 2
E       AssertionError

0-ts/test_hamming.py:6: AssertionError
[34m[*][0m Mutation score [16.81062 s]: [1m[34m100.0%[0m
[36m   -[0m all: 14
[36m   -[0m killed: 11 (78.6%)
[36m   -[0m survived: 0 (0.0%)
[36m   -[0m incompetent: 0 (0.0%)
[36m   -[0m timeout: 3 (21.4%)
