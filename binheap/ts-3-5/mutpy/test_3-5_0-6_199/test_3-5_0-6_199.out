[*] Start mutation process:
   - targets: binheap.py
   - tests: ts-3-5/test_3-5_0-6_199.py
[*] 5 tests passed:
   - test_3-5_0-6_199 [0.19186 s]
[*] Start mutants generation and execution:
   - [#   1] AOD binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[1 - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.17812 s] survived
   - [#   2] AOR binheap: 
--------------------------------------------------------------------------------
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
+ 23:         size = len(self.container) + 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
--------------------------------------------------------------------------------
[0.20678 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1ee2140>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ee2140>

>   ???
E   IndexError: list index out of range

binheap:25: IndexError
   - [#   3] AOR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size / 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.19103 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#   4] AOR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size * 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.19782 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#   5] AOR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] > self.container[size / 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.19651 s] incompetent

TypeError: binheap:25: TypeError: list indices must be integers or slices, not float

   - [#   6] AOR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] > self.container[size * 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.19205 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1ee01f0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ee01f0>

>   ???
E   IndexError: list index out of range

binheap:25: IndexError
   - [#   7] AOR binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 tmp = self.container[size / 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.19896 s] incompetent

TypeError: binheap:26: TypeError: list indices must be integers or slices, not float

   - [#   8] AOR binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 tmp = self.container[size * 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.19489 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1f62aa0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1f62aa0>

>   ???
E   IndexError: list index out of range

binheap:26: IndexError
   - [#   9] AOR binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 self.container[size / 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.19360 s] incompetent

TypeError: binheap:27: TypeError: list indices must be integers or slices, not float

   - [#  10] AOR binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 self.container[size * 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.19575 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1c3f9d0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c3f9d0>

>   ???
E   IndexError: list assignment index out of range

binheap:27: IndexError
   - [#  11] AOR binheap: 
--------------------------------------------------------------------------------
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 29:             size = size / 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[0.17601 s] survived
   - [#  12] AOR binheap: 
--------------------------------------------------------------------------------
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 29:             size = size * 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[0.19197 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1f60df0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1f60df0>

>   ???
E   IndexError: list index out of range

binheap:25: IndexError
   - [#  13] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(+1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.17680 s] survived
   - [#  14] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(-1) + i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.17986 s] survived
   - [#  15] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(-1) - i] / 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20015 s] incompetent

TypeError: binheap:56: TypeError: can't multiply sequence by non-int of type 'float'

   - [#  16] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(-1) - i] * 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20281 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1ee2710>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  17] AOR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show += buff / ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.19955 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for /: 'int' and 'str'

   - [#  18] AOR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show += buff // ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.19825 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for //: 'int' and 'str'

   - [#  19] AOR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show += buff ** ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.20439 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'str'

   - [#  20] AOR binheap: 
--------------------------------------------------------------------------------
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
+ 59:                     to_show += str(l.pop(0)) - ' '
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20390 s] incompetent

TypeError: binheap:59: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  21] ASR binheap: 
--------------------------------------------------------------------------------
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
- 52:             col *= 2
+ 52:             col /= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[5.00665 s] timeout
   - [#  22] ASR binheap: 
--------------------------------------------------------------------------------
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
- 52:             col *= 2
+ 52:             col //= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[5.00689 s] timeout
   - [#  23] ASR binheap: 
--------------------------------------------------------------------------------
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
- 52:             col *= 2
+ 52:             col **= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[5.00675 s] timeout
   - [#  24] ASR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show -= buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.20337 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  25] ASR binheap: 
--------------------------------------------------------------------------------
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
+ 59:                     to_show -= str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20119 s] incompetent

TypeError: binheap:59: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  26] ASR binheap: 
--------------------------------------------------------------------------------
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
+ 60:             to_show -= '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20946 s] incompetent

TypeError: binheap:60: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  27] CDI binheap: 
--------------------------------------------------------------------------------
  10:     pop(): removes the top value in the heap, maintaining the heap property.
  11:     dislplay(): displays the heap as a string representation of a tree.
  12:     '''
  13:     
- 14:     def __init__(self, data=None):
- 15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
- 17:         if data:
- 18:             for val in data:
- 19:                 self.push(val)
- 20:     
+ 14:     @classmethod
+ 15:     def __init__(self, data=None):
+ 16:         '''Initialize bin heap.'''
+ 17:         self.container = [None]
+ 18:         if data:
+ 19:             for val in data:
+ 20:                 self.push(val)
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
--------------------------------------------------------------------------------
[0.17718 s] survived
   - [#  28] CDI binheap: 
--------------------------------------------------------------------------------
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
- 21:     def _balance(self):
- 22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
- 29:             size = size // 2
- 30:     
+ 21:     @classmethod
+ 22:     def _balance(self):
+ 23:         '''Helper function to balance heap.'''
+ 24:         size = len(self.container) - 1
+ 25:         while size // 2 > 0:
+ 26:             if self.container[size] > self.container[size // 2]:
+ 27:                 tmp = self.container[size // 2]
+ 28:                 self.container[size // 2] = self.container[size]
+ 29:                 self.container[size] = tmp
+ 30:             size = size // 2
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
--------------------------------------------------------------------------------
[0.20178 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1fa4b50>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:24: AttributeError
   - [#  29] CDI binheap: 
--------------------------------------------------------------------------------
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
- 31:     def push(self, val):
- 32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
- 34:         self._balance()
- 35:     
+ 31:     @classmethod
+ 32:     def push(self, val):
+ 33:         '''Put a new value into the heap.'''
+ 34:         self.container.append(val)
+ 35:         self._balance()
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
--------------------------------------------------------------------------------
[0.20359 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1fa53c0>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>, val = 5

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:34: AttributeError
   - [#  30] CDI binheap: 
--------------------------------------------------------------------------------
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
  35:     
- 36:     def pop(self):
- 37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
- 39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
- 41:         self._balance()
- 42:     
+ 36:     @classmethod
+ 37:     def pop(self):
+ 38:         '''Remove the top value of the heap.'''
+ 39:         if not (self.container):
+ 40:             raise IndexError("Can't pop from and empty heap")
+ 41:         self.container.pop(1)
+ 42:         self._balance()
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
--------------------------------------------------------------------------------
[0.20237 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1c42590>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
>       empty_heap.pop()

ts-3-5/test_3-5_0-6_199.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:39: AttributeError
   - [#  31] CDI binheap: 
--------------------------------------------------------------------------------
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
- 43:     def display(self):
- 44:         '''Display the heap as a tree.'''
- 45:         cols = []
- 46:         col = 1
- 47:         to_show = ''
- 48:         l = self.container[1:]
- 49:         
- 50:         while len(self.container) > col:
- 51:             cols.append(col)
- 52:             col *= 2
- 53:         
- 54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
- 57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
- 61:         
- 62:         return to_show
+ 43:     @classmethod
+ 44:     def display(self):
+ 45:         '''Display the heap as a tree.'''
+ 46:         cols = []
+ 47:         col = 1
+ 48:         to_show = ''
+ 49:         l = self.container[1:]
+ 50:         
+ 51:         while len(self.container) > col:
+ 52:             cols.append(col)
+ 53:             col *= 2
+ 54:         
+ 55:         for (i, v) in enumerate(cols):
+ 56:             buff = cols[(-1) - i] // 2
+ 57:             to_show += buff * ' '
+ 58:             for idx in range(v):
+ 59:                 if l:
+ 60:                     to_show += str(l.pop(0)) + ' '
+ 61:             to_show += '\n'
+ 62:         
+ 63:         return to_show
--------------------------------------------------------------------------------
[0.20851 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9ded0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:49: AttributeError
   - [#  32] COD binheap: 
--------------------------------------------------------------------------------
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
+ 38:         if self.container:
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
--------------------------------------------------------------------------------
[0.20434 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1c1db10>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
>       empty_heap.pop()

ts-3-5/test_3-5_0-6_199.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c1db10>

>   ???
E   IndexError: Can't pop from and empty heap

binheap:39: IndexError
   - [#  33] COI binheap: 
--------------------------------------------------------------------------------
  13:     
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
- 17:         if data:
+ 17:         if not data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
--------------------------------------------------------------------------------
[0.20408 s] incompetent

TypeError: binheap:18: TypeError: 'NoneType' object is not iterable

   - [#  34] COI binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while not (size // 2 > 0):
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.20072 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#  35] COI binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if not (self.container[size] > self.container[size // 2]):
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20681 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1cabbb0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  36] COI binheap: 
--------------------------------------------------------------------------------
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
+ 38:         if not ((not (self.container))):
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
--------------------------------------------------------------------------------
[0.20502 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1b068f0>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
>       empty_heap.pop()

ts-3-5/test_3-5_0-6_199.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1b068f0>

>   ???
E   IndexError: Can't pop from and empty heap

binheap:39: IndexError
   - [#  37] COI binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while not (len(self.container) > col):
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.20712 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9ecb0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  38] COI binheap: 
--------------------------------------------------------------------------------
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
- 58:                 if l:
+ 58:                 if not l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.22592 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1bdea40>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  39] OIL binheap: 
--------------------------------------------------------------------------------
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
- 20:     
+ 20:                 break
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
--------------------------------------------------------------------------------
[0.17969 s] survived
   - [#  40] OIL binheap: 
--------------------------------------------------------------------------------
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
- 30:     
+ 30:             break
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
--------------------------------------------------------------------------------
[0.18237 s] survived
   - [#  41] OIL binheap: 
--------------------------------------------------------------------------------
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
- 53:         
+ 53:             break
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
--------------------------------------------------------------------------------
[0.20493 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c0a620>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  42] OIL binheap: 
--------------------------------------------------------------------------------
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
- 61:         
+ 61:             break
  62:         return to_show
--------------------------------------------------------------------------------
[0.20453 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1f62e30>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  43] OIL binheap: 
--------------------------------------------------------------------------------
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
- 61:         
+ 60:                 break
+ 61:             to_show += '\n'
  62:         return to_show
--------------------------------------------------------------------------------
[0.20831 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1fefbe0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  44] RIL binheap: 
--------------------------------------------------------------------------------
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
- 18:             for val in data:
+ 18:             for val in reversed(data):
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
--------------------------------------------------------------------------------
[0.18340 s] survived
   - [#  45] RIL binheap: 
--------------------------------------------------------------------------------
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
- 54:         for (i, v) in enumerate(cols):
+ 54:         for (i, v) in reversed(enumerate(cols)):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
--------------------------------------------------------------------------------
[0.22489 s] incompetent

TypeError: binheap:54: TypeError: 'enumerate' object is not reversible

   - [#  46] RIL binheap: 
--------------------------------------------------------------------------------
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
- 57:             for idx in range(v):
+ 57:             for idx in reversed(range(v)):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
--------------------------------------------------------------------------------
[0.18267 s] survived
   - [#  47] ROR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size // 2 < 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.20223 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1c09450>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  48] ROR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size // 2 >= 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.19759 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#  49] ROR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] < self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20480 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1caa560>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  50] ROR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] >= self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.18398 s] survived
   - [#  51] ROR binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while len(self.container) < col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.20695 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c41ab0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  52] ROR binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while len(self.container) >= col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.20713 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9ce20>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  53] SDI binheap: 
--------------------------------------------------------------------------------
  10:     pop(): removes the top value in the heap, maintaining the heap property.
  11:     dislplay(): displays the heap as a string representation of a tree.
  12:     '''
  13:     
- 14:     def __init__(self, data=None):
- 15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
- 17:         if data:
- 18:             for val in data:
- 19:                 self.push(val)
- 20:     
+ 14:     @staticmethod
+ 15:     def __init__(self, data=None):
+ 16:         '''Initialize bin heap.'''
+ 17:         self.container = [None]
+ 18:         if data:
+ 19:             for val in data:
+ 20:                 self.push(val)
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
--------------------------------------------------------------------------------
[0.20513 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-6_199.py:13: TypeError: Binheap.__init__() missing 1 required positional argument: 'self'

   - [#  54] SDI binheap: 
--------------------------------------------------------------------------------
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
- 21:     def _balance(self):
- 22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
- 29:             size = size // 2
- 30:     
+ 21:     @staticmethod
+ 22:     def _balance(self):
+ 23:         '''Helper function to balance heap.'''
+ 24:         size = len(self.container) - 1
+ 25:         while size // 2 > 0:
+ 26:             if self.container[size] > self.container[size // 2]:
+ 27:                 tmp = self.container[size // 2]
+ 28:                 self.container[size // 2] = self.container[size]
+ 29:                 self.container[size] = tmp
+ 30:             size = size // 2
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
--------------------------------------------------------------------------------
[0.21307 s] incompetent

TypeError: binheap:34: TypeError: Binheap._balance() missing 1 required positional argument: 'self'

   - [#  55] SDI binheap: 
--------------------------------------------------------------------------------
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
- 31:     def push(self, val):
- 32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
- 34:         self._balance()
- 35:     
+ 31:     @staticmethod
+ 32:     def push(self, val):
+ 33:         '''Put a new value into the heap.'''
+ 34:         self.container.append(val)
+ 35:         self._balance()
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
--------------------------------------------------------------------------------
[0.20391 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-6_199.py:16: TypeError: Binheap.push() missing 1 required positional argument: 'val'

   - [#  56] SDI binheap: 
--------------------------------------------------------------------------------
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
  35:     
- 36:     def pop(self):
- 37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
- 39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
- 41:         self._balance()
- 42:     
+ 36:     @staticmethod
+ 37:     def pop(self):
+ 38:         '''Remove the top value of the heap.'''
+ 39:         if not (self.container):
+ 40:             raise IndexError("Can't pop from and empty heap")
+ 41:         self.container.pop(1)
+ 42:         self._balance()
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
--------------------------------------------------------------------------------
[0.20605 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-6_199.py:28: TypeError: Binheap.pop() missing 1 required positional argument: 'self'

   - [#  57] SDI binheap: 
--------------------------------------------------------------------------------
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
- 43:     def display(self):
- 44:         '''Display the heap as a tree.'''
- 45:         cols = []
- 46:         col = 1
- 47:         to_show = ''
- 48:         l = self.container[1:]
- 49:         
- 50:         while len(self.container) > col:
- 51:             cols.append(col)
- 52:             col *= 2
- 53:         
- 54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
- 57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
- 61:         
- 62:         return to_show
+ 43:     @staticmethod
+ 44:     def display(self):
+ 45:         '''Display the heap as a tree.'''
+ 46:         cols = []
+ 47:         col = 1
+ 48:         to_show = ''
+ 49:         l = self.container[1:]
+ 50:         
+ 51:         while len(self.container) > col:
+ 52:             cols.append(col)
+ 53:             col *= 2
+ 54:         
+ 55:         for (i, v) in enumerate(cols):
+ 56:             buff = cols[(-1) - i] // 2
+ 57:             to_show += buff * ' '
+ 58:             for idx in range(v):
+ 59:                 if l:
+ 60:                     to_show += str(l.pop(0)) + ' '
+ 61:             to_show += '\n'
+ 62:         
+ 63:         return to_show
--------------------------------------------------------------------------------
[0.20522 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-6_199.py:35: TypeError: Binheap.display() missing 1 required positional argument: 'self'

   - [#  58] SDL binheap: 
--------------------------------------------------------------------------------
  12:     '''
  13:     
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
+ 16:         pass
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
--------------------------------------------------------------------------------
[0.20448 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb20c8bb0>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb20c8bb0>, val = 5

>   ???
E   AttributeError: 'Binheap' object has no attribute 'container'

binheap:33: AttributeError
   - [#  59] SDL binheap: 
--------------------------------------------------------------------------------
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
- 19:                 self.push(val)
+ 19:                 pass
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
--------------------------------------------------------------------------------
[0.18227 s] survived
   - [#  60] SDL binheap: 
--------------------------------------------------------------------------------
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
+ 23:         pass
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
--------------------------------------------------------------------------------
[0.19800 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1e01270>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1e01270>

>   ???
E   UnboundLocalError: local variable 'size' referenced before assignment

binheap:24: UnboundLocalError
   - [#  61] SDL binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 pass
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.20054 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1eb96f0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1eb96f0>

>   ???
E   NameError: name 'tmp' is not defined

binheap:28: NameError
   - [#  62] SDL binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 pass
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.20993 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1aedcf0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  63] SDL binheap: 
--------------------------------------------------------------------------------
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
+ 28:                 pass
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
--------------------------------------------------------------------------------
[0.20362 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1ebab00>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  64] SDL binheap: 
--------------------------------------------------------------------------------
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 29:             pass
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[5.00680 s] timeout
   - [#  65] SDL binheap: 
--------------------------------------------------------------------------------
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
+ 33:         pass
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
--------------------------------------------------------------------------------
[0.20279 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1e9d9f0>

    def test_push(empty_heap):
        empty_heap.push(5)
>       assert empty_heap.container == [None, 5]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:17: AssertionError
   - [#  66] SDL binheap: 
--------------------------------------------------------------------------------
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
- 34:         self._balance()
+ 34:         pass
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
--------------------------------------------------------------------------------
[0.20372 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1c1eda0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  67] SDL binheap: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
+ 40:         pass
  41:         self._balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
--------------------------------------------------------------------------------
[0.20596 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1e03610>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.pop()
>       assert empty_heap.container == [None, 5]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:29: AssertionError
   - [#  68] SDL binheap: 
--------------------------------------------------------------------------------
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
- 41:         self._balance()
+ 41:         pass
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
--------------------------------------------------------------------------------
[0.17652 s] survived
   - [#  69] SDL binheap: 
--------------------------------------------------------------------------------
  41:         self._balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
- 45:         cols = []
+ 45:         pass
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
--------------------------------------------------------------------------------
[0.20245 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9c8e0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c9c8e0>

>   ???
E   NameError: name 'cols' is not defined

binheap:51: NameError
   - [#  70] SDL binheap: 
--------------------------------------------------------------------------------
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
- 46:         col = 1
+ 46:         pass
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
--------------------------------------------------------------------------------
[0.20487 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c90970>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c90970>

>   ???
E   UnboundLocalError: local variable 'col' referenced before assignment

binheap:50: UnboundLocalError
   - [#  71] SDL binheap: 
--------------------------------------------------------------------------------
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
- 47:         to_show = ''
+ 47:         pass
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
--------------------------------------------------------------------------------
[0.19820 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9dde0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c9dde0>

>   ???
E   UnboundLocalError: local variable 'to_show' referenced before assignment

binheap:56: UnboundLocalError
   - [#  72] SDL binheap: 
--------------------------------------------------------------------------------
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
  47:         to_show = ''
- 48:         l = self.container[1:]
+ 48:         pass
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
--------------------------------------------------------------------------------
[0.22115 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c1da50>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c1da50>

>   ???
E   NameError: name 'l' is not defined

binheap:58: NameError
   - [#  73] SDL binheap: 
--------------------------------------------------------------------------------
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
- 51:             cols.append(col)
+ 51:             pass
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
--------------------------------------------------------------------------------
[0.20535 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1ae31c0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  74] SDL binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             pass
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20266 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1f62a70>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1f62a70>

>   ???
E   NameError: name 'buff' is not defined

binheap:56: NameError
   - [#  75] SDL binheap: 
--------------------------------------------------------------------------------
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
- 62:         return to_show
+ 62:         pass
--------------------------------------------------------------------------------
[0.20512 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1aed8a0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  76] SIR binheap: 
--------------------------------------------------------------------------------
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
  47:         to_show = ''
- 48:         l = self.container[1:]
+ 48:         l = self.container[:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
--------------------------------------------------------------------------------
[0.20699 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1fedcf0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  77] SVD binheap: 
--------------------------------------------------------------------------------
  12:     '''
  13:     
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
+ 16:         container = [None]
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  78] SVD binheap: 
--------------------------------------------------------------------------------
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
- 19:                 self.push(val)
+ 19:                 push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
--------------------------------------------------------------------------------
[0.17736 s] survived
   - [#  79] SVD binheap: 
--------------------------------------------------------------------------------
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
+ 23:         size = len(container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
--------------------------------------------------------------------------------
[0.19869 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1f62bf0>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1f62bf0>

>   ???
E   NameError: name 'container' is not defined

binheap:23: NameError
   - [#  80] SVD binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20092 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1ef16c0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ef16c0>

>   ???
E   NameError: name 'container' is not defined

binheap:25: NameError
   - [#  81] SVD binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] > container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.19564 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1ef1ae0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ef1ae0>

>   ???
E   NameError: name 'container' is not defined

binheap:25: NameError
   - [#  82] SVD binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 tmp = container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.19705 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1ae35b0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ae35b0>

>   ???
E   NameError: name 'container' is not defined

binheap:26: NameError
   - [#  83] SVD binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.20275 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1e006a0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1e006a0>

>   ???
E   NameError: name 'container' is not defined

binheap:27: NameError
   - [#  84] SVD binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 self.container[size // 2] = container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.19674 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1c09ae0>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c09ae0>

>   ???
E   NameError: name 'container' is not defined

binheap:27: NameError
   - [#  85] SVD binheap: 
--------------------------------------------------------------------------------
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
+ 28:                 container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
--------------------------------------------------------------------------------
[0.20406 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1e01600>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
>       empty_heap.push(10)

ts-3-5/test_3-5_0-6_199.py:21: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1e01600>

>   ???
E   NameError: name 'container' is not defined

binheap:28: NameError
   - [#  86] SVD binheap: 
--------------------------------------------------------------------------------
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
+ 33:         container.append(val)
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
--------------------------------------------------------------------------------
[0.20659 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1e41f00>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1e41f00>, val = 5

>   ???
E   NameError: name 'container' is not defined

binheap:33: NameError
   - [#  87] SVD binheap: 
--------------------------------------------------------------------------------
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
- 34:         self._balance()
+ 34:         _balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
--------------------------------------------------------------------------------
[0.19832 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push

empty_heap = <binheap.Binheap object at 0x71deb1ef1600>

    def test_push(empty_heap):
>       empty_heap.push(5)

ts-3-5/test_3-5_0-6_199.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ef1600>, val = 5

>   ???
E   NameError: name '_balance' is not defined

binheap:34: NameError
   - [#  88] SVD binheap: 
--------------------------------------------------------------------------------
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
+ 38:         if not container:
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
--------------------------------------------------------------------------------
[0.20439 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1ef11b0>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
>       empty_heap.pop()

ts-3-5/test_3-5_0-6_199.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1ef11b0>

>   ???
E   NameError: name 'container' is not defined

binheap:38: NameError
   - [#  89] SVD binheap: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
+ 40:         container.pop(1)
  41:         self._balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
--------------------------------------------------------------------------------
[0.20305 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1c92440>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
>       empty_heap.pop()

ts-3-5/test_3-5_0-6_199.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c92440>

>   ???
E   NameError: name 'container' is not defined

binheap:40: NameError
   - [#  90] SVD binheap: 
--------------------------------------------------------------------------------
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
- 41:         self._balance()
+ 41:         _balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
--------------------------------------------------------------------------------
[0.19998 s] killed by ts-3-5/test_3-5_0-6_199.py::test_pop

empty_heap = <binheap.Binheap object at 0x71deb1e010f0>

    def test_pop(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
>       empty_heap.pop()

ts-3-5/test_3-5_0-6_199.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1e010f0>

>   ???
E   NameError: name '_balance' is not defined

binheap:41: NameError
   - [#  91] SVD binheap: 
--------------------------------------------------------------------------------
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
  47:         to_show = ''
- 48:         l = self.container[1:]
+ 48:         l = container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
--------------------------------------------------------------------------------
[0.22338 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1af4af0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1af4af0>

>   ???
E   NameError: name 'container' is not defined

binheap:48: NameError
   - [#  92] SVD binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while len(container) > col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.22952 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9f070>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'

ts-3-5/test_3-5_0-6_199.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x71deb1c9f070>

>   ???
E   NameError: name 'container' is not defined

binheap:50: NameError
   - [#  93] ZIL binheap: 
--------------------------------------------------------------------------------
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
- 19:                 self.push(val)
+ 19:                 break
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
--------------------------------------------------------------------------------
[0.17963 s] survived
   - [#  94] ZIL binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 25:             break
+ 26:     
+ 27:     
+ 28:     
+ 29:     
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[0.20617 s] killed by ts-3-5/test_3-5_0-6_199.py::test_push_multiple_values

empty_heap = <binheap.Binheap object at 0x71deb1bdca00>

    def test_push_multiple_values(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.container == [None, 10, 5, 3]
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:23: AssertionError
   - [#  95] ZIL binheap: 
--------------------------------------------------------------------------------
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
- 51:             cols.append(col)
- 52:             col *= 2
+ 51:             break
+ 52:         
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[0.20990 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1ebaec0>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  96] ZIL binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
- 57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
+ 55:             break
+ 56:         
+ 57:         
+ 58:         
+ 59:         
+ 60:         
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.21292 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c9e920>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
   - [#  97] ZIL binheap: 
--------------------------------------------------------------------------------
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
+ 58:                 break
+ 59:             
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20901 s] killed by ts-3-5/test_3-5_0-6_199.py::test_display

empty_heap = <binheap.Binheap object at 0x71deb1c1f910>

    def test_display(empty_heap):
        empty_heap.push(5)
        empty_heap.push(10)
        empty_heap.push(3)
>       assert empty_heap.display() == ' 10 \n5 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-6_199.py:35: AssertionError
[*] Mutation score [41.79181 s]: 81.1%
   - all: 97
   - killed: 56 (57.7%)
   - survived: 14 (14.4%)
   - incompetent: 23 (23.7%)
   - timeout: 4 (4.1%)
