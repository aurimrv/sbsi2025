[*] Start mutation process:
   - targets: binheap.py
   - tests: ts-3-5/test_3-5_0-4_136.py
[*] 5 tests passed:
   - test_3-5_0-4_136 [0.19792 s]
[*] Start mutants generation and execution:
   - [#   1] AOD binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[1 - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.21081 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388cb0a90>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#   2] AOR binheap: 
--------------------------------------------------------------------------------
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
+ 23:         size = len(self.container) + 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
--------------------------------------------------------------------------------
[0.22829 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388ce6200>

>   ???
E   IndexError: list index out of range

binheap:25: IndexError
   - [#   3] AOR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size / 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.21386 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#   4] AOR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size * 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.21632 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#   5] AOR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] > self.container[size / 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.21731 s] incompetent

TypeError: binheap:25: TypeError: list indices must be integers or slices, not float

   - [#   6] AOR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] > self.container[size * 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.21213 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388ce6350>

>   ???
E   IndexError: list index out of range

binheap:25: IndexError
   - [#   7] AOR binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 tmp = self.container[size / 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.21146 s] incompetent

TypeError: binheap:26: TypeError: list indices must be integers or slices, not float

   - [#   8] AOR binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 tmp = self.container[size * 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.20962 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388cbcf10>

>   ???
E   IndexError: list index out of range

binheap:26: IndexError
   - [#   9] AOR binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 self.container[size / 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.20618 s] incompetent

TypeError: binheap:27: TypeError: list indices must be integers or slices, not float

   - [#  10] AOR binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 self.container[size * 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.20839 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388a3f460>

>   ???
E   IndexError: list assignment index out of range

binheap:27: IndexError
   - [#  11] AOR binheap: 
--------------------------------------------------------------------------------
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 29:             size = size / 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[0.21723 s] incompetent

TypeError: binheap:25: TypeError: list indices must be integers or slices, not float

   - [#  12] AOR binheap: 
--------------------------------------------------------------------------------
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 29:             size = size * 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[0.20342 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388c425f0>

>   ???
E   IndexError: list index out of range

binheap:25: IndexError
   - [#  13] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(+1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20385 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388a43c40>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  14] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(-1) + i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20992 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889e35e0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  15] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(-1) - i] / 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20959 s] incompetent

TypeError: binheap:56: TypeError: can't multiply sequence by non-int of type 'float'

   - [#  16] AOR binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             buff = cols[(-1) - i] * 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.20506 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889f7ac0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  17] AOR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show += buff / ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.21794 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for /: 'int' and 'str'

   - [#  18] AOR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show += buff // ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.20321 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for //: 'int' and 'str'

   - [#  19] AOR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show += buff ** ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.21051 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for ** or pow(): 'int' and 'str'

   - [#  20] AOR binheap: 
--------------------------------------------------------------------------------
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
+ 59:                     to_show += str(l.pop(0)) - ' '
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20368 s] incompetent

TypeError: binheap:59: TypeError: unsupported operand type(s) for -: 'str' and 'str'

   - [#  21] ASR binheap: 
--------------------------------------------------------------------------------
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
- 52:             col *= 2
+ 52:             col /= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[5.00672 s] timeout
   - [#  22] ASR binheap: 
--------------------------------------------------------------------------------
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
- 52:             col *= 2
+ 52:             col //= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[5.00688 s] timeout
   - [#  23] ASR binheap: 
--------------------------------------------------------------------------------
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
- 52:             col *= 2
+ 52:             col **= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[5.00672 s] timeout
   - [#  24] ASR binheap: 
--------------------------------------------------------------------------------
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
+ 56:             to_show -= buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
--------------------------------------------------------------------------------
[0.20358 s] incompetent

TypeError: binheap:56: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  25] ASR binheap: 
--------------------------------------------------------------------------------
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
+ 59:                     to_show -= str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20206 s] incompetent

TypeError: binheap:59: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  26] ASR binheap: 
--------------------------------------------------------------------------------
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
+ 60:             to_show -= '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20559 s] incompetent

TypeError: binheap:60: TypeError: unsupported operand type(s) for -=: 'str' and 'str'

   - [#  27] CDI binheap: 
--------------------------------------------------------------------------------
  10:     pop(): removes the top value in the heap, maintaining the heap property.
  11:     dislplay(): displays the heap as a string representation of a tree.
  12:     '''
  13:     
- 14:     def __init__(self, data=None):
- 15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
- 17:         if data:
- 18:             for val in data:
- 19:                 self.push(val)
- 20:     
+ 14:     @classmethod
+ 15:     def __init__(self, data=None):
+ 16:         '''Initialize bin heap.'''
+ 17:         self.container = [None]
+ 18:         if data:
+ 19:             for val in data:
+ 20:                 self.push(val)
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
--------------------------------------------------------------------------------
[0.20422 s] incompetent

TypeError: binheap:20: TypeError: Binheap.push() missing 1 required positional argument: 'val'

   - [#  28] CDI binheap: 
--------------------------------------------------------------------------------
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
- 21:     def _balance(self):
- 22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
- 29:             size = size // 2
- 30:     
+ 21:     @classmethod
+ 22:     def _balance(self):
+ 23:         '''Helper function to balance heap.'''
+ 24:         size = len(self.container) - 1
+ 25:         while size // 2 > 0:
+ 26:             if self.container[size] > self.container[size // 2]:
+ 27:                 tmp = self.container[size // 2]
+ 28:                 self.container[size // 2] = self.container[size]
+ 29:                 self.container[size] = tmp
+ 30:             size = size // 2
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
--------------------------------------------------------------------------------
[0.20753 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:24: AttributeError
   - [#  29] CDI binheap: 
--------------------------------------------------------------------------------
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
- 31:     def push(self, val):
- 32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
- 34:         self._balance()
- 35:     
+ 31:     @classmethod
+ 32:     def push(self, val):
+ 33:         '''Put a new value into the heap.'''
+ 34:         self.container.append(val)
+ 35:         self._balance()
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
--------------------------------------------------------------------------------
[0.20720 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>, val = 5

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:34: AttributeError
   - [#  30] CDI binheap: 
--------------------------------------------------------------------------------
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
  35:     
- 36:     def pop(self):
- 37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
- 39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
- 41:         self._balance()
- 42:     
+ 36:     @classmethod
+ 37:     def pop(self):
+ 38:         '''Remove the top value of the heap.'''
+ 39:         if not (self.container):
+ 40:             raise IndexError("Can't pop from and empty heap")
+ 41:         self.container.pop(1)
+ 42:         self._balance()
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
--------------------------------------------------------------------------------
[0.20418 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388a62470>

    def test_pop(filled_heap):
>       filled_heap.pop()

ts-3-5/test_3-5_0-4_136.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:39: AttributeError
   - [#  31] CDI binheap: 
--------------------------------------------------------------------------------
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
- 43:     def display(self):
- 44:         '''Display the heap as a tree.'''
- 45:         cols = []
- 46:         col = 1
- 47:         to_show = ''
- 48:         l = self.container[1:]
- 49:         
- 50:         while len(self.container) > col:
- 51:             cols.append(col)
- 52:             col *= 2
- 53:         
- 54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
- 57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
- 61:         
- 62:         return to_show
+ 43:     @classmethod
+ 44:     def display(self):
+ 45:         '''Display the heap as a tree.'''
+ 46:         cols = []
+ 47:         col = 1
+ 48:         to_show = ''
+ 49:         l = self.container[1:]
+ 50:         
+ 51:         while len(self.container) > col:
+ 52:             cols.append(col)
+ 53:             col *= 2
+ 54:         
+ 55:         for (i, v) in enumerate(cols):
+ 56:             buff = cols[(-1) - i] // 2
+ 57:             to_show += buff * ' '
+ 58:             for idx in range(v):
+ 59:                 if l:
+ 60:                     to_show += str(l.pop(0)) + ' '
+ 61:             to_show += '\n'
+ 62:         
+ 63:         return to_show
--------------------------------------------------------------------------------
[0.20382 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889e1f60>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <class 'binheap.Binheap'>

>   ???
E   AttributeError: type object 'Binheap' has no attribute 'container'

binheap:49: AttributeError
   - [#  32] COD binheap: 
--------------------------------------------------------------------------------
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
+ 38:         if self.container:
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
--------------------------------------------------------------------------------
[0.20389 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388a4b790>

    def test_pop(filled_heap):
>       filled_heap.pop()

ts-3-5/test_3-5_0-4_136.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388a4b790>

>   ???
E   IndexError: Can't pop from and empty heap

binheap:39: IndexError
   - [#  33] COI binheap: 
--------------------------------------------------------------------------------
  13:     
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
- 17:         if data:
+ 17:         if not data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
--------------------------------------------------------------------------------
[0.20454 s] incompetent

TypeError: binheap:18: TypeError: 'NoneType' object is not iterable

   - [#  34] COI binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while not (size // 2 > 0):
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.20687 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#  35] COI binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if not (self.container[size] > self.container[size // 2]):
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20654 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388d94f40>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  36] COI binheap: 
--------------------------------------------------------------------------------
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
+ 38:         if not ((not (self.container))):
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
--------------------------------------------------------------------------------
[0.20116 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388921120>

    def test_pop(filled_heap):
>       filled_heap.pop()

ts-3-5/test_3-5_0-4_136.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388921120>

>   ???
E   IndexError: Can't pop from and empty heap

binheap:39: IndexError
   - [#  37] COI binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while not (len(self.container) > col):
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.20500 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889e34f0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  38] COI binheap: 
--------------------------------------------------------------------------------
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
- 58:                 if l:
+ 58:                 if not l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.22242 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388942080>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  39] OIL binheap: 
--------------------------------------------------------------------------------
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
- 20:     
+ 20:                 break
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
--------------------------------------------------------------------------------
[0.20532 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

filled_heap = <binheap.Binheap object at 0x777388a65090>

    def test_init_filled_heap(filled_heap):
>       assert len(filled_heap.container) == 6
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:23: AssertionError
   - [#  40] OIL binheap: 
--------------------------------------------------------------------------------
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
- 30:     
+ 30:             break
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
--------------------------------------------------------------------------------
[0.18086 s] survived
   - [#  41] OIL binheap: 
--------------------------------------------------------------------------------
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
- 53:         
+ 53:             break
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
--------------------------------------------------------------------------------
[0.20314 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388962ec0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  42] OIL binheap: 
--------------------------------------------------------------------------------
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
- 61:         
+ 61:             break
  62:         return to_show
--------------------------------------------------------------------------------
[0.20846 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388c42320>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  43] OIL binheap: 
--------------------------------------------------------------------------------
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
- 61:         
+ 60:                 break
+ 61:             to_show += '\n'
  62:         return to_show
--------------------------------------------------------------------------------
[0.20809 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388a9edd0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  44] RIL binheap: 
--------------------------------------------------------------------------------
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
- 18:             for val in data:
+ 18:             for val in reversed(data):
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
--------------------------------------------------------------------------------
[0.20799 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889607c0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  45] RIL binheap: 
--------------------------------------------------------------------------------
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
- 54:         for (i, v) in enumerate(cols):
+ 54:         for (i, v) in reversed(enumerate(cols)):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
--------------------------------------------------------------------------------
[0.20583 s] incompetent

TypeError: binheap:54: TypeError: 'enumerate' object is not reversible

   - [#  46] RIL binheap: 
--------------------------------------------------------------------------------
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
- 57:             for idx in range(v):
+ 57:             for idx in reversed(range(v)):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
--------------------------------------------------------------------------------
[0.18148 s] survived
   - [#  47] ROR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size // 2 < 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.20593 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x7773889e0f40>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  48] ROR binheap: 
--------------------------------------------------------------------------------
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
+ 24:         while size // 2 >= 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
--------------------------------------------------------------------------------
[0.20754 s] incompetent

TypeError: binheap:25: TypeError: '>' not supported between instances of 'int' and 'NoneType'

   - [#  49] ROR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] < self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20378 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x7773889633d0>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  50] ROR binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] >= self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.17961 s] survived
   - [#  51] ROR binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while len(self.container) < col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.19953 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388a61030>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  52] ROR binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while len(self.container) >= col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.18383 s] survived
   - [#  53] SDI binheap: 
--------------------------------------------------------------------------------
  10:     pop(): removes the top value in the heap, maintaining the heap property.
  11:     dislplay(): displays the heap as a string representation of a tree.
  12:     '''
  13:     
- 14:     def __init__(self, data=None):
- 15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
- 17:         if data:
- 18:             for val in data:
- 19:                 self.push(val)
- 20:     
+ 14:     @staticmethod
+ 15:     def __init__(self, data=None):
+ 16:         '''Initialize bin heap.'''
+ 17:         self.container = [None]
+ 18:         if data:
+ 19:             for val in data:
+ 20:                 self.push(val)
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
--------------------------------------------------------------------------------
[0.19999 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-4_136.py:13: TypeError: Binheap.__init__() missing 1 required positional argument: 'self'

   - [#  54] SDI binheap: 
--------------------------------------------------------------------------------
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
- 21:     def _balance(self):
- 22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
- 24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
- 29:             size = size // 2
- 30:     
+ 21:     @staticmethod
+ 22:     def _balance(self):
+ 23:         '''Helper function to balance heap.'''
+ 24:         size = len(self.container) - 1
+ 25:         while size // 2 > 0:
+ 26:             if self.container[size] > self.container[size // 2]:
+ 27:                 tmp = self.container[size // 2]
+ 28:                 self.container[size // 2] = self.container[size]
+ 29:                 self.container[size] = tmp
+ 30:             size = size // 2
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
--------------------------------------------------------------------------------
[0.21778 s] incompetent

TypeError: binheap:34: TypeError: Binheap._balance() missing 1 required positional argument: 'self'

   - [#  55] SDI binheap: 
--------------------------------------------------------------------------------
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
- 31:     def push(self, val):
- 32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
- 34:         self._balance()
- 35:     
+ 31:     @staticmethod
+ 32:     def push(self, val):
+ 33:         '''Put a new value into the heap.'''
+ 34:         self.container.append(val)
+ 35:         self._balance()
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
--------------------------------------------------------------------------------
[0.20044 s] incompetent

TypeError: binheap:19: TypeError: Binheap.push() missing 1 required positional argument: 'val'

   - [#  56] SDI binheap: 
--------------------------------------------------------------------------------
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
  34:         self._balance()
  35:     
- 36:     def pop(self):
- 37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
- 39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
- 41:         self._balance()
- 42:     
+ 36:     @staticmethod
+ 37:     def pop(self):
+ 38:         '''Remove the top value of the heap.'''
+ 39:         if not (self.container):
+ 40:             raise IndexError("Can't pop from and empty heap")
+ 41:         self.container.pop(1)
+ 42:         self._balance()
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
--------------------------------------------------------------------------------
[0.19667 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-4_136.py:30: TypeError: Binheap.pop() missing 1 required positional argument: 'self'

   - [#  57] SDI binheap: 
--------------------------------------------------------------------------------
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
- 43:     def display(self):
- 44:         '''Display the heap as a tree.'''
- 45:         cols = []
- 46:         col = 1
- 47:         to_show = ''
- 48:         l = self.container[1:]
- 49:         
- 50:         while len(self.container) > col:
- 51:             cols.append(col)
- 52:             col *= 2
- 53:         
- 54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
- 57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
- 61:         
- 62:         return to_show
+ 43:     @staticmethod
+ 44:     def display(self):
+ 45:         '''Display the heap as a tree.'''
+ 46:         cols = []
+ 47:         col = 1
+ 48:         to_show = ''
+ 49:         l = self.container[1:]
+ 50:         
+ 51:         while len(self.container) > col:
+ 52:             cols.append(col)
+ 53:             col *= 2
+ 54:         
+ 55:         for (i, v) in enumerate(cols):
+ 56:             buff = cols[(-1) - i] // 2
+ 57:             to_show += buff * ' '
+ 58:             for idx in range(v):
+ 59:                 if l:
+ 60:                     to_show += str(l.pop(0)) + ' '
+ 61:             to_show += '\n'
+ 62:         
+ 63:         return to_show
--------------------------------------------------------------------------------
[0.19724 s] incompetent

TypeError: /home/lucca/teste/python_experiments2/binheap/ts-3-5/test_3-5_0-4_136.py:34: TypeError: Binheap.display() missing 1 required positional argument: 'self'

   - [#  58] SDL binheap: 
--------------------------------------------------------------------------------
  12:     '''
  13:     
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
+ 16:         pass
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
--------------------------------------------------------------------------------
[0.19941 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_empty_heap

empty_heap = <binheap.Binheap object at 0x777388ed1780>

    def test_init_empty_heap(empty_heap):
>       assert len(empty_heap.container) == 1
E       AttributeError: 'Binheap' object has no attribute 'container'

ts-3-5/test_3-5_0-4_136.py:20: AttributeError
   - [#  59] SDL binheap: 
--------------------------------------------------------------------------------
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
- 19:                 self.push(val)
+ 19:                 pass
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
--------------------------------------------------------------------------------
[0.19732 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

filled_heap = <binheap.Binheap object at 0x777388ce7100>

    def test_init_filled_heap(filled_heap):
>       assert len(filled_heap.container) == 6
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:23: AssertionError
   - [#  60] SDL binheap: 
--------------------------------------------------------------------------------
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
+ 23:         pass
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
--------------------------------------------------------------------------------
[0.19723 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x7773889f7b50>

>   ???
E   UnboundLocalError: local variable 'size' referenced before assignment

binheap:24: UnboundLocalError
   - [#  61] SDL binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 pass
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.20082 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388cbdd50>

>   ???
E   NameError: name 'tmp' is not defined

binheap:28: NameError
   - [#  62] SDL binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 pass
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.19720 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388a640d0>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  63] SDL binheap: 
--------------------------------------------------------------------------------
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
+ 28:                 pass
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
--------------------------------------------------------------------------------
[0.21903 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388cbdd50>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  64] SDL binheap: 
--------------------------------------------------------------------------------
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 29:             pass
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[5.00683 s] timeout
   - [#  65] SDL binheap: 
--------------------------------------------------------------------------------
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
+ 33:         pass
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
--------------------------------------------------------------------------------
[0.20224 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

filled_heap = <binheap.Binheap object at 0x777388a43a60>

    def test_init_filled_heap(filled_heap):
>       assert len(filled_heap.container) == 6
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:23: AssertionError
   - [#  66] SDL binheap: 
--------------------------------------------------------------------------------
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
- 34:         self._balance()
+ 34:         pass
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
--------------------------------------------------------------------------------
[0.20936 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388983910>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  67] SDL binheap: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
+ 40:         pass
  41:         self._balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
--------------------------------------------------------------------------------
[0.21457 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388a43610>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  68] SDL binheap: 
--------------------------------------------------------------------------------
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
- 41:         self._balance()
+ 41:         pass
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
--------------------------------------------------------------------------------
[0.18624 s] survived
   - [#  69] SDL binheap: 
--------------------------------------------------------------------------------
  41:         self._balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
- 45:         cols = []
+ 45:         pass
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
--------------------------------------------------------------------------------
[0.21202 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388962f50>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388962f50>

>   ???
E   NameError: name 'cols' is not defined

binheap:51: NameError
   - [#  70] SDL binheap: 
--------------------------------------------------------------------------------
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
- 46:         col = 1
+ 46:         pass
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
--------------------------------------------------------------------------------
[0.21128 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889a8130>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x7773889a8130>

>   ???
E   UnboundLocalError: local variable 'col' referenced before assignment

binheap:50: UnboundLocalError
   - [#  71] SDL binheap: 
--------------------------------------------------------------------------------
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
- 47:         to_show = ''
+ 47:         pass
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
--------------------------------------------------------------------------------
[0.20787 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x7773889f71f0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x7773889f71f0>

>   ???
E   UnboundLocalError: local variable 'to_show' referenced before assignment

binheap:56: UnboundLocalError
   - [#  72] SDL binheap: 
--------------------------------------------------------------------------------
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
  47:         to_show = ''
- 48:         l = self.container[1:]
+ 48:         pass
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
--------------------------------------------------------------------------------
[0.21607 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x77738890eb60>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x77738890eb60>

>   ???
E   NameError: name 'l' is not defined

binheap:58: NameError
   - [#  73] SDL binheap: 
--------------------------------------------------------------------------------
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
- 51:             cols.append(col)
+ 51:             pass
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
--------------------------------------------------------------------------------
[0.21069 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388ed12d0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  74] SDL binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
+ 55:             pass
  56:             to_show += buff * ' '
  57:             for idx in range(v):
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
--------------------------------------------------------------------------------
[0.21108 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x77738891c790>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x77738891c790>

>   ???
E   NameError: name 'buff' is not defined

binheap:56: NameError
   - [#  75] SDL binheap: 
--------------------------------------------------------------------------------
  58:                 if l:
  59:                     to_show += str(l.pop(0)) + ' '
  60:             to_show += '\n'
  61:         
- 62:         return to_show
+ 62:         pass
--------------------------------------------------------------------------------
[0.21164 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x77738891cd90>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  76] SIR binheap: 
--------------------------------------------------------------------------------
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
  47:         to_show = ''
- 48:         l = self.container[1:]
+ 48:         l = self.container[:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
--------------------------------------------------------------------------------
[0.21199 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388942bc0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  77] SVD binheap: 
--------------------------------------------------------------------------------
  12:     '''
  13:     
  14:     def __init__(self, data=None):
  15:         '''Initialize bin heap.'''
- 16:         self.container = [None]
+ 16:         container = [None]
  17:         if data:
  18:             for val in data:
  19:                 self.push(val)
  20:     
--------------------------------------------------------------------------------
[0.00000 s] incompetent

ValueError: expression must have Store context but has Load instead

   - [#  78] SVD binheap: 
--------------------------------------------------------------------------------
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
- 19:                 self.push(val)
+ 19:                 push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
--------------------------------------------------------------------------------
[0.21024 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388963b20>, data = [5, 3, 8, 2, 7]

>   ???
E   NameError: name 'push' is not defined

binheap:19: NameError
   - [#  79] SVD binheap: 
--------------------------------------------------------------------------------
  19:                 self.push(val)
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
- 23:         size = len(self.container) - 1
+ 23:         size = len(container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
--------------------------------------------------------------------------------
[0.20090 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388943880>

>   ???
E   NameError: name 'container' is not defined

binheap:23: NameError
   - [#  80] SVD binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20466 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x7773889621a0>

>   ???
E   NameError: name 'container' is not defined

binheap:25: NameError
   - [#  81] SVD binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
+ 25:             if self.container[size] > container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
--------------------------------------------------------------------------------
[0.20146 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388961360>

>   ???
E   NameError: name 'container' is not defined

binheap:25: NameError
   - [#  82] SVD binheap: 
--------------------------------------------------------------------------------
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
+ 26:                 tmp = container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
--------------------------------------------------------------------------------
[0.20664 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388ca1960>

>   ???
E   NameError: name 'container' is not defined

binheap:26: NameError
   - [#  83] SVD binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 container[size // 2] = self.container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.20412 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388941b10>

>   ???
E   NameError: name 'container' is not defined

binheap:27: NameError
   - [#  84] SVD binheap: 
--------------------------------------------------------------------------------
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
+ 27:                 self.container[size // 2] = container[size]
  28:                 self.container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
--------------------------------------------------------------------------------
[0.21328 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388c05fc0>

>   ???
E   NameError: name 'container' is not defined

binheap:27: NameError
   - [#  85] SVD binheap: 
--------------------------------------------------------------------------------
  24:         while size // 2 > 0:
  25:             if self.container[size] > self.container[size // 2]:
  26:                 tmp = self.container[size // 2]
  27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
+ 28:                 container[size] = tmp
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
--------------------------------------------------------------------------------
[0.20249 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
binheap:34: in push
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x77738891df00>

>   ???
E   NameError: name 'container' is not defined

binheap:28: NameError
   - [#  86] SVD binheap: 
--------------------------------------------------------------------------------
  29:             size = size // 2
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
- 33:         self.container.append(val)
+ 33:         container.append(val)
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
--------------------------------------------------------------------------------
[0.20742 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388c43310>, val = 5

>   ???
E   NameError: name 'container' is not defined

binheap:33: NameError
   - [#  87] SVD binheap: 
--------------------------------------------------------------------------------
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
- 34:         self._balance()
+ 34:         _balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
--------------------------------------------------------------------------------
[0.19598 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

@pytest.fixture
    def filled_heap():
>       return Binheap([5, 3, 8, 2, 7])

ts-3-5/test_3-5_0-4_136.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
binheap:19: in __init__
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388962740>, val = 5

>   ???
E   NameError: name '_balance' is not defined

binheap:34: NameError
   - [#  88] SVD binheap: 
--------------------------------------------------------------------------------
  34:         self._balance()
  35:     
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
- 38:         if not (self.container):
+ 38:         if not container:
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
  41:         self._balance()
  42:     
--------------------------------------------------------------------------------
[0.19973 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388ce7a30>

    def test_pop(filled_heap):
>       filled_heap.pop()

ts-3-5/test_3-5_0-4_136.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388ce7a30>

>   ???
E   NameError: name 'container' is not defined

binheap:38: NameError
   - [#  89] SVD binheap: 
--------------------------------------------------------------------------------
  36:     def pop(self):
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
- 40:         self.container.pop(1)
+ 40:         container.pop(1)
  41:         self._balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
--------------------------------------------------------------------------------
[0.20130 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x7773889aaef0>

    def test_pop(filled_heap):
>       filled_heap.pop()

ts-3-5/test_3-5_0-4_136.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x7773889aaef0>

>   ???
E   NameError: name 'container' is not defined

binheap:40: NameError
   - [#  90] SVD binheap: 
--------------------------------------------------------------------------------
  37:         '''Remove the top value of the heap.'''
  38:         if not (self.container):
  39:             raise IndexError("Can't pop from and empty heap")
  40:         self.container.pop(1)
- 41:         self._balance()
+ 41:         _balance()
  42:     
  43:     def display(self):
  44:         '''Display the heap as a tree.'''
  45:         cols = []
--------------------------------------------------------------------------------
[0.19519 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388ce4a60>

    def test_pop(filled_heap):
>       filled_heap.pop()

ts-3-5/test_3-5_0-4_136.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388ce4a60>

>   ???
E   NameError: name '_balance' is not defined

binheap:41: NameError
   - [#  91] SVD binheap: 
--------------------------------------------------------------------------------
  44:         '''Display the heap as a tree.'''
  45:         cols = []
  46:         col = 1
  47:         to_show = ''
- 48:         l = self.container[1:]
+ 48:         l = container[1:]
  49:         
  50:         while len(self.container) > col:
  51:             cols.append(col)
  52:             col *= 2
--------------------------------------------------------------------------------
[0.22459 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388cbe9e0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388cbe9e0>

>   ???
E   NameError: name 'container' is not defined

binheap:48: NameError
   - [#  92] SVD binheap: 
--------------------------------------------------------------------------------
  46:         col = 1
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
- 50:         while len(self.container) > col:
+ 50:         while len(container) > col:
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
--------------------------------------------------------------------------------
[0.21331 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388ed0b20>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'

ts-3-5/test_3-5_0-4_136.py:34: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <binheap.Binheap object at 0x777388ed0b20>

>   ???
E   NameError: name 'container' is not defined

binheap:50: NameError
   - [#  93] ZIL binheap: 
--------------------------------------------------------------------------------
  15:         '''Initialize bin heap.'''
  16:         self.container = [None]
  17:         if data:
  18:             for val in data:
- 19:                 self.push(val)
+ 19:                 break
  20:     
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
--------------------------------------------------------------------------------
[0.21100 s] killed by ts-3-5/test_3-5_0-4_136.py::test_init_filled_heap

filled_heap = <binheap.Binheap object at 0x7773889603a0>

    def test_init_filled_heap(filled_heap):
>       assert len(filled_heap.container) == 6
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:23: AssertionError
   - [#  94] ZIL binheap: 
--------------------------------------------------------------------------------
  21:     def _balance(self):
  22:         '''Helper function to balance heap.'''
  23:         size = len(self.container) - 1
  24:         while size // 2 > 0:
- 25:             if self.container[size] > self.container[size // 2]:
- 26:                 tmp = self.container[size // 2]
- 27:                 self.container[size // 2] = self.container[size]
- 28:                 self.container[size] = tmp
- 29:             size = size // 2
+ 25:             break
+ 26:     
+ 27:     
+ 28:     
+ 29:     
  30:     
  31:     def push(self, val):
  32:         '''Put a new value into the heap.'''
  33:         self.container.append(val)
--------------------------------------------------------------------------------
[0.20670 s] killed by ts-3-5/test_3-5_0-4_136.py::test_pop

filled_heap = <binheap.Binheap object at 0x777388c04640>

    def test_pop(filled_heap):
        filled_heap.pop()
>       assert filled_heap.container == [None, 7, 5, 2, 3]
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:31: AssertionError
   - [#  95] ZIL binheap: 
--------------------------------------------------------------------------------
  47:         to_show = ''
  48:         l = self.container[1:]
  49:         
  50:         while len(self.container) > col:
- 51:             cols.append(col)
- 52:             col *= 2
+ 51:             break
+ 52:         
  53:         
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
--------------------------------------------------------------------------------
[0.19946 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388961bd0>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  96] ZIL binheap: 
--------------------------------------------------------------------------------
  51:             cols.append(col)
  52:             col *= 2
  53:         
  54:         for (i, v) in enumerate(cols):
- 55:             buff = cols[(-1) - i] // 2
- 56:             to_show += buff * ' '
- 57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
- 60:             to_show += '\n'
+ 55:             break
+ 56:         
+ 57:         
+ 58:         
+ 59:         
+ 60:         
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.19994 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388dddb70>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
   - [#  97] ZIL binheap: 
--------------------------------------------------------------------------------
  54:         for (i, v) in enumerate(cols):
  55:             buff = cols[(-1) - i] // 2
  56:             to_show += buff * ' '
  57:             for idx in range(v):
- 58:                 if l:
- 59:                     to_show += str(l.pop(0)) + ' '
+ 58:                 break
+ 59:             
  60:             to_show += '\n'
  61:         
  62:         return to_show
--------------------------------------------------------------------------------
[0.20203 s] killed by ts-3-5/test_3-5_0-4_136.py::test_display

filled_heap = <binheap.Binheap object at 0x777388ca2050>

    def test_display(filled_heap):
>       assert filled_heap.display() == '  8 \n 7 5 \n2 3 \n'
E       AssertionError

ts-3-5/test_3-5_0-4_136.py:34: AssertionError
[*] Mutation score [42.34476 s]: 93.1%
   - all: 97
   - killed: 63 (64.9%)
   - survived: 5 (5.2%)
   - incompetent: 25 (25.8%)
   - timeout: 4 (4.1%)
