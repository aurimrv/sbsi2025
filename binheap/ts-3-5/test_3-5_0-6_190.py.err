import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from binheap import Binheap

@pytest.fixture
def empty_heap():
    return Binheap()

@pytest.fixture
def initialized_heap():
    return Binheap([5, 3, 8, 1, 9, 4, 6])

def test_init_empty_heap(empty_heap):
    assert empty_heap.container == [None]

def test_init_initialized_heap(initialized_heap):
    assert initialized_heap.container == [None, 9, 8, 6, 1, 3, 4, 5]

def test_balance(initialized_heap):
    initialized_heap._balance()
    assert initialized_heap.container == [None, 9, 8, 6, 1, 3, 4, 5]

def test_push_empty_heap(empty_heap):
    empty_heap.push(10)
    assert empty_heap.container == [None, 10]

def test_push_initialized_heap(initialized_heap):
    initialized_heap.push(7)
    assert initialized_heap.container == [None, 9, 8, 7, 1, 3, 4, 5, 6]

def test_pop_empty_heap(empty_heap):
    with pytest.raises(IndexError):
        empty_heap.pop()

def test_pop_initialized_heap(initialized_heap):
    initialized_heap.pop()
    assert initialized_heap.container == [None, 8, 6, 4, 1, 3, 5]

def test_display_empty_heap(empty_heap):
    assert empty_heap.display() == ''

def test_display_initialized_heap(initialized_heap):
    assert initialized_heap.display() == '    9 \n  8 6 \n 1 3 4 5 \n'